// (C) 2021 GoodData Corporation
import uniqBy from "lodash/fp/uniqBy";
import flatten from "lodash/flatten";
/**
 * @internal
 * Provides the subset of attributes which consist from all attributes before given attribute and attribute itself.
 * @param fromAttribute - attribute to which we want to get relevant intersection's attributes
 * @param attributes - all attributes from the same dimension as fromAttribute
 */
export function getIntersectionAttributes(fromAttribute, attributes) {
    var indexOfFromAttribute = attributes.findIndex(function (attribute) {
        // to handle duplicated attributes in the same dimension
        return attribute.attributeHeader.localIdentifier === fromAttribute.attributeHeader.localIdentifier;
    });
    return attributes.slice(0, indexOfFromAttribute + 1);
}
function getAvailableDrillAttributes(dv) {
    return flatten(dv
        .meta()
        .dimensions()
        .map(function (_dimension, index) {
        return dv
            .meta()
            .attributeDescriptorsForDim(index)
            .map(function (attribute, _index, attributes) { return ({
            attribute: attribute,
            intersectionAttributes: getIntersectionAttributes(attribute, attributes),
        }); });
    }));
}
export function getAvailableDrillTargets(dv) {
    var attributes = uniqBy(function (attributeDescriptor) { return attributeDescriptor.attributeHeader.formOf.identifier; }, dv.meta().attributeDescriptors());
    return {
        measures: dv
            .meta()
            .measureDescriptors()
            .map(function (measure) { return ({
            measure: measure,
            attributes: attributes,
        }); }),
        attributes: getAvailableDrillAttributes(dv),
    };
}
//# sourceMappingURL=availableDrillTargets.js.map
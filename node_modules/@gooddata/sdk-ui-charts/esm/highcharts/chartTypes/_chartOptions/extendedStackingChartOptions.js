import { __assign, __spreadArrays } from "tslib";
/**
 * Transform
 *      viewByParentAttribute: [P1, P1, P2, P2, P3],
 *      viewByAttribute: [C1, C2, C1, C2, C2]
 * to
 *      [{
 *          name: P1,
 *          categories: [C1, C2]
 *       }, {
 *          name: P2,
 *          categories: [C1, C2]
 *       }, {
 *          name: P3,
 *          categories: [C2]
 *       }]
 */
export function getCategoriesForTwoAttributes(viewByAttribute, viewByParentAttribute) {
    var keys = [];
    var children = viewByAttribute.items;
    var parent = viewByParentAttribute.items;
    var combinedResult = parent.reduce(function (result, parentAttr, index) {
        var _a;
        var _b, _c, _d, _e, _f, _g, _h;
        var uri = (_c = (_b = parentAttr === null || parentAttr === void 0 ? void 0 : parentAttr.attributeHeaderItem) === null || _b === void 0 ? void 0 : _b.uri) !== null && _c !== void 0 ? _c : "";
        var name = (_e = (_d = parentAttr === null || parentAttr === void 0 ? void 0 : parentAttr.attributeHeaderItem) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : "";
        var value = (_h = (_g = (_f = children[index]) === null || _f === void 0 ? void 0 : _f.attributeHeaderItem) === null || _g === void 0 ? void 0 : _g.name) !== null && _h !== void 0 ? _h : "";
        var existingEntry = result[uri];
        var childCategories = existingEntry && existingEntry.categories ? existingEntry.categories : [];
        if (!childCategories.length) {
            keys.push(uri);
        }
        return __assign(__assign({}, result), (_a = {}, _a[uri] = {
            name: name,
            categories: __spreadArrays(childCategories, [value]),
        }, _a));
    }, {});
    return keys.map(function (key) {
        var _a = combinedResult[key], name = _a.name, categories = _a.categories;
        return {
            name: name,
            categories: categories,
        };
    });
}
//# sourceMappingURL=extendedStackingChartOptions.js.map
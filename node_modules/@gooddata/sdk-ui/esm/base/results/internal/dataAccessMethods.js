// (C) 2019-2020 GoodData Corporation
import { DataAccessImpl } from "./dataAccessImpl";
import { DefaultDataAccessConfig } from "../dataAccessConfig";
import { measureLocalId } from "@gooddata/sdk-model";
var FilteredIterator = /** @class */ (function () {
    function FilteredIterator(indexes, itemProvider) {
        var _this = this;
        this.indexes = indexes;
        this.itemProvider = itemProvider;
        this.idx = 0;
        this.next = function () {
            if (_this.idx >= _this.indexes.length) {
                return {
                    done: true,
                    value: undefined,
                };
            }
            var value = _this.itemProvider(_this.indexes[_this.idx]);
            _this.idx += 1;
            return {
                done: false,
                value: value,
            };
        };
    }
    return FilteredIterator;
}());
var DataSeriesCollection = /** @class */ (function () {
    function DataSeriesCollection(dataAccess) {
        var _this = this;
        this.dataAccess = dataAccess;
        this.count = 0;
        this.fromMeasures = [];
        this.fromMeasuresDef = [];
        this.scopingAttributes = [];
        this.scopingAttributesDef = [];
        this[Symbol.iterator] = function () {
            return _this.dataAccess.getDataSeriesIterator();
        };
        this.allForMeasure = function (localIdOrMeasure) {
            var _a;
            if (!_this.count) {
                return [];
            }
            var localId = typeof localIdOrMeasure === "string" ? localIdOrMeasure : measureLocalId(localIdOrMeasure);
            var indexes = _this.dataAccess.findDataSeriesIndexes(localId);
            if (!indexes.length) {
                return [];
            }
            return _a = {},
                _a[Symbol.iterator] = function () {
                    return new FilteredIterator(indexes, _this.dataAccess.getDataSeries);
                },
                _a;
        };
        this.firstForMeasure = function (localIdOrMeasure) {
            if (!_this.count) {
                throw new Error("there are no data series");
            }
            var localId = typeof localIdOrMeasure === "string" ? localIdOrMeasure : measureLocalId(localIdOrMeasure);
            var indexes = _this.dataAccess.findDataSeriesIndexes(localId);
            if (!indexes.length) {
                throw new Error("there are no data series for measure with local id: " + localId);
            }
            return _this.dataAccess.getDataSeries(indexes[0]);
        };
        this.toArray = function () {
            return Array.from(_this);
        };
        var seriesDigest = this.dataAccess.getDataAccessPointers().series;
        if (!seriesDigest) {
            return;
        }
        this.count = seriesDigest.count;
        this.fromMeasures = seriesDigest.fromMeasures;
        this.fromMeasuresDef = seriesDigest.fromMeasuresDef;
        this.scopingAttributes = seriesDigest.scopingAttributes;
        this.scopingAttributesDef = seriesDigest.scopingAttributesDef;
    }
    return DataSeriesCollection;
}());
var DataSliceCollection = /** @class */ (function () {
    function DataSliceCollection(dataAccess) {
        var _this = this;
        this.dataAccess = dataAccess;
        this.count = 0;
        this.descriptors = [];
        this[Symbol.iterator] = function () {
            return _this.dataAccess.getDataSlicesIterator();
        };
        this.toArray = function () {
            return Array.from(_this);
        };
        var slicesDigest = this.dataAccess.getDataAccessPointers().slices;
        if (!slicesDigest) {
            return;
        }
        this.count = slicesDigest.count;
        this.descriptors = slicesDigest.descriptors;
    }
    return DataSliceCollection;
}());
var DataAccessMethods = /** @class */ (function () {
    function DataAccessMethods(dataView, config) {
        this.dataAccess = new DataAccessImpl(dataView, config);
        this.seriesCollection = new DataSeriesCollection(this.dataAccess);
        this.slicesCollection = new DataSliceCollection(this.dataAccess);
    }
    DataAccessMethods.prototype.series = function () {
        return this.seriesCollection;
    };
    DataAccessMethods.prototype.slices = function () {
        return this.slicesCollection;
    };
    return DataAccessMethods;
}());
/**
 * @internal
 */
export function newDataAccessMethods(dataView, config) {
    if (config === void 0) { config = DefaultDataAccessConfig; }
    return new DataAccessMethods(dataView, config);
}
//# sourceMappingURL=dataAccessMethods.js.map
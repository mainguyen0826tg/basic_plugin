import { __extends } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { Component, createRef } from "react";
import cx from "classnames";
import { stringUtils } from "@gooddata/util";
import { Bubble, BubbleHoverTrigger } from "../Bubble";
var BUBBLE_OFFSET_X = 16;
/**
 * @internal
 */
var SingleSelectListItem = /** @class */ (function (_super) {
    __extends(SingleSelectListItem, _super);
    function SingleSelectListItem(props) {
        var _this = _super.call(this, props) || this;
        _this.titleRef = createRef();
        _this.getClassNames = function () {
            var _a = _this.props, title = _a.title, isSelected = _a.isSelected, className = _a.className;
            var generatedSeleniumClass = "s-" + stringUtils.simplifyText(title);
            return cx("gd-list-item", className, generatedSeleniumClass, { "is-selected": isSelected });
        };
        _this.renderTitle = function () {
            var title = _this.props.title;
            var titleElement = React.createElement("span", { ref: _this.titleRef }, title);
            if (_this.state.isOverflowed) {
                return (React.createElement(BubbleHoverTrigger, null,
                    titleElement,
                    React.createElement(Bubble, { className: "bubble-primary", alignPoints: [{ align: "cr cl" }, { align: "cl cr" }], arrowOffsets: {
                            "cr cl": [BUBBLE_OFFSET_X, 0],
                            "cl cr": [-BUBBLE_OFFSET_X, 0],
                        } }, title)));
            }
            return titleElement;
        };
        _this.renderIcon = function (icon) {
            if (icon) {
                var iconClasses = cx("gd-list-icon", icon);
                return React.createElement("span", { className: iconClasses });
            }
            return null;
        };
        _this.renderSeparatorItem = function () {
            return React.createElement("div", { className: "gd-list-item gd-list-item-separator s-list-separator" });
        };
        _this.renderHeaderItem = function () {
            return React.createElement("div", { className: "gd-list-item gd-list-item-header s-list-header" }, _this.props.title);
        };
        _this.renderInfo = function () {
            if (!_this.props.info) {
                return null;
            }
            return (React.createElement("div", { className: "gd-list-item-bubble s-list-item-info" },
                React.createElement(BubbleHoverTrigger, { tagName: "div", showDelay: 200, hideDelay: 0 },
                    React.createElement("div", { className: "inlineBubbleHelp" }),
                    React.createElement(Bubble, { className: "bubble-primary", alignPoints: [{ align: "cr cl" }], arrowOffsets: { "cr cl": [15, 0] } }, _this.props.info))));
        };
        _this.state = { isOverflowed: false };
        return _this;
    }
    SingleSelectListItem.prototype.componentDidMount = function () {
        this.checkOverflow();
    };
    SingleSelectListItem.prototype.componentDidUpdate = function () {
        this.checkOverflow();
    };
    SingleSelectListItem.prototype.checkOverflow = function () {
        if (this.titleRef.current) {
            // Checks if ellipsis has been applied on title span
            var isOverflowed = this.titleRef.current.offsetWidth < this.titleRef.current.scrollWidth;
            if (isOverflowed !== this.state.isOverflowed) {
                // eslint-disable-next-line react/no-did-mount-set-state
                this.setState({
                    isOverflowed: isOverflowed,
                });
            }
        }
    };
    SingleSelectListItem.prototype.render = function () {
        var _a = this.props, icon = _a.icon, onClick = _a.onClick, onMouseOver = _a.onMouseOver, onMouseOut = _a.onMouseOut, type = _a.type;
        if (type === "separator") {
            return this.renderSeparatorItem();
        }
        if (type === "header") {
            return this.renderHeaderItem();
        }
        return (React.createElement("div", { className: this.getClassNames(), onClick: onClick, onMouseOver: onMouseOver, onMouseOut: onMouseOut },
            this.renderIcon(icon),
            this.renderTitle(),
            this.renderInfo()));
    };
    return SingleSelectListItem;
}(Component));
export { SingleSelectListItem };
//# sourceMappingURL=ListItem.js.map
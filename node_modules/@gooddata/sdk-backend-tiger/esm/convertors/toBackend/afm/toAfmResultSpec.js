import { __assign } from "tslib";
import { convertMeasure } from "./MeasureConverter";
import { convertAttribute } from "./AttributeConverter";
import { convertDimensions } from "./DimensionsConverter";
import { convertAfmFilters } from "./AfmFiltersConverter";
import { convertTotals } from "./TotalsConverter";
function convertAFM(def) {
    var attributes = def.attributes.map(convertAttribute);
    var attrProp = { attributes: attributes };
    var measures = def.measures.map(convertMeasure);
    var measuresProp = { measures: measures };
    var _a = convertAfmFilters(def.attributes, def.measures, def.filters || []), filters = _a.filters, auxMeasures = _a.auxMeasures;
    var filtersProp = { filters: filters };
    var auxMeasuresProp = { auxMeasures: auxMeasures };
    return __assign(__assign(__assign(__assign({}, measuresProp), attrProp), filtersProp), auxMeasuresProp);
}
function convertResultSpec(def) {
    return { dimensions: convertDimensions(def), grandTotals: convertTotals(def) };
}
/**
 * Converts execution definition to AFM Execution
 *
 * @param def - execution definition
 * @returns AFM Execution
 */
export function toAfmExecution(def) {
    return {
        resultSpec: convertResultSpec(def),
        execution: __assign({}, convertAFM(def)),
        settings: __assign({}, def.executionConfig),
    };
}
//# sourceMappingURL=toAfmResultSpec.js.map
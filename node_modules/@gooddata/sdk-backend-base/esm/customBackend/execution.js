// (C) 2019-2021 GoodData Corporation
import { __extends, __spreadArrays } from "tslib";
import { AbstractExecutionFactory } from "../toolkit/execution";
import { defFingerprint, defWithDimensions, defWithSorting, defWithDateFormat, defWithExecConfig, } from "@gooddata/sdk-model";
import { NotSupported, NotImplemented, } from "@gooddata/sdk-backend-spi";
import isEqual from "lodash/isEqual";
/**
 * @internal
 */
var CustomExecutionFactory = /** @class */ (function (_super) {
    __extends(CustomExecutionFactory, _super);
    function CustomExecutionFactory(workspace, config, state) {
        var _this = _super.call(this, workspace) || this;
        _this.config = config;
        _this.state = state;
        _this.forDefinition = function (def) {
            return new CustomPreparedExecution(def, _this, _this.config, _this.state);
        };
        return _this;
    }
    return CustomExecutionFactory;
}(AbstractExecutionFactory));
export { CustomExecutionFactory };
/**
 * @internal
 */
var CustomPreparedExecution = /** @class */ (function () {
    function CustomPreparedExecution(definition, executionFactory, config, state) {
        var _this = this;
        this.definition = definition;
        this.executionFactory = executionFactory;
        this.config = config;
        this.state = state;
        this.execute = function () {
            var authApiCall = _this.state.authApiCall;
            return authApiCall(function (client) {
                var context = {
                    config: _this.config,
                    execution: _this,
                    resultFactory: _this.resultFactory,
                    state: _this.state,
                    client: client,
                };
                return _this.config.resultProvider(context);
            });
        };
        this.explain = function () {
            // eslint-disable-next-line no-console
            console.warn("Backend does not support explain mode");
            return new Promise(function (resolve) { return resolve(); });
        };
        this.withDimensions = function () {
            var dimsOrGen = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                dimsOrGen[_i] = arguments[_i];
            }
            return _this.executionFactory.forDefinition(defWithDimensions.apply(void 0, __spreadArrays([_this.definition], dimsOrGen)));
        };
        this.withSorting = function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            return _this.executionFactory.forDefinition(defWithSorting(_this.definition, items));
        };
        this.withDateFormat = function (dateFormat) {
            return _this.executionFactory.forDefinition(defWithDateFormat(_this.definition, dateFormat));
        };
        this.withExecConfig = function (config) {
            return _this.executionFactory.forDefinition(defWithExecConfig(_this.definition, config));
        };
        this.equals = function (other) {
            return isEqual(_this.definition, other.definition);
        };
        this.fingerprint = function () {
            if (!_this._fingerprint) {
                _this._fingerprint = defFingerprint(_this.definition);
            }
            return _this._fingerprint;
        };
        this.resultFactory = function (dimensions, fingerprint) {
            return new CustomExecutionResult(dimensions, fingerprint, _this, _this.config, _this.state);
        };
    }
    return CustomPreparedExecution;
}());
/**
 * @internal
 */
var CustomExecutionResult = /** @class */ (function () {
    function CustomExecutionResult(dimensions, _fingerprint, execution, config, state) {
        var _this = this;
        this.dimensions = dimensions;
        this._fingerprint = _fingerprint;
        this.execution = execution;
        this.config = config;
        this.state = state;
        this.readAll = function () {
            return _this.state.authApiCall(function (client) {
                if (!_this.config.dataProvider) {
                    throw new NotImplemented("custom backend does not specify dataProvider");
                }
                var context = {
                    config: _this.config,
                    state: _this.state,
                    result: _this,
                    client: client,
                };
                return _this.config.dataProvider(context);
            });
        };
        this.readWindow = function (offset, size) {
            return _this.state.authApiCall(function (client) {
                if (!_this.config.dataProvider) {
                    throw new NotImplemented("custom backend does not specify dataProvider");
                }
                var context = {
                    config: _this.config,
                    state: _this.state,
                    result: _this,
                    window: {
                        offset: offset,
                        size: size,
                    },
                    client: client,
                };
                return _this.config.dataProvider(context);
            });
        };
        this.transform = function () {
            return _this.execution;
        };
        this.equals = function (other) {
            return _this._fingerprint === other.fingerprint();
        };
        this.fingerprint = function () {
            return _this._fingerprint;
        };
        this.export = function (_options) {
            throw new NotSupported("exports from custom backend are not supported");
        };
        this.definition = execution.definition;
    }
    return CustomExecutionResult;
}());
//# sourceMappingURL=execution.js.map
import { __spreadArrays } from "tslib";
// (C) 2020-2021 GoodData Corporation
import isObject from "lodash/isObject";
import { transparentize } from "polished";
import { getCssProperty } from "./cssProperty";
import { generateDerivedColors } from "./derivedColors";
// keep it in sync with SCSS:$gd-color-text-light
var DEFAULT_SHADOW_COLOR = "rgba(20, 56, 93, 0.2)";
var DEFAULT_WIDGET_SHADOW = "1px 2px 8px var(--gd-shadow-color, " + DEFAULT_SHADOW_COLOR + ")";
var BLACK_COLOR = "#000";
/**
 *
 * @param {string} src - Font src
 * @param {string} number - Font weight
 */
function createfontFace(src, weight) {
    var styleTag = document.getElementById("gdc-theme-custom-font") || document.createElement("style");
    styleTag.id = "gdc-theme-custom-font";
    styleTag.appendChild(document.createTextNode("\n            @font-face {\n                font-family: GDCustomFont;\n                src: " + src + ";\n                font-weight: " + weight + ";\n            }\n        "));
    document.head.appendChild(styleTag);
    return undefined; // undefined values are skipped while generating CSS properties
}
export function handleUnits(value) {
    // just number without unit
    if (value !== undefined && value !== "NaN" && parseFloat(value).toString() === value) {
        return value + "px";
    }
    return value;
}
var customParserFunctions = [
    { key: "--gd-typography-font", fn: function (value) { return createfontFace(value, 400); } },
    { key: "--gd-typography-fontBold", fn: function (value) { return createfontFace(value, 700); } },
    { key: "--gd-button-borderRadius", fn: handleUnits },
    { key: "--gd-button-textCapitalization", fn: function (value) { return (value ? "capitalize" : undefined); } },
    { key: "--gd-button-dropShadow", fn: function (value) { return (value ? undefined : "none"); } },
    { key: "--gd-dashboards-content-widget-borderWidth", fn: handleUnits },
    { key: "--gd-dashboards-content-widget-borderRadius", fn: handleUnits },
    {
        key: "--gd-dashboards-content-widget-dropShadow",
        fn: function (value) { return (value ? DEFAULT_WIDGET_SHADOW : "none"); },
    },
    { key: "--gd-modal-borderRadius", fn: handleUnits },
    { key: "--gd-modal-borderWidth", fn: handleUnits },
    { key: "--gd-modal-dropShadow", fn: function (value) { return (value ? undefined : "none"); } },
    { key: "--gd-dashboards-content-kpiWidget-borderWidth", fn: handleUnits },
    { key: "--gd-dashboards-content-kpiWidget-borderRadius", fn: handleUnits },
    {
        key: "--gd-dashboards-content-kpiWidget-dropShadow",
        fn: function (value) { return (value ? DEFAULT_WIDGET_SHADOW : "none"); },
    },
    { key: "--gd-palette-complementary", fn: function () { return undefined; } },
];
/**
 * @internal
 */
export function parseThemeToCssProperties(object, parserFunctions, currentKey) {
    if (parserFunctions === void 0) { parserFunctions = []; }
    if (currentKey === void 0) { currentKey = "--gd"; }
    var cssProperties = [];
    var _loop_1 = function (key, value) {
        var newKey = currentKey + "-" + key;
        var parse = parserFunctions.find(function (exception) { return exception.key === newKey; });
        var newValue = parse ? parse.fn(value) : value;
        if (newValue !== undefined) {
            if (isObject(newValue)) {
                cssProperties.push.apply(cssProperties, parseThemeToCssProperties(newValue, parserFunctions, newKey));
            }
            else {
                var parse_1 = parserFunctions.find(function (exception) { return exception.key === newKey; });
                var newValue_1 = parse_1 ? parse_1.fn(value) : value;
                if (newValue_1 !== undefined) {
                    cssProperties.push({ key: newKey, value: newValue_1 });
                }
            }
        }
    };
    for (var _i = 0, _a = Object.entries(object); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        _loop_1(key, value);
    }
    return cssProperties;
}
var generateComplementaryPalette = function (palette) {
    if (!(palette === null || palette === void 0 ? void 0 : palette.complementary)) {
        return [];
    }
    return Object.keys(palette.complementary).map(function (key, index) {
        return getCssProperty("palette-complementary-" + index, palette.complementary[key]);
    });
};
export var generateShadowColor = function (palette, isDarkTheme) {
    var _a;
    if (!(palette === null || palette === void 0 ? void 0 : palette.complementary)) {
        return [];
    }
    return [
        getCssProperty("shadow-color", isDarkTheme
            ? transparentize(0.5, BLACK_COLOR)
            : transparentize(0.8, (_a = palette.complementary) === null || _a === void 0 ? void 0 : _a.c8) || DEFAULT_SHADOW_COLOR),
    ];
};
export var clearCssProperties = function () {
    var themePropertiesElement = document.getElementById("gdc-theme-properties");
    themePropertiesElement && document.head.removeChild(themePropertiesElement);
    var customFontElement = document.getElementById("gdc-theme-custom-font");
    customFontElement && document.head.removeChild(customFontElement);
};
/**
 * Converts properties from theme object into CSS variables and injects them into <body>
 *
 * The CSS variable name is defined as a path through the theme object to the given value, e.g.:
 * {
 *      palette: {
 *          primary: {
 *              base: #14b2e2;
 *          }
 *      }
 * }
 * is converted to "palette-primary-base" variable with value #14b2e2
 *
 * @internal
 */
export function setCssProperties(theme, isDarkTheme) {
    var cssProperties = __spreadArrays(parseThemeToCssProperties(theme, customParserFunctions), generateDerivedColors(theme.palette, isDarkTheme), generateComplementaryPalette(theme.palette), generateShadowColor(theme.palette, isDarkTheme));
    var styleTag = document.createElement("style");
    styleTag.id = "gdc-theme-properties";
    var cssPropertiesRules = cssProperties.map(function (_a) {
        var key = _a.key, value = _a.value;
        return key + ": " + value + ";";
    }).join("");
    styleTag.appendChild(document.createTextNode("\n            :root {\n                " + cssPropertiesRules + "\n                color-scheme: " + (isDarkTheme ? "dark" : "light") + ";\n            }\n        "));
    document.head.appendChild(styleTag);
}
//# sourceMappingURL=cssProperties.js.map
import { __assign, __extends } from "tslib";
// (C) 2019-2020 GoodData Corporation
import * as React from "react";
import { injectIntl } from "react-intl";
import { normalizeTime, ConfirmDialogBase, Overlay } from "@gooddata/sdk-ui-kit";
import memoize from "lodash/memoize";
import { DEFAULT_REPEAT_PERIOD, REPEAT_EXECUTE_ON, REPEAT_FREQUENCIES, REPEAT_TYPES, DASHBOARD_TITLE_MAX_LENGTH, } from "../constants";
import { isScheduleEmailExistingRecipient, isScheduleEmailExternalRecipient, } from "../interfaces";
import { generateRepeatString, setDailyRepeat, setMonthlyRepeat, setWeeklyRepeat } from "../utils/repeat";
import { getScheduledEmailSummaryString } from "../utils/scheduledMailSummary";
import { getScheduledEmailRecipientEmail } from "../utils/scheduledMailRecipients";
import { getUserTimezone } from "../utils/timezone";
import { getDate, getMonth, getYear, convertDateToDisplayDateString, convertDateToPlatformDateString, } from "../utils/datetime";
import { isEmail } from "../utils/validate";
import { Textarea } from "./Textarea";
import { RepeatSelect } from "./RepeatSelect/RepeatSelect";
import { Input } from "./Input";
import { DateTime } from "./DateTime";
import { Attachment } from "./Attachment";
import { RecipientsSelect } from "./RecipientsSelect/RecipientsSelect";
import { InternalIntlWrapper } from "../../../utils/internalIntlProvider";
var MAX_MESSAGE_LENGTH = 200;
var MAX_SUBJECT_LENGTH = 200;
var MAX_DASHBOARD_TITLE_LENGTH = DASHBOARD_TITLE_MAX_LENGTH;
var MAX_HYPHEN_LENGTH = 3;
var userToRecipient = memoize(function (user) { return ({
    user: user,
}); });
var ScheduledMailDialogRendererUI = /** @class */ (function (_super) {
    __extends(ScheduledMailDialogRendererUI, _super);
    function ScheduledMailDialogRendererUI(props) {
        var _a;
        var _this = _super.call(this, props) || this;
        _this.onAlign = function (alignment) {
            if (alignment.top < 0) {
                _this.setState({ alignment: "tc tc" });
            }
        };
        _this.renderAttachment = function () {
            var intl = _this.props.intl;
            var defaultEmailSubject = _this.getDefaultSubject();
            var fileName = defaultEmailSubject + ".pdf";
            return (React.createElement(Attachment, { className: "s-gd-schedule-email-dialog-attachment", label: intl.formatMessage({ id: "dialogs.schedule.email.attachment.label" }), fileName: fileName }));
        };
        _this.renderDateTime = function () {
            var _a = _this.props, dateFormat = _a.dateFormat, intl = _a.intl, locale = _a.locale;
            var _b = _this.repeatData, date = _b.date, time = _b.time;
            var sendDate = new Date(date.year, date.month - 1, date.day, time.hour, time.minute);
            return (React.createElement(DateTime, { date: sendDate, dateFormat: dateFormat, label: intl.formatMessage({ id: "dialogs.schedule.email.time.label" }), locale: locale, timezone: _this.userTimezone.title, onDateChange: _this.onDateChange, onTimeChange: _this.onTimeChange }));
        };
        _this.renderMessage = function () {
            var intl = _this.props.intl;
            var defaultEmailBody = _this.getDefaultEmailBody();
            return (React.createElement(Textarea, { className: "s-gd-schedule-email-dialog-message", label: intl.formatMessage({ id: "dialogs.schedule.email.message.label" }), maxlength: MAX_MESSAGE_LENGTH, placeholder: defaultEmailBody, rows: 4, onChange: _this.onMessageChange }));
        };
        _this.renderRecipients = function () {
            var selectedRecipients = _this.state.selectedRecipients;
            var _a = _this.props, backend = _a.backend, workspace = _a.workspace, canListUsersInProject = _a.canListUsersInProject, enableKPIDashboardScheduleRecipients = _a.enableKPIDashboardScheduleRecipients, currentUser = _a.currentUser;
            return (React.createElement(RecipientsSelect, { currentUser: userToRecipient(currentUser), canListUsersInProject: canListUsersInProject, enableKPIDashboardScheduleRecipients: enableKPIDashboardScheduleRecipients, value: selectedRecipients, onChange: _this.onRecipientsChange, onError: _this.props.onError, backend: backend, workspace: workspace }));
        };
        _this.renderRepeats = function () {
            var intl = _this.props.intl;
            var startDate = _this.state.startDate;
            return (React.createElement(RepeatSelect, { label: intl.formatMessage({ id: "dialogs.schedule.email.repeats.label" }), repeatExecuteOn: REPEAT_EXECUTE_ON.DAY_OF_MONTH, repeatFrequency: REPEAT_FREQUENCIES.DAY, repeatPeriod: DEFAULT_REPEAT_PERIOD, repeatType: REPEAT_TYPES.DAILY, startDate: startDate, onChange: _this.onRepeatsChange }));
        };
        _this.renderSubject = function () {
            var intl = _this.props.intl;
            var defaultEmailSubject = _this.getDefaultSubject();
            return (React.createElement(Input, { className: "s-gd-schedule-email-dialog-subject", label: intl.formatMessage({ id: "dialogs.schedule.email.subject.label" }), maxlength: MAX_SUBJECT_LENGTH, placeholder: defaultEmailSubject, onChange: _this.onSubjectChange }));
        };
        // Listeners
        _this.onScheduleDialogSubmit = function () {
            var onSubmit = _this.props.onSubmit;
            if (onSubmit) {
                onSubmit(_this.getScheduleEmailData());
            }
        };
        _this.onDateChange = function (selectedDateObject) {
            _this.repeatData.date = {
                day: getDate(selectedDateObject),
                month: getMonth(selectedDateObject),
                year: getYear(selectedDateObject),
            };
            _this.setState({ startDate: selectedDateObject }, function () {
                _this.updateStartDateForRepeats(selectedDateObject);
            });
        };
        _this.onTimeChange = function (time) {
            _this.repeatData.time = time;
            _this.setState({
                startTime: time,
            });
        };
        _this.onRecipientsChange = function (selectedRecipients) {
            var isValidScheduleEmailData = selectedRecipients
                .map(getScheduledEmailRecipientEmail)
                .every(isEmail);
            _this.setState({
                selectedRecipients: selectedRecipients,
                isValidScheduleEmailData: isValidScheduleEmailData,
            });
        };
        _this.onMessageChange = function (value) {
            _this.emailBody = value;
        };
        _this.onRepeatsChange = function (data) {
            var repeatExecuteOn = data.repeatExecuteOn, repeatFrequency = data.repeatFrequency, repeatPeriod = data.repeatPeriod, repeatType = data.repeatType;
            var startDate = _this.state.startDate;
            _this.repeatData.repeatPeriod = repeatPeriod;
            _this.repeatData.repeatType = repeatType;
            if (repeatType === REPEAT_TYPES.CUSTOM) {
                if (repeatFrequency === REPEAT_FREQUENCIES.MONTH) {
                    setMonthlyRepeat(_this.repeatData, repeatExecuteOn, startDate);
                }
                else if (repeatFrequency === REPEAT_FREQUENCIES.WEEK) {
                    setWeeklyRepeat(_this.repeatData, startDate);
                }
                else {
                    setDailyRepeat(_this.repeatData);
                }
            }
            else if (repeatType === REPEAT_TYPES.MONTHLY) {
                setMonthlyRepeat(_this.repeatData, REPEAT_EXECUTE_ON.DAY_OF_WEEK, startDate);
            }
            else if (repeatType === REPEAT_TYPES.WEEKLY) {
                setWeeklyRepeat(_this.repeatData, startDate);
            }
            else {
                setDailyRepeat(_this.repeatData);
            }
        };
        _this.onSubjectChange = function (value) {
            _this.emailSubject = value;
        };
        // Internal utils
        _this.getDefaultSubject = function () {
            var _a = _this.props, dashboardTitle = _a.dashboardTitle, dateFormat = _a.dateFormat;
            var startDate = _this.state.startDate;
            var displayDateString = convertDateToDisplayDateString(startDate, dateFormat);
            var dashboardTitleMaxLength = _this.getDashboardTitleMaxLength(displayDateString);
            var isDashboardTitleTooLong = dashboardTitle.length > dashboardTitleMaxLength;
            var truncatedDashboardTitle = isDashboardTitleTooLong
                ? dashboardTitle.substring(0, dashboardTitleMaxLength)
                : dashboardTitle;
            return truncatedDashboardTitle + " - " + displayDateString;
        };
        _this.getDefaultEmailBody = function () {
            var intl = _this.props.intl;
            return intl.formatMessage({
                id: "dialogs.schedule.email.message.placeholder",
            });
        };
        _this.getScheduleEmailData = function () {
            var when = _this.getTimeSchedule();
            var recipients = _this.state.selectedRecipients;
            /// To: is currently only owner
            var toEmails = recipients
                .filter(isScheduleEmailExistingRecipient)
                .map(function (recipient) { return recipient.user.login; });
            /// All other emails (without owner)
            var bccEmails = recipients
                .filter(isScheduleEmailExternalRecipient)
                .map(function (recipient) { return recipient.email; });
            var dashboard = _this.props.dashboard;
            var _a = _this, emailSubject = _a.emailSubject, emailBody = _a.emailBody;
            var subject = emailSubject || _this.getDefaultSubject();
            var body = emailBody || _this.getDefaultEmailBody();
            var description = _this.getSummaryMessage();
            return {
                when: when,
                to: toEmails,
                bcc: bccEmails,
                subject: subject,
                body: body,
                attachments: [
                    {
                        dashboard: dashboard,
                        format: "pdf",
                    },
                ],
                description: description,
                title: subject,
                // Every scheduled email is private for the logged in user.
                unlisted: true,
            };
        };
        _this.getTimeSchedule = function () {
            var recurrence = generateRepeatString(_this.repeatData);
            var startDate = convertDateToPlatformDateString(_this.state.startDate);
            return {
                recurrence: recurrence,
                startDate: startDate,
                timeZone: _this.userTimezone.identifier,
            };
        };
        _this.getSummaryMessage = function () {
            var _a = _this, intl = _a.props.intl, startDate = _a.state.startDate, repeatData = _a.repeatData;
            return getScheduledEmailSummaryString(intl, {
                repeatData: repeatData,
                startDate: startDate,
            });
        };
        var now = new Date();
        var normalizedTime = normalizeTime(now);
        _this.state = {
            alignment: "cc cc",
            startDate: now,
            startTime: {
                hour: normalizedTime.getHours(),
                minute: normalizedTime.getMinutes(),
                second: 0,
            },
            selectedRecipients: [userToRecipient(_this.props.currentUser)],
            isValidScheduleEmailData: true,
        };
        _this.repeatData = {
            date: {
                day: getDate(now),
                month: getMonth(now),
                year: getYear(now),
            },
            repeatExecuteOn: REPEAT_EXECUTE_ON.DAY_OF_MONTH,
            repeatFrequency: (_a = {},
                _a[REPEAT_FREQUENCIES.DAY] = true,
                _a),
            repeatPeriod: DEFAULT_REPEAT_PERIOD,
            repeatType: REPEAT_TYPES.DAILY,
            time: {
                hour: normalizedTime.getHours(),
                minute: normalizedTime.getMinutes(),
                second: 0,
            },
        };
        _this.userTimezone = getUserTimezone();
        _this.emailSubject = "";
        _this.emailBody = "";
        return _this;
    }
    ScheduledMailDialogRendererUI.prototype.render = function () {
        var _a = this.props, intl = _a.intl, onCancel = _a.onCancel;
        var alignPoints = [
            {
                align: this.state.alignment,
            },
        ];
        return (React.createElement(Overlay, { alignPoints: alignPoints, className: "gd-schedule-email-dialog-overlay", isModal: true, positionType: "fixed", onAlign: this.onAlign },
            React.createElement(ConfirmDialogBase, { className: "gd-schedule-email-dialog s-gd-schedule-email-dialog", isPositive: true, headline: intl.formatMessage({ id: "dialogs.schedule.email.headline" }), cancelButtonText: intl.formatMessage({ id: "cancel" }), submitButtonText: intl.formatMessage({ id: "dialogs.schedule.email.submit" }), isSubmitDisabled: !this.state.isValidScheduleEmailData, submitOnEnterKey: false, onCancel: onCancel, onSubmit: this.onScheduleDialogSubmit },
                this.renderRecipients(),
                this.renderSubject(),
                this.renderMessage(),
                this.renderAttachment(),
                React.createElement("div", { className: "hr" }),
                this.renderDateTime(),
                this.renderRepeats())));
    };
    ScheduledMailDialogRendererUI.prototype.getDashboardTitleMaxLength = function (displayDateString) {
        return MAX_DASHBOARD_TITLE_LENGTH - displayDateString.trim().length - MAX_HYPHEN_LENGTH;
    };
    ScheduledMailDialogRendererUI.prototype.updateStartDateForRepeats = function (startDate) {
        var repeatType = this.repeatData.repeatType;
        var repeatFrequency = this.repeatData.repeatFrequency;
        var repeatExecuteOn = this.repeatData.repeatExecuteOn;
        if (repeatType === REPEAT_TYPES.CUSTOM) {
            if (repeatFrequency === REPEAT_FREQUENCIES.MONTH) {
                setMonthlyRepeat(this.repeatData, repeatExecuteOn, startDate);
            }
            else if (repeatFrequency === REPEAT_FREQUENCIES.WEEK) {
                setWeeklyRepeat(this.repeatData, startDate);
            }
            else {
                setDailyRepeat(this.repeatData);
            }
        }
        else if (repeatType === REPEAT_TYPES.MONTHLY) {
            setMonthlyRepeat(this.repeatData, REPEAT_EXECUTE_ON.DAY_OF_WEEK, startDate);
        }
        else if (repeatType === REPEAT_TYPES.WEEKLY) {
            setWeeklyRepeat(this.repeatData, startDate);
        }
        else {
            setDailyRepeat(this.repeatData);
        }
    };
    ScheduledMailDialogRendererUI.defaultProps = {
        dateFormat: "MM/dd/yyyy",
    };
    return ScheduledMailDialogRendererUI;
}(React.PureComponent));
export { ScheduledMailDialogRendererUI };
export var ScheduledMailDialogRendererIntl = injectIntl(ScheduledMailDialogRendererUI);
export var ScheduledMailDialogRenderer = function (props) { return (React.createElement(InternalIntlWrapper, { locale: props.locale, workspace: props.workspace },
    React.createElement(ScheduledMailDialogRendererIntl, __assign({}, props)))); };
//# sourceMappingURL=ScheduledMailDialogRenderer.js.map
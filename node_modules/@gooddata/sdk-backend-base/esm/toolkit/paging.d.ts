import { IPagedResource } from "@gooddata/sdk-backend-spi";
/**
 * This implementation of {@link @gooddata/sdk-backend-spi#IPagedResource} pages over a list of items
 * provided at construction time. The paging is done using pre-configured page limit and starts at particular offset.
 *
 * @internal
 */
export declare class InMemoryPaging<T> implements IPagedResource<T> {
    protected readonly allItems: T[];
    readonly items: T[];
    readonly limit: number;
    readonly offset: number;
    readonly totalCount: number;
    constructor(allItems: T[], limit?: number, offset?: number);
    next(): Promise<IPagedResource<T>>;
    goTo(pageIndex: number): Promise<IPagedResource<T>>;
    all(): Promise<T[]>;
    allSorted(compareFn: (a: T, b: T) => number): Promise<T[]>;
}
/**
 * Given a paged result, this function will enhance it with the `all` implementation.
 *
 * @remarks TODO: FET-847 avoid the need for this function
 *
 * @param pagedResource - paged resource to enhance
 * @internal
 */
export declare function enhanceWithAll<TItem, TResource extends Omit<IPagedResource<TItem>, "all" | "allSorted">>(pagedResource: TResource): TResource & IPagedResource<TItem>;
//# sourceMappingURL=paging.d.ts.map
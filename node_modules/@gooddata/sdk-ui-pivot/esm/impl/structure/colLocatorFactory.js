// (C) 2021 GoodData Corporation
import { isScopeCol } from "./tableDescriptorTypes";
import { invariant } from "ts-invariant";
import zip from "lodash/zip";
function createAttributeLocator(descriptor, header) {
    // if this bombs it means something is wrong with the col descriptors or in very bad case in the DVF data access logic.
    // by contract, all data series have same number of descriptors & headers. therefore the zipping logic should never
    // run into situation where the arrays are of different size.
    invariant(descriptor && header);
    return {
        attributeLocatorItem: {
            attributeIdentifier: descriptor.attributeHeader.localIdentifier,
            element: header.attributeHeaderItem.uri,
        },
    };
}
function createMeasureLocator(descriptor) {
    return {
        measureLocatorItem: {
            measureIdentifier: descriptor.measureHeaderItem.localIdentifier,
        },
    };
}
/**
 * Given a leaf data col, this function will create column locator that can be used in
 * width items.
 *
 * @param col - col definition to get locators for
 */
export function createColumnLocator(col) {
    if (isScopeCol(col)) {
        var descriptorsToHere = col.descriptorsToHere, headersToHere = col.headersToHere;
        var descriptorsAndHeaders = zip(descriptorsToHere, headersToHere);
        descriptorsAndHeaders.push([col.attributeDescriptor, col.header]);
        return descriptorsAndHeaders.map(function (_a) {
            var descriptor = _a[0], header = _a[1];
            return createAttributeLocator(descriptor, header);
        });
    }
    else {
        var result_1 = [];
        if (col.seriesDescriptor.attributeDescriptors && col.seriesDescriptor.attributeHeaders) {
            var descriptorAndHeaders = zip(col.seriesDescriptor.attributeDescriptors, col.seriesDescriptor.attributeHeaders);
            descriptorAndHeaders.forEach(function (_a) {
                var descriptor = _a[0], header = _a[1];
                return result_1.push(createAttributeLocator(descriptor, header));
            });
        }
        result_1.push(createMeasureLocator(col.seriesDescriptor.measureDescriptor));
        return result_1;
    }
}
//# sourceMappingURL=colLocatorFactory.js.map
// (C) 2007-2021 GoodData Corporation
import { __extends } from "tslib";
import isEmpty from "lodash/isEmpty";
/**
 * Error codes recognized by the SDK.
 *
 * @public
 */
export var ErrorCodes = {
    BAD_REQUEST: "BAD_REQUEST",
    UNAUTHORIZED: "UNAUTHORIZED",
    GEO_LOCATION_MISSING: "GEO_LOCATION_MISSING",
    GEO_MAPBOX_TOKEN_MISSING: "GEO_MAPBOX_TOKEN_MISSING",
    DATA_TOO_LARGE_TO_DISPLAY: "DATA_TOO_LARGE_TO_DISPLAY",
    DATA_TOO_LARGE_TO_COMPUTE: "DATA_TOO_LARGE_TO_COMPUTE",
    NEGATIVE_VALUES: "NEGATIVE_VALUES",
    NO_DATA: "NO_DATA",
    NOT_FOUND: "NOT_FOUND",
    PROTECTED_REPORT: "PROTECTED_REPORT",
    UNKNOWN_ERROR: "UNKNOWN_ERROR",
    CANCELLED: "CANCELLED",
};
/**
 * Base class for all anticipated GoodData.UI SDK errors.
 *
 * @public
 */
var GoodDataSdkError = /** @class */ (function (_super) {
    __extends(GoodDataSdkError, _super);
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    function GoodDataSdkError(seType, message, cause) {
        var _newTarget = this.constructor;
        var _this = 
        /*
         * This is here to keep exception handling in client code initially backward compatible. Previosly
         * GoodDataSdkError had the error code inside the message itself. Keeping it that way.
         *
         * Note: using || instead of ?? so that code falls back to use error type even on empty message
         */
        _super.call(this, message || seType) || this;
        _this.seType = seType;
        _this.cause = cause;
        Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain
        return _this;
    }
    /**
     * Provides description of the problem or one of {@link ErrorCodes}.
     */
    GoodDataSdkError.prototype.getMessage = function () {
        return this.message;
    };
    /**
     * Underlying cause of this error (if any).
     */
    GoodDataSdkError.prototype.getCause = function () {
        return this.cause;
    };
    /**
     * Error code for this exception. This can be used to identify exact type of exception.
     */
    GoodDataSdkError.prototype.getErrorCode = function () {
        return this.seType;
    };
    return GoodDataSdkError;
}(Error));
export { GoodDataSdkError };
/**
 * This error means that server could not understand the request due to invalid syntax.
 *
 * @public
 */
var BadRequestSdkError = /** @class */ (function (_super) {
    __extends(BadRequestSdkError, _super);
    function BadRequestSdkError(message, cause) {
        return _super.call(this, ErrorCodes.BAD_REQUEST, message, cause) || this;
    }
    return BadRequestSdkError;
}(GoodDataSdkError));
export { BadRequestSdkError };
/**
 * This error means that you are not authorized.
 *
 * @public
 */
var UnauthorizedSdkError = /** @class */ (function (_super) {
    __extends(UnauthorizedSdkError, _super);
    function UnauthorizedSdkError(message, cause) {
        return _super.call(this, ErrorCodes.UNAUTHORIZED, message, cause) || this;
    }
    return UnauthorizedSdkError;
}(GoodDataSdkError));
export { UnauthorizedSdkError };
/**
 * This error means that location bucket is missing
 *
 * @public
 */
var GeoLocationMissingSdkError = /** @class */ (function (_super) {
    __extends(GeoLocationMissingSdkError, _super);
    function GeoLocationMissingSdkError(message, cause) {
        return _super.call(this, ErrorCodes.GEO_LOCATION_MISSING, message, cause) || this;
    }
    return GeoLocationMissingSdkError;
}(GoodDataSdkError));
export { GeoLocationMissingSdkError };
/**
 * This error means that mapbox token of GeoChart is missing
 *
 * @public
 */
var GeoTokenMissingSdkError = /** @class */ (function (_super) {
    __extends(GeoTokenMissingSdkError, _super);
    function GeoTokenMissingSdkError(message, cause) {
        return _super.call(this, ErrorCodes.GEO_MAPBOX_TOKEN_MISSING, message, cause) || this;
    }
    return GeoTokenMissingSdkError;
}(GoodDataSdkError));
export { GeoTokenMissingSdkError };
/**
 * This error means that executed data were too large to be displayed by GoodData.UI.
 *
 * @public
 */
var DataTooLargeToDisplaySdkError = /** @class */ (function (_super) {
    __extends(DataTooLargeToDisplaySdkError, _super);
    function DataTooLargeToDisplaySdkError(message, cause) {
        return _super.call(this, ErrorCodes.DATA_TOO_LARGE_TO_DISPLAY, message, cause) || this;
    }
    return DataTooLargeToDisplaySdkError;
}(GoodDataSdkError));
export { DataTooLargeToDisplaySdkError };
/**
 * This error means that processed request would generate a result too large to be processed
 * by GoodData platform.
 *
 * @public
 */
var DataTooLargeToComputeSdkError = /** @class */ (function (_super) {
    __extends(DataTooLargeToComputeSdkError, _super);
    function DataTooLargeToComputeSdkError(message, cause) {
        return _super.call(this, ErrorCodes.DATA_TOO_LARGE_TO_COMPUTE, message, cause) || this;
    }
    return DataTooLargeToComputeSdkError;
}(GoodDataSdkError));
export { DataTooLargeToComputeSdkError };
/**
 * This error means that processed result contains negative values which does not make
 * sense within the given visualization (e.g. pie chart with negative values).
 *
 * @public
 */
var NegativeValuesSdkError = /** @class */ (function (_super) {
    __extends(NegativeValuesSdkError, _super);
    function NegativeValuesSdkError(message, cause) {
        return _super.call(this, ErrorCodes.NEGATIVE_VALUES, message, cause) || this;
    }
    return NegativeValuesSdkError;
}(GoodDataSdkError));
export { NegativeValuesSdkError };
/**
 * This error means that the processed result does not contain any data.
 *
 * @public
 */
var NoDataSdkError = /** @class */ (function (_super) {
    __extends(NoDataSdkError, _super);
    function NoDataSdkError(message, cause) {
        return _super.call(this, ErrorCodes.NO_DATA, message, cause) || this;
    }
    return NoDataSdkError;
}(GoodDataSdkError));
export { NoDataSdkError };
/**
 * This error means that requested entity (e.g. a visualization) was not found on the server.
 *
 * @public
 */
var NotFoundSdkError = /** @class */ (function (_super) {
    __extends(NotFoundSdkError, _super);
    function NotFoundSdkError(message, cause) {
        return _super.call(this, ErrorCodes.NO_DATA, message, cause) || this;
    }
    return NotFoundSdkError;
}(GoodDataSdkError));
export { NotFoundSdkError };
/**
 * This error means that requested visualization is restricted by access rules within the GoodData platform.
 * Please contact your administrator.
 *
 * @public
 */
var ProtectedReportSdkError = /** @class */ (function (_super) {
    __extends(ProtectedReportSdkError, _super);
    function ProtectedReportSdkError(message, cause) {
        return _super.call(this, ErrorCodes.PROTECTED_REPORT, message, cause) || this;
    }
    return ProtectedReportSdkError;
}(GoodDataSdkError));
export { ProtectedReportSdkError };
/**
 * This error means that GoodData.UI does not know how to handle such error.
 *
 * @public
 */
var UnexpectedSdkError = /** @class */ (function (_super) {
    __extends(UnexpectedSdkError, _super);
    function UnexpectedSdkError(message, cause) {
        return _super.call(this, ErrorCodes.UNKNOWN_ERROR, message, cause) || this;
    }
    return UnexpectedSdkError;
}(GoodDataSdkError));
export { UnexpectedSdkError };
/**
 * This error means that request has been cancelled usually after component has been unmounted.
 *
 * @public
 */
var CancelledSdkError = /** @class */ (function (_super) {
    __extends(CancelledSdkError, _super);
    function CancelledSdkError(message, cause) {
        return _super.call(this, ErrorCodes.CANCELLED, message, cause) || this;
    }
    return CancelledSdkError;
}(GoodDataSdkError));
export { CancelledSdkError };
//
//
//
/**
 * Typeguard checking whether input is an instance of {@link GoodDataSdkError};
 *
 * @public
 */
export function isGoodDataSdkError(obj) {
    return !isEmpty(obj) && obj.seType !== undefined;
}
/**
 * Typeguard checking whether input is an instance of {@link BadRequestSdkError};
 *
 * @public
 */
export function isBadRequest(obj) {
    return !isEmpty(obj) && obj.seType === "BAD_REQUEST";
}
/**
 * Typeguard checking whether input is an instance of {@link UnauthorizedSdkError};
 *
 * @public
 */
export function isUnauthorized(obj) {
    return !isEmpty(obj) && obj.seType === "UNAUTHORIZED";
}
/**
 * Typeguard checking whether input is an instance of {@link GeoLocationMissingSdkError};
 *
 * @public
 */
export function isGeoLocationMissing(obj) {
    return !isEmpty(obj) && obj.seType === "GEO_LOCATION_MISSING";
}
/**
 * Typeguard checking whether input is an instance of {@link GeoTokenMissingSdkError};
 *
 * @public
 */
export function isGeoTokenMissing(obj) {
    return !isEmpty(obj) && obj.seType === "GEO_MAPBOX_TOKEN_MISSING";
}
/**
 * Typeguard checking whether input is an instance of {@link DataTooLargeToDisplaySdkError};
 *
 * @public
 */
export function isDataTooLargeToDisplay(obj) {
    return !isEmpty(obj) && obj.seType === "DATA_TOO_LARGE_TO_DISPLAY";
}
/**
 * Typeguard checking whether input is an instance of {@link DataTooLargeToComputeSdkError};
 *
 * @public
 */
export function isDataTooLargeToCompute(obj) {
    return !isEmpty(obj) && obj.seType === "DATA_TOO_LARGE_TO_COMPUTE";
}
/**
 * Typeguard checking whether input is an instance of {@link NegativeValuesSdkError};
 *
 * @public
 */
export function isNegativeValues(obj) {
    return !isEmpty(obj) && obj.seType === "NEGATIVE_VALUES";
}
/**
 * Typeguard checking whether input is an instance of {@link NoDataSdkError};
 *
 * @public
 */
export function isNoDataSdkError(obj) {
    return !isEmpty(obj) && obj.seType === "NO_DATA";
}
/**
 * Typeguard checking whether input is an instance of {@link NotFoundSdkError};
 *
 * @public
 */
export function isNotFound(obj) {
    return !isEmpty(obj) && obj.seType === "NOT_FOUND";
}
/**
 * Typeguard checking whether input is an instance of {@link ProtectedReportSdkError};
 *
 * @public
 */
export function isProtectedReport(obj) {
    return !isEmpty(obj) && obj.seType === "PROTECTED_REPORT";
}
/**
 * Typeguard checking whether input is an instance of {@link UnexpectedSdkError};
 *
 * @public
 */
export function isUnknownSdkError(obj) {
    return !isEmpty(obj) && obj.seType === "UNKNOWN_ERROR";
}
/**
 * Typeguard checking whether input is an instance of {@link CancelledSdkError};
 *
 * @public
 */
export function isCancelledSdkError(obj) {
    return !isEmpty(obj) && obj.seType === "CANCELLED";
}
//# sourceMappingURL=GoodDataSdkError.js.map
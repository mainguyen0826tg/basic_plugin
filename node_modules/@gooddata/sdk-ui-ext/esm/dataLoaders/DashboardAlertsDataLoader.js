// (C) 2021 GoodData Corporation
import LRUCache from "lru-cache";
import { objRefToString } from "@gooddata/sdk-model";
import { DASHBOARD_CACHE_SIZE } from "./constants";
import { dataLoaderAbstractFactory } from "./DataLoaderAbstractFactory";
// returned in case the backend does not support alerts
var EMPTY_RESPONSE = [];
var DashboardAlertsDataLoader = /** @class */ (function () {
    function DashboardAlertsDataLoader(workspace) {
        this.workspace = workspace;
        this.dashboardAlertsCache = new LRUCache({
            max: DASHBOARD_CACHE_SIZE,
        });
    }
    DashboardAlertsDataLoader.prototype.getDashboardAlerts = function (backend, ref) {
        var _this = this;
        // no need to load anything if the backend does not support setting the alerts in the first place
        if (!backend.capabilities.supportsKpiWidget) {
            return Promise.resolve(EMPTY_RESPONSE);
        }
        var cacheKey = objRefToString(ref);
        var dashboardAlerts = this.dashboardAlertsCache.get(cacheKey);
        if (!dashboardAlerts) {
            dashboardAlerts = backend
                .workspace(this.workspace)
                .dashboards()
                .getDashboardWidgetAlertsForCurrentUser(ref)
                .catch(function (error) {
                _this.dashboardAlertsCache.del(cacheKey);
                throw error;
            });
            this.dashboardAlertsCache.set(cacheKey, dashboardAlerts);
        }
        return dashboardAlerts;
    };
    return DashboardAlertsDataLoader;
}());
/**
 * @internal
 */
export var dashboardAlertsDataLoaderFactory = dataLoaderAbstractFactory(function (workspace) { return new DashboardAlertsDataLoader(workspace); });
//# sourceMappingURL=DashboardAlertsDataLoader.js.map
import { __assign, __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import Downshift from "downshift";
import cx from "classnames";
import { getSelectableItems, itemToString } from "../Select/utils";
import { defaultVisibleItemsRange, getMedianIndex, VirtualizedSelectMenu, } from "../Select/VirtualizedSelectMenu";
import { findRelativeDateFilterOptionByValue } from "./utils";
import noop from "lodash/noop";
var DynamicSelect = /** @class */ (function (_super) {
    __extends(DynamicSelect, _super);
    function DynamicSelect(props) {
        var _this = _super.call(this, props) || this;
        _this.inputRef = React.createRef();
        _this.onChange = function (option) {
            if (option) {
                _this.props.onChange(option.value);
            }
        };
        _this.componentDidUpdate = function (lastProps) {
            var _a;
            if (lastProps.value !== _this.props.value) {
                var defaultItems = _this.props.getItems(_this.props.value.toString());
                var inputValue = ((_a = findRelativeDateFilterOptionByValue(defaultItems, _this.props.value)) === null || _a === void 0 ? void 0 : _a.label) ||
                    _this.props.value.toString();
                _this.setState({
                    inputValue: inputValue,
                });
            }
        };
        _this.focus = function () {
            if (_this.inputRef.current) {
                _this.inputRef.current.focus();
            }
        };
        _this.blur = function () {
            if (_this.inputRef.current) {
                _this.inputRef.current.blur();
            }
        };
        _this.onInputValueChanged = function (inputValue) {
            if (inputValue !== _this.state.inputValue) {
                _this.setState({ inputValue: inputValue });
            }
        };
        _this.onBlurHandler = function (selectedItem, selectItem, closeMenu) {
            var _a = _this.props, customValueValidator = _a.customValueValidator, value = _a.value;
            if (customValueValidator) {
                closeMenu();
                _this.onInputValueChanged(value === null || value === void 0 ? void 0 : value.toString());
            }
            else {
                selectItem(selectedItem);
                _this.onInputValueChanged(selectedItem ? selectedItem.label : "");
            }
        };
        _this.onChangeHandler = function (event, selectItem) {
            var customValueValidator = _this.props.customValueValidator;
            var currentValue = event.target.value;
            if (customValueValidator && customValueValidator(currentValue)) {
                selectItem({
                    type: "option",
                    value: Number(currentValue),
                    label: currentValue,
                });
            }
            // Downshifts onInputValueChanged fires twice and with an old value,
            // so we need to use our own callback
            _this.onInputValueChanged(currentValue);
        };
        var selectedItem = props.value !== undefined
            ? findRelativeDateFilterOptionByValue(
            // pass the current value to make sure the searched options include it even if it is outside the default range
            props.getItems(props.value.toString()), props.value)
            : null;
        _this.state = {
            inputValue: selectedItem ? itemToString(selectedItem) : props.value ? props.value.toString() : "",
        };
        return _this;
    }
    DynamicSelect.prototype.render = function () {
        var _this = this;
        var _a = this.props, initialIsOpen = _a.initialIsOpen, placeholder = _a.placeholder, getItems = _a.getItems, _b = _a.value, value = _b === void 0 ? null : _b, className = _a.className, style = _a.style, optionClassName = _a.optionClassName, visibleItemsRange = _a.visibleItemsRange;
        var items = getItems(this.state.inputValue);
        // this is important to correctly find out selected option. It is different than 'items'.
        var itemsByValue = value !== null ? getItems(value.toString()) : [];
        // Downshift requires null as empty selected item, if we would pass undefined it would change
        // from controlled to uncontrolled component
        var selectedItem = (value !== null && findRelativeDateFilterOptionByValue(itemsByValue, value)) || null;
        var selectableItems = getSelectableItems(items);
        var isFiltered = this.state.inputValue.trim() !== "";
        return (React.createElement(Downshift, { onChange: this.onChange, itemToString: itemToString, initialIsOpen: initialIsOpen, selectedItem: selectedItem, itemCount: selectableItems.length, inputValue: this.state.inputValue, 
            // automatically highlight (and therefore scroll to) the middle option if default items are displayed
            defaultHighlightedIndex: selectedItem || isFiltered ? 0 : getMedianIndex(selectableItems) }, function (_a) {
            var getInputProps = _a.getInputProps, getMenuProps = _a.getMenuProps, getItemProps = _a.getItemProps, isOpen = _a.isOpen, openMenu = _a.openMenu, closeMenu = _a.closeMenu, inputValue = _a.inputValue, highlightedIndex = _a.highlightedIndex, setHighlightedIndex = _a.setHighlightedIndex, selectItem = _a.selectItem;
            // Without this, highlight is not properly reset during filtering
            var effectiveHighlightedIndex = highlightedIndex > selectableItems.length - 1 ? 0 : highlightedIndex;
            var menuProps = {
                items: items,
                selectedItem: selectedItem,
                highlightedIndex: effectiveHighlightedIndex,
                getItemProps: getItemProps,
                getMenuProps: getMenuProps,
                className: "gd-dynamic-select-menu",
                optionClassName: optionClassName,
                inputValue: inputValue,
                setHighlightedIndex: setHighlightedIndex,
                visibleItemsRange: visibleItemsRange,
            };
            return (React.createElement("div", { className: cx("gd-dynamic-select", className), style: style },
                React.createElement("div", { className: "gd-dynamic-select-input-wrapper" },
                    React.createElement("input", __assign({ type: "text", className: "s-relative-range-input gd-input-field" }, getInputProps({
                        ref: _this.inputRef,
                        placeholder: selectedItem ? selectedItem.label : placeholder,
                        value: inputValue,
                        onFocus: function () {
                            _this.setState({ inputValue: "" });
                            openMenu();
                        },
                        onChange: function (event) {
                            return _this.onChangeHandler(event, selectItem);
                        },
                        onBlur: function () { return _this.onBlurHandler(selectedItem, selectItem, closeMenu); },
                    })))),
                isOpen && items.length > 0 && React.createElement(VirtualizedSelectMenu, __assign({}, menuProps))));
        }));
    };
    DynamicSelect.defaultProps = {
        onChange: noop,
        initialIsOpen: false,
        visibleItemsRange: defaultVisibleItemsRange,
    };
    return DynamicSelect;
}(React.Component));
export { DynamicSelect };
//# sourceMappingURL=DynamicSelect.js.map
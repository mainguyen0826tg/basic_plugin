import { NotSupported, UnexpectedError } from "@gooddata/sdk-backend-spi";
import { attributeDisplayFormRef, attributesFind, isIdentifierRef, isLocalIdRef, isObjRef, isUriRef, } from "@gooddata/sdk-model";
import { invariant } from "ts-invariant";
import { isTigerCompatibleType, objectTypeToTigerIdType, } from "../../types/refTypeMapping";
// TODO: get rid of the defaultValue, tiger should explode if ref is not provided correctly
export function toTigerType(value, defaultValue) {
    if (!value) {
        if (!defaultValue) {
            throw new UnexpectedError("No value or default value was provided to toTigerType ");
        }
        return defaultValue;
    }
    if (!isTigerCompatibleType(value)) {
        throw new UnexpectedError("Cannot convert " + value + " to AFM type, " + value + " is not valid AfmObjectType");
    }
    return objectTypeToTigerIdType[value];
}
export function toObjQualifier(ref, defaultValue) {
    if (isUriRef(ref)) {
        throw new NotSupported("Tiger backend does not allow referencing objects by URI.");
    }
    return {
        identifier: {
            id: ref.identifier,
            type: toTigerType(ref.type, defaultValue),
        },
    };
}
/**
 * @internal
 */
export function toFactQualifier(ref) {
    return toObjQualifier(ref, "fact");
}
/**
 * @internal
 */
export function toLabelQualifier(ref) {
    return toObjQualifier(ref, "label");
}
/**
 * @internal
 */
export function toDateDataSetQualifier(ref) {
    return toObjQualifier(ref, "dataset");
}
/**
 * @internal
 */
export function toLocalIdentifier(localIdentifier) {
    return {
        localIdentifier: localIdentifier,
    };
}
/**
 * @internal
 */
export function toMeasureValueFilterMeasureQualifier(ref) {
    if (isLocalIdRef(ref)) {
        return toLocalIdentifier(ref.localIdentifier);
    }
    else if (isIdentifierRef(ref)) {
        if (!ref.type) {
            throw new UnexpectedError("Please explicitly specify idRef for measure value filter. You must provide both identifier and type of object you want to reference.");
        }
        return toObjQualifier(ref);
    }
    else {
        throw new UnexpectedError("The measure property of measure value filter must be either object reference or local identifier");
    }
}
/**
 * @internal
 */
export function toRankingFilterDimensionalityIdentifier(ref, afmAttributes) {
    if (isObjRef(ref)) {
        return toObjQualifier(ref);
    }
    else {
        invariant(afmAttributes.length > 0);
        var attribute = attributesFind(afmAttributes, ref.localIdentifier);
        invariant(attribute);
        return toObjQualifier(attributeDisplayFormRef(attribute));
    }
}
//# sourceMappingURL=ObjRefConverter.js.map
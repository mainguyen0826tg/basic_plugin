// (C) 2019-2020 GoodData Corporation
import invariant from "ts-invariant";
/**
 * Simple implementation of fixed-size arrays with lazily initialized elements.
 */
var LazyInitArray = /** @class */ (function () {
    function LazyInitArray(size, initializer) {
        var _this = this;
        this.get = function (idx) {
            invariant(idx >= 0 && idx < _this.data.length, "array index out of bounds: " + idx);
            if (!_this.data[idx]) {
                _this.data[idx] = _this.initializer(idx);
            }
            return _this.data[idx];
        };
        this[Symbol.iterator] = function () {
            var idx = 0;
            var length = _this.data.length;
            var get = _this.get;
            return {
                next: function () {
                    if (idx >= length) {
                        return {
                            done: true,
                            value: undefined,
                        };
                    }
                    var value = get(idx);
                    idx += 1;
                    return {
                        done: false,
                        value: value,
                    };
                },
            };
        };
        invariant(size >= 0, "array size must be non-negative, got: " + size);
        this.data = new Array(size);
        this.initializer = initializer;
    }
    return LazyInitArray;
}());
export { LazyInitArray };
//# sourceMappingURL=lazyInitArray.js.map
import { __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { injectIntl } from "react-intl";
import ConfigSubsection from "../../configurationControls/ConfigSubsection";
import LabelRotationControl from "./LabelRotationControl";
import { LabelFormatControl } from "./LabelFormatControl";
var LabelSubsection = /** @class */ (function (_super) {
    __extends(LabelSubsection, _super);
    function LabelSubsection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LabelSubsection.prototype.render = function () {
        var _a = this.getControlProperties(), axisVisible = _a.axisVisible, axisLabelsEnabled = _a.axisLabelsEnabled;
        return (React.createElement(ConfigSubsection, { title: "properties.axis.labels", valuePath: this.props.axis + ".labelsEnabled", properties: this.props.properties, pushData: this.props.pushData, canBeToggled: true, toggledOn: axisLabelsEnabled, toggleDisabled: this.props.disabled || !axisVisible, showDisabledMessage: !this.props.configPanelDisabled && this.props.disabled },
            this.props.showFormat && (React.createElement(LabelFormatControl, { disabled: this.props.disabled, configPanelDisabled: this.props.configPanelDisabled, axis: this.props.axis, properties: this.props.properties, pushData: this.props.pushData })),
            React.createElement(LabelRotationControl, { disabled: this.props.disabled, configPanelDisabled: this.props.configPanelDisabled, axis: this.props.axis, properties: this.props.properties, pushData: this.props.pushData })));
    };
    LabelSubsection.prototype.getControlProperties = function () {
        var _a, _b, _c, _d;
        var axisProperties = (_b = (_a = this.props.properties) === null || _a === void 0 ? void 0 : _a.controls) === null || _b === void 0 ? void 0 : _b[this.props.axis];
        var axisVisible = (_c = axisProperties === null || axisProperties === void 0 ? void 0 : axisProperties.visible) !== null && _c !== void 0 ? _c : true;
        var axisLabelsEnabled = (_d = axisProperties === null || axisProperties === void 0 ? void 0 : axisProperties.labelsEnabled) !== null && _d !== void 0 ? _d : true;
        return {
            axisVisible: axisVisible,
            axisLabelsEnabled: axisLabelsEnabled,
        };
    };
    return LabelSubsection;
}(React.PureComponent));
export default injectIntl(LabelSubsection);
//# sourceMappingURL=LabelSubsection.js.map
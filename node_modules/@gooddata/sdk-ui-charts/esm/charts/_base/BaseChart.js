import { __assign, __extends } from "tslib";
// (C) 2007-2018 GoodData Corporation
import React from "react";
import { getValidColorPalette, ChartTransformation } from "../../highcharts";
import { fixEmptyHeaderItems } from "@gooddata/sdk-ui-vis-commons";
import noop from "lodash/noop";
import { defaultCoreChartProps } from "../_commons/defaultProps";
import { newErrorMapping, ErrorCodes, IntlWrapper, IntlTranslationsProvider, withEntireDataView, } from "@gooddata/sdk-ui";
import { getSanitizedStackingConfig } from "../_commons/sanitizeStacking";
import { ThemeContextProvider } from "@gooddata/sdk-ui-theme-provider";
var StatelessBaseChart = /** @class */ (function (_super) {
    __extends(StatelessBaseChart, _super);
    function StatelessBaseChart(props) {
        var _this = _super.call(this, props) || this;
        _this.errorMap = newErrorMapping(props.intl);
        return _this;
    }
    StatelessBaseChart.prototype.render = function () {
        var _a = this.props, dataView = _a.dataView, error = _a.error, isLoading = _a.isLoading;
        var ErrorComponent = this.props.ErrorComponent;
        var LoadingComponent = this.props.LoadingComponent;
        if (error) {
            var errorProps = this.errorMap[Object.prototype.hasOwnProperty.call(this.errorMap, error)
                ? error
                : ErrorCodes.UNKNOWN_ERROR];
            return ErrorComponent ? React.createElement(ErrorComponent, __assign({ code: error }, errorProps)) : null;
        }
        // when in pageble mode (getPage present) never show loading (its handled by the component)
        if (isLoading || !dataView) {
            return LoadingComponent ? React.createElement(LoadingComponent, null) : null;
        }
        return this.renderChartTransformation();
    };
    StatelessBaseChart.prototype.renderChartTransformation = function () {
        var _a = this.props, afterRender = _a.afterRender, height = _a.height, width = _a.width, locale = _a.locale, config = _a.config, type = _a.type, dataView = _a.dataView, onDataTooLarge = _a.onDataTooLarge, pushData = _a.pushData, theme = _a.theme, drillableItems = _a.drillableItems, onDrill = _a.onDrill, onNegativeValues = _a.onNegativeValues, onLegendReady = _a.onLegendReady;
        var colorPalette = getValidColorPalette(config);
        var fullConfig = __assign(__assign({}, config), { type: type, colorPalette: colorPalette });
        var sanitizedConfig = getSanitizedStackingConfig(dataView.definition, fullConfig);
        return (React.createElement(ThemeContextProvider, { theme: theme, themeIsLoading: false },
            React.createElement(IntlWrapper, { locale: locale },
                React.createElement(IntlTranslationsProvider, null, function (translationProps) {
                    // TODO: this is evil; mutating the items of readonly array; need to find a conceptual way to do this
                    fixEmptyHeaderItems(dataView, translationProps.emptyHeaderString);
                    return (React.createElement(ChartTransformation, { height: height, width: width, config: sanitizedConfig, drillableItems: drillableItems, locale: locale, dataView: dataView, afterRender: afterRender, onDrill: onDrill, onDataTooLarge: onDataTooLarge, onNegativeValues: onNegativeValues, onLegendReady: onLegendReady, pushData: pushData, numericSymbols: translationProps.numericSymbols }));
                }))));
    };
    StatelessBaseChart.defaultProps = __assign(__assign({}, defaultCoreChartProps), { onDataTooLarge: noop, onLegendReady: noop, config: {} });
    return StatelessBaseChart;
}(React.Component));
/**
 * NOTE: exported to satisfy sdk-ui-ext; is internal, must not be used outside of SDK; will disappear.
 *
 * @internal
 */
export var BaseChart = withEntireDataView(StatelessBaseChart);
//# sourceMappingURL=BaseChart.js.map
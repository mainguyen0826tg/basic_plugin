import { IDataView, ITheme } from "@gooddata/sdk-backend-spi";
import React from "react";
import { OnFiredDrillEvent, ExplicitDrill } from "@gooddata/sdk-ui";
import { IChartConfig, OnLegendReady } from "../interfaces";
import { IHighChartsRendererProps } from "./adapter/HighChartsRenderer";
import { WrappedComponentProps } from "react-intl";
export declare function renderHighCharts(props: IHighChartsRendererProps): JSX.Element;
/**
 * @internal
 */
export interface IChartTransformationProps extends WrappedComponentProps {
    height: number;
    width: number;
    config: IChartConfig;
    drillableItems: ExplicitDrill[];
    locale: string;
    dataView: IDataView;
    onDrill: OnFiredDrillEvent;
    onLegendReady: OnLegendReady;
    afterRender(): void;
    onDataTooLarge(chartOptions: any): void;
    onNegativeValues(chartOptions: any): void;
    numericSymbols?: string[];
    theme?: ITheme;
    pushData?(data: any): void;
    renderer?(arg: IHighChartsRendererProps): JSX.Element;
}
export declare const ChartTransformation: React.MemoExoticComponent<React.ForwardRefExoticComponent<Pick<Pick<IChartTransformationProps, "locale" | "height" | "width" | "intl" | "numericSymbols" | "config" | "dataView" | "onDrill" | "onLegendReady" | "afterRender" | "renderer" | "drillableItems" | "onDataTooLarge" | "onNegativeValues" | "pushData">, "locale" | "height" | "width" | "numericSymbols" | "config" | "dataView" | "onDrill" | "onLegendReady" | "afterRender" | "renderer" | "drillableItems" | "onDataTooLarge" | "onNegativeValues" | "pushData"> & {
    forwardedRef?: React.Ref<any>;
} & React.RefAttributes<any>> & {
    WrappedComponent: React.ComponentType<Pick<IChartTransformationProps, "locale" | "height" | "width" | "intl" | "numericSymbols" | "config" | "dataView" | "onDrill" | "onLegendReady" | "afterRender" | "renderer" | "drillableItems" | "onDataTooLarge" | "onNegativeValues" | "pushData">>;
}>;
//# sourceMappingURL=ChartTransformation.d.ts.map
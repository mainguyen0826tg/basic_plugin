// (C) 2021 GoodData Corporation
import { createSelector } from "@reduxjs/toolkit";
import invariant from "ts-invariant";
var selectSelf = createSelector(function (state) { return state; }, function (state) { return state.permissions; });
/**
 * This selector returns user's permissions in the workspace where the dashboard is stored. It is expected that the
 * selector is called only after the permission state is correctly initialized. Invocations before initialization lead to invariant errors.
 *
 * @public
 */
export var selectPermissions = createSelector(selectSelf, function (filterContextState) {
    invariant(filterContextState.permissions, "attempting to access uninitialized permissions state");
    return filterContextState.permissions;
});
/**
 * Returns whether the current user has permissions to list other users in the workspace.
 *
 * @alpha
 */
export var selectCanListUsersInWorkspace = createSelector(selectPermissions, function (state) {
    var _a;
    return (_a = state === null || state === void 0 ? void 0 : state.canListUsersInProject) !== null && _a !== void 0 ? _a : false;
});
/**
 * Returns whether the current user has permissions to manage current workspace.
 *
 * @alpha
 */
export var selectCanManageWorkspace = createSelector(selectPermissions, function (state) {
    var _a;
    return (_a = state === null || state === void 0 ? void 0 : state.canManageProject) !== null && _a !== void 0 ? _a : false;
});
/**
 * Returns whether the current user has permissions to export the report.
 *
 * @alpha
 */
export var selectCanExportReport = createSelector(selectPermissions, function (state) {
    var _a;
    return (_a = state === null || state === void 0 ? void 0 : state.canExportReport) !== null && _a !== void 0 ? _a : false;
});
/**
 * Returns whether the current user has permissions to create the analytical dashboard.
 *
 * @alpha
 */
export var selectCanCreateAnalyticalDashboard = createSelector(selectPermissions, function (state) {
    var _a;
    return (_a = state === null || state === void 0 ? void 0 : state.canCreateAnalyticalDashboard) !== null && _a !== void 0 ? _a : false;
});
/**
 * Returns whether the current user has permissions to manage access rights.
 *
 * @alpha
 */
export var selectCanManageACL = createSelector(selectPermissions, function (state) {
    var _a;
    return (_a = state === null || state === void 0 ? void 0 : state.canManageACL) !== null && _a !== void 0 ? _a : false;
});
//# sourceMappingURL=permissionsSelectors.js.map
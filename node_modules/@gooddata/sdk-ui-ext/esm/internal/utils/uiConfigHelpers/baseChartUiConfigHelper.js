// (C) 2019-2021 GoodData Corporation
import cloneDeep from "lodash/cloneDeep";
import set from "lodash/set";
import forEach from "lodash/forEach";
import { BucketNames, VisualizationTypes } from "@gooddata/sdk-ui";
import { UICONFIG, RECOMMENDATIONS, OPEN_AS_REPORT, SUPPORTED } from "../../constants/uiConfig";
import { ATTRIBUTE, BUCKETS, DATE } from "../../constants/bucket";
import { comparisonAndTrendingRecommendationEnabled, overTimeComparisonRecommendationEnabled, hasNoMeasures, hasMoreThanOneMasterMeasure, percentRecommendationEnabled, previousPeriodRecommendationEnabled, hasNoStacksWithDate, } from "./../bucketRules";
import { getStackItems, isDateBucketItem, setBucketTitles } from "./../bucketHelper";
import { getTranslation } from "./../translations";
import { hasColorMapping } from "./../propertiesHelper";
import columnMeasuresIcon from "../../assets/column/bucket-title-measures.svg";
import columnViewIcon from "../../assets/column/bucket-title-view.svg";
import columnStackIcon from "../../assets/column/bucket-title-stack.svg";
import barMeasuresIcon from "../../assets/bar/bucket-title-measures.svg";
import barViewIcon from "../../assets/bar/bucket-title-view.svg";
import barStackIcon from "../../assets/bar/bucket-title-stack.svg";
function setBaseChartBucketWarningMessages(referencePoint, intl) {
    var _a;
    var buckets = (_a = referencePoint === null || referencePoint === void 0 ? void 0 : referencePoint.buckets) !== null && _a !== void 0 ? _a : [];
    var updatedUiConfig = cloneDeep(referencePoint === null || referencePoint === void 0 ? void 0 : referencePoint.uiConfig);
    var stackItems = getStackItems(buckets, [ATTRIBUTE, DATE]);
    forEach(buckets, function (bucket) {
        var _a, _b;
        var localIdentifier = (_a = bucket === null || bucket === void 0 ? void 0 : bucket.localIdentifier) !== null && _a !== void 0 ? _a : "";
        var bucketUiConfig = (_b = updatedUiConfig === null || updatedUiConfig === void 0 ? void 0 : updatedUiConfig.buckets) === null || _b === void 0 ? void 0 : _b[localIdentifier];
        // skip disabled buckets
        if (!(bucketUiConfig === null || bucketUiConfig === void 0 ? void 0 : bucketUiConfig.enabled)) {
            return;
        }
        if (!(bucketUiConfig === null || bucketUiConfig === void 0 ? void 0 : bucketUiConfig.canAddItems)) {
            var warningMessage = void 0;
            if (bucket.localIdentifier === BucketNames.MEASURES) {
                warningMessage = getBucketItemsWarningMessage("dashboard.bucket.metric_stack_by_warning", intl, stackItems);
            }
            else if (bucket.localIdentifier === BucketNames.STACK) {
                warningMessage = getTranslation("dashboard.bucket.category_stack_by_warning", intl);
            }
            if (warningMessage) {
                set(updatedUiConfig, [BUCKETS, localIdentifier, "warningMessage"], warningMessage);
            }
        }
    });
    return updatedUiConfig;
}
export function setBaseChartUiConfig(referencePoint, intl, visualizationType) {
    var _a, _b;
    var _c, _d, _e, _f;
    var referencePointConfigured = cloneDeep(referencePoint);
    var buckets = (_c = referencePointConfigured === null || referencePointConfigured === void 0 ? void 0 : referencePointConfigured.buckets) !== null && _c !== void 0 ? _c : [];
    var measuresCanAddItems = hasNoMeasures(buckets) || hasNoStacksWithDate(buckets);
    var stackCanAddItems = !hasMoreThanOneMasterMeasure(buckets, BucketNames.MEASURES);
    set(referencePointConfigured, [UICONFIG], setBucketTitles(referencePoint, visualizationType, intl));
    set(referencePointConfigured, [UICONFIG, BUCKETS, BucketNames.MEASURES, "canAddItems"], measuresCanAddItems);
    set(referencePointConfigured, [UICONFIG, BUCKETS, BucketNames.VIEW, "canAddItems"], true);
    set(referencePointConfigured, [UICONFIG, BUCKETS, BucketNames.STACK, "canAddItems"], stackCanAddItems);
    set(referencePointConfigured, [UICONFIG, OPEN_AS_REPORT, SUPPORTED], !hasColorMapping(referencePointConfigured.properties));
    var iconsMap = {
        column: (_a = {},
            _a[BucketNames.MEASURES] = columnMeasuresIcon,
            _a[BucketNames.VIEW] = columnViewIcon,
            _a[BucketNames.STACK] = columnStackIcon,
            _a),
        bar: (_b = {},
            _b[BucketNames.MEASURES] = barMeasuresIcon,
            _b[BucketNames.VIEW] = barViewIcon,
            _b[BucketNames.STACK] = barStackIcon,
            _b),
    };
    set(referencePointConfigured, [UICONFIG, BUCKETS, BucketNames.MEASURES, "icon"], (_d = iconsMap[visualizationType]) === null || _d === void 0 ? void 0 : _d[BucketNames.MEASURES]);
    set(referencePointConfigured, [UICONFIG, BUCKETS, BucketNames.VIEW, "icon"], (_e = iconsMap[visualizationType]) === null || _e === void 0 ? void 0 : _e[BucketNames.VIEW]);
    set(referencePointConfigured, [UICONFIG, BUCKETS, BucketNames.STACK, "icon"], (_f = iconsMap[visualizationType]) === null || _f === void 0 ? void 0 : _f[BucketNames.STACK]);
    set(referencePointConfigured, UICONFIG, setBaseChartBucketWarningMessages(referencePointConfigured, intl));
    return referencePointConfigured;
}
export function setBaseChartUiConfigRecommendations(referencePoint, visualizationType, weekFiltersEnabled) {
    if (visualizationType === VisualizationTypes.COLUMN) {
        var newReferencePoint = cloneDeep(referencePoint);
        var buckets = newReferencePoint === null || newReferencePoint === void 0 ? void 0 : newReferencePoint.buckets;
        var filters = newReferencePoint === null || newReferencePoint === void 0 ? void 0 : newReferencePoint.filters;
        var percentEnabled = percentRecommendationEnabled(buckets, filters);
        var comparisonAndTrending = comparisonAndTrendingRecommendationEnabled(buckets);
        var overTimeComparison = overTimeComparisonRecommendationEnabled(newReferencePoint, weekFiltersEnabled);
        var previousPeriod = previousPeriodRecommendationEnabled(buckets);
        set(newReferencePoint, [UICONFIG, RECOMMENDATIONS, "percent"], percentEnabled);
        set(newReferencePoint, [UICONFIG, RECOMMENDATIONS, "comparison"], comparisonAndTrending);
        set(newReferencePoint, [UICONFIG, RECOMMENDATIONS, "trending"], comparisonAndTrending);
        set(newReferencePoint, [UICONFIG, RECOMMENDATIONS, "overTimeComparison"], overTimeComparison);
        set(newReferencePoint, [UICONFIG, RECOMMENDATIONS, "previousPeriod"], previousPeriod);
        return newReferencePoint;
    }
    return referencePoint;
}
function getBucketItemsIcons(bucket, intl) {
    var attributeUsed = bucket.find(function (x) { return !isDateBucketItem(x); });
    var dateUsed = bucket.find(function (x) { return isDateBucketItem(x); });
    var orString = intl.formatMessage({ id: "or" });
    if (attributeUsed && dateUsed) {
        return "<span class=\"attr-field-icon\" /> " + orString + " <span class=\"date-field-icon\" />";
    }
    else if (attributeUsed) {
        return '<span class="attr-field-icon" />';
    }
    else {
        return '<span class="date-field-icon" />';
    }
}
export function getBucketItemsWarningMessage(messageId, intl, bucketItems) {
    var icons = getBucketItemsIcons(bucketItems, intl);
    return getTranslation(messageId, intl, {
        icons: icons,
    });
}
//# sourceMappingURL=baseChartUiConfigHelper.js.map
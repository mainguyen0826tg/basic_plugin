import { __assign, __read } from "tslib";
export function getViewportDimensionsAndCoords() {
    var width = window.innerWidth;
    var height = window.innerHeight;
    var left = window.pageXOffset;
    var top = window.pageYOffset;
    var right = left + width;
    var bottom = top + height;
    return { width: width, height: height, left: left, top: top, right: right, bottom: bottom };
}
export function getElementDimensionsAndCoords(element) {
    var rect = element.getBoundingClientRect();
    var window = getViewportDimensionsAndCoords();
    var width = rect.width;
    var height = rect.height;
    var left = rect.left + window.left;
    var top = rect.top + window.top;
    var right = left + width;
    var bottom = top + height;
    return { width: width, height: height, left: left, top: top, right: right, bottom: bottom };
}
export function getElementDimensions(element) {
    var rect = element.getBoundingClientRect();
    var width = rect.width;
    var height = rect.height;
    return { width: width, height: height };
}
var reverseDirectionMap = {
    left: "right",
    right: "left",
    top: "bottom",
    bottom: "top",
};
var dimensionMap = {
    left: "width",
    right: "width",
    top: "height",
    bottom: "height",
};
export function calculateMenuPosition(_a) {
    var _b;
    var toggler = _a.toggler, viewport = _a.viewport, menu = _a.menu, _c = _a.alignment, alignment = _c === void 0 ? ["right", "bottom"] : _c, _d = _a.spacing, spacing = _d === void 0 ? 0 : _d, _e = _a.offset, offset = _e === void 0 ? 0 : _e, _f = _a.topLevelMenu, topLevelMenu = _f === void 0 ? true : _f;
    var sharedArguments = { toggler: toggler, viewport: viewport, menu: menu, spacing: spacing, offset: offset };
    var _g = __read(alignment, 2), directionPreferredPrimary = _g[0], directionPrefferedSecondary = _g[1];
    var _h = __read(calculatePositionForDirection(__assign(__assign({}, sharedArguments), { direction: directionPreferredPrimary, isPrimaryDimension: true })), 2), primaryCoordinateDirection = _h[0], primaryCoordinate = _h[1];
    var _j = __read(calculatePositionForDirection(__assign(__assign({}, sharedArguments), { direction: directionPrefferedSecondary, isPrimaryDimension: false })), 2), secondaryCoordinateDirection = _j[0], secondaryCoordinate = _j[1];
    var coordinates = (_b = {},
        _b[primaryCoordinateDirection] = primaryCoordinate,
        _b[secondaryCoordinateDirection] = secondaryCoordinate,
        _b);
    // Convert from left/right+top/bottom coordinates to left+top coordinates
    var res = {
        left: typeof coordinates.left === "number"
            ? coordinates.left
            : toggler.width - menu.width - coordinates.right,
        top: typeof coordinates.top === "number"
            ? coordinates.top
            : toggler.height - menu.height - coordinates.bottom,
    };
    // Returned coordinates are relative to toggler.
    //   - Submenus are positioned relative to the toggler, so we do not do anything.
    //   - Top menu is inside portal positioned relative to the page, so we convert
    //     from coords relative to toggler to coords relative to page.
    if (topLevelMenu) {
        res.left += toggler.left;
        res.top += toggler.top;
    }
    return res;
}
function calculatePositionForDirection(_a) {
    // Toggler and viewport coordinates are absolute to the page.
    // Returned coordinates are relative to the toggler.
    var toggler = _a.toggler, viewport = _a.viewport, menu = _a.menu, direction = _a.direction, spacing = _a.spacing, offset = _a.offset, isPrimaryDimension = _a.isPrimaryDimension;
    var directionReverse = reverseDirectionMap[direction];
    var dimension = dimensionMap[direction];
    var directionBottomRight = direction === "bottom" || direction === "right";
    var directionBottomRightMultiplier = directionBottomRight ? 1 : -1;
    var secondaryDimensionAdjust = isPrimaryDimension ? 0 : toggler[dimension];
    var spacingAdjust = isPrimaryDimension ? spacing : 0;
    var offsetAdjust = isPrimaryDimension ? 0 : offset;
    // Primary space is size of the ideal position on the screen.
    // eg.: for direction = "right" primary space would be space between
    // toggler right and viewport right.
    var primarySpace = viewport[direction] - toggler[direction];
    primarySpace = primarySpace + secondaryDimensionAdjust * directionBottomRightMultiplier;
    primarySpace = primarySpace * directionBottomRightMultiplier;
    primarySpace = primarySpace - spacingAdjust;
    primarySpace = primarySpace - offsetAdjust;
    primarySpace = Math.max(0, primarySpace);
    var fitsInPrimarySpace = menu[dimension] <= primarySpace;
    if (fitsInPrimarySpace) {
        // eg.: direction = "right"
        //  menu left side is placed to right side of toggler
        //  menu.left = toggler.width
        var distance_1 = toggler[dimension] - secondaryDimensionAdjust + spacingAdjust + offsetAdjust;
        return [directionReverse, distance_1];
    }
    var secondarySpace = toggler[directionReverse] - viewport[directionReverse];
    secondarySpace = secondarySpace + secondaryDimensionAdjust * directionBottomRightMultiplier;
    secondarySpace = secondarySpace * directionBottomRightMultiplier;
    secondarySpace = secondarySpace - spacingAdjust;
    secondarySpace = secondarySpace - offsetAdjust;
    secondarySpace = Math.max(0, secondarySpace);
    var fitsInSecondarySpace = menu[dimension] <= secondarySpace;
    if (fitsInSecondarySpace) {
        // eg.: direction = "right"
        //  menu right side is placed to left side of toggler
        //  menu.left = -menu.width
        var distance_2 = -menu[dimension] + secondaryDimensionAdjust - spacingAdjust - offsetAdjust;
        return [directionReverse, distance_2];
    }
    var doesNotFitInViewport = menu[dimension] > viewport[dimension];
    if (doesNotFitInViewport) {
        // eg.: direction = "right"
        //  menu left side is always placed to left side of viewport
        //  menu.left = viewport.left - menu.left
        var distance_3 = (viewport[directionReverse] - toggler[directionReverse]) * directionBottomRightMultiplier;
        return [directionReverse, distance_3];
    }
    // eg.: direction = "right"
    //  menu right is placed to the same viewport side
    //  menu.right = toggler.right - menu.right
    var distance = (toggler[direction] - viewport[direction]) * directionBottomRightMultiplier;
    return [direction, distance];
}
//# sourceMappingURL=positioningCalculations.js.map
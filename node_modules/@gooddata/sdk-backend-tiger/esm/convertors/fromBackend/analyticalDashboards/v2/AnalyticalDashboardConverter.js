import { __assign } from "tslib";
import { walkLayout, } from "@gooddata/sdk-backend-spi";
import { idRef } from "@gooddata/sdk-model";
import updateWith from "lodash/updateWith";
import { cloneWithSanitizedIds } from "../../IdSanitization";
import { isInheritedObject } from "../../utils";
import { fixWidgetLegacyElementUris } from "../../fixLegacyElementUris";
function setWidgetRefsInLayout(layout) {
    if (!layout) {
        return;
    }
    var widgetsPaths = [];
    walkLayout(layout, {
        widgetCallback: function (_, widgetPath) { return widgetsPaths.push(widgetPath); },
    });
    return widgetsPaths.reduce(function (layout, widgetPath, index) {
        return updateWith(layout, widgetPath, function (widget) {
            var temporaryWidgetId = widget.insight.identifier + "_widget-" + index;
            var convertedWidget = __assign(__assign({}, widget), { ref: idRef(temporaryWidgetId), uri: temporaryWidgetId, identifier: temporaryWidgetId });
            return fixWidgetLegacyElementUris(convertedWidget);
        });
    }, layout);
}
function convertDashboardPluginLink(pluginLink) {
    return {
        type: "IDashboardPluginLink",
        plugin: cloneWithSanitizedIds(pluginLink.plugin),
        parameters: pluginLink.parameters,
    };
}
function getConvertedAnalyticalDashboardContent(analyticalDashboard) {
    var _a;
    return {
        dateFilterConfig: cloneWithSanitizedIds(analyticalDashboard.dateFilterConfig),
        layout: setWidgetRefsInLayout(cloneWithSanitizedIds(analyticalDashboard.layout)),
        plugins: (_a = analyticalDashboard.plugins) === null || _a === void 0 ? void 0 : _a.map(convertDashboardPluginLink),
    };
}
export function convertDashboard(analyticalDashboard, filterContext) {
    var _a;
    var _b = analyticalDashboard.data, id = _b.id, _c = _b.attributes, attributes = _c === void 0 ? {} : _c;
    var _d = attributes.title, title = _d === void 0 ? "" : _d, _e = attributes.description, description = _e === void 0 ? "" : _e, content = attributes.content;
    var _f = getConvertedAnalyticalDashboardContent(content), dateFilterConfig = _f.dateFilterConfig, layout = _f.layout, plugins = _f.plugins;
    return {
        type: "IDashboard",
        ref: idRef(id, "analyticalDashboard"),
        identifier: id,
        uri: analyticalDashboard.links.self,
        title: title,
        description: description,
        created: "",
        updated: "",
        // TODO: TIGER-HACK: inherited objects must be locked; they are read-only for all
        isLocked: isInheritedObject(id),
        shareStatus: "public",
        isUnderStrictControl: true,
        tags: (_a = attributes.tags) !== null && _a !== void 0 ? _a : [],
        filterContext: filterContext,
        dateFilterConfig: dateFilterConfig,
        layout: layout,
        plugins: plugins,
    };
}
export function convertFilterContextFromBackend(filterContext) {
    var _a = filterContext.data, id = _a.id, type = _a.type, attributes = _a.attributes;
    var _b = attributes, _c = _b.title, title = _c === void 0 ? "" : _c, _d = _b.description, description = _d === void 0 ? "" : _d, content = _b.content;
    return {
        ref: idRef(id, type),
        identifier: id,
        uri: filterContext.links.self,
        title: title,
        description: description,
        filters: convertFilterContextFilters(content),
    };
}
export function convertFilterContextFilters(content) {
    return cloneWithSanitizedIds(content.filters);
}
export function convertDashboardPlugin(plugin) {
    var _a = plugin.data, id = _a.id, type = _a.type, attributes = _a.attributes;
    var _b = attributes, _c = _b.title, title = _c === void 0 ? "" : _c, _d = _b.description, description = _d === void 0 ? "" : _d, content = _b.content, tags = _b.tags;
    var url = content.url;
    return {
        ref: idRef(id, type),
        identifier: id,
        uri: plugin.links.self,
        name: title,
        description: description,
        tags: tags !== null && tags !== void 0 ? tags : [],
        type: "IDashboardPlugin",
        url: url,
    };
}
export function convertDashboardPluginWithLinks(plugin) {
    var id = plugin.id, type = plugin.type, attributes = plugin.attributes;
    var _a = attributes, _b = _a.title, title = _b === void 0 ? "" : _b, _c = _a.description, description = _c === void 0 ? "" : _c, content = _a.content, tags = _a.tags;
    var url = content.url;
    return {
        ref: idRef(id, type),
        identifier: id,
        uri: plugin.links.self,
        name: title,
        description: description,
        tags: tags !== null && tags !== void 0 ? tags : [],
        type: "IDashboardPlugin",
        url: url,
    };
}
//# sourceMappingURL=AnalyticalDashboardConverter.js.map
import { __assign, __extends } from "tslib";
// (C) 2020 GoodData Corporation
import React from "react";
import { injectIntl } from "react-intl";
import { IntlWrapper } from "@gooddata/sdk-ui";
import { PresetType } from "./typings";
import { PresetsDropdown } from "./presetsDropdown/PresetsDropdown";
import { CustomFormatDialog } from "./customFormatDialog/CustomFormatDialog";
export var CUSTOM_FORMAT_PRESET_LOCAL_IDENTIFIER = "customFormat";
var WrappedMeasureNumberFormat = /** @class */ (function (_super) {
    __extends(WrappedMeasureNumberFormat, _super);
    function WrappedMeasureNumberFormat(props) {
        var _this = _super.call(this, props) || this;
        _this.findSelectedPreset = function () {
            return _this.props.presets.find(function (preset) { return preset.format === _this.props.selectedFormat; }) ||
                _this.getCustomFormatPreset();
        };
        _this.toggleDropdownOpened = function (e) {
            _this.toggleButtonEl = e.currentTarget;
            _this.setState(function (state) { return (__assign(__assign({}, state), { showDropdown: !state.showDropdown })); });
            _this.toggleCustomFormatDialog();
        };
        _this.closeDropdown = function () {
            _this.setState({ showDropdown: false });
        };
        _this.toggleCustomFormatDialog = function (open) {
            if (open === void 0) { open = false; }
            _this.setState({
                showCustomFormatDialog: open,
            });
        };
        _this.onCustomFormatDialogApply = function (format) {
            _this.toggleCustomFormatDialog(false);
            _this.setState({
                selectedPreset: _this.getCustomFormatPreset(),
            });
            _this.props.setFormat(format);
        };
        _this.onCustomFormatDialogCancel = function () {
            _this.toggleCustomFormatDialog(false);
        };
        _this.onSelect = function (selectedPreset) {
            var setFormat = _this.props.setFormat;
            _this.closeDropdown();
            if (_this.isCustomPreset(selectedPreset)) {
                _this.toggleCustomFormatDialog(true);
            }
            else {
                _this.setState(function (state) { return (__assign(__assign({}, state), { selectedPreset: selectedPreset })); });
                setFormat(selectedPreset.format);
            }
        };
        _this.isCustomPreset = function (_a) {
            var localIdentifier = _a.localIdentifier, type = _a.type;
            return localIdentifier === CUSTOM_FORMAT_PRESET_LOCAL_IDENTIFIER && type === PresetType.CUSTOM_FORMAT;
        };
        _this.getCustomFormatPreset = function () { return ({
            name: _this.props.intl.formatMessage({ id: "measureNumberFormat.custom.optionLabel" }),
            localIdentifier: CUSTOM_FORMAT_PRESET_LOCAL_IDENTIFIER,
            format: null,
            previewNumber: null,
            type: PresetType.CUSTOM_FORMAT,
        }); };
        _this.state = {
            selectedPreset: _this.findSelectedPreset(),
            showDropdown: false,
            showCustomFormatDialog: false,
        };
        return _this;
    }
    WrappedMeasureNumberFormat.prototype.render = function () {
        var _a = this.props, ToggleButton = _a.toggleButton, anchorElementSelector = _a.anchorElementSelector, presets = _a.presets, separators = _a.separators, selectedFormat = _a.selectedFormat, defaultCustomFormat = _a.defaultCustomFormat, presetsDropdownPositioning = _a.presetsDropdownPositioning, customFormatDialogPositioning = _a.customFormatDialogPositioning, documentationLink = _a.documentationLink, templates = _a.templates, intl = _a.intl;
        var _b = this.state, showDropdown = _b.showDropdown, showCustomFormatDialog = _b.showCustomFormatDialog, selectedPreset = _b.selectedPreset;
        var buttonText = intl.formatMessage({ id: "measureNumberFormat.buttonLabel" }, { selectedFormatPresetName: selectedPreset.name });
        var anchorEl = anchorElementSelector || this.toggleButtonEl;
        var customPreset = this.getCustomFormatPreset();
        return (React.createElement(React.Fragment, null,
            React.createElement(ToggleButton, { text: buttonText, isOpened: showDropdown || showCustomFormatDialog, toggleDropdown: this.toggleDropdownOpened, selectedPreset: selectedPreset }),
            showDropdown && (React.createElement(PresetsDropdown, { presets: presets, customPreset: customPreset, separators: separators, selectedPreset: selectedPreset, onSelect: this.onSelect, onClose: this.closeDropdown, anchorEl: anchorEl, positioning: presetsDropdownPositioning, intl: intl })),
            showCustomFormatDialog && (React.createElement(CustomFormatDialog, { onApply: this.onCustomFormatDialogApply, onCancel: this.onCustomFormatDialogCancel, formatString: selectedFormat || defaultCustomFormat, separators: separators, anchorEl: anchorEl, positioning: customFormatDialogPositioning, documentationLink: documentationLink, templates: templates, intl: intl }))));
    };
    return WrappedMeasureNumberFormat;
}(React.PureComponent));
var MeasureNumberFormatWithIntl = injectIntl(WrappedMeasureNumberFormat);
/**
 * @internal
 */
var MeasureNumberFormat = /** @class */ (function (_super) {
    __extends(MeasureNumberFormat, _super);
    function MeasureNumberFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MeasureNumberFormat.prototype.render = function () {
        return (React.createElement(IntlWrapper, { locale: this.props.locale },
            React.createElement(MeasureNumberFormatWithIntl, __assign({}, this.props))));
    };
    return MeasureNumberFormat;
}(React.PureComponent));
export { MeasureNumberFormat };
//# sourceMappingURL=MeasureNumberFormat.js.map
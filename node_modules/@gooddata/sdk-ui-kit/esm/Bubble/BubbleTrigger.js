import { __assign, __extends, __rest } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React from "react";
import cx from "classnames";
import uniqueId from "lodash/uniqueId";
import pickBy from "lodash/pickBy";
/**
 * @internal
 */
var BubbleTrigger = /** @class */ (function (_super) {
    __extends(BubbleTrigger, _super);
    function BubbleTrigger() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            bubbleId: uniqueId("bubble-"),
            isBubbleVisible: false,
        };
        _this.onClose = function () {
            _this.changeBubbleVisibility(false);
        };
        return _this;
    }
    BubbleTrigger.prototype.eventListeners = function () {
        return {};
    };
    BubbleTrigger.prototype.changeBubbleVisibility = function (active) {
        this.setState({ isBubbleVisible: active });
    };
    BubbleTrigger.prototype.render = function () {
        var _a;
        var _b = this.props, children = _b.children, eventsOnBubble = _b.eventsOnBubble, className = _b.className, tagName = _b.tagName, others = __rest(_b, ["children", "eventsOnBubble", "className", "tagName"]);
        var dataAttributes = pickBy(others, function (_, key) { return key.startsWith("data-"); });
        var classNames = cx("gd-bubble-trigger", className, (_a = {},
            _a[this.state.bubbleId] = true,
            _a));
        var TagName = tagName;
        var BubbleElement;
        var WrappedTrigger;
        React.Children.map(children, function (child) {
            if (child) {
                if (child.type && child.type.identifier === "Bubble") {
                    BubbleElement = child;
                }
                else {
                    WrappedTrigger = child;
                }
            }
        });
        var bubbleProps = __assign(__assign({}, (eventsOnBubble ? this.eventListeners() : {})), { alignTo: "." + this.state.bubbleId, onClose: this.onClose });
        var BubbleOverlay = this.state.isBubbleVisible && BubbleElement ? React.cloneElement(BubbleElement, bubbleProps) : "";
        return (React.createElement(React.Fragment, null,
            React.createElement(TagName, __assign({}, dataAttributes, this.eventListeners(), { className: classNames }), WrappedTrigger),
            BubbleOverlay));
    };
    BubbleTrigger.defaultProps = {
        className: "",
        children: false,
        eventsOnBubble: false,
        tagName: "span",
    };
    return BubbleTrigger;
}(React.PureComponent));
export { BubbleTrigger };
//# sourceMappingURL=BubbleTrigger.js.map
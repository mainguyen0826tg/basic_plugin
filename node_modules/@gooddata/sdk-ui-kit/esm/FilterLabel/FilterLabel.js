import { __extends } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { createRef } from "react";
import { injectIntl } from "react-intl";
var WrappedFilterLabel = /** @class */ (function (_super) {
    __extends(WrappedFilterLabel, _super);
    function WrappedFilterLabel(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { hasEllipsis: false };
        _this.labelRef = createRef();
        return _this;
    }
    WrappedFilterLabel.prototype.componentDidMount = function () {
        this.checkEllipsis();
    };
    WrappedFilterLabel.prototype.componentDidUpdate = function () {
        this.checkEllipsis();
    };
    WrappedFilterLabel.prototype.getIsDate = function () {
        return this.props.isDate;
    };
    WrappedFilterLabel.prototype.isAllSelected = function () {
        return this.props.isAllSelected;
    };
    WrappedFilterLabel.prototype.checkEllipsis = function () {
        var _a = this.labelRef.current, offsetWidth = _a.offsetWidth, scrollWidth = _a.scrollWidth;
        // for some reason, IE11 returns offsetWidth = scrollWidth - 1 even when there is no ellipsis
        var hasEllipsis = offsetWidth < scrollWidth - 1;
        if (hasEllipsis !== this.state.hasEllipsis) {
            this.setState({ hasEllipsis: hasEllipsis });
        }
    };
    WrappedFilterLabel.prototype.renderSelectionLabel = function (content) {
        return React.createElement("span", { className: "count s-total-count" }, content);
    };
    WrappedFilterLabel.prototype.renderSelection = function () {
        if (!this.getIsDate() && !this.props.noData) {
            var _a = this.props, selectionSize = _a.selectionSize, intl = _a.intl;
            if (this.isAllSelected()) {
                return this.renderSelectionLabel(intl.formatMessage({ id: "gs.filterLabel.all" }));
            }
            if (selectionSize === 0) {
                return this.renderSelectionLabel(intl.formatMessage({ id: "gs.filterLabel.none" }));
            }
            if (this.state.hasEllipsis && selectionSize > 0) {
                return this.renderSelectionLabel("(" + selectionSize + ")");
            }
        }
        return false;
    };
    WrappedFilterLabel.prototype.renderTitle = function () {
        return [
            React.createElement("span", { className: "filter-label-title", key: "title", title: this.props.title }, this.props.title),
            this.isAllSelected() && !this.getIsDate() && !this.props.noData ? (React.createElement("span", { key: "title-colon" }, ": ")) : (false),
        ];
    };
    WrappedFilterLabel.prototype.renderSelectedElements = function () {
        if (!this.props.selection || this.isAllSelected()) {
            return false;
        }
        return [
            React.createElement("span", { key: "selection-colon" }, ": "),
            React.createElement("span", { className: "filter-label-selection", key: "selection" }, this.props.selection),
        ];
    };
    WrappedFilterLabel.prototype.render = function () {
        return (React.createElement("div", { className: "adi-attribute-filter-label s-attribute-filter-label" },
            React.createElement("span", { className: "label", ref: this.labelRef },
                this.renderTitle(),
                this.renderSelectedElements()),
            this.renderSelection()));
    };
    WrappedFilterLabel.defaultProps = {
        isAllSelected: false,
        isDate: false,
        selection: "",
        noData: false,
    };
    return WrappedFilterLabel;
}(React.PureComponent));
/**
 * @internal
 */
export var FilterLabel = injectIntl(WrappedFilterLabel);
//# sourceMappingURL=FilterLabel.js.map
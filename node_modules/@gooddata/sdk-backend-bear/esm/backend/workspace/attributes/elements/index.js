import { __assign, __awaiter, __generator } from "tslib";
import { filterObjRef, isAttributeFilter, filterAttributeElements, isAttributeElementsByRef, isRelativeDateFilter, } from "@gooddata/sdk-model";
import invariant from "ts-invariant";
import { objRefToUri, getObjectIdFromUri } from "../../../../utils/api";
import { LimitingAfmFactory } from "./limitingAfmFactory";
import { enhanceWithAll, InMemoryPaging } from "@gooddata/sdk-backend-base";
var BearWorkspaceElements = /** @class */ (function () {
    function BearWorkspaceElements(authCall, workspace) {
        this.authCall = authCall;
        this.workspace = workspace;
    }
    BearWorkspaceElements.prototype.forDisplayForm = function (ref) {
        return new BearWorkspaceElementsQuery(this.authCall, ref, this.workspace);
    };
    BearWorkspaceElements.prototype.forFilter = function (filter, dateFilterDisplayForm) {
        return new BearWorkspaceFilterElementsQuery(this.authCall, filter, dateFilterDisplayForm, this.workspace);
    };
    return BearWorkspaceElements;
}());
export { BearWorkspaceElements };
var BearWorkspaceElementsQuery = /** @class */ (function () {
    function BearWorkspaceElementsQuery(authCall, displayFormRef, workspace) {
        this.authCall = authCall;
        this.displayFormRef = displayFormRef;
        this.workspace = workspace;
        this.limit = 50;
        this.offset = 0;
    }
    BearWorkspaceElementsQuery.prototype.withLimit = function (limit) {
        invariant(limit > 0, "limit must be a positive number, got: " + limit);
        this.limit = limit;
        return this;
    };
    BearWorkspaceElementsQuery.prototype.withOffset = function (offset) {
        this.offset = offset;
        return this;
    };
    BearWorkspaceElementsQuery.prototype.withAttributeFilters = function (filters) {
        this.attributeFilters = filters;
        return this;
    };
    BearWorkspaceElementsQuery.prototype.withDateFilters = function (filters) {
        this.dateFilters = filters;
        return this;
    };
    BearWorkspaceElementsQuery.prototype.withMeasures = function (measures) {
        this.measures = measures.length > 0 ? measures : undefined;
        return this;
    };
    BearWorkspaceElementsQuery.prototype.withOptions = function (options) {
        this.options = options;
        return this;
    };
    BearWorkspaceElementsQuery.prototype.query = function () {
        return __awaiter(this, void 0, void 0, function () {
            var limitingAfmFactory, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        limitingAfmFactory = new LimitingAfmFactory(this.authCall, this.displayFormRef, this.workspace);
                        _a = this;
                        return [4 /*yield*/, limitingAfmFactory.getAfm(this.attributeFilters, this.measures, this.dateFilters)];
                    case 1:
                        _a.limitingAfm = _b.sent();
                        return [2 /*return*/, this.queryWorker(this.offset, this.limit, this.options)];
                }
            });
        });
    };
    BearWorkspaceElementsQuery.prototype.getObjectId = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.objectId) return [3 /*break*/, 2];
                        return [4 /*yield*/, objRefToUri(this.displayFormRef, this.workspace, this.authCall)];
                    case 1:
                        uri = _a.sent();
                        this.objectId = getObjectIdFromUri(uri);
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.objectId];
                }
            });
        });
    };
    BearWorkspaceElementsQuery.prototype.queryWorker = function (offset, limit, options) {
        return __awaiter(this, void 0, void 0, function () {
            var mergedOptions, objectId, data, _a, items, paging, total, serverOffset, count, hasNextPage, goTo, emptyResult;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        mergedOptions = __assign(__assign({}, options), { limit: limit, offset: offset, afm: this.limitingAfm });
                        return [4 /*yield*/, this.getObjectId()];
                    case 1:
                        objectId = _b.sent();
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.getValidElements(_this.workspace, objectId, mergedOptions);
                            })];
                    case 2:
                        data = _b.sent();
                        _a = data.validElements, items = _a.items, paging = _a.paging;
                        total = Number.parseInt(paging.total, 10);
                        serverOffset = Number.parseInt(paging.offset, 10);
                        count = paging.count;
                        hasNextPage = serverOffset + count < total;
                        goTo = function (pageIndex) { return _this.queryWorker(pageIndex * count, limit, options); };
                        emptyResult = enhanceWithAll({
                            items: [],
                            limit: count,
                            offset: total,
                            totalCount: total,
                            next: function () { return Promise.resolve(emptyResult); },
                            goTo: goTo,
                        });
                        return [2 /*return*/, enhanceWithAll({
                                items: items.map(function (element) { return element.element; }),
                                limit: count,
                                offset: serverOffset,
                                totalCount: total,
                                next: hasNextPage
                                    ? function () { return _this.queryWorker(offset + count, limit, options); }
                                    : function () { return Promise.resolve(emptyResult); },
                                goTo: goTo,
                            })];
                }
            });
        });
    };
    return BearWorkspaceElementsQuery;
}());
var BearWorkspaceFilterElementsQuery = /** @class */ (function () {
    function BearWorkspaceFilterElementsQuery(authCall, filter, dateDf, workspace) {
        this.authCall = authCall;
        this.filter = filter;
        this.workspace = workspace;
        this.limit = 50;
        this.offset = 0;
        var ref = filterObjRef(filter);
        if (isRelativeDateFilter(filter)) {
            invariant(dateDf, "Date filter's display form needs to be defined");
            ref = dateDf;
        }
        this.elementsQuery = new BearWorkspaceElementsQuery(this.authCall, ref, this.workspace);
    }
    // eslint-disable-next-line sonarjs/no-identical-functions
    BearWorkspaceFilterElementsQuery.prototype.withLimit = function (limit) {
        invariant(limit > 0, "limit must be a positive number, got: " + limit);
        this.limit = limit;
        return this;
    };
    BearWorkspaceFilterElementsQuery.prototype.withOffset = function (offset) {
        this.offset = offset;
        return this;
    };
    BearWorkspaceFilterElementsQuery.prototype.query = function () {
        return __awaiter(this, void 0, void 0, function () {
            var selectedElements;
            return __generator(this, function (_a) {
                if (isAttributeFilter(this.filter)) {
                    selectedElements = filterAttributeElements(this.filter);
                    if (isAttributeElementsByRef(selectedElements)) {
                        return [2 /*return*/, this.resultForElementsByRef(selectedElements)];
                    }
                    return [2 /*return*/, this.resultForElementsByValue(selectedElements)];
                }
                else {
                    return [2 /*return*/, this.elementsQuery.withDateFilters([this.filter]).query()];
                }
                return [2 /*return*/];
            });
        });
    };
    BearWorkspaceFilterElementsQuery.prototype.resultForElementsByRef = function (selectedElements) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (selectedElements.uris.length) {
                    return [2 /*return*/, this.elementsQuery
                            .withOptions({
                            uris: selectedElements.uris,
                        })
                            .withOffset(this.offset)
                            .withLimit(this.limit)
                            .query()];
                }
                // Filter with empty selection resolves to empty values
                return [2 /*return*/, Promise.resolve(new InMemoryPaging([], this.limit, this.offset))];
            });
        });
    };
    BearWorkspaceFilterElementsQuery.prototype.resultForElementsByValue = function (selectedElements) {
        return __awaiter(this, void 0, void 0, function () {
            var items;
            return __generator(this, function (_a) {
                items = selectedElements.values.map(function (element) { return ({
                    title: element,
                    uri: element,
                }); });
                return [2 /*return*/, Promise.resolve(new InMemoryPaging(items, this.limit, this.offset))];
            });
        });
    };
    return BearWorkspaceFilterElementsQuery;
}());
//# sourceMappingURL=index.js.map
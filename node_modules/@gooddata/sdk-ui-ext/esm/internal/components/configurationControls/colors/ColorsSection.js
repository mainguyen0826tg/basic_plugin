import { __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import set from "lodash/set";
import cloneDeep from "lodash/cloneDeep";
import { injectIntl } from "react-intl";
import { Button } from "@gooddata/sdk-ui-kit";
import cx from "classnames";
import ConfigSection from "../../configurationControls/ConfigSection";
import ColoredItemsList from "./coloredItemsList/ColoredItemsList";
import { getTranslation } from "../../../utils/translations";
import { getColoredInputItems, getProperties } from "../../../utils/colors";
export var COLOR_MAPPING_CHANGED = "COLOR_MAPPING_CHANGED";
var ColorsSection = /** @class */ (function (_super) {
    __extends(ColorsSection, _super);
    function ColorsSection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onSelect = function (selectedColorItem, color) {
            var _a = _this.props, properties = _a.properties, pushData = _a.pushData;
            var mappingHeader = selectedColorItem.mappingHeader;
            var result = getProperties(properties, mappingHeader, color);
            var message = {
                messageId: COLOR_MAPPING_CHANGED,
                properties: result,
            };
            pushData(message);
        };
        _this.onResetColors = function () {
            var _a = _this.props, properties = _a.properties, pushData = _a.pushData;
            if (_this.isDefaultColorMapping()) {
                return;
            }
            var propertiesWithoutColorMapping = set(cloneDeep(properties), "controls.colorMapping", undefined);
            var message = {
                messageId: COLOR_MAPPING_CHANGED,
                properties: propertiesWithoutColorMapping,
                references: {},
            };
            pushData(message);
        };
        return _this;
    }
    ColorsSection.prototype.render = function () {
        var _a = this.props, pushData = _a.pushData, propertiesMeta = _a.propertiesMeta;
        return (React.createElement(ConfigSection, { title: "properties.colors", pushData: pushData, propertiesMeta: propertiesMeta, id: "colors_section", className: "adi-color-configuration" }, this.renderSectionContents()));
    };
    ColorsSection.prototype.isColoredListVisible = function () {
        var _a = this.props, colors = _a.colors, hasMeasures = _a.hasMeasures, controlsDisabled = _a.controlsDisabled, isLoading = _a.isLoading;
        return isLoading || (!controlsDisabled && colors && colors.colorPalette && hasMeasures);
    };
    ColorsSection.prototype.renderResetButton = function () {
        var controlsDisabled = this.props.controlsDisabled;
        var isDisabled = controlsDisabled || this.isDefaultColorMapping();
        var classes = cx("gd-color-reset-colors-section", {
            disabled: isDisabled,
        });
        return (React.createElement("div", { className: classes },
            React.createElement(Button, { value: getTranslation("properties.colors.reset-colors", this.props.intl), className: "gd-button-link s-reset-colors-button", onClick: this.onResetColors, disabled: isDisabled })));
    };
    ColorsSection.prototype.renderColoredList = function () {
        var _a = this.props, colors = _a.colors, showCustomPicker = _a.showCustomPicker, controlsDisabled = _a.controlsDisabled, isLoading = _a.isLoading;
        var inputItems = getColoredInputItems(colors);
        var colorPalette = colors && colors.colorPalette ? colors.colorPalette : [];
        return (React.createElement("div", null,
            React.createElement(ColoredItemsList, { colorPalette: colorPalette, inputItems: inputItems, onSelect: this.onSelect, showCustomPicker: showCustomPicker, disabled: controlsDisabled, isLoading: isLoading }),
            this.renderResetButton()));
    };
    ColorsSection.prototype.isDefaultColorMapping = function () {
        var _a, _b;
        var properties = this.props.properties;
        var colorMapping = (_b = (_a = properties === null || properties === void 0 ? void 0 : properties.controls) === null || _a === void 0 ? void 0 : _a.colorMapping) !== null && _b !== void 0 ? _b : [];
        return !colorMapping || colorMapping.length === 0;
    };
    ColorsSection.prototype.renderUnsupportedColoredList = function () {
        return (React.createElement("div", { className: "gd-color-unsupported" }, getTranslation("properties.colors.unsupported", this.props.intl)));
    };
    ColorsSection.prototype.renderSectionContents = function () {
        return this.isColoredListVisible() ? this.renderColoredList() : this.renderUnsupportedColoredList();
    };
    return ColorsSection;
}(React.Component));
export default injectIntl(ColorsSection);
//# sourceMappingURL=ColorsSection.js.map
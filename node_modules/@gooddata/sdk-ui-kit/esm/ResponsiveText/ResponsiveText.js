import { __read } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { useLayoutEffect, useRef, useState } from "react";
import debounce from "lodash/debounce";
import isNumber from "lodash/isNumber";
/**
 * @internal
 */
export var ResponsiveText = function (_a) {
    var _b = _a.tagName, Tag = _b === void 0 ? "div" : _b, tagClassName = _a.tagClassName, title = _a.title, children = _a.children, _c = _a.windowResizeRefreshDelay, windowResizeRefreshDelay = _c === void 0 ? 50 : _c, _d = _a.window, windowInstance = _d === void 0 ? window : _d;
    var _e = __read(useState(null), 2), fontSize = _e[0], setFontSize = _e[1];
    var containerRef = useRef();
    var adjustFontSize = function () {
        if (!containerRef.current) {
            return;
        }
        var currentStyle = windowInstance.getComputedStyle(containerRef.current, null);
        var currentFontSize = parseFloat(currentStyle.fontSize);
        if (isNumber(currentFontSize)) {
            var scrollWidth = containerRef.current.scrollWidth;
            var width = containerRef.current.getBoundingClientRect().width;
            var ratio = Math.round(width) / scrollWidth;
            var size = Math.floor(currentFontSize * ratio);
            setFontSize(size);
        }
    };
    useLayoutEffect(function () {
        var handleWindowResize = debounce(function () {
            // reset font size so that we can read the default fontSize in adjustFontSize later
            setFontSize(null);
        }, windowResizeRefreshDelay);
        windowInstance.addEventListener("resize", handleWindowResize);
        return function () { return windowInstance.removeEventListener("resize", handleWindowResize); };
    }, [windowResizeRefreshDelay]);
    useLayoutEffect(function () {
        // reset font size so that we can read the default fontSize in adjustFontSize later
        setFontSize(null);
    }, [children, tagClassName]);
    useLayoutEffect(function () {
        if (!fontSize) {
            // then adjust the font again
            adjustFontSize();
        }
    }, [fontSize]);
    return (React.createElement(Tag, { className: tagClassName, ref: containerRef, style: fontSize ? { fontSize: fontSize + "px" } : undefined, title: title }, children));
};
//# sourceMappingURL=ResponsiveText.js.map
// (C) 2019 GoodData Corporation
import React from "react";
import { withExecution } from "./withExecution";
import isEqual from "lodash/isEqual";
var CoreExecutor = function (props) {
    var children = props.children, error = props.error, isLoading = props.isLoading, reload = props.reload, result = props.result, LoadingComponent = props.LoadingComponent, ErrorComponent = props.ErrorComponent;
    if (ErrorComponent && error) {
        return React.createElement(ErrorComponent, { error: error });
    }
    if (LoadingComponent && isLoading) {
        return React.createElement(LoadingComponent, null);
    }
    if (LoadingComponent && ErrorComponent && !result) {
        return null;
    }
    return children({
        error: error,
        isLoading: isLoading,
        reload: reload,
        result: result,
    });
};
function exportTitle(props) {
    return props.exportTitle || "RawExecute";
}
/**
 * Raw executor is the most basic React component to drive custom executions to obtain
 * data from backends.
 *
 * The component accepts an instance of prepared execution and drives all the necessary
 * APIs and boilerplate needed to obtain a {@link DataViewFacade}.
 * Note that if the resulting data is empty this will NOT throw a {@link @gooddata/sdk-backend-spi#NoDataError}.
 * It is the responsibility of the child component to handle that if they need to.
 *
 * The rendering is delegated to a child component. This will be called every time the
 * state of the loading changes.
 *
 * @public
 */
export var RawExecute = withExecution({
    exportTitle: exportTitle,
    execution: function (props) { return props.execution; },
    events: function (props) {
        var onError = props.onError, onLoadingChanged = props.onLoadingChanged, onLoadingFinish = props.onLoadingFinish, onLoadingStart = props.onLoadingStart, onExportReady = props.onExportReady;
        return {
            onError: onError,
            onLoadingChanged: onLoadingChanged,
            onLoadingFinish: onLoadingFinish,
            onLoadingStart: onLoadingStart,
            onExportReady: onExportReady,
        };
    },
    shouldRefetch: function (prevProps, nextProps) {
        var relevantProps = [
            "onError",
            "onLoadingChanged",
            "onLoadingFinish",
            "onLoadingStart",
        ];
        var relevantPropsDeepEqual = ["window"];
        return (relevantProps.some(function (propName) { return prevProps[propName] !== nextProps[propName]; }) ||
            relevantPropsDeepEqual.some(function (propName) { return !isEqual(prevProps[propName], nextProps[propName]); }) ||
            prevProps.execution.fingerprint() !== nextProps.execution.fingerprint());
    },
    loadOnMount: function (props) {
        var _a = props.loadOnMount, loadOnMount = _a === void 0 ? true : _a;
        return loadOnMount;
    },
    window: function (props) { return props.window; },
})(CoreExecutor);
//# sourceMappingURL=RawExecute.js.map
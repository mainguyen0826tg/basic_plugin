import { __extends } from "tslib";
// (C) 2007-2019 GoodData Corporation
import React from "react";
import isEqual from "lodash/isEqual";
import isNil from "lodash/isNil";
import noop from "lodash/noop";
import { isAbsoluteDateFilterForm, } from "@gooddata/sdk-backend-spi";
import { canExcludeCurrentPeriod } from "./utils/PeriodExclusion";
import { DateFilterCore } from "./DateFilterCore";
import { validateFilterOption } from "./validation/OptionValidation";
import { isUiRelativeDateFilterForm } from "./interfaces";
import { DEFAULT_DATE_FORMAT } from "./constants/Platform";
import { normalizeSelectedFilterOption } from "./utils/FilterOptionNormalization";
/**
 * {@link https://sdk.gooddata.com/gooddata-ui/docs/date_filter_component.html | DateFilter} is a component for configuring a date filter value.
 *
 * @public
 */
var DateFilter = /** @class */ (function (_super) {
    __extends(DateFilter, _super);
    function DateFilter(props) {
        var _this = _super.call(this, props) || this;
        _this.handleApplyClick = function () {
            var normalizedSelectedFilterOption = normalizeSelectedFilterOption(_this.state.selectedFilterOption);
            _this.props.onApply(normalizedSelectedFilterOption, _this.state.excludeCurrentPeriod);
        };
        _this.onChangesDiscarded = function () {
            _this.setState(function () { return DateFilter.getStateFromProps(_this.props); });
        };
        _this.onCancelClicked = function () {
            _this.props.onCancel();
            _this.onChangesDiscarded();
        };
        _this.onDropdownOpenChanged = function (isOpen) {
            if (isOpen) {
                _this.props.onOpen();
            }
            else {
                _this.props.onClose();
                _this.onChangesDiscarded();
            }
        };
        _this.handleExcludeCurrentPeriodChange = function (excludeCurrentPeriod) {
            _this.setState({ excludeCurrentPeriod: excludeCurrentPeriod });
        };
        _this.handleSelectedFilterOptionChange = function (selectedFilterOption) {
            _this.setState(function (state) {
                return DateFilter.getStateFromSelectedOption(selectedFilterOption, state.excludeCurrentPeriod);
            });
        };
        _this.state = DateFilter.getStateFromProps(props);
        return _this;
    }
    DateFilter.getDerivedStateFromProps = function (nextProps, prevState) {
        if (!isEqual(nextProps.selectedFilterOption, prevState.initSelectedFilterOption) ||
            nextProps.excludeCurrentPeriod !== prevState.initExcludeCurrentPeriod) {
            return DateFilter.getStateFromProps(nextProps);
        }
        return null;
    };
    DateFilter.getStateFromProps = function (props) {
        var canExcludeCurrent = canExcludeCurrentPeriod(props.selectedFilterOption);
        return {
            initSelectedFilterOption: props.selectedFilterOption,
            selectedFilterOption: props.selectedFilterOption,
            initExcludeCurrentPeriod: props.excludeCurrentPeriod,
            excludeCurrentPeriod: canExcludeCurrent ? props.excludeCurrentPeriod : false,
            isExcludeCurrentPeriodEnabled: canExcludeCurrent,
        };
    };
    DateFilter.prototype.componentDidMount = function () {
        DateFilter.checkInitialFilterOption(this.props.selectedFilterOption);
    };
    DateFilter.prototype.render = function () {
        var _a = this.props, customFilterName = _a.customFilterName, dateFilterMode = _a.dateFilterMode, dateFormat = _a.dateFormat, filterOptions = _a.filterOptions, originalSelectedFilterOption = _a.selectedFilterOption, originalExcludeCurrentPeriod = _a.excludeCurrentPeriod, availableGranularities = _a.availableGranularities, isEditMode = _a.isEditMode, locale = _a.locale;
        var _b = this.state, excludeCurrentPeriod = _b.excludeCurrentPeriod, selectedFilterOption = _b.selectedFilterOption, isExcludeCurrentPeriodEnabled = _b.isExcludeCurrentPeriodEnabled;
        return dateFilterMode === "hidden" ? null : (React.createElement(DateFilterCore, { availableGranularities: availableGranularities, customFilterName: customFilterName, dateFormat: dateFormat, disabled: dateFilterMode === "readonly", excludeCurrentPeriod: excludeCurrentPeriod, originalExcludeCurrentPeriod: originalExcludeCurrentPeriod, isExcludeCurrentPeriodEnabled: isExcludeCurrentPeriodEnabled, isEditMode: isEditMode, filterOptions: filterOptions, selectedFilterOption: selectedFilterOption, originalSelectedFilterOption: originalSelectedFilterOption, locale: locale, onApplyClick: this.handleApplyClick, onCancelClick: this.onCancelClicked, onDropdownOpenChanged: this.onDropdownOpenChanged, onExcludeCurrentPeriodChange: this.handleExcludeCurrentPeriodChange, onSelectedFilterOptionChange: this.handleSelectedFilterOptionChange, errors: validateFilterOption(selectedFilterOption) }));
    };
    DateFilter.defaultProps = {
        dateFormat: DEFAULT_DATE_FORMAT,
        isEditMode: false,
        locale: "en-US",
        onCancel: noop,
        onOpen: noop,
        onClose: noop,
    };
    DateFilter.getStateFromSelectedOption = function (selectedFilterOption, excludeCurrentPeriod) {
        var canExcludeCurrent = canExcludeCurrentPeriod(selectedFilterOption);
        return {
            selectedFilterOption: selectedFilterOption,
            excludeCurrentPeriod: canExcludeCurrent ? excludeCurrentPeriod : false,
            isExcludeCurrentPeriodEnabled: canExcludeCurrent,
        };
    };
    DateFilter.checkInitialFilterOption = function (filterOption) {
        if (isAbsoluteDateFilterForm(filterOption) && (isNil(filterOption.from) || isNil(filterOption.to))) {
            // eslint-disable-next-line no-console
            console.warn("The default filter option is not valid. Values 'from' and 'to' from absoluteForm filter option must be specified.");
        }
        if (isUiRelativeDateFilterForm(filterOption) &&
            (isNil(filterOption.from) || isNil(filterOption.to))) {
            // eslint-disable-next-line no-console
            console.warn("The default filter option is not valid. Values 'from' and 'to' from relativeForm filter option must be specified.");
        }
    };
    return DateFilter;
}(React.PureComponent));
export { DateFilter };
//# sourceMappingURL=DateFilter.js.map
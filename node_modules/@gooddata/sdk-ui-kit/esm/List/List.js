import { __extends, __read } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { Component } from "react";
import { Table, Column, Cell } from "fixed-data-table-2";
import cx from "classnames";
import memoize from "lodash/memoize";
var preventDefault = function (e) { return e.preventDefault(); };
function isTouchDevice() {
    return "ontouchstart" in document.documentElement;
}
var BORDER_HEIGHT = 1;
export var MAX_VISIBLE_ITEMS_COUNT = 10;
export var DEFAULT_ITEM_HEIGHT = 28;
var HALF_ROW = 0.5;
/**
 * @internal
 */
var List = /** @class */ (function (_super) {
    __extends(List, _super);
    function List() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.disablePageScrolling = function () {
            document.body.addEventListener("wheel", preventDefault, { passive: false });
        };
        _this.enablePageScrolling = function () {
            document.body.removeEventListener("wheel", preventDefault);
        };
        return _this;
    }
    List.prototype.componentWillUnmount = function () {
        this.enablePageScrolling();
    };
    List.prototype.render = function () {
        var _a = this.props, _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.width, width = _c === void 0 ? 200 : _c, height = _a.height, _d = _a.compensateBorder, compensateBorder = _d === void 0 ? true : _d, _e = _a.items, items = _e === void 0 ? [] : _e, _f = _a.itemsCount, itemsCount = _f === void 0 ? items.length : _f, _g = _a.itemHeight, itemHeight = _g === void 0 ? DEFAULT_ITEM_HEIGHT : _g, _h = _a.itemHeightGetter, itemHeightGetter = _h === void 0 ? null : _h, _j = _a.maxVisibleItemsCount, maxVisibleItemsCount = _j === void 0 ? MAX_VISIBLE_ITEMS_COUNT : _j, renderItem = _a.renderItem, onScrollStart = _a.onScrollStart, onScrollEnd = _a.onScrollEnd, scrollToSelected = _a.scrollToSelected;
        var currentItemsCount = itemsCount > maxVisibleItemsCount ? maxVisibleItemsCount + HALF_ROW : itemsCount;
        var listHeight = height || currentItemsCount * itemHeight;
        // compensates for https://github.com/facebook/fixed-data-table/blob/5373535d98b08b270edd84d7ce12833a4478c6b6/src/FixedDataTableNew.react.js#L872
        var compensatedListHeight = compensateBorder ? listHeight + BORDER_HEIGHT * 2 : listHeight;
        var classNames = cx("gd-list", className);
        var getScrollRange = function (scrollY) {
            // vertical scroll position returned by fixed-data-table
            // is converted to index of first visible item
            var rowIndex = Math.floor(scrollY / itemHeight);
            var visibleRange = Math.ceil(listHeight / itemHeight);
            return [rowIndex, rowIndex + visibleRange];
        };
        var getItemIndex = memoize(function (items) {
            var rowIndex = items.findIndex(function (item) { return item && item.selected; });
            return rowIndex + 1;
        });
        return (React.createElement("div", { className: classNames, onMouseOver: this.disablePageScrolling, onMouseOut: this.enablePageScrolling, style: { width: width } },
            React.createElement(Table, { width: width, height: compensatedListHeight, headerHeight: 0, rowHeight: itemHeight, rowHeightGetter: itemHeightGetter, rowsCount: itemsCount, onScrollStart: function (_x, y) {
                    if (onScrollStart) {
                        var _a = __read(getScrollRange(y), 2), startIndex = _a[0], endIndex = _a[1];
                        onScrollStart(startIndex, endIndex);
                    }
                }, onScrollEnd: function (_x, y) {
                    if (onScrollEnd) {
                        var _a = __read(getScrollRange(y), 2), startIndex = _a[0], endIndex = _a[1];
                        onScrollEnd(startIndex, endIndex);
                    }
                }, touchScrollEnabled: isTouchDevice(), scrollToRow: scrollToSelected && getItemIndex(items) },
                React.createElement(Column, { flexGrow: 1, width: 1, cell: function (_a) {
                        var columnKey = _a.columnKey, height = _a.height, width = _a.width, rowIndex = _a.rowIndex;
                        var item = items[rowIndex];
                        return (React.createElement(Cell, { width: width, height: height, rowIndex: rowIndex, columnKey: columnKey }, renderItem({
                            rowIndex: rowIndex,
                            item: item,
                            width: width,
                            height: height,
                        })));
                    } }))));
    };
    return List;
}(Component));
export { List };
//# sourceMappingURL=List.js.map
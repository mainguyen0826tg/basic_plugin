// (C) 2019 GoodData Corporation
/*
 *
 */
export { DefaultColorPalette } from "./constants/colorPalette";
export { BucketNames } from "./constants/bucketNames";
export { visualizationIsBetaWarning } from "./helpers/logging";
/*
 * Error handling
 */
export { ErrorCodes, GoodDataSdkError, UnauthorizedSdkError, NotFoundSdkError, CancelledSdkError, UnexpectedSdkError, ProtectedReportSdkError, NoDataSdkError, NegativeValuesSdkError, DataTooLargeToComputeSdkError, DataTooLargeToDisplaySdkError, GeoLocationMissingSdkError, BadRequestSdkError, GeoTokenMissingSdkError, isGoodDataSdkError, isBadRequest, isCancelledSdkError, isDataTooLargeToCompute, isDataTooLargeToDisplay, isGeoLocationMissing, isGeoTokenMissing, isNegativeValues, isNoDataSdkError, isNotFound, isProtectedReport, isUnauthorized, isUnknownSdkError, } from "./errors/GoodDataSdkError";
export { newErrorMapping, convertError, defaultErrorHandler, } from "./errors/errorHandling";
/*
 * Base React stuff
 */
export { LoadingComponent } from "./react/LoadingComponent";
export { ErrorComponent } from "./react/ErrorComponent";
export { BackendProvider, useBackend, useBackendStrict, withBackend, } from "./react/BackendContext";
export { WorkspaceProvider, useWorkspace, useWorkspaceStrict, withWorkspace, } from "./react/WorkspaceContext";
export { PlaceholdersProvider } from "./react/placeholders/context";
export { isAnyPlaceholder, isPlaceholder, isComposedPlaceholder, } from "./react/placeholders/base";
export { newComposedPlaceholder, newPlaceholder } from "./react/placeholders/factory";
export { usePlaceholder, usePlaceholders, useComposedPlaceholder, useResolveValueWithPlaceholders, useResolveValuesWithPlaceholders, } from "./react/placeholders/hooks";
export { usePagedResource } from "./react/usePagedResource";
export { useCancelablePromise, } from "./react/useCancelablePromise";
export { withContexts } from "./react/withContexts";
export { wrapDisplayName } from "./react/wrapDisplayName";
export { CancelError, makeCancelable, isCancelError } from "./react/CancelablePromise";
export { withEntireDataView } from "./react/legacy/withEntireDataView";
export { getIntersectionAttributes } from "./react/legacy/availableDrillTargets";
export { resolveUseCancelablePromisesError, resolveUseCancelablePromisesStatus, } from "./react/useCancelablePromiseUtils";
export { ClientWorkspaceProvider, ResolvedClientWorkspaceProvider, useClientWorkspaceIdentifiers, useClientWorkspaceStatus, useClientWorkspaceError, } from "./react/ClientWorkspaceContext/ClientWorkspaceContext";
export { resolveLCMWorkspaceIdentifiers } from "./react/ClientWorkspaceContext/resolveLCMWorkspaceIdentifiers";
export { usePrevious } from "./react/usePrevious";
/*
 * Localization exports
 */
export { DefaultLocale } from "./localization/Locale";
export { getTranslation, getIntl } from "./localization/IntlStore";
export { IntlWrapper, messagesMap } from "./localization/IntlWrapper";
export { TranslationsProvider, IntlTranslationsProvider, } from "./localization/TranslationsProvider";
// FIXME: temp build fix
export { createIntlMock, withIntl } from "./localization/intlUtils";
export { TranslationsCustomizationContextProvider, withTranslationsCustomization, TranslationsCustomizationProvider, pickCorrectInsightWording, removeAllInsightToReportTranslations, } from "./localization/TranslationsCustomizationProvider";
/*
 * Header matching & predicates
 */
export { getMappingHeaderLocalIdentifier, hasMappingHeaderLocalIdentifier, getMappingHeaderUri, getMappingHeaderName, getMappingHeaderIdentifier, } from "./headerMatching/MappingHeader";
export { isHeaderPredicate, } from "./headerMatching/HeaderPredicate";
export { HeaderPredicates, attributeItemNameMatch, composedFromIdentifier, composedFromUri, identifierMatch, localIdentifierMatch, uriMatch, } from "./headerMatching/HeaderPredicateFactory";
/*
 * Derived measure title generation
 */
export { ArithmeticMeasureTitleFactory } from "./measureTitles/ArithmeticMeasureTitleFactory";
export { DerivedMeasureTitleSuffixFactory } from "./measureTitles/DerivedMeasureTitleSuffixFactory";
export { fillMissingTitles } from "./measureTitles/fillMissingTitles";
export { ignoreTitlesForSimpleMeasures } from "./measureTitles/ignoreTitlesForSimpleMeasures";
export { isDrillableItemIdentifier, isDrillableItemUri, isDrillableItem, isExplicitDrill, isDrillIntersectionAttributeItem, } from "./vis/DrillEvents";
export { convertDrillableItemsToPredicates, isSomeHeaderPredicateMatched, getDrillIntersection, getIntersectionPartAfter, fireDrillEvent, } from "./vis/drilling";
export { createExportFunction, createExportErrorFunction } from "./vis/export";
export { VisualizationTypes, getVisualizationType, } from "./vis/visualizationTypes";
export { OverTimeComparisonTypes } from "./interfaces/OverTimeComparison";
export { CatalogHelper, } from "./helpers/CatalogHelper";
/*
 *
 */
export { DataViewFacade } from "./results/facade";
export { createNumberJsFormatter, DefaultDataAccessConfig, } from "./results/dataAccessConfig";
//# sourceMappingURL=index.js.map
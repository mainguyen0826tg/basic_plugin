import { __assign, __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import cloneDeep from "lodash/cloneDeep";
import isEmpty from "lodash/isEmpty";
import set from "lodash/set";
import tail from "lodash/tail";
import { BucketNames, VisualizationTypes } from "@gooddata/sdk-ui";
import { render } from "react-dom";
import { BUCKETS, DATE, ATTRIBUTE } from "../../../constants/bucket";
import { TREEMAP_SUPPORTED_PROPERTIES } from "../../../constants/supportedProperties";
import { getTreemapUiConfig } from "../../../constants/uiConfig";
import { configureOverTimeComparison, configurePercent } from "../../../utils/bucketConfig";
import { getAttributeItemsWithoutStacks, getMeasureItems, getStackItems, isDateBucketItem, limitNumberOfMeasuresInBuckets, removeAllArithmeticMeasuresFromDerived, removeAllDerivedMeasures, sanitizeFilters, } from "../../../utils/bucketHelper";
import { getReferencePointWithSupportedProperties } from "../../../utils/propertiesHelper";
import { removeSort } from "../../../utils/sort";
import { setTreemapUiConfig } from "../../../utils/uiConfigHelpers/treemapUiConfigHelper";
import TreeMapConfigurationPanel from "../../configurationPanels/TreeMapConfigurationPanel";
import { PluggableBaseChart } from "../baseChart/PluggableBaseChart";
import { addIntersectionFiltersToInsight, modifyBucketsAttributesForDrillDown, reverseAndTrimIntersection, } from "../drillDownUtil";
var PluggableTreemap = /** @class */ (function (_super) {
    __extends(PluggableTreemap, _super);
    function PluggableTreemap(props) {
        var _this = _super.call(this, props) || this;
        _this.type = VisualizationTypes.TREEMAP;
        _this.supportedPropertiesList = TREEMAP_SUPPORTED_PROPERTIES;
        _this.initializeProperties(props.visualizationProperties);
        return _this;
    }
    PluggableTreemap.prototype.getBucketItemsWithMultipleDates = function (newReferencePoint) {
        var _a;
        var buckets = (_a = newReferencePoint === null || newReferencePoint === void 0 ? void 0 : newReferencePoint.buckets) !== null && _a !== void 0 ? _a : [];
        var measures = getMeasureItems(buckets);
        var stacks = getStackItems(buckets, [ATTRIBUTE, DATE]);
        var nonStackAttributes = getAttributeItemsWithoutStacks(buckets, [ATTRIBUTE, DATE]);
        var view = nonStackAttributes.slice(0, 1);
        if (nonStackAttributes.length > 0) {
            measures = getMeasureItems(limitNumberOfMeasuresInBuckets(buckets, 1));
        }
        if (nonStackAttributes.length > 1 && isEmpty(stacks)) {
            // first attribute is taken, find next available and put to stacks
            var attributesWithoutFirst = tail(nonStackAttributes);
            stacks = attributesWithoutFirst.slice(0, 1);
        }
        return { measures: measures, view: view, stacks: stacks };
    };
    PluggableTreemap.prototype.getBucketItems = function (newReferencePoint) {
        var _a;
        var buckets = (_a = newReferencePoint === null || newReferencePoint === void 0 ? void 0 : newReferencePoint.buckets) !== null && _a !== void 0 ? _a : [];
        var measures = getMeasureItems(buckets);
        var stacks = getStackItems(buckets);
        var nonStackAttributes = getAttributeItemsWithoutStacks(buckets);
        var view = nonStackAttributes.slice(0, 1);
        if (nonStackAttributes.length > 0) {
            measures = getMeasureItems(limitNumberOfMeasuresInBuckets(buckets, 1));
        }
        if (nonStackAttributes.length > 1 && isEmpty(stacks)) {
            // first attribute is taken, find next available non-date attribute
            var attributesWithoutFirst = tail(nonStackAttributes);
            var nonDate = attributesWithoutFirst.filter(function (attribute) { return !isDateBucketItem(attribute); });
            stacks = nonDate.slice(0, 1);
        }
        return { measures: measures, view: view, stacks: stacks };
    };
    PluggableTreemap.prototype.configureBuckets = function (newReferencePoint) {
        var _a = this.isMultipleDatesEnabled()
            ? this.getBucketItemsWithMultipleDates(newReferencePoint)
            : this.getBucketItems(newReferencePoint), measures = _a.measures, view = _a.view, stacks = _a.stacks;
        set(newReferencePoint, BUCKETS, [
            {
                localIdentifier: BucketNames.MEASURES,
                items: measures,
            },
            {
                localIdentifier: BucketNames.VIEW,
                items: view,
            },
            {
                localIdentifier: BucketNames.SEGMENT,
                items: stacks,
            },
        ]);
    };
    PluggableTreemap.prototype.getTreemapUIConfig = function (referencePoint) {
        var buckets = referencePoint === null || referencePoint === void 0 ? void 0 : referencePoint.buckets;
        var allowsMultipleDates = this.isMultipleDatesEnabled();
        var nonStackAttributes = allowsMultipleDates
            ? getAttributeItemsWithoutStacks(buckets, [ATTRIBUTE, DATE])
            : getAttributeItemsWithoutStacks(buckets);
        var measures = getMeasureItems(buckets);
        return getTreemapUiConfig(allowsMultipleDates, nonStackAttributes.length > 0, measures.length > 1);
    };
    PluggableTreemap.prototype.getExtendedReferencePoint = function (referencePoint) {
        var clonedReferencePoint = cloneDeep(referencePoint);
        var newReferencePoint = __assign(__assign({}, clonedReferencePoint), { uiConfig: this.getTreemapUIConfig(referencePoint) });
        newReferencePoint = removeAllArithmeticMeasuresFromDerived(newReferencePoint);
        newReferencePoint = removeAllDerivedMeasures(newReferencePoint);
        this.configureBuckets(newReferencePoint);
        newReferencePoint = setTreemapUiConfig(newReferencePoint, this.intl, this.type);
        newReferencePoint = configurePercent(newReferencePoint, false);
        newReferencePoint = configureOverTimeComparison(newReferencePoint, !!this.featureFlags["enableWeekFilters"]);
        newReferencePoint = getReferencePointWithSupportedProperties(newReferencePoint, this.supportedPropertiesList);
        newReferencePoint = removeSort(newReferencePoint);
        return Promise.resolve(sanitizeFilters(newReferencePoint));
    };
    PluggableTreemap.prototype.addFilters = function (source, drillConfig, event) {
        var cutIntersection = reverseAndTrimIntersection(drillConfig, event.drillContext.intersection);
        return addIntersectionFiltersToInsight(source, cutIntersection);
    };
    PluggableTreemap.prototype.getInsightWithDrillDownApplied = function (source, drillDownContext) {
        var withFilters = this.addFilters(source, drillDownContext.drillDefinition, drillDownContext.event);
        return modifyBucketsAttributesForDrillDown(withFilters, drillDownContext.drillDefinition);
    };
    PluggableTreemap.prototype.renderConfigurationPanel = function (insight) {
        if (document.querySelector(this.configPanelElement)) {
            render(React.createElement(TreeMapConfigurationPanel, { locale: this.locale, references: this.references, properties: this.visualizationProperties, propertiesMeta: this.propertiesMeta, insight: insight, colors: this.colors, pushData: this.handlePushData, type: this.type, isError: this.getIsError(), isLoading: this.isLoading, featureFlags: this.featureFlags }), document.querySelector(this.configPanelElement));
        }
    };
    return PluggableTreemap;
}(PluggableBaseChart));
export { PluggableTreemap };
//# sourceMappingURL=PluggableTreemap.js.map
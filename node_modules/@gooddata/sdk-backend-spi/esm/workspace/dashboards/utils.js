import { __spreadArrays } from "tslib";
// (C) 2019-2021 GoodData Corporation
import noop from "lodash/noop";
import { isDashboardLayout, } from "./layout";
import { isWidget, isWidgetDefinition } from "./widget";
/**
 * Has dashboard layout only empty sections and widgets?
 * @alpha
 */
export var isDashboardLayoutEmpty = function (layout) {
    return layout.sections.every(function (section) { return section.items.length === 0; });
};
/**
 * Walk dashboard layout
 * This is useful to collect widgets from the layout or perform transforms on the layout
 *
 * @alpha
 * @param layout - dashboard layout
 * @param callbacks - walk callbacks
 * @returns void
 */
export function walkLayout(layout, _a, path) {
    var _b = _a.sectionCallback, sectionCallback = _b === void 0 ? noop : _b, _c = _a.itemCallback, itemCallback = _c === void 0 ? noop : _c, _d = _a.widgetCallback, widgetCallback = _d === void 0 ? noop : _d;
    if (path === void 0) { path = ["sections"]; }
    layout.sections.forEach(function (section, sectionIndex) {
        var sectionPath = __spreadArrays(path, [sectionIndex]);
        sectionCallback(section, sectionPath);
        section.items.forEach(function (item, widgetIndex) {
            var itemPath = __spreadArrays(sectionPath, ["items", widgetIndex]);
            itemCallback(item, itemPath);
            if (isWidget(item.widget) || isWidgetDefinition(item.widget)) {
                var widgetPath = __spreadArrays(itemPath, ["widget"]);
                widgetCallback(item.widget, widgetPath);
            }
            else if (isDashboardLayout(item.widget)) {
                // is another layout
                walkLayout(item.widget, {
                    sectionCallback: sectionCallback,
                    itemCallback: itemCallback,
                    widgetCallback: widgetCallback,
                }, __spreadArrays(itemPath, ["widget", "sections"]));
            }
        });
    });
}
/**
 * Get all dashboard widgets
 * (layout does not only specify rendering, but also all used widgets)
 *
 * @alpha
 * @param layout - dashboard layout
 * @param collectedWidgets - bag for collecting widgets recursively from the layout
 * @returns - widgets with layout paths
 */
export function layoutWidgetsWithPaths(layout) {
    var collectedWidgets = [];
    walkLayout(layout, {
        widgetCallback: function (widget, path) {
            return collectedWidgets.push({
                widget: widget,
                path: path,
            });
        },
    });
    return collectedWidgets;
}
/**
 * Get all dashboard widgets
 * (layout does not only specify rendering, but also all used widgets)
 *
 * @alpha
 * @param layout - dashboard layout
 * @returns - widgets
 */
export function layoutWidgets(layout) {
    var collectedWidgets = [];
    walkLayout(layout, {
        widgetCallback: function (widget) { return collectedWidgets.push(widget); },
    });
    return collectedWidgets;
}
//# sourceMappingURL=utils.js.map
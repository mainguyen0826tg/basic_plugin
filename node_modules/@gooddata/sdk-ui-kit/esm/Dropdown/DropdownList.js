import { __assign, __rest } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { useCallback } from "react";
import cx from "classnames";
import { injectIntl } from "react-intl";
import { Input } from "../Form";
import { DropdownTabs } from "./DropdownTabs";
import { List } from "../List";
import { LoadingMask } from "../LoadingMask";
import { NoData } from "../NoData";
import { AutoSize } from "../AutoSize";
/**
 * @internal
 */
export var LOADING_HEIGHT = 100;
/**
 * @internal
 */
export var DEFAULT_ITEM_HEIGHT = 28;
/**
 * @internal
 */
export var DEFAULT_MOBILE_ITEM_HEIGHT = 40;
var defaultNoData = injectIntl(function (_a) {
    var hasNoMatchingData = _a.hasNoMatchingData, intl = _a.intl;
    return (React.createElement(NoData, { hasNoMatchingData: hasNoMatchingData, notFoundLabel: intl.formatMessage({ id: "gs.noData.noMatchingData" }), noDataLabel: intl.formatMessage({ id: "gs.noData.noDataAvailable" }) }));
});
/**
 * @internal
 */
export function DropdownList(props) {
    var _a = props.className, className = _a === void 0 ? "" : _a, width = props.width, height = props.height, isMobile = props.isMobile, isLoading = props.isLoading, _b = props.items, items = _b === void 0 ? [] : _b, _c = props.itemsCount, itemsCount = _c === void 0 ? items.length : _c, _d = props.itemHeight, itemHeight = _d === void 0 ? DEFAULT_ITEM_HEIGHT : _d, _e = props.mobileItemHeight, mobileItemHeight = _e === void 0 ? DEFAULT_MOBILE_ITEM_HEIGHT : _e, showSearch = props.showSearch, disableAutofocus = props.disableAutofocus, searchString = props.searchString, searchPlaceholder = props.searchPlaceholder, searchFieldSize = props.searchFieldSize, onSearch = props.onSearch, showTabs = props.showTabs, tabs = props.tabs, selectedTabId = props.selectedTabId, onTabSelect = props.onTabSelect, _f = props.renderNoData, renderNoData = _f === void 0 ? defaultNoData : _f, scrollToSelected = props.scrollToSelected, listProps = __rest(props, ["className", "width", "height", "isMobile", "isLoading", "items", "itemsCount", "itemHeight", "mobileItemHeight", "showSearch", "disableAutofocus", "searchString", "searchPlaceholder", "searchFieldSize", "onSearch", "showTabs", "tabs", "selectedTabId", "onTabSelect", "renderNoData", "scrollToSelected"]);
    var hasNoData = !isLoading && itemsCount === 0;
    var hasNoMatchingData = hasNoData && !!searchString;
    var listClassNames = cx("gd-infinite-list", className);
    var searchFieldClassNames = cx("gd-list-searchfield", "gd-flex-item");
    var renderFooter = function () {
        var footer = props.footer, closeDropdown = props.closeDropdown;
        if (footer && closeDropdown && typeof footer === "function") {
            return footer(closeDropdown);
        }
        return footer || false;
    };
    var onChange = useCallback(function (search) { return onSearch(search.toString()); }, [onSearch]);
    return (React.createElement(React.Fragment, null,
        showSearch && (React.createElement(Input, { className: searchFieldClassNames, value: searchString, onChange: onChange, isSmall: searchFieldSize === "small", placeholder: searchPlaceholder, clearOnEsc: true, isSearch: true, autofocus: !disableAutofocus })),
        showTabs && React.createElement(DropdownTabs, { tabs: tabs, selectedTabId: selectedTabId, onTabSelect: onTabSelect }),
        hasNoData && (React.createElement("div", { style: { width: isMobile ? "auto" : width } }, renderNoData({ hasNoMatchingData: hasNoMatchingData }))),
        isLoading && React.createElement(LoadingMask, { width: isMobile ? "100%" : width, height: LOADING_HEIGHT }),
        !isLoading && itemsCount > 0 && (React.createElement(AutoSize, null, function (autoSize) {
            var listWidth = isMobile ? autoSize.width : width;
            var listHeight = isMobile ? autoSize.height : height;
            return (React.createElement(List, __assign({ className: listClassNames, width: listWidth, height: listHeight, items: items, itemsCount: itemsCount, itemHeight: isMobile ? Math.max(mobileItemHeight, itemHeight) : itemHeight, scrollToSelected: scrollToSelected }, listProps)));
        })),
        renderFooter()));
}
//# sourceMappingURL=DropdownList.js.map
// (C) 2021 GoodData Corporation
import { __generator, __read, __spread } from "tslib";
import { call, put, select } from "redux-saga/effects";
import { insightWidgetDrillsModified } from "../../events/insight";
import { selectWidgetsMap } from "../../store/layout/layoutSelectors";
import { validateExistingInsightWidget } from "./validation/widgetValidations";
import { getValidationData, validateDrillDefinition } from "./validation/insightDrillDefinitionValidation";
import { layoutActions } from "../../store/layout";
import { batchActions } from "redux-batched-actions";
import { insightsActions } from "../../store/insights";
import { existsDrillDefinitionInArray } from "./validation/insightDrillDefinitionUtils";
export function modifyDrillsForInsightWidgetHandler(ctx, cmd) {
    var _a, drillsToModify, correlationId, widgets, insightWidget, widgetRef, validationData, _b, currentInsightDrills, validatedDrillDefinition, addedDrillDefinition, updatedDrillDefinition, notModifiedDrillDefinition, updatedInsightDrills;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = cmd.payload.drills, drillsToModify = _a === void 0 ? [] : _a, correlationId = cmd.correlationId;
                return [4 /*yield*/, select(selectWidgetsMap)];
            case 1:
                widgets = _c.sent();
                insightWidget = validateExistingInsightWidget(widgets, cmd, ctx);
                widgetRef = insightWidget.ref;
                return [4 /*yield*/, call(getValidationData, widgetRef, drillsToModify, ctx)];
            case 2:
                validationData = _c.sent();
                _b = insightWidget.drills, currentInsightDrills = _b === void 0 ? [] : _b;
                validatedDrillDefinition = drillsToModify.map(function (drillItem) {
                    return validateDrillDefinition(drillItem, validationData, ctx, cmd);
                });
                addedDrillDefinition = validatedDrillDefinition.filter(function (drillItem) { return !existsDrillDefinitionInArray(drillItem, currentInsightDrills); });
                updatedDrillDefinition = validatedDrillDefinition.filter(function (drillItem) {
                    return existsDrillDefinitionInArray(drillItem, currentInsightDrills);
                });
                notModifiedDrillDefinition = currentInsightDrills.filter(function (drillItem) { return !existsDrillDefinitionInArray(drillItem, drillsToModify); });
                updatedInsightDrills = __spread(addedDrillDefinition, updatedDrillDefinition, notModifiedDrillDefinition);
                return [4 /*yield*/, put(batchActions([
                        insightsActions.addInsights(validationData.resolvedInsights.loaded),
                        layoutActions.replaceWidgetDrills({
                            ref: insightWidget.ref,
                            drillDefinitions: updatedInsightDrills,
                            undo: {
                                cmd: cmd,
                            },
                        }),
                    ]))];
            case 3:
                _c.sent();
                return [2 /*return*/, insightWidgetDrillsModified(ctx, widgetRef, addedDrillDefinition, updatedDrillDefinition, correlationId)];
        }
    });
}
//# sourceMappingURL=modifyDrillsForInsightWidgetHandler.js.map
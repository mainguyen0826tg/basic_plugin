import { __extends } from "tslib";
// (C) 2019-2020 GoodData Corporation
import identity from "lodash/identity";
import { MetadataObjectBuilder } from "./factory";
import { builderFactory } from "../builder";
/**
 * Measure metadata object builder
 * See {@link Builder}
 *
 * @beta
 */
var MeasureMetadataObjectBuilder = /** @class */ (function (_super) {
    __extends(MeasureMetadataObjectBuilder, _super);
    function MeasureMetadataObjectBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MeasureMetadataObjectBuilder.prototype.expression = function (maql) {
        this.item.expression = maql;
        return this;
    };
    MeasureMetadataObjectBuilder.prototype.format = function (format) {
        this.item.format = format;
        return this;
    };
    MeasureMetadataObjectBuilder.prototype.isLocked = function (isLocked) {
        this.item.isLocked = isLocked;
        return this;
    };
    return MeasureMetadataObjectBuilder;
}(MetadataObjectBuilder));
export { MeasureMetadataObjectBuilder };
/**
 * Measure metadata object factory
 *
 * @param ref - measure reference
 * @param modifications - measure builder modifications to perform
 * @returns created measure metadata object
 * @beta
 */
export var newMeasureMetadataObject = function (ref, modifications) {
    if (modifications === void 0) { modifications = identity; }
    return builderFactory(MeasureMetadataObjectBuilder, { type: "measure", ref: ref }, modifications);
};
//# sourceMappingURL=measureFactory.js.map
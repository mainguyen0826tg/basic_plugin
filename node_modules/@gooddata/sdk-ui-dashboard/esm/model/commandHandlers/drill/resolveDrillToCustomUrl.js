import { __awaiter, __generator, __read, __spread } from "tslib";
// (C) 2020-2021 GoodData Corporation
import { call, select, all } from "redux-saga/effects";
import { isDrillIntersectionAttributeItem, } from "@gooddata/sdk-ui";
import { isAttributeDescriptor, } from "@gooddata/sdk-backend-spi";
import { idRef, areObjRefsEqual, insightId } from "@gooddata/sdk-model";
import { selectDashboardId } from "../../store/meta/metaSelectors";
import { selectWidgetByRef } from "../../store/layout/layoutSelectors";
import { selectInsightByRef } from "../../store/insights/insightsSelectors";
import { getElementTitle } from "./getElementTitle";
import { getAttributeIdentifiersPlaceholdersFromUrl } from "../../../_staging/drills/drillingUtils";
import { invalidArgumentsProvided } from "../../events/general";
export var DRILL_TO_URL_PLACEHOLDER;
(function (DRILL_TO_URL_PLACEHOLDER) {
    DRILL_TO_URL_PLACEHOLDER["PROJECT_ID"] = "{project_id}";
    DRILL_TO_URL_PLACEHOLDER["WORKSPACE_ID"] = "{workspace_id}";
    DRILL_TO_URL_PLACEHOLDER["INSIGHT_ID"] = "{insight_id}";
    DRILL_TO_URL_PLACEHOLDER["WIDGET_ID"] = "{widget_id}";
    DRILL_TO_URL_PLACEHOLDER["DASHBOARD_ID"] = "{dashboard_id}";
    DRILL_TO_URL_PLACEHOLDER["CLIENT_ID"] = "{client_id}";
    DRILL_TO_URL_PLACEHOLDER["DATA_PRODUCT_ID"] = "{data_product_id}";
})(DRILL_TO_URL_PLACEHOLDER || (DRILL_TO_URL_PLACEHOLDER = {}));
export function loadElementTitle(dfRef, dfIdentifier, attrElementUri, ctx) {
    var elementTitle;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, call(getElementTitle, ctx.workspace, dfRef, attrElementUri, ctx)];
            case 1:
                elementTitle = _a.sent();
                return [2 /*return*/, {
                        identifier: dfIdentifier,
                        elementTitle: elementTitle,
                    }];
        }
    });
}
export function loadAttributeElementsForDrillIntersection(drillIntersectionElements, attributesDisplayForms, ctx) {
    var elements;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, all(attributesDisplayForms.reduce(function (acc, displayForm) {
                    var dfIdentifier = displayForm.id, attribute = displayForm.attribute, dfRef = displayForm.ref;
                    var intersectionForAttribute = drillIntersectionElements.find(function (_a) {
                        var header = _a.header;
                        return isAttributeDescriptor(header) &&
                            areObjRefsEqual(attribute, header.attributeHeader.formOf.ref);
                    });
                    if (!intersectionForAttribute) {
                        return acc;
                    }
                    if (!isDrillIntersectionAttributeItem(intersectionForAttribute.header)) {
                        return acc;
                    }
                    acc.push(call(loadElementTitle, dfRef, dfIdentifier, intersectionForAttribute.header.attributeHeaderItem.uri, ctx));
                    return acc;
                }, []))];
            case 1:
                elements = _a.sent();
                return [2 /*return*/, elements];
        }
    });
}
var encodeParameterIfSet = function (parameter) {
    return parameter === undefined ? parameter : encodeURIComponent(parameter);
};
export function getAttributeDisplayForms(projectId, objRefs, ctx) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ctx.backend.workspace(projectId).attributes().getAttributeDisplayForms(objRefs)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
export function getAttributeIdentifiersReplacements(url, drillIntersectionElements, ctx) {
    var attributeIdentifiersPlaceholders, displayForms, elements;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                attributeIdentifiersPlaceholders = getAttributeIdentifiersPlaceholdersFromUrl(url);
                if (attributeIdentifiersPlaceholders.length === 0) {
                    return [2 /*return*/, []];
                }
                return [4 /*yield*/, call(getAttributeDisplayForms, ctx.workspace, attributeIdentifiersPlaceholders.map(function (placeholder) { return idRef(placeholder.identifier); }), ctx)];
            case 1:
                displayForms = _a.sent();
                return [4 /*yield*/, call(loadAttributeElementsForDrillIntersection, drillIntersectionElements, displayForms, ctx)];
            case 2:
                elements = _a.sent();
                return [2 /*return*/, attributeIdentifiersPlaceholders.map(function (_a) {
                        var _b;
                        var toBeReplaced = _a.placeholder, identifier = _a.identifier, toBeEncoded = _a.toBeEncoded;
                        var elementTitle = (_b = elements.find(function (element) { return element.identifier === identifier; })) === null || _b === void 0 ? void 0 : _b.elementTitle;
                        var replacement = toBeEncoded ? encodeParameterIfSet(elementTitle) : elementTitle;
                        return {
                            toBeReplaced: toBeReplaced,
                            replacement: replacement,
                        };
                    })];
        }
    });
}
var createIdentifierReplacement = function (toBeReplaced, replacement) {
    if (replacement === void 0) { replacement = ""; }
    return ({ toBeReplaced: toBeReplaced, replacement: replacement, replaceGlobally: true });
};
export function getInsightIdentifiersReplacements(customUrl, widgetRef, ctx) {
    var workspace, clientId, dataProductId, dashboardId, widget, insight, replacements;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                workspace = ctx.workspace, clientId = ctx.clientId, dataProductId = ctx.dataProductId;
                return [4 /*yield*/, select(selectDashboardId)];
            case 1:
                dashboardId = _a.sent();
                return [4 /*yield*/, select(selectWidgetByRef(widgetRef))];
            case 2:
                widget = _a.sent();
                return [4 /*yield*/, select(selectInsightByRef(widget.insight))];
            case 3:
                insight = _a.sent();
                replacements = [
                    createIdentifierReplacement(DRILL_TO_URL_PLACEHOLDER.PROJECT_ID, workspace),
                    createIdentifierReplacement(DRILL_TO_URL_PLACEHOLDER.WORKSPACE_ID, workspace),
                    createIdentifierReplacement(DRILL_TO_URL_PLACEHOLDER.DASHBOARD_ID, dashboardId),
                    createIdentifierReplacement(DRILL_TO_URL_PLACEHOLDER.CLIENT_ID, clientId),
                    createIdentifierReplacement(DRILL_TO_URL_PLACEHOLDER.DATA_PRODUCT_ID, dataProductId),
                    createIdentifierReplacement(DRILL_TO_URL_PLACEHOLDER.INSIGHT_ID, insightId(insight)),
                ];
                if (customUrl.includes(DRILL_TO_URL_PLACEHOLDER.WIDGET_ID)) {
                    return [2 /*return*/, __spread(replacements, [
                            createIdentifierReplacement(DRILL_TO_URL_PLACEHOLDER.WIDGET_ID, widget.identifier),
                        ])];
                }
                return [2 /*return*/, replacements];
        }
    });
}
var applyReplacements = function (url, replacements) {
    return replacements.reduce(function (customUrlWithReplacedPlaceholders, _a) {
        var toBeReplaced = _a.toBeReplaced, replacement = _a.replacement, replaceGlobally = _a.replaceGlobally;
        return customUrlWithReplacedPlaceholders.replace(replaceGlobally ? new RegExp(toBeReplaced, "g") : toBeReplaced, replacement);
    }, url);
};
export function resolveDrillToCustomUrl(drillConfig, widgetRef, event, ctx, cmd) {
    var customUrl, attributeIdentifiersReplacements, missingReplacement, insightIdentifiersReplacements, replacements, resolvedUrl;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                customUrl = drillConfig.target.url;
                return [4 /*yield*/, call(getAttributeIdentifiersReplacements, customUrl, event.drillContext.intersection, ctx)];
            case 1:
                attributeIdentifiersReplacements = _a.sent();
                missingReplacement = attributeIdentifiersReplacements.find(function (_a) {
                    var replacement = _a.replacement;
                    return replacement === undefined;
                });
                if (missingReplacement) {
                    throw invalidArgumentsProvided(ctx, cmd, "Drill to custom URL unable to resolve missing paramter " + missingReplacement.toBeReplaced);
                }
                return [4 /*yield*/, call(getInsightIdentifiersReplacements, customUrl, widgetRef, ctx)];
            case 2:
                insightIdentifiersReplacements = _a.sent();
                replacements = __spread(attributeIdentifiersReplacements, insightIdentifiersReplacements);
                resolvedUrl = applyReplacements(customUrl, replacements);
                return [2 /*return*/, resolvedUrl];
        }
    });
}
//# sourceMappingURL=resolveDrillToCustomUrl.js.map
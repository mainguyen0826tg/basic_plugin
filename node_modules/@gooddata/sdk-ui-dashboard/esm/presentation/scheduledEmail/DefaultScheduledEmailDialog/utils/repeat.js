import { REPEAT_EXECUTE_ON, REPEAT_TYPES } from "../constants";
import { getDate, getDay, getWeek } from "./datetime";
// Delimits the frequency part from the rest.
var REPEAT_DELIM = "*";
// Delimits the fragments of repeatData string.
var FRAGMENT_DELIM = ":";
// Delimits parts in one fragment.
var LIST_DELIM = ",";
// Position of the REPEAT_DELIM determines the type of the repeat
var REPEAT_TYPE_BY_REPEAT_INDEX = ["none", "yearly", "monthly", "weekly", "daily"];
// Name of the each frangment by position.
var FRAGMENT_BY_INDEX = ["year", "month", "week", "day", "hour", "minute", "second"];
// Fills fragments to respective places.
function fillFragments(fragments, fragObj) {
    for (var name_1 in fragObj) {
        // eslint-disable-next-line no-prototype-builtins
        if (!fragObj.hasOwnProperty(name_1)) {
            continue;
        }
        var index = FRAGMENT_BY_INDEX.indexOf(name_1);
        fragments[index] = fragObj[name_1];
    }
}
function getRepeatBase(repeatType, repeatFrequency) {
    if (repeatType !== REPEAT_TYPES.CUSTOM) {
        return repeatType;
    }
    // eslint-disable-next-line no-prototype-builtins
    if (repeatFrequency.hasOwnProperty("day")) {
        return REPEAT_TYPES.DAILY;
    }
    // eslint-disable-next-line no-prototype-builtins
    if (repeatFrequency.hasOwnProperty("week")) {
        return REPEAT_TYPES.WEEKLY;
    }
    return REPEAT_TYPES.MONTHLY;
}
// Generates repeatData string
export function generateRepeatString(repeatData) {
    var repeatExecuteOn = repeatData.repeatExecuteOn, // repeatSubType
    repeatFrequency = repeatData.repeatFrequency, // repeatStruct
    repeatPeriod = repeatData.repeatPeriod, repeatType = repeatData.repeatType, // repeatBase
    time = repeatData.time;
    var fragments = [0, 0, 0, 0, 0, 0, 0];
    var repeatBase = getRepeatBase(repeatType, repeatFrequency);
    var repeatDelimiterIndex = REPEAT_TYPE_BY_REPEAT_INDEX.indexOf(repeatBase);
    // Repeats monthly
    if (repeatBase === REPEAT_TYPES.MONTHLY) {
        var str = repeatFrequency.month;
        // Repeats on a day of week in n-th week of month (e.g. 3rd Monday)
        if (repeatExecuteOn === REPEAT_EXECUTE_ON.DAY_OF_WEEK) {
            var day = str.dayOfWeek.day;
            var week = str.dayOfWeek.week;
            fillFragments(fragments, { day: day, week: week });
        }
        // Repeats on a day of month 1-31
        else if (repeatExecuteOn === REPEAT_EXECUTE_ON.DAY_OF_MONTH) {
            var day = str.dayOfMonth;
            fillFragments(fragments, { day: day });
        }
    }
    // Repeats weekly
    else if (repeatBase === REPEAT_TYPES.WEEKLY) {
        var days = repeatFrequency.week.days;
        fillFragments(fragments, { day: days.join(LIST_DELIM) });
    }
    // Repeats daily
    else if (repeatBase === REPEAT_TYPES.DAILY) {
        // do nothing
    }
    // Fill the repeat period
    fragments[repeatDelimiterIndex - 1] = repeatPeriod;
    // Fill the time
    fillFragments(fragments, time);
    // Split array of fragments into frequency part and when part (so I can join them with '*' afterwards)
    var reptParts = [
        fragments.slice(0, repeatDelimiterIndex),
        fragments.slice(repeatDelimiterIndex, fragments.length),
    ];
    // Join into one repeatData string
    var repeatString = reptParts.map(function (p) { return p.join(FRAGMENT_DELIM); }).join(REPEAT_DELIM);
    return repeatString;
}
export function setDailyRepeat(repeatData) {
    repeatData.repeatFrequency = {
        day: true,
    };
}
export function setMonthlyRepeat(repeatData, repeatExecuteOn, startDate) {
    var _a;
    var repeatExecuteOnData;
    if (repeatExecuteOn === REPEAT_EXECUTE_ON.DAY_OF_MONTH) {
        repeatExecuteOnData = getDate(startDate);
    }
    else if (repeatExecuteOn === REPEAT_EXECUTE_ON.DAY_OF_WEEK) {
        repeatExecuteOnData = {
            day: getDay(startDate),
            week: getWeek(startDate),
        };
    }
    repeatData.repeatExecuteOn = repeatExecuteOn;
    repeatData.repeatFrequency = {
        month: (_a = {
                type: repeatExecuteOn
            },
            _a[repeatExecuteOn] = repeatExecuteOnData,
            _a),
    };
}
export function setWeeklyRepeat(repeatData, startDate) {
    repeatData.repeatFrequency = {
        week: {
            days: [getDay(startDate)],
        },
    };
}
//# sourceMappingURL=repeat.js.map
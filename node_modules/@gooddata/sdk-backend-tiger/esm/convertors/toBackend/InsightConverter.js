import { __assign } from "tslib";
import { cloneWithSanitizedIds } from "./IdSanitization";
import omit from "lodash/omit";
import flow from "lodash/flow";
function removeIdentifiers(insight) {
    var insightData = omit(insight.insight, ["ref", "uri", "identifier"]);
    return __assign(__assign({}, insight), { insight: insightData });
}
function removeVisualizationPropertiesSortItems(insight) {
    return __assign(__assign({}, insight), { insight: __assign(__assign({}, insight.insight), { properties: omit(insight.insight.properties, ["sortItems"]) }) });
}
export var convertInsight = function (insight) {
    var sanitizedInsight = flow(removeIdentifiers, removeVisualizationPropertiesSortItems)(insight);
    return {
        buckets: cloneWithSanitizedIds(sanitizedInsight.insight.buckets),
        filters: cloneWithSanitizedIds(sanitizedInsight.insight.filters),
        sorts: cloneWithSanitizedIds(sanitizedInsight.insight.sorts),
        properties: sanitizedInsight.insight.properties,
        visualizationUrl: sanitizedInsight.insight.visualizationUrl,
        version: "2",
    };
};
//# sourceMappingURL=InsightConverter.js.map
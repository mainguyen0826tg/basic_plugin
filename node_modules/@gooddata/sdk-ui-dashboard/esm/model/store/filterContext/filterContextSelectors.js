// (C) 2021 GoodData Corporation
import { createSelector } from "@reduxjs/toolkit";
import invariant from "ts-invariant";
import { isDashboardAttributeFilter, isDashboardDateFilter, } from "@gooddata/sdk-backend-spi";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import { newDisplayFormMap } from "../../../_staging/metadata/objRefMap";
import { createMemoizedSelector } from "../_infra/selectors";
var selectSelf = createSelector(function (state) { return state; }, function (state) { return state.filterContext; });
/**
 * This selector returns dashboard's filter context definition. It is expected that the selector is called only after the filter
 * context state is correctly initialized. Invocations before initialization lead to invariant errors.
 *
 * @alpha
 */
export var selectFilterContextDefinition = createSelector(selectSelf, function (filterContextState) {
    invariant(filterContextState.filterContextDefinition, "attempting to access uninitialized filter context state");
    return filterContextState.filterContextDefinition;
});
/**
 * Selects dashboard's filter context identity.
 *
 * The identity may be undefined in two circumstances:
 *
 * -  a new, yet unsaved dashboard; the filter context is saved together with the dashboard and after the
 *    save the identity will be known and added
 * -  export of an existing, saved dashboard; during the export the dashboard receives a temporary
 *    filter context that represents values of filters at the time the export was initiated - which may
 *    be different from what is saved in the filter context itself. that temporary context is not
 *    persistent and lives only for that particular export operation.
 *
 * @alpha
 */
export var selectFilterContextIdentity = createSelector(selectSelf, function (filterContextState) {
    // this is intentional; want to fail fast when trying to access an optional identity of filter context \
    // but there is actually no filter context initialized for the dashboard
    invariant(filterContextState.filterContextDefinition, "attempting to access uninitialized filter context state");
    return filterContextState.filterContextIdentity;
});
/**
 * Selects list of display form metadata objects referenced by attribute filters.
 *
 * @alpha
 */
export var selectAttributeFilterDisplayForms = createSelector(selectSelf, function (filterContextState) {
    invariant(filterContextState.attributeFilterDisplayForms, "attempting to access uninitialized filter context state");
    return filterContextState.attributeFilterDisplayForms;
});
/**
 * Selects map of display form metadata objects referenced by attribute filters.
 *
 * @alpha
 */
export var selectAttributeFilterDisplayFormsMap = createSelector(selectSelf, function (filterContextState) {
    invariant(filterContextState.attributeFilterDisplayForms, "attempting to access uninitialized filter context state");
    return newDisplayFormMap(filterContextState.attributeFilterDisplayForms);
});
/**
 * This selector returns dashboard's filter context filters. It is expected that the selector is called only after the filter
 * context state is correctly initialized. Invocations before initialization lead to invariant errors.
 *
 * @alpha
 */
export var selectFilterContextFilters = createSelector(selectFilterContextDefinition, function (filterContext) { return filterContext.filters; });
/**
 * This selector returns dashboard's filter context attribute filters. It is expected that the selector is called only after the filter
 * context state is correctly initialized. Invocations before initialization lead to invariant errors.
 *
 * @alpha
 */
export var selectFilterContextAttributeFilters = createSelector(selectFilterContextFilters, function (filters) { return filters.filter(isDashboardAttributeFilter); });
/**
 * This selector returns dashboard's filter context date filter. It is expected that the selector is called only after the filter
 * context state is correctly initialized. Invocations before initialization lead to invariant errors.
 *
 * @alpha
 */
export var selectFilterContextDateFilter = createSelector(selectFilterContextFilters, function (filters) { return filters.find(isDashboardDateFilter); });
/**
 * Creates a selector for selecting attribute filter by its displayForm {@link @gooddata/sdk-model#ObjRef}.
 *
 * @alpha
 */
export var selectFilterContextAttributeFilterByDisplayForm = createMemoizedSelector(function (displayForm) {
    return createSelector(selectAttributeFilterDisplayFormsMap, selectFilterContextAttributeFilters, function (attributeDisplayFormsMap, attributeFilters) {
        var df = attributeDisplayFormsMap.get(displayForm);
        return attributeFilters.find(function (filter) {
            return areObjRefsEqual(filter.attributeFilter.displayForm, df === null || df === void 0 ? void 0 : df.ref);
        });
    });
});
/**
 * Creates a selector for selecting attribute filter by its localId.
 *
 * @alpha
 */
export var selectFilterContextAttributeFilterByLocalId = createMemoizedSelector(function (localId) {
    return createSelector(selectFilterContextAttributeFilters, function (attributeFilters) {
        return attributeFilters.find(function (filter) { return filter.attributeFilter.localIdentifier === localId; });
    });
});
/**
 * Creates a selector for selecting attribute filter index by its localId.
 *
 *
 * @alpha
 */
export var selectFilterContextAttributeFilterIndexByLocalId = createMemoizedSelector(function (localId) {
    return createSelector(selectFilterContextAttributeFilters, function (attributeFilters) {
        return attributeFilters.findIndex(function (filter) { return filter.attributeFilter.localIdentifier === localId; });
    });
});
//# sourceMappingURL=filterContextSelectors.js.map
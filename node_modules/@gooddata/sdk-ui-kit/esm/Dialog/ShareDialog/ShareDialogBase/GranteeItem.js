// (C) 2021 GoodData Corporation
import React, { useCallback, useMemo } from "react";
import { FormattedMessage, useIntl } from "react-intl";
import cx from "classnames";
import { getGranteeLabel, getGranteeItemTestId } from "./utils";
import { GranteeGroupIcon, GranteeOwnerRemoveIcon, GranteeRemoveIcon, GranteeUserIcon, GranteeUserInactiveIcon, } from "./GranteeIcons";
import { Button } from "../../../Button";
var GranteeUserItem = function (props) {
    var grantee = props.grantee, mode = props.mode, onDelete = props.onDelete;
    var intl = useIntl();
    var granteeLabel = useMemo(function () {
        var userName = getGranteeLabel(grantee, intl);
        return grantee.isCurrentUser
            ? intl.formatMessage({ id: "shareDialog.share.grantee.item.you" }, { userName: userName })
            : userName;
    }, [grantee, intl]);
    var onClick = useCallback(function () {
        onDelete(grantee);
    }, [grantee, onDelete]);
    var itemClassName = cx("gd-share-dialog-grantee-item", getGranteeItemTestId(grantee));
    return (React.createElement("div", { className: itemClassName },
        grantee.isOwner ? (React.createElement(GranteeOwnerRemoveIcon, null)) : (React.createElement(GranteeRemoveIcon, { mode: mode, onClick: onClick })),
        React.createElement("div", { className: "gd-grantee-content" },
            React.createElement("div", { className: "gd-grantee-content-label" }, granteeLabel),
            React.createElement("div", { className: "gd-grantee-content-label gd-grantee-content-email" }, grantee.email)),
        React.createElement(GranteeUserIcon, null)));
};
var GranteeUserInactiveItem = function (props) {
    var grantee = props.grantee;
    var intl = useIntl();
    var granteeLabel = useMemo(function () {
        return getGranteeLabel(grantee, intl);
    }, [grantee, intl]);
    var itemClassName = cx("gd-share-dialog-grantee-item", getGranteeItemTestId(grantee));
    return (React.createElement("div", { className: itemClassName },
        React.createElement(GranteeOwnerRemoveIcon, null),
        React.createElement("div", { className: "gd-grantee-content" },
            React.createElement("div", { className: "gd-grantee-content-label-inactive" }, granteeLabel),
            React.createElement("div", { className: "gd-grantee-content-label-inactive gd-grantee-content-inactive" },
                React.createElement(FormattedMessage, { id: "shareDialog.share.grantee.item.user.inactive.description" }))),
        React.createElement(GranteeUserInactiveIcon, null)));
};
var GranteeGroupItem = function (props) {
    var grantee = props.grantee, onDelete = props.onDelete, mode = props.mode;
    var intl = useIntl();
    var onClick = useCallback(function () {
        onDelete(grantee);
    }, [grantee, onDelete]);
    var groupName = useMemo(function () { return getGranteeLabel(grantee, intl); }, [grantee, intl]);
    var numOfUsers = useMemo(function () {
        if (grantee.memberCount) {
            return intl.formatMessage({
                id: "shareDialog.share.grantee.item.users.count",
            }, { granteeCount: grantee.memberCount });
        }
    }, [grantee, intl]);
    var itemClassName = cx("gd-share-dialog-grantee-item", getGranteeItemTestId(grantee));
    return (React.createElement("div", { className: itemClassName },
        React.createElement(GranteeRemoveIcon, { mode: mode, onClick: onClick }),
        React.createElement("div", { className: "gd-grantee-content" },
            React.createElement("div", { className: "gd-grantee-content-label" }, groupName),
            numOfUsers && (React.createElement("div", { className: "gd-grantee-count-button" },
                React.createElement(Button, { className: "gd-button-link-dimmed gd-button gd-grantee-content-user-count s-grantee-content-user-count", value: numOfUsers })))),
        React.createElement(GranteeGroupIcon, null)));
};
/**
 * @internal
 */
export var GranteeItemComponent = function (props) {
    var grantee = props.grantee, mode = props.mode, onDelete = props.onDelete;
    if (grantee.type === "user") {
        return React.createElement(GranteeUserItem, { grantee: grantee, mode: mode, onDelete: onDelete });
    }
    else if (grantee.type === "inactive_user") {
        return React.createElement(GranteeUserInactiveItem, { grantee: grantee });
    }
    else {
        return React.createElement(GranteeGroupItem, { grantee: grantee, mode: mode, onDelete: onDelete });
    }
};
//# sourceMappingURL=GranteeItem.js.map
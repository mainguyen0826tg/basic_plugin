import { IInsight, ObjRef, VisualizationProperties } from "@gooddata/sdk-model";
import { DrillDefinition, ICatalogDateDataset, IDashboardAttributeFilter, IInsightWidget, IInsightWidgetDefinition } from "@gooddata/sdk-backend-spi";
import { IDashboardEvent } from "./base";
import { WidgetHeader } from "../types/widgetTypes";
import { DashboardContext } from "../types/commonTypes";
import { IExportConfig } from "../types/exportTypes";
/**
 * This event is emitted when the header of an insight widget changed. The new value of the header (title)
 * is included in the event.
 *
 * @alpha
 */
export interface DashboardInsightWidgetHeaderChanged extends IDashboardEvent {
    readonly type: "GDC.DASH/EVT.INSIGHT_WIDGET.HEADER_CHANGED";
    readonly payload: {
        /**
         * Reference to Insight Widget that was changed.
         */
        readonly ref: ObjRef;
        /**
         * New widget header that is now used on the widget.
         */
        readonly header: WidgetHeader;
    };
}
export declare function insightWidgetHeaderChanged(ctx: DashboardContext, ref: ObjRef, header: WidgetHeader, correlationId?: string): DashboardInsightWidgetHeaderChanged;
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetHeaderChanged}.
 *
 * @param obj - object to test
 * @alpha
 */
export declare const isDashboardInsightWidgetHeaderChanged: (obj: unknown) => obj is DashboardInsightWidgetHeaderChanged;
/**
 * This event is emitted when the insight widget's filter settings change.
 *
 * Filter settings influence what date dataset to use for filter or which of the dashboard's attribute filters
 * should be used for the widget. A change of filter settings means the insight rendered in the widget will
 * be re-rendered.
 *
 * @alpha
 */
export interface DashboardInsightWidgetFilterSettingsChanged extends IDashboardEvent {
    readonly type: "GDC.DASH/EVT.INSIGHT_WIDGET.FILTER_SETTINGS_CHANGED";
    readonly payload: {
        /**
         * Reference to Insight Widget that was changed.
         */
        readonly ref: ObjRef;
        /**
         * Attribute filters that are ignored for the widget.
         *
         * If empty, then all attribute filters defined for the dashboard are in effect.
         */
        readonly ignoredAttributeFilters: IDashboardAttributeFilter[];
        /**
         * Date dataset used for date filtering.
         *
         * If undefined, then dashboard's date filter is not in effect for the widget.
         */
        readonly dateDatasetForFiltering?: ICatalogDateDataset;
    };
}
export declare function insightWidgetFilterSettingsChanged(ctx: DashboardContext, ref: ObjRef, ignoredAttributeFilters: IDashboardAttributeFilter[], dateDatasetForFiltering: ICatalogDateDataset | undefined, correlationId?: string): DashboardInsightWidgetFilterSettingsChanged;
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetFilterSettingsChanged}.
 *
 * @param obj - object to test
 * @alpha
 */
export declare const isDashboardInsightWidgetFilterSettingsChanged: (obj: unknown) => obj is DashboardInsightWidgetFilterSettingsChanged;
/**
 * This event is emitted when the insight widget's visualization properties change.
 *
 * The properties specified influence how the insight rendered in the widget appears visually (legend, tooltips,
 * axes, etc)
 *
 * @alpha
 */
export interface DashboardInsightWidgetVisPropertiesChanged extends IDashboardEvent {
    readonly type: "GDC.DASH/EVT.INSIGHT_WIDGET.PROPERTIES_CHANGED";
    readonly payload: {
        /**
         * Reference to Insight Widget that was changed.
         */
        readonly ref: ObjRef;
        /**
         * New visualization properties that are now in effect for the insight widget. These properties
         * will be merged with the properties defined on the insight itself. They will influence how the
         * insight visually appears.
         *
         * Will be undefined if there are no widget-level visualization properties set for the particular
         * insight widget.
         */
        readonly properties: VisualizationProperties | undefined;
    };
}
export declare function insightWidgetVisPropertiesChanged(ctx: DashboardContext, ref: ObjRef, properties: VisualizationProperties | undefined, correlationId?: string): DashboardInsightWidgetVisPropertiesChanged;
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetVisPropertiesChanged}.
 *
 * @param obj - object to test
 * @alpha
 */
export declare const isDashboardInsightWidgetVisPropertiesChanged: (obj: unknown) => obj is DashboardInsightWidgetVisPropertiesChanged;
/**
 * This event is emitted when the insight rendered inside an insight widget gets switched for another one.
 *
 * That essentially means the insight widget now renders a different visualization
 *
 * @alpha
 */
export interface DashboardInsightWidgetInsightSwitched extends IDashboardEvent {
    readonly type: "GDC.DASH/EVT.INSIGHT_WIDGET.INSIGHT_SWITCHED";
    readonly payload: {
        /**
         * Reference to Insight Widget that was changed.
         */
        readonly ref: ObjRef;
        /**
         * The new insight that is now rendered for the widget.
         */
        readonly insight: IInsight;
    };
}
export declare function insightWidgetInsightChanged(ctx: DashboardContext, ref: ObjRef, insight: IInsight, correlationId?: string): DashboardInsightWidgetInsightSwitched;
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetInsightSwitched}.
 *
 * @param obj - object to test
 * @alpha
 */
export declare const isDashboardInsightWidgetInsightSwitched: (obj: unknown) => obj is DashboardInsightWidgetInsightSwitched;
/**
 * This event is emitted when the insight widget's drill definitions change. The change may include
 * addition or change of drill definition for one or more drillable measures.
 *
 * @alpha
 */
export interface DashboardInsightWidgetDrillsModified extends IDashboardEvent {
    readonly type: "GDC.DASH/EVT.INSIGHT_WIDGET.DRILLS_MODIFIED";
    readonly payload: {
        /**
         * Reference to Insight Widget that was changed.
         */
        readonly ref: ObjRef;
        /**
         * Drill definitions that were newly added. There will be at most one drill definition for drillable
         * measure.
         */
        readonly added: DrillDefinition[];
        /**
         * Drill definitions that were updated. For each measure that was already set up with a drill definition,
         * there will be the new drill definition.
         */
        readonly updated: DrillDefinition[];
    };
}
export declare function insightWidgetDrillsModified(ctx: DashboardContext, ref: ObjRef, added: DrillDefinition[], updated: DrillDefinition[], correlationId?: string): DashboardInsightWidgetDrillsModified;
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetDrillsModified}.
 *
 * @param obj - object to test
 * @alpha
 */
export declare const isDashboardInsightWidgetDrillsModified: (obj: unknown) => obj is DashboardInsightWidgetDrillsModified;
/**
 * This event is emitted when the insight widget's drill definitions are removed. The measures for which
 * the drill definitions were set up will no longer be clickable.
 *
 * @alpha
 */
export interface DashboardInsightWidgetDrillsRemoved extends IDashboardEvent {
    readonly type: "GDC.DASH/EVT.INSIGHT_WIDGET.DRILLS_REMOVED";
    readonly payload: {
        /**
         * Reference to Insight Widget that was changed.
         */
        readonly ref: ObjRef;
        /**
         * Drill definitions that were removed.
         */
        readonly removed: DrillDefinition[];
    };
}
export declare function insightWidgetDrillsRemoved(ctx: DashboardContext, ref: ObjRef, removed: DrillDefinition[], correlationId?: string): DashboardInsightWidgetDrillsRemoved;
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetDrillsRemoved}.
 *
 * @param obj - object to test
 * @alpha
 */
export declare const isDashboardInsightWidgetDrillsRemoved: (obj: unknown) => obj is DashboardInsightWidgetDrillsRemoved;
/**
 * This event is emitted after any change to Insight Widget configuration. It contains the entire new state of the
 * Insight Widget.
 *
 * @alpha
 */
export interface DashboardInsightWidgetChanged extends IDashboardEvent {
    readonly type: "GDC.DASH/EVT.INSIGHT_WIDGET.WIDGET_CHANGED";
    readonly payload: {
        /**
         * The entire definition of the insight widget after the change.
         */
        insightWidget: IInsightWidget | IInsightWidgetDefinition;
    };
}
export declare function insightWidgetChanged(ctx: DashboardContext, insightWidget: IInsightWidget | IInsightWidgetDefinition, correlationId?: string): DashboardInsightWidgetChanged;
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetChanged}.
 *
 * @param obj - object to test
 * @alpha
 */
export declare const isDashboardInsightWidgetChanged: (obj: unknown) => obj is DashboardInsightWidgetChanged;
/**
 * This event is emitted after export of an insight widget is requested.
 *
 * @alpha
 */
export interface DashboardInsightWidgetExportRequested extends IDashboardEvent {
    readonly type: "GDC.DASH/EVT.INSIGHT_WIDGET.EXPORT_REQUESTED";
    readonly payload: {
        ref: ObjRef;
        config: IExportConfig;
    };
}
/**
 * @alpha
 */
export declare function insightWidgetExportRequested(ctx: DashboardContext, ref: ObjRef, config: IExportConfig, correlationId?: string): DashboardInsightWidgetExportRequested;
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetExportRequested}.
 *
 * @param obj - object to test
 * @alpha
 */
export declare const isDashboardInsightWidgetExportRequested: (obj: unknown) => obj is DashboardInsightWidgetExportRequested;
/**
 * This event is emitted after export of an insight widget is resolved.
 *
 * @alpha
 */
export interface DashboardInsightWidgetExportResolved extends IDashboardEvent {
    readonly type: "GDC.DASH/EVT.INSIGHT_WIDGET.EXPORT_RESOLVED";
    readonly payload: {
        /**
         * URI of the resulting file that can be used to download it.
         */
        resultUri: string;
    };
}
/**
 * @alpha
 */
export declare function insightWidgetExportResolved(ctx: DashboardContext, resultUri: string, correlationId?: string): DashboardInsightWidgetExportResolved;
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetExportResolved}.
 *
 * @param obj - object to test
 * @alpha
 */
export declare const isDashboardInsightWidgetExportResolved: (obj: unknown) => obj is DashboardInsightWidgetExportResolved;
//# sourceMappingURL=insight.d.ts.map
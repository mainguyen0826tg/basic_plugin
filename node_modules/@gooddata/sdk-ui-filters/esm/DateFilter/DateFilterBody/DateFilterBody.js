import { __extends } from "tslib";
// (C) 2007-2019 GoodData Corporation
import React from "react";
import isEmpty from "lodash/isEmpty";
import cx from "classnames";
import { FormattedMessage } from "react-intl";
import { ListItem } from "../ListItem/ListItem";
import { ExcludeCurrentPeriodToggle } from "../ExcludeCurrentPeriodToggle/ExcludeCurrentPeriodToggle";
import { VisibleScrollbar } from "../VisibleScrollbar/VisibleScrollbar";
import { getDateFilterOptionGranularity } from "../utils/OptionUtils";
import { AllTimeFilterItem } from "./AllTimeFilterItem";
import { DateFilterFormWrapper } from "../DateFilterFormWrapper/DateFilterFormWrapper";
import { AbsoluteDateFilterForm } from "../AbsoluteDateFilterForm/AbsoluteDateFilterForm";
import { ListItemTooltip } from "../ListItemTooltip/ListItemTooltip";
import { RelativeDateFilterForm } from "../RelativeDateFilterForm/RelativeDateFilterForm";
import { RelativePresetFilterItems } from "./RelativePresetFilterItems";
import { EditModeMessage } from "./EditModeMessage";
import { DateFilterHeader } from "./DateFilterHeader";
import { DateFilterBodyButton } from "./DateFilterBodyButton";
import { AbsolutePresetFilterItems } from "./AbsolutePresetFilterItems";
import { isAbsoluteDateFilterForm, isRelativeDateFilterForm, } from "@gooddata/sdk-backend-spi";
var ACTIONS_BUTTONS_HEIGHT = 53;
var EXCLUDE_OPEN_PERIOD_HEIGHT = 30; // height of 'Exclude open period' checkbox component
var MARGIN_BOTTOM = 8;
var MOBILE_WIDTH = 414; // iPhone 11 Pro Max
var ITEM_CLASS_MOBILE = "gd-date-filter-item-mobile";
var DateFilterBody = /** @class */ (function (_super) {
    __extends(DateFilterBody, _super);
    function DateFilterBody() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            route: null,
        };
        _this.changeRoute = function (route) {
            if (route === void 0) { route = null; }
            _this.setState({ route: route });
        };
        _this.renderAllTime = function () {
            var _a = _this.props, filterOptions = _a.filterOptions, isMobile = _a.isMobile, selectedFilterOption = _a.selectedFilterOption, onSelectedFilterOptionChange = _a.onSelectedFilterOptionChange;
            return filterOptions.allTime ? (React.createElement(AllTimeFilterItem, { filterOption: filterOptions.allTime, selectedFilterOption: selectedFilterOption, onSelectedFilterOptionChange: onSelectedFilterOptionChange, className: isMobile && ITEM_CLASS_MOBILE })) : null;
        };
        _this.renderAbsoluteForm = function () {
            var _a = _this.props, dateFormat = _a.dateFormat, filterOptions = _a.filterOptions, selectedFilterOption = _a.selectedFilterOption, onSelectedFilterOptionChange = _a.onSelectedFilterOptionChange, isMobile = _a.isMobile, errors = _a.errors;
            if (!filterOptions.absoluteForm) {
                return null;
            }
            var route = _this.state.route;
            var isSelected = filterOptions.absoluteForm.localIdentifier === selectedFilterOption.localIdentifier;
            var isOnRoute = route === "absoluteForm";
            return (React.createElement(React.Fragment, null,
                (!isMobile || !isOnRoute) && (React.createElement(ListItem, { isSelected: isSelected, onClick: function () {
                        _this.changeRoute("absoluteForm");
                        if (!isAbsoluteDateFilterForm(selectedFilterOption)) {
                            onSelectedFilterOptionChange(filterOptions.absoluteForm);
                        }
                    }, className: cx("s-absolute-form", "s-do-not-close-dropdown-on-click", isMobile && ITEM_CLASS_MOBILE) }, filterOptions.absoluteForm.name ? (filterOptions.absoluteForm.name) : (React.createElement(FormattedMessage, { id: "filters.staticPeriod" })))),
                isSelected && (!isMobile || isOnRoute) && (React.createElement(DateFilterFormWrapper, { isMobile: isMobile },
                    React.createElement(AbsoluteDateFilterForm, { dateFormat: dateFormat, errors: (errors && errors.absoluteForm) || undefined, onSelectedFilterOptionChange: onSelectedFilterOptionChange, selectedFilterOption: selectedFilterOption, isMobile: isMobile })))));
        };
        _this.renderRelativeForm = function () {
            var _a = _this.props, filterOptions = _a.filterOptions, selectedFilterOption = _a.selectedFilterOption, onSelectedFilterOptionChange = _a.onSelectedFilterOptionChange, availableGranularities = _a.availableGranularities, isMobile = _a.isMobile;
            if (!filterOptions.relativeForm) {
                return null;
            }
            var route = _this.state.route;
            var isSelected = filterOptions.relativeForm.localIdentifier === selectedFilterOption.localIdentifier;
            var isOnRoute = route === "relativeForm";
            return (React.createElement(React.Fragment, null,
                (!isMobile || !isOnRoute) && (React.createElement(ListItem, { isSelected: isSelected, onClick: function () {
                        _this.changeRoute("relativeForm");
                        if (!isRelativeDateFilterForm(selectedFilterOption)) {
                            onSelectedFilterOptionChange(filterOptions.relativeForm);
                        }
                    }, className: cx("s-relative-form", "s-do-not-close-dropdown-on-click", isMobile && ITEM_CLASS_MOBILE) },
                    filterOptions.relativeForm.name ? (filterOptions.relativeForm.name) : (React.createElement(FormattedMessage, { id: "filters.floatingRange" })),
                    !isMobile && (React.createElement(ListItemTooltip, { bubbleAlignPoints: [{ align: "cr cl" }] },
                        React.createElement(FormattedMessage, { id: "filters.floatingRange.tooltip" }))))),
                isSelected && (!isMobile || isOnRoute) && (React.createElement(DateFilterFormWrapper, { isMobile: isMobile },
                    React.createElement(RelativeDateFilterForm, { onSelectedFilterOptionChange: function (option) {
                            onSelectedFilterOptionChange(option);
                        }, selectedFilterOption: selectedFilterOption, availableGranularities: availableGranularities, isMobile: isMobile })))));
        };
        _this.renderAbsolutePreset = function () {
            var _a = _this.props, dateFormat = _a.dateFormat, filterOptions = _a.filterOptions, selectedFilterOption = _a.selectedFilterOption, onSelectedFilterOptionChange = _a.onSelectedFilterOptionChange, isMobile = _a.isMobile;
            return filterOptions.absolutePreset && filterOptions.absolutePreset.length > 0 ? (React.createElement(AbsolutePresetFilterItems, { dateFormat: dateFormat, filterOptions: filterOptions.absolutePreset, selectedFilterOption: selectedFilterOption, onSelectedFilterOptionChange: onSelectedFilterOptionChange, className: isMobile && ITEM_CLASS_MOBILE })) : null;
        };
        _this.renderRelativePreset = function () {
            var _a = _this.props, dateFormat = _a.dateFormat, filterOptions = _a.filterOptions, selectedFilterOption = _a.selectedFilterOption, onSelectedFilterOptionChange = _a.onSelectedFilterOptionChange, isMobile = _a.isMobile;
            return filterOptions.relativePreset ? (React.createElement(RelativePresetFilterItems, { dateFormat: dateFormat, filterOption: filterOptions.relativePreset, selectedFilterOption: selectedFilterOption, onSelectedFilterOptionChange: onSelectedFilterOptionChange, className: isMobile && ITEM_CLASS_MOBILE })) : null;
        };
        _this.renderExcludeCurrent = function () {
            var _a = _this.props, selectedFilterOption = _a.selectedFilterOption, onExcludeCurrentPeriodChange = _a.onExcludeCurrentPeriodChange, excludeCurrentPeriod = _a.excludeCurrentPeriod, isExcludeCurrentPeriodEnabled = _a.isExcludeCurrentPeriodEnabled;
            return (React.createElement(ExcludeCurrentPeriodToggle, { value: excludeCurrentPeriod, onChange: onExcludeCurrentPeriodChange, disabled: !isExcludeCurrentPeriodEnabled, granularity: getDateFilterOptionGranularity(selectedFilterOption) }));
        };
        _this.calculateHeight = function (showExcludeCurrent) {
            // Mobile in Horizontal Layout
            if (window.innerHeight <= MOBILE_WIDTH) {
                var excludeOpenPeriodHeight = showExcludeCurrent ? EXCLUDE_OPEN_PERIOD_HEIGHT : 0;
                return window.innerHeight - excludeOpenPeriodHeight - ACTIONS_BUTTONS_HEIGHT - MARGIN_BOTTOM;
            }
            return undefined;
        };
        return _this;
    }
    DateFilterBody.prototype.componentDidMount = function () {
        // Dropdown component does not expose isOpened prop but it mounts
        // this component every time it is opened and un-mounts when closed
        if (this.props.isMobile) {
            if (isAbsoluteDateFilterForm(this.props.selectedFilterOption)) {
                this.changeRoute("absoluteForm");
            }
            else if (isRelativeDateFilterForm(this.props.selectedFilterOption)) {
                this.changeRoute("relativeForm");
            }
        }
    };
    DateFilterBody.prototype.render = function () {
        var _a = this.props, isExcludeCurrentPeriodEnabled = _a.isExcludeCurrentPeriodEnabled, isMobile = _a.isMobile, isEditMode = _a.isEditMode, onApplyClick = _a.onApplyClick, onCancelClick = _a.onCancelClick, closeDropdown = _a.closeDropdown, selectedFilterOption = _a.selectedFilterOption, dateFilterButton = _a.dateFilterButton, errors = _a.errors;
        var route = this.state.route;
        var showExcludeCurrent = !isMobile || isExcludeCurrentPeriodEnabled;
        var bodyHeight = this.calculateHeight(showExcludeCurrent);
        var wrapperStyle = {};
        var scrollerStyle = {};
        if (bodyHeight) {
            // display: flex causes the scroller is cut off when scrolling
            wrapperStyle = { display: "block", height: bodyHeight + "px" };
            scrollerStyle = { minHeight: bodyHeight + "px" };
        }
        return (React.createElement("div", { className: "gd-extended-date-filter-container" },
            React.createElement("div", { className: cx("gd-extended-date-filter-body", "s-extended-date-filters-body", isMobile && "gd-extended-date-filter-body-mobile") },
                route === null && isMobile && (React.createElement("div", { onClick: function () {
                        onCancelClick();
                        closeDropdown();
                    } }, dateFilterButton)),
                React.createElement("div", { className: cx("gd-extended-date-filter-body-wrapper", {
                        "gd-extended-date-filter-body-wrapper-wide": isRelativeDateFilterForm(selectedFilterOption),
                    }), style: wrapperStyle },
                    isEditMode && !isMobile && React.createElement(EditModeMessage, null),
                    isMobile ? (this.renderMobileContent()) : (React.createElement(VisibleScrollbar, { className: "gd-extended-date-filter-body-scrollable", style: scrollerStyle }, this.renderDefaultContent()))),
                showExcludeCurrent ? this.renderExcludeCurrent() : null,
                React.createElement("div", { className: cx("gd-extended-date-filter-actions") },
                    React.createElement("div", { className: "gd-extended-date-filter-actions-buttons" },
                        React.createElement(DateFilterBodyButton, { messageId: "cancel", className: "gd-button-secondary s-date-filter-cancel", onClick: function () {
                                onCancelClick();
                                closeDropdown();
                            } }),
                        React.createElement(DateFilterBodyButton, { messageId: "apply", className: "gd-button-action s-date-filter-apply", disabled: !isEmpty(errors), onClick: function () {
                                onApplyClick();
                                closeDropdown();
                            } }))))));
    };
    DateFilterBody.prototype.renderMobileContent = function () {
        var route = this.state.route;
        if (route === "absoluteForm") {
            return (React.createElement(React.Fragment, null,
                React.createElement(DateFilterHeader, { changeRoute: this.changeRoute },
                    React.createElement(FormattedMessage, { id: "filters.staticPeriod" })),
                this.renderAbsoluteForm()));
        }
        if (route === "relativeForm") {
            return isEmpty(this.props.availableGranularities) ? null : (React.createElement(React.Fragment, null,
                React.createElement(DateFilterHeader, { changeRoute: this.changeRoute },
                    React.createElement(FormattedMessage, { id: "filters.floatingRange" })),
                this.renderRelativeForm()));
        }
        return this.renderDefaultContent();
    };
    DateFilterBody.prototype.renderDefaultContent = function () {
        return (React.createElement(React.Fragment, null,
            this.renderAllTime(),
            this.renderAbsoluteForm(),
            !isEmpty(this.props.availableGranularities) && this.renderRelativeForm(),
            this.renderAbsolutePreset(),
            this.renderRelativePreset()));
    };
    return DateFilterBody;
}(React.Component));
export { DateFilterBody };
//# sourceMappingURL=DateFilterBody.js.map
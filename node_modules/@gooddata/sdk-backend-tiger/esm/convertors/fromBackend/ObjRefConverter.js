import { NotSupported, UnexpectedError } from "@gooddata/sdk-backend-spi";
import { isUriRef } from "@gooddata/sdk-model";
import isEmpty from "lodash/isEmpty";
import { isTigerType, tigerIdTypeToObjectType } from "../../types/refTypeMapping";
export function toObjectType(value) {
    if (!isTigerType(value)) {
        throw new UnexpectedError("Cannot convert " + value + " to ObjRef, " + value + " is not valid TigerAfmType");
    }
    return tigerIdTypeToObjectType[value];
}
export function toObjRef(qualifier) {
    if (isUriRef(qualifier)) {
        throw new NotSupported("Tiger backend does not allow referencing objects by URI.");
    }
    return {
        identifier: qualifier.identifier.id,
        type: toObjectType(qualifier.identifier.type),
    };
}
export function isJsonApiId(obj) {
    var _a, _b;
    return !isEmpty(obj) && ((_a = obj) === null || _a === void 0 ? void 0 : _a.id) !== undefined && ((_b = obj) === null || _b === void 0 ? void 0 : _b.type) !== undefined;
}
export function jsonApiIdToObjRef(idAndType) {
    return {
        identifier: idAndType.id,
        type: toObjectType(idAndType.type),
    };
}
//# sourceMappingURL=ObjRefConverter.js.map
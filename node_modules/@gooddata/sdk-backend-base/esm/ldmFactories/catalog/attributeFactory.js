import { __extends } from "tslib";
// (C) 2019-2020 GoodData Corporation
import identity from "lodash/identity";
import { newAttribute } from "@gooddata/sdk-model";
import { isAttributeDisplayFormMetadataObject, isAttributeMetadataObject, } from "@gooddata/sdk-backend-spi";
import { GroupableCatalogItemBuilder } from "./groupFactory";
import { builderFactory } from "../builder";
import { newAttributeMetadataObject } from "../metadata/attributeFactory";
import { newAttributeDisplayFormMetadataObject, } from "../metadata/displayFormFactory";
/**
 * Catalog attribute builder
 * See {@link Builder}
 *
 * @beta
 */
var CatalogAttributeBuilder = /** @class */ (function (_super) {
    __extends(CatalogAttributeBuilder, _super);
    function CatalogAttributeBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CatalogAttributeBuilder.prototype.attribute = function (attributeOrRef, modifications) {
        if (!isAttributeMetadataObject(attributeOrRef)) {
            this.item.attribute = newAttributeMetadataObject(attributeOrRef, modifications);
        }
        else {
            this.item.attribute = attributeOrRef;
        }
        return this;
    };
    CatalogAttributeBuilder.prototype.defaultDisplayForm = function (displayFormOrRef, modifications) {
        if (!isAttributeDisplayFormMetadataObject(displayFormOrRef)) {
            this.item.defaultDisplayForm = newAttributeDisplayFormMetadataObject(displayFormOrRef, modifications);
        }
        else {
            this.item.defaultDisplayForm = displayFormOrRef;
        }
        return this;
    };
    CatalogAttributeBuilder.prototype.displayForms = function (displayForms) {
        this.item.displayForms = displayForms;
        return this;
    };
    CatalogAttributeBuilder.prototype.geoPinDisplayForms = function (displayForms) {
        this.item.geoPinDisplayForms = displayForms;
        return this;
    };
    CatalogAttributeBuilder.prototype.toExecutionModel = function (modifications) {
        var _this = this;
        if (modifications === void 0) { modifications = identity; }
        if (!this.item.defaultDisplayForm) {
            throw new Error("Cannot convert catalog attribute to execution model, no displayForm found!");
        }
        var defaultModifications = function (a) { var _a; return a.alias((_a = _this.item.defaultDisplayForm) === null || _a === void 0 ? void 0 : _a.title); };
        return newAttribute(this.item.defaultDisplayForm.ref, function (m) { return modifications(defaultModifications(m)); });
    };
    return CatalogAttributeBuilder;
}(GroupableCatalogItemBuilder));
export { CatalogAttributeBuilder };
/**
 * Catalog attribute factory
 *
 * @param modifications - catalog attribute builder modifications to perform
 * @returns created catalog attribute
 * @beta
 */
export var newCatalogAttribute = function (modifications) {
    if (modifications === void 0) { modifications = identity; }
    return builderFactory(CatalogAttributeBuilder, { type: "attribute" }, modifications);
};
//# sourceMappingURL=attributeFactory.js.map
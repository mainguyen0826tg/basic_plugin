import { __extends } from "tslib";
// (C) 2019-2021 GoodData Corporation
import isEmpty from "lodash/isEmpty";
/**
 * Types of errors that can be raised by Analytical Backends.
 *
 * @public
 */
export var AnalyticalBackendErrorTypes = {
    NO_DATA: "ND",
    DATA_TOO_LARGE: "DTL",
    PROTECTED_DATA: "PD",
    UNEXPECTED_HTTP: "UH",
    UNEXPECTED: "UE",
    NOT_SUPPORTED: "NS",
    NOT_IMPLEMENTED: "NI!",
    NOT_AUTHENTICATED: "NAuth",
};
/**
 * Superclass for all exceptions that can occur in Analytical Backend.
 *
 * @public
 */
var AnalyticalBackendError = /** @class */ (function (_super) {
    __extends(AnalyticalBackendError, _super);
    function AnalyticalBackendError(message, abeType, cause) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, message) || this;
        _this.abeType = abeType;
        _this.cause = cause;
        Object.setPrototypeOf(_this, _newTarget.prototype);
        return _this;
    }
    return AnalyticalBackendError;
}(Error));
export { AnalyticalBackendError };
/**
 * This exception MUST be thrown when the backend execution identifies that there is no data to
 * calculate.
 *
 * @public
 */
var NoDataError = /** @class */ (function (_super) {
    __extends(NoDataError, _super);
    function NoDataError(message, dataView, cause) {
        var _this = _super.call(this, message, AnalyticalBackendErrorTypes.NO_DATA, cause) || this;
        _this.dataView = dataView;
        return _this;
    }
    return NoDataError;
}(AnalyticalBackendError));
export { NoDataError };
/**
 * This exception MUST be thrown when backend execution identifies that there is too much data
 * to process for the execution and refuses to proceed.
 *
 * @public
 */
var DataTooLargeError = /** @class */ (function (_super) {
    __extends(DataTooLargeError, _super);
    function DataTooLargeError(message, cause) {
        return _super.call(this, message, AnalyticalBackendErrorTypes.DATA_TOO_LARGE, cause) || this;
    }
    return DataTooLargeError;
}(AnalyticalBackendError));
export { DataTooLargeError };
/**
 * This exception MUST be thrown when backend execution identifies that the data to calculate
 * results for is protected and the caller lacks the sufficient authorization.
 *
 * @public
 */
var ProtectedDataError = /** @class */ (function (_super) {
    __extends(ProtectedDataError, _super);
    function ProtectedDataError(message, cause) {
        return _super.call(this, message, AnalyticalBackendErrorTypes.PROTECTED_DATA, cause) || this;
    }
    return ProtectedDataError;
}(AnalyticalBackendError));
export { ProtectedDataError };
/**
 * This exception MUST be thrown when communication with the backend encounters an unexpected
 * response status code and it cannot handle or categorize it to a known, domain-specific error.
 *
 * @public
 */
var UnexpectedResponseError = /** @class */ (function (_super) {
    __extends(UnexpectedResponseError, _super);
    function UnexpectedResponseError(message, httpStatus, responseBody, cause) {
        var _this = _super.call(this, message, AnalyticalBackendErrorTypes.UNEXPECTED_HTTP, cause) || this;
        _this.httpStatus = httpStatus;
        _this.responseBody = responseBody;
        return _this;
    }
    return UnexpectedResponseError;
}(AnalyticalBackendError));
export { UnexpectedResponseError };
/**
 * This exception MUST be thrown when the unexpected happens. This is a last-resort error type that SHOULD
 * be used if the erroneous state cannot be categorized in a better way.
 *
 * @public
 */
var UnexpectedError = /** @class */ (function (_super) {
    __extends(UnexpectedError, _super);
    function UnexpectedError(message, cause) {
        return _super.call(this, message, AnalyticalBackendErrorTypes.UNEXPECTED, cause) || this;
    }
    return UnexpectedError;
}(AnalyticalBackendError));
export { UnexpectedError };
/**
 * This exception is thrown when client code asks Analytical Backend to exercise an unsupported feature.
 *
 * @public
 */
var NotSupported = /** @class */ (function (_super) {
    __extends(NotSupported, _super);
    function NotSupported(message) {
        return _super.call(this, message, AnalyticalBackendErrorTypes.NOT_SUPPORTED) || this;
    }
    return NotSupported;
}(AnalyticalBackendError));
export { NotSupported };
/**
 * This exception is thrown when client code asks Analytical Backend to exercise a feature that is not
 * implemented yet.
 * @public
 */
var NotImplemented = /** @class */ (function (_super) {
    __extends(NotImplemented, _super);
    function NotImplemented(message) {
        return _super.call(this, message, AnalyticalBackendErrorTypes.NOT_IMPLEMENTED) || this;
    }
    return NotImplemented;
}(AnalyticalBackendError));
export { NotImplemented };
/**
 * This exception is thrown when client code triggers an operation which requires authentication but the client
 * code did not provide credentials or the credentials are invalid.
 *
 * @public
 */
var NotAuthenticated = /** @class */ (function (_super) {
    __extends(NotAuthenticated, _super);
    function NotAuthenticated(message, cause) {
        return _super.call(this, message, AnalyticalBackendErrorTypes.NOT_AUTHENTICATED, cause) || this;
    }
    return NotAuthenticated;
}(AnalyticalBackendError));
export { NotAuthenticated };
/**
 * Type guard checking whether input is an instance of {@link AnalyticalBackendError}
 *
 * @public
 */
export function isAnalyticalBackendError(obj) {
    return !isEmpty(obj) && obj.abeType !== undefined;
}
/**
 * Type guard checking whether input is an instance of {@link NoDataError}
 *
 * @public
 */
export function isNoDataError(obj) {
    return isAnalyticalBackendError(obj) && obj.abeType === AnalyticalBackendErrorTypes.NO_DATA;
}
/**
 * Type guard checking whether input is an instance of {@link DataTooLargeError}
 *
 * @public
 */
export function isDataTooLargeError(obj) {
    return isAnalyticalBackendError(obj) && obj.abeType === AnalyticalBackendErrorTypes.DATA_TOO_LARGE;
}
/**
 * Type guard checking whether input is an instance of {@link ProtectedDataError}
 *
 * @public
 */
export function isProtectedDataError(obj) {
    return isAnalyticalBackendError(obj) && obj.abeType === AnalyticalBackendErrorTypes.PROTECTED_DATA;
}
/**
 * Type guard checking whether input is an instance of {@link UnexpectedResponseError}
 *
 * @public
 */
export function isUnexpectedResponseError(obj) {
    return isAnalyticalBackendError(obj) && obj.abeType === AnalyticalBackendErrorTypes.UNEXPECTED_HTTP;
}
/**
 * Type guard checking whether input is an instance of {@link UnexpectedResponseError}
 *
 * @public
 */
export function isUnexpectedError(obj) {
    return isAnalyticalBackendError(obj) && obj.abeType === AnalyticalBackendErrorTypes.UNEXPECTED;
}
/**
 * Type guard checking whether input is an instance of {@link NotSupported}
 *
 * @public
 */
export function isNotSupported(obj) {
    return isAnalyticalBackendError(obj) && obj.abeType === AnalyticalBackendErrorTypes.NOT_SUPPORTED;
}
/**
 * Type guard checking whether input is an instance of {@link NotImplemented}
 *
 * @public
 */
export function isNotImplemented(obj) {
    return isAnalyticalBackendError(obj) && obj.abeType === AnalyticalBackendErrorTypes.NOT_IMPLEMENTED;
}
/**
 * Type guard checking whether input is an instance of {@link NotAuthenticated}
 *
 * @public
 */
export function isNotAuthenticated(obj) {
    return isAnalyticalBackendError(obj) && obj.abeType === AnalyticalBackendErrorTypes.NOT_AUTHENTICATED;
}
//# sourceMappingURL=index.js.map
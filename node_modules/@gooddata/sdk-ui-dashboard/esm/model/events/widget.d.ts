import { IExecutionDefinition, ObjRef } from "@gooddata/sdk-model";
import { GoodDataSdkError } from "@gooddata/sdk-ui";
import { IDataView } from "@gooddata/sdk-backend-spi";
import { DashboardEventBody, IDashboardEvent } from "./base";
/**
 * This event is emitted after execution of an insight widget starts.
 *
 * @alpha
 */
export interface DashboardWidgetExecutionStarted extends IDashboardEvent {
    readonly type: "GDC.DASH/EVT.WIDGET.EXECUTION_STARTED";
    readonly payload: {
        /**
         * Reference to the widget that this event relates to.
         */
        widgetRef: ObjRef;
        /**
         * Instance of {@link @gooddata/sdk-model#IExecutionDefinition} that the widget executed.
         */
        executionDefinition: IExecutionDefinition;
    };
}
/**
 * @alpha
 */
export declare function widgetExecutionStarted(widgetRef: ObjRef, executionDefinition: IExecutionDefinition, correlationId?: string): DashboardEventBody<DashboardWidgetExecutionStarted>;
/**
 * Tests whether the provided object is an instance of {@link DashboardWidgetExecutionStarted}.
 *
 * @param obj - object to test
 * @alpha
 */
export declare const isDashboardWidgetExecutionStarted: (obj: unknown) => obj is DashboardWidgetExecutionStarted;
/**
 * This event is emitted after execution of an insight widget fails.
 *
 * @alpha
 */
export interface DashboardWidgetExecutionFailed extends IDashboardEvent {
    readonly type: "GDC.DASH/EVT.WIDGET.EXECUTION_FAILED";
    readonly payload: {
        /**
         * Instance of {@link @gooddata/sdk-ui#GoodDataSdkError} with the information about the error the related execution failed with.
         */
        error: GoodDataSdkError;
        /**
         * Reference to the widget that this event relates to.
         */
        widgetRef: ObjRef;
    };
}
/**
 * @alpha
 */
export declare function widgetExecutionFailed(widgetRef: ObjRef, error: GoodDataSdkError, correlationId?: string): DashboardEventBody<DashboardWidgetExecutionFailed>;
/**
 * Tests whether the provided object is an instance of {@link DashboardWidgetExecutionFailed}.
 *
 * @param obj - object to test
 * @alpha
 */
export declare const isDashboardWidgetExecutionFailed: (obj: unknown) => obj is DashboardWidgetExecutionFailed;
/**
 * This event is emitted after execution of an insight widget succeeds.
 *
 * @alpha
 */
export interface DashboardWidgetExecutionSucceeded extends IDashboardEvent {
    readonly type: "GDC.DASH/EVT.WIDGET.EXECUTION_SUCCEEDED";
    readonly payload: {
        /**
         * Instance of {@link @gooddata/sdk-backend-spi#IDataView} with the data the widget first requested.
         */
        dataView: IDataView;
        /**
         * Reference to the widget that this event relates to.
         */
        widgetRef: ObjRef;
    };
}
/**
 * @alpha
 */
export declare function widgetExecutionSucceeded(widgetRef: ObjRef, dataView: IDataView, correlationId?: string): DashboardEventBody<DashboardWidgetExecutionSucceeded>;
/**
 * Tests whether the provided object is an instance of {@link DashboardWidgetExecutionSucceeded}.
 *
 * @param obj - object to test
 * @alpha
 */
export declare const isDashboardWidgetExecutionSucceeded: (obj: unknown) => obj is DashboardWidgetExecutionSucceeded;
//# sourceMappingURL=widget.d.ts.map
var _a;
// (C) 2007-2021 GoodData Corporation
import merge from "lodash/merge";
import invariant from "ts-invariant";
import { VisualizationTypes } from "@gooddata/sdk-ui";
import { getCommonConfiguration } from "./commonConfiguration";
import { stringifyChartTypes } from "../_util/common";
import { getLineConfiguration } from "../lineChart/lineConfiguration";
import { getBarConfiguration } from "../barChart/barConfiguration";
import { getBulletConfiguration } from "../bulletChart/bulletConfiguration";
import { getColumnConfiguration } from "../columnChart/columnConfiguration";
import { getCustomizedConfiguration } from "./customConfiguration";
import { getPieConfiguration } from "../pieChart/pieConfiguration";
import { getDonutConfiguration } from "../donutChart/donutConfiguration";
import { getAreaConfiguration } from "../areaChart/areaConfiguration";
import { getScatterConfiguration } from "../scatterPlot/scatterConfiguration";
import { getComboConfiguration } from "../comboChart/comboConfiguration";
import { getTreemapConfiguration } from "../treemap/treemapConfiguration";
import { getFunnelConfiguration } from "../funnelChart/funnelConfiguration";
import { getHeatmapConfiguration } from "../heatmap/heatmapConfiguration";
import { getBubbleConfiguration } from "../bubbleChart/bubbleConfiguration";
var chartConfigurationMap = (_a = {},
    _a[VisualizationTypes.LINE] = getLineConfiguration,
    _a[VisualizationTypes.BAR] = getBarConfiguration,
    _a[VisualizationTypes.BULLET] = getBulletConfiguration,
    _a[VisualizationTypes.COLUMN] = getColumnConfiguration,
    _a[VisualizationTypes.PIE] = getPieConfiguration,
    _a[VisualizationTypes.AREA] = getAreaConfiguration,
    _a[VisualizationTypes.SCATTER] = getScatterConfiguration,
    _a[VisualizationTypes.COMBO] = getComboConfiguration,
    _a[VisualizationTypes.COMBO2] = getComboConfiguration,
    _a[VisualizationTypes.TREEMAP] = getTreemapConfiguration,
    _a[VisualizationTypes.DONUT] = getDonutConfiguration,
    _a[VisualizationTypes.FUNNEL] = getFunnelConfiguration,
    _a[VisualizationTypes.HEATMAP] = getHeatmapConfiguration,
    _a[VisualizationTypes.BUBBLE] = getBubbleConfiguration,
    _a);
export function getHighchartsOptions(chartOptions, drillConfig, config, definition, intl, theme) {
    var getConfigurationByType = chartConfigurationMap[chartOptions.type];
    invariant(getConfigurationByType, "visualisation type " + chartOptions.type + " is invalid (valid types: " + stringifyChartTypes() + ").");
    return merge({}, getCommonConfiguration(chartOptions, drillConfig, theme), getConfigurationByType.call(null, config, definition, theme), getCustomizedConfiguration(chartOptions, config, drillConfig, intl, theme));
}
export function isDataOfReasonableSize(
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
chartData, limits, isViewByTwoAttributes) {
    if (isViewByTwoAttributes === void 0) { isViewByTwoAttributes = false; }
    var result = true;
    var seriesLimit = limits === null || limits === void 0 ? void 0 : limits.series;
    if (seriesLimit !== undefined) {
        result = result && chartData.series.length <= seriesLimit;
    }
    var categoriesLimit = limits === null || limits === void 0 ? void 0 : limits.categories;
    if (categoriesLimit !== undefined) {
        if (isViewByTwoAttributes) {
            var categoriesLength = chartData.categories.reduce(function (result, category) {
                return result + category.categories.length;
            }, 0);
            result = result && categoriesLength <= categoriesLimit;
        }
        else {
            result = result && chartData.categories.length <= categoriesLimit;
        }
    }
    var dataPointsLimit = limits === null || limits === void 0 ? void 0 : limits.dataPoints;
    if (dataPointsLimit !== undefined) {
        result = result && chartData.series.every(function (serie) { return serie.data.length <= dataPointsLimit; });
    }
    return result;
}
//# sourceMappingURL=highChartsCreators.js.map
// (C) 2019-2021 GoodData Corporation
import { GdcVisualizationWidget } from "@gooddata/api-model-bear";
import { uriRef, idRef } from "@gooddata/sdk-model";
import { UnexpectedError, } from "@gooddata/sdk-backend-spi";
export var convertKpiDrill = function (kpi) {
    var _a = kpi.kpi.content, _b = _a.drillTo, _c = _b === void 0 ? {} : _b, projectDashboard = _c.projectDashboard, projectDashboardTab = _c.projectDashboardTab, metric = _a.metric;
    return {
        type: "drillToLegacyDashboard",
        origin: {
            type: "drillFromMeasure",
            measure: uriRef(metric),
        },
        target: uriRef(projectDashboard),
        tab: projectDashboardTab,
        transition: "in-place",
    };
};
export var convertDrillOrigin = function (from) {
    if (GdcVisualizationWidget.isDrillFromMeasure(from)) {
        return {
            type: "drillFromMeasure",
            measure: from.drillFromMeasure,
        };
    }
    else if (GdcVisualizationWidget.isDrillFromAttribute(from)) {
        return {
            type: "drillFromAttribute",
            attribute: from.drillFromAttribute,
        };
    }
    else {
        throw new UnexpectedError("Unable to convert unknown drill origin!");
    }
};
export var convertVisualizationWidgetDrill = function (drill) {
    if (GdcVisualizationWidget.isDrillToDashboard(drill)) {
        var _a = drill.drillToDashboard, toDashboard = _a.toDashboard, target = _a.target, from = _a.from;
        return {
            type: "drillToDashboard",
            origin: convertDrillOrigin(from),
            target: toDashboard !== undefined ? idRef(toDashboard) : undefined,
            transition: target,
        };
    }
    else if (GdcVisualizationWidget.isDrillToVisualization(drill)) {
        var _b = drill.drillToVisualization, toVisualization = _b.toVisualization, target = _b.target, from = _b.from;
        return {
            type: "drillToInsight",
            origin: convertDrillOrigin(from),
            target: toVisualization,
            transition: target,
        };
    }
    else if (GdcVisualizationWidget.isDrillToCustomUrl(drill)) {
        var _c = drill.drillToCustomUrl, target = _c.target, customUrl = _c.customUrl, from = _c.from;
        return {
            type: "drillToCustomUrl",
            origin: convertDrillOrigin(from),
            target: {
                url: customUrl,
            },
            transition: target,
        };
    }
    else if (GdcVisualizationWidget.isDrillToAttributeUrl(drill)) {
        var _d = drill.drillToAttributeUrl, drillToAttributeDisplayForm = _d.drillToAttributeDisplayForm, insightAttributeDisplayForm = _d.insightAttributeDisplayForm, target = _d.target, from = _d.from;
        return {
            type: "drillToAttributeUrl",
            origin: convertDrillOrigin(from),
            target: {
                displayForm: insightAttributeDisplayForm,
                hyperlinkDisplayForm: drillToAttributeDisplayForm,
            },
            transition: target,
        };
    }
    throw new UnexpectedError("Unable to convert unknown drill!");
};
//# sourceMappingURL=drills.js.map
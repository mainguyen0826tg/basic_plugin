// (C) 2021 GoodData Corporation
import { __generator } from "tslib";
import { isDashboardAttributeFilter, isKpiWidget, } from "@gooddata/sdk-backend-spi";
import { objRefToString } from "@gooddata/sdk-model";
import { filterContextItemsToFiltersForWidget } from "../../converters";
import isEmpty from "lodash/isEmpty";
import { select, call } from "redux-saga/effects";
import invariant from "ts-invariant";
import { invalidQueryArguments } from "../events/general";
import { selectAlertByWidgetRef } from "../store/alerts/alertsSelectors";
import { selectFilterContextFilters } from "../store/filterContext/filterContextSelectors";
import { selectWidgetByRef } from "../store/layout/layoutSelectors";
import { createQueryService } from "../store/_infra/queryService";
import { resolveDisplayFormMetadata } from "../utils/displayFormResolver";
import { getBrokenAlertFiltersBasicInfo } from "../utils/alertsUtils";
export var QueryWidgetBrokenAlertService = createQueryService("GDC.DASH/QUERY.WIDGET.BROKEN_ALERTS", queryService);
function queryService(ctx, query) {
    var widgetRef, correlationId, _a, alert, kpiWidget, alertFilters, displayFormsMap, appliedFilters;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                widgetRef = query.payload.widgetRef, correlationId = query.correlationId;
                return [4 /*yield*/, call(getKpiWidgetAndAlert, widgetRef, ctx, correlationId)];
            case 1:
                _a = _c.sent(), alert = _a.alert, kpiWidget = _a.kpiWidget;
                alertFilters = (_b = alert === null || alert === void 0 ? void 0 : alert.filterContext) === null || _b === void 0 ? void 0 : _b.filters;
                // no filters -> no filters can be broken, bail early
                if (!alert || !alertFilters) {
                    return [2 /*return*/, []];
                }
                return [4 /*yield*/, call(resolveDisplayForms, alert, ctx)];
            case 2:
                displayFormsMap = _c.sent();
                return [4 /*yield*/, call(getDashboardFilters, kpiWidget)];
            case 3:
                appliedFilters = _c.sent();
                return [2 /*return*/, getBrokenAlertFiltersBasicInfo(alert, kpiWidget, appliedFilters, displayFormsMap)];
        }
    });
}
function getKpiWidgetAndAlert(widgetRef, ctx, correlationId) {
    var widgetSelector, kpiWidget, alertSelector, alert;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                widgetSelector = selectWidgetByRef(widgetRef);
                return [4 /*yield*/, select(widgetSelector)];
            case 1:
                kpiWidget = _a.sent();
                if (!kpiWidget) {
                    throw invalidQueryArguments(ctx, "Widget with ref " + objRefToString(widgetRef) + " does not exist on the dashboard", correlationId);
                }
                if (!isKpiWidget(kpiWidget)) {
                    throw invalidQueryArguments(ctx, "Widget with ref " + objRefToString(widgetRef) + " is not IKpiWidget, only IKpiWidget could has alert assign.", correlationId);
                }
                alertSelector = selectAlertByWidgetRef(kpiWidget.ref);
                return [4 /*yield*/, select(alertSelector)];
            case 2:
                alert = _a.sent();
                return [2 /*return*/, { alert: alert, kpiWidget: kpiWidget }];
        }
    });
}
function resolveDisplayForms(alert, ctx) {
    var displayFormIds, result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                displayFormIds = extractDisplayFormRefs(alert);
                return [4 /*yield*/, call(resolveDisplayFormMetadata, ctx, displayFormIds)];
            case 1:
                result = _a.sent();
                // if some display forms could not be resolved then there is something seriously wrong
                invariant(isEmpty(result.missing), "Unable resolve some AttributeDisplayForms defined by alert filters");
                return [2 /*return*/, result.resolved];
        }
    });
}
function getDashboardFilters(kpiWidget) {
    var dashboardFilters, allFilters;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, select(selectFilterContextFilters)];
            case 1:
                dashboardFilters = _a.sent();
                allFilters = filterContextItemsToFiltersForWidget(dashboardFilters, kpiWidget);
                return [2 /*return*/, allFilters !== null && allFilters !== void 0 ? allFilters : []];
        }
    });
}
function extractDisplayFormRefs(alert) {
    var _a, _b;
    var alertFilters = (_b = (_a = alert.filterContext) === null || _a === void 0 ? void 0 : _a.filters) !== null && _b !== void 0 ? _b : [];
    return alertFilters.filter(isDashboardAttributeFilter).map(function (filter) {
        return filter.attributeFilter.displayForm;
    });
}
//# sourceMappingURL=queryWidgetBrokenAlerts.js.map
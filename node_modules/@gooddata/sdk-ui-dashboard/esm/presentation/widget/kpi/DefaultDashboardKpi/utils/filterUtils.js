import { __rest } from "tslib";
// (C) 2021 GoodData Corporation
import { isDashboardAttributeFilterReference, isDashboardDateFilter, isDashboardDateFilterReference, isDateFilterGranularity, NotSupported, } from "@gooddata/sdk-backend-spi";
import { areObjRefsEqual, filterAttributeElements, filterObjRef, isAbsoluteDateFilter, isAttributeElementsByRef, isAttributeFilter, isNegativeAttributeFilter, isRelativeDateFilter, } from "@gooddata/sdk-model";
/**
 * Converts a {@link IDashboardFilter} to a {@link FilterContextItem}.
 * @param filter - filter to convert
 */
export function dashboardFilterToFilterContextItem(filter) {
    if (isAttributeFilter(filter)) {
        var attributeElements = filterAttributeElements(filter);
        if (!isAttributeElementsByRef(attributeElements)) {
            // For attributes with a lot of elements, this transformation can be very expensive.
            // Let's enforce user to provide element uris by himself.
            throw new NotSupported("Attribute filter with text values is not supported. Please provide element uris instead.");
        }
        var filterContextItem = {
            attributeFilter: {
                negativeSelection: isNegativeAttributeFilter(filter),
                displayForm: filterObjRef(filter),
                attributeElements: attributeElements,
            },
        };
        return filterContextItem;
    }
    else if (isAbsoluteDateFilter(filter)) {
        var filterContextItem = {
            dateFilter: {
                type: "absolute",
                granularity: "GDC.time.date",
                from: filter.absoluteDateFilter.from,
                to: filter.absoluteDateFilter.to,
                dataSet: filter.absoluteDateFilter.dataSet,
            },
        };
        return filterContextItem;
    }
    else if (isRelativeDateFilter(filter)) {
        if (!isDateFilterGranularity(filter.relativeDateFilter.granularity)) {
            // Only a subset of granularity can be stored in the filter context.
            throw new NotSupported("Unsupported date filter granularity! Please provide valid date filter granularity. (Check DateFilterGranularity type)");
        }
        var filterContextItem = {
            dateFilter: {
                type: "relative",
                granularity: filter.relativeDateFilter.granularity,
                from: filter.relativeDateFilter.from,
                to: filter.relativeDateFilter.to,
                dataSet: filter.relativeDateFilter.dataSet,
            },
        };
        return filterContextItem;
    }
    throw new NotSupported("Unsupported filter type! Please provide valid dashboard filter.");
}
/**
 * Remove information about the date dataset from Date filters. Attribute filters are returned unchanged.
 * @param filter - filter to strip date dataset from
 */
export function stripDateDatasets(filter) {
    if (!isDashboardDateFilter(filter)) {
        return filter;
    }
    var _a = filter.dateFilter, _ = _a.dataSet, rest = __rest(_a, ["dataSet"]);
    return {
        dateFilter: rest,
    };
}
export function isAttributeFilterIgnored(widget, displayForm) {
    return widget.ignoreDashboardFilters.some(function (filter) {
        return isDashboardAttributeFilterReference(filter) && areObjRefsEqual(filter.displayForm, displayForm);
    });
}
export function isDateFilterIgnored(widget, displayForm) {
    return widget.ignoreDashboardFilters.some(function (filter) { return isDashboardDateFilterReference(filter) && areObjRefsEqual(filter.dataSet, displayForm); });
}
export function isDateFilterIrrelevant(widget) {
    var dateDataSetRef = widget.dateDataSet;
    // backward compatibility for old kpis
    var ignoredOldWay = !!dateDataSetRef && isDateFilterIgnored(widget, dateDataSetRef);
    // now dataSetRef is cleaned
    var checkboxEnabled = !!dateDataSetRef;
    return !checkboxEnabled || ignoredOldWay;
}
//# sourceMappingURL=filterUtils.js.map
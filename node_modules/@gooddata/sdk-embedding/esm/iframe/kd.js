// (C) 2020-2021 GoodData Corporation
import isObject from "lodash/isObject";
import { getEventType, } from "./common";
/**
 * All interface, types, type-guard related to embedded KPI Dashboards
 *
 * @public
 */
export var EmbeddedKpiDashboard;
(function (EmbeddedKpiDashboard) {
    /**
     * All KD command Types.
     *
     * @public
     */
    var GdcKdCommandType;
    (function (GdcKdCommandType) {
        /**
         * The command save a dashboard.
         */
        GdcKdCommandType["Save"] = "saveDashboard";
        /**
         * The command cancel editing dashboard.
         */
        GdcKdCommandType["CancelEdit"] = "cancelEdit";
        /**
         * The command delete existed dashboard.
         */
        GdcKdCommandType["Delete"] = "deleteDashboard";
        /**
         * The command edit a dashboard.
         */
        GdcKdCommandType["SwitchToEdit"] = "switchToEdit";
        /**
         * The command set drillable items.
         */
        GdcKdCommandType["DrillableItems"] = "drillableItems";
        /**
         * The command set size of dashboard.
         */
        GdcKdCommandType["SetSize"] = "setSize";
        /**
         * The command add widget to dashboard.
         */
        GdcKdCommandType["AddWidget"] = "addWidget";
        /**
         * The command add filter to dashboard.
         */
        GdcKdCommandType["AddFilter"] = "addFilter";
        /**
         * The command export a dashboard.
         */
        GdcKdCommandType["ExportToPdf"] = "exportToPdf";
        /**
         * The command to add or update filter context
         */
        GdcKdCommandType["SetFilterContext"] = "setFilterContext";
        /**
         * The command to remove filter item from current filter context
         */
        GdcKdCommandType["RemoveFilterContext"] = "removeFilterContext";
        /**
         * The command to duplicate a KPI Dashboard
         */
        GdcKdCommandType["SaveAsDashboard"] = "saveAsDashboard";
        /**
         * The command to open schedule email dialog
         */
        GdcKdCommandType["OpenScheduleEmailDialog"] = "openScheduleEmailDialog";
        /**
         * The command to set attribute filter parents
         */
        GdcKdCommandType["SetFilterParents"] = "setFilterParents";
        /**
         * The command open delete existed dashboard dialog
         */
        GdcKdCommandType["OpenDeleteDashboardDialog"] = "openDeleteDashboardDialog";
    })(GdcKdCommandType = EmbeddedKpiDashboard.GdcKdCommandType || (EmbeddedKpiDashboard.GdcKdCommandType = {}));
    /**
     * All KD event types.
     *
     * @public
     */
    var GdcKdEventType;
    (function (GdcKdEventType) {
        /**
         * Type represent that the dashboard listening for drilling event.
         */
        GdcKdEventType["ListeningForDrillableItems"] = "listeningForDrillableItems";
        /**
         * Type represent that the embedded content starts loading.
         */
        GdcKdEventType["LoadingStarted"] = "loadingStarted";
        /**
         * Type represent that The user does not have permissions to view or edit the content.
         */
        GdcKdEventType["NoPermissions"] = "noPermissions";
        /**
         * Type represent that an operation increasing the height of the hosting iframe is performed.
         */
        GdcKdEventType["Resized"] = "resized";
        /**
         * Type represent that the dashboard has been created and saved.
         */
        GdcKdEventType["DashboardCreated"] = "dashboardCreated";
        /**
         * Type represent that the content is fully loaded,
         * and the user has permissions to access the dashboard.
         */
        GdcKdEventType["DashboardLoaded"] = "loaded";
        /**
         * Type represent that the existing dashboard has been updated.
         */
        GdcKdEventType["DashboardUpdated"] = "dashboardUpdated";
        /**
         * Type represent that the dashboard is saved.
         *
         */
        GdcKdEventType["DashboardSaved"] = "dashboardSaved";
        /**
         * Type represent that the dashboard is deleted.
         *
         */
        GdcKdEventType["DashboardDeleted"] = "dashboardDeleted";
        /**
         * Type represent that the user cancels the creation of the dashboard.
         */
        GdcKdEventType["DashboardCreationCanceled"] = "dashboardCreationCanceled";
        /**
         * Type represent that the dashboard is switched to edit mode.
         */
        GdcKdEventType["SwitchedToEdit"] = "switchedToEdit";
        /**
         * Type represent that the dashboard is switched to view mode.
         */
        GdcKdEventType["SwitchedToView"] = "switchedToView";
        /**
         * Type represent that the platform is down.
         */
        GdcKdEventType["Platform"] = "platform";
        /**
         * Type represent that the widget is added to dashboard.
         *
         */
        GdcKdEventType["WidgetAdded"] = "widgetAdded";
        /**
         * Type represent that the filter is added to dashboard.
         *
         */
        GdcKdEventType["FilterAdded"] = "filterAdded";
        /**
         * Type represent that the export action is finished.
         */
        GdcKdEventType["ExportedToPdf"] = "exportedToPdf";
        /**
         * Type represent that the drill performed
         */
        GdcKdEventType["Drill"] = "drill";
        /**
         * Type represent that the filter context is changed
         */
        GdcKdEventType["FilterContextChanged"] = "filterContextChanged";
        /**
         * Type represent that the set filter context action is finished
         */
        GdcKdEventType["SetFilterContextFinished"] = "setFilterContextFinished";
        /**
         * Type represent that the remove filter context action is finished
         */
        GdcKdEventType["RemoveFilterContextFinished"] = "removeFilterContextFinished";
        /**
         * Type that represents started drill to URL. The event does not contain an URL. The event can be used as
         * notification to display a loading indicator as the URL resolving takes some time. The URL is sent in
         * DrillToUrlResolved event which is posted after the URL is resolved. The event also contains an ID that can
         * be matched with ID in subsequently posted DrillToUrlResolved event.
         */
        GdcKdEventType["DrillToUrlStarted"] = "drillToUrlStarted";
        /**
         * Type that represents resolved drill to URL. The event is sent after DrillToUrlStarted event was posted and
         * it contains the resolved URL. The event also contains an ID which can be matched with ID from
         * DrillToUrlStarted event.
         */
        GdcKdEventType["DrillToUrlResolved"] = "drillToUrlResolved";
        /**
         * Type represent that the schedule email dialog is opened.
         */
        GdcKdEventType["ScheduleEmailDialogOpened"] = "scheduleEmailDialogOpened";
        /**
         * The event that is emitted once setFilterParents command is successful
         */
        GdcKdEventType["SetFilterParentsFinished"] = "setFilterParentsFinished";
        /**
         * The event that is emitted if setFilterParents command is not successful it contains `SetFilterParentsErrorCode`
         */
        GdcKdEventType["SetFilterParentsFailed"] = "setFilterParentsFailed";
        /**
         * Type represent that the delete dashboard dialog is opened
         */
        GdcKdEventType["DeleteDashboardDialogOpened"] = "deleteDashboardDialogOpened";
    })(GdcKdEventType = EmbeddedKpiDashboard.GdcKdEventType || (EmbeddedKpiDashboard.GdcKdEventType = {}));
    /**
     * Type-guard checking whether object is an instance of {@link EmbeddedKpiDashboard.SaveDashboardCommandData}.
     *
     * @param obj - object to test
     *
     * @public
     */
    function isSaveDashboardCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcKdCommandType.Save;
    }
    EmbeddedKpiDashboard.isSaveDashboardCommandData = isSaveDashboardCommandData;
    /**
     * Type-guard checking whether object is an instance of {@link EmbeddedKpiDashboard.SaveAsDashboardCommandData}.
     *
     * @param obj - object to test
     *
     * @public
     */
    function isSaveAsDashboardCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcKdCommandType.SaveAsDashboard;
    }
    EmbeddedKpiDashboard.isSaveAsDashboardCommandData = isSaveAsDashboardCommandData;
    /**
     * Type-guard checking whether object is an instance of {@link EmbeddedKpiDashboard.CancelEditCommandData}.
     *
     * @param obj - object to test
     *
     * @public
     */
    function isCancelEditCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcKdCommandType.CancelEdit;
    }
    EmbeddedKpiDashboard.isCancelEditCommandData = isCancelEditCommandData;
    /**
     * Type-guard checking whether object is an instance of {@link EmbeddedKpiDashboard.SwitchToEditCommandData}.
     *
     * @param obj - object to test
     * @public
     */
    function isSwitchToEditCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcKdCommandType.SwitchToEdit;
    }
    EmbeddedKpiDashboard.isSwitchToEditCommandData = isSwitchToEditCommandData;
    /**
     * Type-guard checking whether object is an instance of {@link EmbeddedKpiDashboard.DrillableItemsCommandData}.
     *
     * @param obj - object to test
     * @public
     */
    function isDrillableItemsCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcKdCommandType.DrillableItems;
    }
    EmbeddedKpiDashboard.isDrillableItemsCommandData = isDrillableItemsCommandData;
    /**
     * Type-guard checking whether object is an instance of {@link EmbeddedKpiDashboard.SetSizeCommandData}.
     *
     * @param obj - object to test
     * @public
     */
    function isSetSizeCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcKdCommandType.SetSize;
    }
    EmbeddedKpiDashboard.isSetSizeCommandData = isSetSizeCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedKpiDashboard.SetFilterContextCommand}
     *
     * @param obj - object to test
     * @public
     */
    function isSetFilterContextCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcKdCommandType.SetFilterContext;
    }
    EmbeddedKpiDashboard.isSetFilterContextCommandData = isSetFilterContextCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedKpiDashboard.RemoveFilterContextCommand}
     *
     * @param obj - object to test
     * @public
     */
    function isRemoveFilterContextCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcKdCommandType.RemoveFilterContext;
    }
    EmbeddedKpiDashboard.isRemoveFilterContextCommandData = isRemoveFilterContextCommandData;
    /**
     * Type-guard checking whether object is an instance of {@link EmbeddedKpiDashboard.IIdentifierInsightRef}.
     *
     * @param obj - object to test
     * @public
     */
    function isIdentifierInsight(obj) {
        return obj.identifier !== undefined;
    }
    EmbeddedKpiDashboard.isIdentifierInsight = isIdentifierInsight;
    /**
     * Type-guard checking whether object is an instance of {@link EmbeddedKpiDashboard.IUriInsightRef}.
     *
     * @param obj - object to test
     * @public
     */
    function isUriInsight(obj) {
        return obj.uri !== undefined;
    }
    EmbeddedKpiDashboard.isUriInsight = isUriInsight;
    /**
     * Type-guard checking whether object is an instance of {@link EmbeddedKpiDashboard.AddWidgetCommandData}.
     *
     * @param obj - object to test
     * @public
     */
    function isAddWidgetCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcKdCommandType.AddWidget;
    }
    EmbeddedKpiDashboard.isAddWidgetCommandData = isAddWidgetCommandData;
    /**
     * Type-guard checking whether object is an instance of {@link EmbeddedKpiDashboard.AddFilterCommandData}.
     *
     * @param obj - object to test
     * @public
     */
    function isAddFilterCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcKdCommandType.AddFilter;
    }
    EmbeddedKpiDashboard.isAddFilterCommandData = isAddFilterCommandData;
    /**
     * Type-guard checking whether object is an instance of {@link EmbeddedKpiDashboard.ExportToPdfCommandData}.
     *
     * @param obj - object to test
     * @public
     */
    function isExportToPdfCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcKdCommandType.ExportToPdf;
    }
    EmbeddedKpiDashboard.isExportToPdfCommandData = isExportToPdfCommandData;
    /**
     * Type-guard checking whether object is an instance of {@link EmbeddedKpiDashboard.OpenScheduleEmailDialogCommandData}.
     *
     * @param obj - object to test
     *
     * @public
     */
    function isOpenScheduleEmailDialogCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcKdCommandType.OpenScheduleEmailDialog;
    }
    EmbeddedKpiDashboard.isOpenScheduleEmailDialogCommandData = isOpenScheduleEmailDialogCommandData;
    /**
     * Type-guard that checks if event in `SetFilterParents`
     *
     * @param obj - object to test
     *
     * @public
     */
    function isSetFilterParentsCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcKdCommandType.SetFilterParents;
    }
    EmbeddedKpiDashboard.isSetFilterParentsCommandData = isSetFilterParentsCommandData;
    /**
     * Error type within AppCommandFailed event body when setFilterParents command is not successful
     *
     * @public
     */
    var SetFilterParentsErrorCode;
    (function (SetFilterParentsErrorCode) {
        /**
         * Command data format is invalid e.g. missing properties or wrong types.
         */
        SetFilterParentsErrorCode["InvalidDataFormat"] = "invalidDataFormat";
        /**
         * Attribute filter display form has invalid ref, or display form does not exist in workspace.
         */
        SetFilterParentsErrorCode["InvalidAttributeFilterDisplayForm"] = "invalidAttributeFilterDisplayForm";
        /**
         * Parent filter display form has invalid ref or does not exist in workspace.
         */
        SetFilterParentsErrorCode["InvalidParentFilterDisplayForm"] = "invalidParentFilterDisplayForm";
        /**
         * Filter is not on a dashboard.
         */
        SetFilterParentsErrorCode["FilterNotFound"] = "filterNotFound";
        /**
         * Filter can not depend on itself.
         */
        SetFilterParentsErrorCode["CircularDependency"] = "circularDependency";
        /**
         * Connecting attribute is invalid, or does not exist in workspace.
         */
        SetFilterParentsErrorCode["InvalidConnectingAttribute"] = "invalidConnectingAttribute";
        /**
         * Connecting attribute is not shared between filter and parent.
         */
        SetFilterParentsErrorCode["IncompatibleConnectingAttribute"] = "incompatibleConnectingAttribute";
        /**
         * Multiple filters with same id in single command.
         */
        SetFilterParentsErrorCode["DuplicateFilters"] = "duplicateFilters";
        /**
         * Multiple parents with same id in single filter.
         */
        SetFilterParentsErrorCode["DuplicateParents"] = "duplicateParents";
    })(SetFilterParentsErrorCode = EmbeddedKpiDashboard.SetFilterParentsErrorCode || (EmbeddedKpiDashboard.SetFilterParentsErrorCode = {}));
    /**
     * Type-guard checking whether object is an instance of {@link EmbeddedKpiDashboard.OpenDeleteDashboardDialogCommandData}.
     *
     * @param obj - object to test
     *
     * @public
     */
    function isOpenDeleteDashboardDialogCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcKdCommandType.OpenDeleteDashboardDialog;
    }
    EmbeddedKpiDashboard.isOpenDeleteDashboardDialogCommandData = isOpenDeleteDashboardDialogCommandData;
})(EmbeddedKpiDashboard || (EmbeddedKpiDashboard = {}));
//# sourceMappingURL=kd.js.map
import { __awaiter, __generator } from "tslib";
/**
 * Resolves LCM workspace identifiers. This function will use the data product and client information
 * and consult the backend in order to obtain identifier of workspace contains analytics for that
 * data product & client combination.
 *
 * Note that at the moment only the bear Analytical Backend supports the workspace identification using
 * LCM workspace identifiers. Attempting to use this function for other backends will yield empty
 * result.
 *
 * @param backend - analytical backend to resolve client workspace identifiers on
 * @param clientWorkspace - client workspace identifiers; must contain data product and client identifier
 * @returns resolved IClientWorkspaceIdentifiers or an empty object if resolution is not possible
 * @alpha
 */
export function resolveLCMWorkspaceIdentifiers(
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
backend, clientWorkspace) {
    return __awaiter(this, void 0, void 0, function () {
        var bootstrapResource;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getBootstrapResource(backend, {
                        clientId: clientWorkspace.client,
                        productId: clientWorkspace.dataProduct,
                        projectId: clientWorkspace.workspace,
                    })];
                case 1:
                    bootstrapResource = _a.sent();
                    if (!bootstrapResource) {
                        return [2 /*return*/, {}];
                    }
                    return [2 /*return*/, getLCMWorkspaceIdentifiersFromBootstrapResource(bootstrapResource)];
            }
        });
    });
}
function emptyPromise() {
    return Promise.resolve();
}
function unwrapDecoratedBackend(backend) {
    if (backend === null || backend === void 0 ? void 0 : backend.decorated) {
        return unwrapDecoratedBackend(backend.decorated);
    }
    return backend;
}
function getBackendAuthApiCallPrivateMethod(backend) {
    var _a;
    return (_a = backend.authApiCall) !== null && _a !== void 0 ? _a : emptyPromise;
}
function getBearClientBootstrapResourceMethod(client) {
    var _a;
    var method = (_a = client === null || client === void 0 ? void 0 : client.user) === null || _a === void 0 ? void 0 : _a.getBootstrapResource.bind(client === null || client === void 0 ? void 0 : client.user);
    return method !== null && method !== void 0 ? method : emptyPromise;
}
function getBootstrapResource(backend, options) {
    return __awaiter(this, void 0, void 0, function () {
        var unwrappedBackend, authApiCall;
        var _this = this;
        return __generator(this, function (_a) {
            unwrappedBackend = unwrapDecoratedBackend(backend);
            authApiCall = getBackendAuthApiCallPrivateMethod(unwrappedBackend);
            return [2 /*return*/, authApiCall(function (client) { return __awaiter(_this, void 0, void 0, function () {
                    var getBootstrapResource;
                    return __generator(this, function (_a) {
                        getBootstrapResource = getBearClientBootstrapResourceMethod(client);
                        return [2 /*return*/, getBootstrapResource(options)];
                    });
                }); })];
        });
    });
}
function getLCMWorkspaceIdentifiersFromBootstrapResource(bootstrapResource) {
    var _a, _b, _c, _d, _e, _f, _g;
    var _h = (_a = bootstrapResource === null || bootstrapResource === void 0 ? void 0 : bootstrapResource.bootstrapResource.current.projectLcm) !== null && _a !== void 0 ? _a : {}, client = _h.clientId, dataProduct = _h.dataProductId, segment = _h.segmentId;
    var workspace = (_g = (_f = (_e = (_d = (_c = (_b = bootstrapResource === null || bootstrapResource === void 0 ? void 0 : bootstrapResource.bootstrapResource) === null || _b === void 0 ? void 0 : _b.current) === null || _c === void 0 ? void 0 : _c.project) === null || _d === void 0 ? void 0 : _d.links) === null || _e === void 0 ? void 0 : _e.self) === null || _f === void 0 ? void 0 : _f.split) === null || _g === void 0 ? void 0 : _g.call(_f, "/").pop();
    return {
        dataProduct: dataProduct,
        client: client,
        segment: segment,
        workspace: workspace,
    };
}
//# sourceMappingURL=resolveLCMWorkspaceIdentifiers.js.map
import { __assign, __extends } from "tslib";
// (C) 2019-2020 GoodData Corporation
import React from "react";
import { injectIntl } from "react-intl";
import moment from "moment";
import { translationUtils } from "@gooddata/util";
import { IntlWrapper } from "@gooddata/sdk-ui";
import noop from "lodash/noop";
import { Dropdown, DropdownButton, DropdownList } from "../Dropdown";
import { formatTime, normalizeTime, updateTime, HOURS_IN_DAY, TIME_ANCHOR } from "./utils/timeUtilities";
import { SingleSelectListItem } from "../List";
var DEFAULT_WIDTH = 199;
var MINUTES_IN_HOUR = 60;
var MAX_VISIBLE_ITEMS_COUNT = 10;
export { normalizeTime };
var WrappedTimepicker = /** @class */ (function (_super) {
    __extends(WrappedTimepicker, _super);
    function WrappedTimepicker(props) {
        var _this = _super.call(this, props) || this;
        _this.dropdownRef = React.createRef();
        _this.getTimeItems = function (selectedTime) {
            var currentItem;
            var items = [];
            var hours = selectedTime.h, minutes = selectedTime.m;
            for (var h = 0; h < HOURS_IN_DAY; h += 1) {
                for (var m = 0; m < MINUTES_IN_HOUR; m += TIME_ANCHOR) {
                    var item = {
                        h: h,
                        m: m,
                        title: formatTime(h, m),
                    };
                    items.push(item);
                    if (h === hours && m === minutes) {
                        currentItem = item;
                    }
                }
            }
            return { items: items, currentItem: currentItem };
        };
        _this.updateDropdownWidth = function () {
            var width = _this.dropdownRef.current.getBoundingClientRect().width;
            _this.setState({ dropdownWidth: width });
        };
        _this.handleTimeChanged = function (newlySelectedTime) {
            if (!newlySelectedTime) {
                return;
            }
            var h = newlySelectedTime.h, m = newlySelectedTime.m;
            var selectedTime = updateTime(h, m);
            _this.setState({ selectedTime: selectedTime }, function () { return _this.props.onChange(selectedTime); });
        };
        _this.updateLocaleForMoment();
        var time = props.time || new Date();
        _this.state = {
            dropdownWidth: DEFAULT_WIDTH,
            selectedTime: props.skipNormalizeTime ? time : normalizeTime(time),
        };
        return _this;
    }
    WrappedTimepicker.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {
        if (newProps.time !== this.props.time) {
            var updatedTime = newProps.time || new Date();
            this.setState({
                selectedTime: this.props.skipNormalizeTime ? updatedTime : normalizeTime(updatedTime),
            });
        }
    };
    WrappedTimepicker.prototype.componentDidMount = function () {
        this.updateDropdownWidth();
    };
    WrappedTimepicker.prototype.getComponentClasses = function () {
        return "gd-datepicker " + this.props.className + " gd-datepicker-input gd-timepicker";
    };
    WrappedTimepicker.prototype.updateLocaleForMoment = function () {
        moment.locale(translationUtils.sanitizeLocaleForMoment(this.props.intl.locale));
    };
    WrappedTimepicker.prototype.render = function () {
        var _this = this;
        var _a = this.props, overlayPositionType = _a.overlayPositionType, maxVisibleItemsCount = _a.maxVisibleItemsCount, overlayZIndex = _a.overlayZIndex;
        var _b = this.state, dropdownWidth = _b.dropdownWidth, selectedTime = _b.selectedTime;
        var time = {
            h: selectedTime.getHours(),
            m: selectedTime.getMinutes(),
        };
        var _c = this.getTimeItems(time), items = _c.items, currentItem = _c.currentItem;
        return (React.createElement("div", { className: this.getComponentClasses(), ref: this.dropdownRef },
            React.createElement(Dropdown, { overlayPositionType: overlayPositionType, alignPoints: [
                    {
                        align: "bl tl",
                    },
                    {
                        align: "tl bl",
                    },
                ], renderButton: function (_a) {
                    var openDropdown = _a.openDropdown, isOpen = _a.isOpen;
                    return (React.createElement(DropdownButton, { value: formatTime(time.h, time.m), isOpen: isOpen, onClick: openDropdown, iconLeft: "gd-icon-timer" }));
                }, renderBody: function (_a) {
                    var closeDropdown = _a.closeDropdown, isMobile = _a.isMobile;
                    return (React.createElement(DropdownList, { isMobile: isMobile, width: dropdownWidth, items: items, renderItem: function (_a) {
                            var item = _a.item;
                            return (React.createElement(SingleSelectListItem, { title: item.title, isSelected: item === currentItem, onClick: function () {
                                    _this.handleTimeChanged(item);
                                    closeDropdown();
                                } }));
                        }, maxVisibleItemsCount: maxVisibleItemsCount }));
                }, overlayZIndex: overlayZIndex })));
    };
    WrappedTimepicker.defaultProps = {
        className: "",
        maxVisibleItemsCount: MAX_VISIBLE_ITEMS_COUNT,
        time: new Date(),
        onChange: noop,
        overlayZIndex: 0,
        skipNormalizeTime: false,
    };
    return WrappedTimepicker;
}(React.PureComponent));
export { WrappedTimepicker };
var TimePickerWithIntl = injectIntl(WrappedTimepicker);
/**
 * @internal
 */
var Timepicker = /** @class */ (function (_super) {
    __extends(Timepicker, _super);
    function Timepicker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Timepicker.prototype.render = function () {
        return (React.createElement(IntlWrapper, { locale: this.props.locale },
            React.createElement(TimePickerWithIntl, __assign({}, this.props))));
    };
    return Timepicker;
}(React.PureComponent));
export { Timepicker };
//# sourceMappingURL=Timepicker.js.map
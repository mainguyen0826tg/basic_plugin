import { IRegion } from "../typings/domUtilities";
/**
 * Removes the element specified from the DOM
 * @param {HTMLElement} element
 */
export declare const removeFromDom: (element: HTMLElement) => void;
/**
 * Returns bounding rectangle of specified elements
 * in local (relative to offset parent of element)
 * coordinate space
 *
 * @param  {HTMLElement}  element
 * @param  {boolean}      ignoreScrollOffsets
 * @param  {Object}       windowObject - use for unit test only
 * @return {Object}       Bounding rectangle
 */
export declare const region: (element: HTMLElement, ignoreScrollOffsets?: boolean, windowObject?: Window & typeof globalThis) => IRegion;
/**
 * Returns a value indicating whether the element
 * specified is fixed position
 * or is contained in fixed position element
 * @param {HTMLElement|string} element
 * @returns {boolean}
 */
export declare const isFixedPosition: (element: HTMLElement | string) => boolean;
/**
 * Returns bounding rectangle of specified elements
 * in local (relative to offset parent of element)
 * coordinate space
 * @param {HTMLElement|string} elementOrSelector
 * @param getRegionBasedOnPosition
 */
export declare const elementRegion: (elementOrSelector: HTMLElement | string, getRegionBasedOnPosition?: boolean) => IRegion;
//# sourceMappingURL=domUtilities.d.ts.map
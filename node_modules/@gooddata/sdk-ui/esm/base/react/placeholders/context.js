import { __assign, __read } from "tslib";
// (C) 2019 GoodData Corporation
import React, { createContext, useContext, useDebugValue, useState } from "react";
import noop from "lodash/noop";
/**
 * @internal
 */
var PlaceholdersContext = createContext({
    state: {
        placeholders: {},
    },
    updateState: noop,
});
PlaceholdersContext.displayName = "PlaceholdersContext";
/**
 * @internal
 */
export var usePlaceholdersContext = function () { return useContext(PlaceholdersContext); };
/**
 * Wraps component into a PlaceholdersContext consumer enabling the children of this to access the current
 * placeholders state.
 *
 * @public
 */
export function PlaceholdersProvider(props) {
    var _a;
    var children = props.children, initialValues = props.initialValues;
    var initialPlaceholdersState = (_a = initialValues === null || initialValues === void 0 ? void 0 : initialValues.reduce(function (acc, _a) {
        var _b = __read(_a, 2), placeholder = _b[0], value = _b[1];
        acc[placeholder.id] = __assign(__assign({}, placeholder), { value: value });
        return acc;
    }, {})) !== null && _a !== void 0 ? _a : {};
    var _b = __read(useState({
        placeholders: initialPlaceholdersState,
    }), 2), state = _b[0], updateState = _b[1];
    useDebugValue(state);
    return (React.createElement(PlaceholdersContext.Provider, { value: {
            state: state,
            updateState: updateState,
        } }, children));
}
//# sourceMappingURL=context.js.map
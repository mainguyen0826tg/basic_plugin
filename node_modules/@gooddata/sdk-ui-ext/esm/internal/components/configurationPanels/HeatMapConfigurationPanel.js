import { __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { FormattedMessage } from "react-intl";
import { Bubble, BubbleHoverTrigger } from "@gooddata/sdk-ui-kit";
import cx from "classnames";
import NameSubsection from "../configurationControls/axis/NameSubsection";
import ConfigurationPanelContent from "./ConfigurationPanelContent";
import ConfigSection from "../configurationControls/ConfigSection";
import DataLabelsControl from "../configurationControls/DataLabelsControl";
import { SHOW_DELAY_DEFAULT, HIDE_DELAY_DEFAULT, BUBBLE_ARROW_OFFSET_X, BUBBLE_ARROW_OFFSET_Y, } from "../../constants/bubble";
import LabelSubsection from "../configurationControls/axis/LabelSubsection";
import { noRowsAndHasOneMeasure, noColumnsAndHasOneMeasure } from "../../utils/bucketHelper";
import { insightBuckets } from "@gooddata/sdk-model";
var HeatMapConfigurationPanel = /** @class */ (function (_super) {
    __extends(HeatMapConfigurationPanel, _super);
    function HeatMapConfigurationPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeatMapConfigurationPanel.prototype.renderConfigurationPanel = function () {
        var _a = this.props, featureFlags = _a.featureFlags, propertiesMeta = _a.propertiesMeta, properties = _a.properties, pushData = _a.pushData;
        var _b = this.getControlProperties(), xAxisVisible = _b.xAxisVisible, yAxisVisible = _b.yAxisVisible;
        var controlsDisabled = this.isControlDisabled();
        var xAxisDisabled = this.isAxisDisabled(controlsDisabled, "xaxis", this.props.insight);
        var yAxisDisabled = this.isAxisDisabled(controlsDisabled, "yaxis", this.props.insight);
        var isNameSubsectionVisible = featureFlags.enableAxisNameConfiguration;
        return (React.createElement(BubbleHoverTrigger, { showDelay: SHOW_DELAY_DEFAULT, hideDelay: HIDE_DELAY_DEFAULT },
            React.createElement("div", null,
                this.renderColorSection(),
                React.createElement(ConfigSection, { id: "xaxis_section", title: "properties.xaxis.title", valuePath: "xaxis.visible", canBeToggled: true, toggledOn: xAxisVisible, toggleDisabled: xAxisDisabled, showDisabledMessage: !controlsDisabled && xAxisDisabled, propertiesMeta: propertiesMeta, properties: properties, pushData: pushData },
                    isNameSubsectionVisible && (React.createElement(NameSubsection, { disabled: xAxisDisabled, configPanelDisabled: controlsDisabled, axis: "xaxis", properties: properties, pushData: pushData })),
                    React.createElement(LabelSubsection, { disabled: xAxisDisabled, configPanelDisabled: controlsDisabled, axis: "xaxis", properties: properties, pushData: pushData })),
                React.createElement(ConfigSection, { id: "yaxis_section", title: "properties.yaxis.title", valuePath: "yaxis.visible", canBeToggled: true, toggledOn: yAxisVisible, toggleDisabled: yAxisDisabled, showDisabledMessage: !controlsDisabled && yAxisDisabled, propertiesMeta: propertiesMeta, properties: properties, pushData: pushData },
                    isNameSubsectionVisible && (React.createElement(NameSubsection, { disabled: yAxisDisabled, configPanelDisabled: controlsDisabled, axis: "yaxis", properties: properties, pushData: pushData })),
                    React.createElement(LabelSubsection, { disabled: yAxisDisabled, configPanelDisabled: controlsDisabled, axis: "yaxis", properties: properties, pushData: pushData })),
                this.renderLegendSection(),
                React.createElement(ConfigSection, { id: "canvas_section", title: "properties.canvas.title", propertiesMeta: propertiesMeta, properties: properties, pushData: pushData },
                    React.createElement(DataLabelsControl, { pushData: pushData, properties: properties, isDisabled: controlsDisabled, defaultValue: "auto" }))),
            React.createElement(Bubble, { className: this.getBubbleClassNames(), arrowOffsets: { "tc bc": [BUBBLE_ARROW_OFFSET_X, BUBBLE_ARROW_OFFSET_Y] }, alignPoints: [{ align: "tc bc" }] },
                React.createElement(FormattedMessage, { id: "properties.config.not_applicable" }))));
    };
    HeatMapConfigurationPanel.prototype.getBubbleClassNames = function () {
        return cx("bubble-primary", {
            invisible: !this.isControlDisabled(),
        });
    };
    HeatMapConfigurationPanel.prototype.getControlProperties = function () {
        var _a, _b, _c, _d, _e;
        var propertiesControls = (_a = this.props.properties) === null || _a === void 0 ? void 0 : _a.controls;
        var xAxisVisible = (_c = (_b = propertiesControls === null || propertiesControls === void 0 ? void 0 : propertiesControls.xaxis) === null || _b === void 0 ? void 0 : _b.visible) !== null && _c !== void 0 ? _c : true;
        var yAxisVisible = (_e = (_d = propertiesControls === null || propertiesControls === void 0 ? void 0 : propertiesControls.yaxis) === null || _d === void 0 ? void 0 : _d.visible) !== null && _e !== void 0 ? _e : true;
        return {
            xAxisVisible: xAxisVisible,
            yAxisVisible: yAxisVisible,
        };
    };
    HeatMapConfigurationPanel.prototype.isAxisDisabled = function (controlsDisabled, axis, insight) {
        var isAxisDisabled = axis === "xaxis"
            ? noColumnsAndHasOneMeasure(insightBuckets(insight))
            : noRowsAndHasOneMeasure(insightBuckets(insight));
        return Boolean(controlsDisabled || isAxisDisabled);
    };
    return HeatMapConfigurationPanel;
}(ConfigurationPanelContent));
export default HeatMapConfigurationPanel;
//# sourceMappingURL=HeatMapConfigurationPanel.js.map
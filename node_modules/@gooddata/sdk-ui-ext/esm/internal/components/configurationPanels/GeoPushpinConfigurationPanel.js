import { __extends } from "tslib";
// (C) 2020 GoodData Corporation
import React from "react";
import { FormattedMessage } from "react-intl";
import cx from "classnames";
import { bucketIsEmpty, insightBucket, insightHasMeasures } from "@gooddata/sdk-model";
import { BucketNames } from "@gooddata/sdk-ui";
import { Bubble, BubbleHoverTrigger } from "@gooddata/sdk-ui-kit";
import { SHOW_DELAY_DEFAULT, HIDE_DELAY_DEFAULT, BUBBLE_ARROW_OFFSET_X, BUBBLE_ARROW_OFFSET_Y, } from "../../constants/bubble";
import ConfigurationPanelContent from "./ConfigurationPanelContent";
import CheckboxControl from "../configurationControls/CheckboxControl";
import ConfigSection from "../configurationControls/ConfigSection";
import PushpinSizeControl from "../configurationControls/PushpinSizeControl";
import PushpinViewportControl from "../configurationControls/PushpinViewportControl";
import LegendSection from "../configurationControls/legend/LegendSection";
import ColorsSection from "../configurationControls/colors/ColorsSection";
var GeoPushpinConfigurationPanel = /** @class */ (function (_super) {
    __extends(GeoPushpinConfigurationPanel, _super);
    function GeoPushpinConfigurationPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GeoPushpinConfigurationPanel.prototype.getControlProperties = function () {
        var _a, _b, _c, _d;
        var groupNearbyPoints = (_d = (_c = (_b = (_a = this.props.properties) === null || _a === void 0 ? void 0 : _a.controls) === null || _b === void 0 ? void 0 : _b.points) === null || _c === void 0 ? void 0 : _c.groupNearbyPoints) !== null && _d !== void 0 ? _d : true;
        return {
            groupNearbyPoints: groupNearbyPoints,
        };
    };
    GeoPushpinConfigurationPanel.prototype.renderLegendSection = function () {
        var _a = this.props, insight = _a.insight, properties = _a.properties, propertiesMeta = _a.propertiesMeta, pushData = _a.pushData;
        var isLegendVisible = hasSegmentAttribute(insight) || hasColorMeasure(insight) || hasSizeMeasure(insight);
        var controlsDisabled = this.isControlDisabled() || !isLegendVisible;
        return (React.createElement(LegendSection, { properties: properties, propertiesMeta: propertiesMeta, controlsDisabled: controlsDisabled, pushData: pushData }));
    };
    GeoPushpinConfigurationPanel.prototype.renderViewportSection = function () {
        var _a = this.props, properties = _a.properties, propertiesMeta = _a.propertiesMeta, pushData = _a.pushData;
        return (React.createElement(ConfigSection, { id: "map_section", title: "properties.map.title", propertiesMeta: propertiesMeta, properties: properties, pushData: pushData },
            React.createElement(PushpinViewportControl, { properties: properties, disabled: this.isControlDisabled(), pushData: pushData })));
    };
    GeoPushpinConfigurationPanel.prototype.renderPointsSection = function () {
        var groupNearbyPoints = this.getControlProperties().groupNearbyPoints;
        var _a = this.props, properties = _a.properties, propertiesMeta = _a.propertiesMeta, pushData = _a.pushData, insight = _a.insight;
        var isControlDisabled = this.isControlDisabled();
        var isClusteringDisabled = isControlDisabled || insightHasMeasures(insight) || hasSegmentAttribute(insight);
        var isPushpinSizeControlDisabled = isControlDisabled || !hasSizeMeasure(insight);
        return (React.createElement(ConfigSection, { id: "points_section", title: "properties.points.title", propertiesMeta: propertiesMeta, properties: properties, pushData: pushData },
            React.createElement(CheckboxControl, { valuePath: "points.groupNearbyPoints", labelText: "properties.points.groupNearbyPoints", properties: properties, checked: groupNearbyPoints, disabled: isClusteringDisabled, showDisabledMessage: isClusteringDisabled, pushData: pushData }),
            React.createElement(PushpinSizeControl, { properties: properties, disabled: isPushpinSizeControlDisabled, pushData: pushData })));
    };
    GeoPushpinConfigurationPanel.prototype.isControlDisabled = function () {
        var _a = this.props, insight = _a.insight, isError = _a.isError, isLoading = _a.isLoading;
        return !hasLocationAttribute(insight) || isError || isLoading;
    };
    GeoPushpinConfigurationPanel.prototype.getBubbleClassNames = function () {
        return cx("bubble-primary", {
            invisible: !this.isControlDisabled(),
        });
    };
    GeoPushpinConfigurationPanel.prototype.renderConfigurationPanel = function () {
        return (React.createElement(BubbleHoverTrigger, { showDelay: SHOW_DELAY_DEFAULT, hideDelay: HIDE_DELAY_DEFAULT },
            React.createElement("div", null,
                this.renderColorSection(),
                this.renderLegendSection(),
                this.renderViewportSection(),
                this.renderPointsSection()),
            React.createElement(Bubble, { className: this.getBubbleClassNames(), arrowOffsets: { "tc bc": [BUBBLE_ARROW_OFFSET_X, BUBBLE_ARROW_OFFSET_Y] }, alignPoints: [{ align: "tc bc" }] },
                React.createElement(FormattedMessage, { id: "properties.config.not_applicable" }))));
    };
    GeoPushpinConfigurationPanel.prototype.renderColorSection = function () {
        var _a = this.props, properties = _a.properties, propertiesMeta = _a.propertiesMeta, pushData = _a.pushData, colors = _a.colors, featureFlags = _a.featureFlags, references = _a.references, isLoading = _a.isLoading;
        var controlsDisabled = this.isControlDisabled();
        return (React.createElement(ColorsSection, { properties: properties, propertiesMeta: propertiesMeta, references: references, colors: colors, controlsDisabled: controlsDisabled, pushData: pushData, hasMeasures: true, showCustomPicker: featureFlags.enableCustomColorPicker, isLoading: isLoading }));
    };
    return GeoPushpinConfigurationPanel;
}(ConfigurationPanelContent));
export default GeoPushpinConfigurationPanel;
function hasColorMeasure(insight) {
    var bucket = insightBucket(insight, BucketNames.COLOR);
    return bucket !== undefined && !bucketIsEmpty(bucket);
}
function hasSizeMeasure(insight) {
    var bucket = insightBucket(insight, BucketNames.SIZE);
    return bucket !== undefined && !bucketIsEmpty(bucket);
}
function hasLocationAttribute(insight) {
    var bucket = insightBucket(insight, BucketNames.LOCATION);
    return bucket !== undefined && !bucketIsEmpty(bucket);
}
function hasSegmentAttribute(insight) {
    var bucket = insightBucket(insight, BucketNames.SEGMENT);
    return bucket !== undefined && !bucketIsEmpty(bucket);
}
//# sourceMappingURL=GeoPushpinConfigurationPanel.js.map
import { __spreadArrays } from "tslib";
// (C) 2020-2021 GoodData Corporation
import compact from "lodash/compact";
import { isDrillFromAttribute, isDrillFromMeasure, UnexpectedError, } from "@gooddata/sdk-backend-spi";
import { isLocalIdRef, isIdentifierRef, isUriRef, areObjRefsEqual, localIdRef, } from "@gooddata/sdk-model";
import { HeaderPredicates } from "@gooddata/sdk-ui";
function widgetDrillToDrillPredicates(drill) {
    var origin;
    if (isDrillFromMeasure(drill.origin)) {
        origin = drill.origin.measure;
    }
    else if (isDrillFromAttribute(drill.origin)) {
        origin = drill.origin.attribute;
    }
    else {
        throw new UnexpectedError("Unknown drill origin!");
    }
    // add drillable items for all three types of objRefs that the origin measure can be
    return compact([
        isLocalIdRef(origin) && HeaderPredicates.localIdentifierMatch(origin.localIdentifier),
        isIdentifierRef(origin) && HeaderPredicates.identifierMatch(origin.identifier),
        isUriRef(origin) && HeaderPredicates.uriMatch(origin.uri),
    ]);
}
function insightWidgetImplicitDrills(insightWidgetDrills) {
    return insightWidgetDrills.map(function (drill) {
        return {
            drillDefinition: drill,
            predicates: widgetDrillToDrillPredicates(drill),
        };
    });
}
function insightDrillDownImplicitDrills(possibleDrills, attributesWithDrillDown) {
    var drillsWitDrillDown = possibleDrills.filter(function (candidate) {
        return attributesWithDrillDown.some(function (attr) {
            return areObjRefsEqual(attr.attribute.ref, candidate.attribute.attributeHeader.formOf.ref);
        });
    });
    return drillsWitDrillDown.map(function (drill) {
        var matchingCatalogAttribute = attributesWithDrillDown.find(function (attr) {
            return areObjRefsEqual(attr.attribute.ref, drill.attribute.attributeHeader.formOf.ref);
        });
        return {
            drillDefinition: {
                type: "drillDown",
                origin: localIdRef(drill.attribute.attributeHeader.localIdentifier),
                target: matchingCatalogAttribute.attribute.drillDownStep,
            },
            predicates: [
                // add drillable items for both types of objRefs that the header can be
                HeaderPredicates.identifierMatch(drill.attribute.attributeHeader.identifier),
                HeaderPredicates.uriMatch(drill.attribute.attributeHeader.uri),
            ],
        };
    });
}
/**
 * Returns a collection of pairs consisting of a drill definition and all its predicates.
 *
 * @param insightWidgetDrills - drills from the insight widget itself
 * @param possibleDrills - possible drill targets returned by pushData (this contains all attributes in the visualization)
 * @param attributesWithDrillDown - all the attributes in the catalog that have drill down step defined
 */
export function getImplicitDrillsWithPredicates(insightWidgetDrills, possibleDrills, attributesWithDrillDown) {
    var insightImplicitDrills = insightWidgetImplicitDrills(insightWidgetDrills);
    var drillDownImplicitDrills = insightDrillDownImplicitDrills(possibleDrills, attributesWithDrillDown);
    return __spreadArrays(insightImplicitDrills, drillDownImplicitDrills);
}
//# sourceMappingURL=drillingUtils.js.map
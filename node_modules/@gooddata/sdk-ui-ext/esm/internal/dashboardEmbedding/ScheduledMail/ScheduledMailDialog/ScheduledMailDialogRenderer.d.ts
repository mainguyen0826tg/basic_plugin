import * as React from "react";
import { WrappedComponentProps } from "react-intl";
import { IAnalyticalBackend, IScheduledMailDefinition, IUser } from "@gooddata/sdk-backend-spi";
import { ObjRef } from "@gooddata/sdk-model";
import { GoodDataSdkError } from "@gooddata/sdk-ui";
import { IScheduleEmailRecipient, IScheduleEmailRepeatTime } from "../interfaces";
export declare type IScheduledMailDialogRendererOwnProps = {
    /**
     * Reference of the dashboard to be attached to the scheduled email.
     */
    dashboard: ObjRef;
    /**
     * Title of the attached dashboard. Used to create the default subject of a scheduled email.
     */
    dashboardTitle: string;
    /**
     * Author of the scheduled email - is always recipient of the scheduled email.
     */
    currentUser: IUser;
    /**
     * Date format to use in DatePicker. To check the supported tokens,
     * see the `format` method of the https://date-fns.org/ library.
     */
    dateFormat?: string;
    /**
     * Locale to use for localization of texts appearing in the scheduled email dialog.
     */
    locale?: string;
    /**
     * Has user canListUsersInProject permission?
     */
    canListUsersInProject?: boolean;
    /**
     * Is enableKPIDashboardScheduleRecipients feature flag turned on?
     */
    enableKPIDashboardScheduleRecipients?: boolean;
    /**
     * Backend to work with.
     *
     * Note: the backend must come either from this property or from BackendContext. If you do not specify
     * backend here, then the component MUST be rendered within an existing BackendContext.
     */
    backend?: IAnalyticalBackend;
    /**
     * Workspace to work with.
     *
     * Note: the workspace must come either from this property or from WorkspaceContext. If you do not specify
     * workspace here, then the component MUST be rendered within an existing WorkspaceContext.
     */
    workspace?: string;
    /**
     * Callback to be called, when user close the scheduled email dialog.
     */
    onCancel?: () => void;
    /**
     * Callback to be called, when user submit the scheduled email dialog.
     */
    onSubmit?: (scheduledEmailData: IScheduledMailDefinition) => void;
    /**
     * Callback to be called, when error occurs.
     */
    onError?: (error: GoodDataSdkError) => void;
};
export declare type IScheduledMailDialogRendererProps = IScheduledMailDialogRendererOwnProps & WrappedComponentProps;
declare type IScheduledMailDialogRendererState = {
    alignment: string;
    startDate: Date;
    startTime: IScheduleEmailRepeatTime;
    isValidScheduleEmailData: boolean;
    selectedRecipients: IScheduleEmailRecipient[];
};
export declare class ScheduledMailDialogRendererUI extends React.PureComponent<IScheduledMailDialogRendererProps, IScheduledMailDialogRendererState> {
    private repeatData;
    private userTimezone;
    private emailSubject;
    private emailBody;
    static defaultProps: Pick<IScheduledMailDialogRendererProps, "dateFormat">;
    constructor(props: IScheduledMailDialogRendererProps);
    render(): React.ReactNode;
    private getDashboardTitleMaxLength;
    private onAlign;
    private renderAttachment;
    private renderDateTime;
    private renderMessage;
    private renderRecipients;
    private renderRepeats;
    private renderSubject;
    private onScheduleDialogSubmit;
    private onDateChange;
    private onTimeChange;
    private onRecipientsChange;
    private onMessageChange;
    private updateStartDateForRepeats;
    private onRepeatsChange;
    private onSubjectChange;
    private getDefaultSubject;
    private getDefaultEmailBody;
    private getScheduleEmailData;
    private getTimeSchedule;
    private getSummaryMessage;
}
export declare const ScheduledMailDialogRendererIntl: React.ForwardRefExoticComponent<Pick<IScheduledMailDialogRendererProps, "canListUsersInProject" | "locale" | "onError" | "onCancel" | "dateFormat" | "onSubmit" | "workspace" | "backend" | "currentUser" | "enableKPIDashboardScheduleRecipients" | "dashboard" | "dashboardTitle"> & {
    forwardedRef?: React.Ref<any>;
} & React.RefAttributes<any>> & {
    WrappedComponent: React.ComponentType<IScheduledMailDialogRendererProps>;
};
export declare const ScheduledMailDialogRenderer: React.FC<IScheduledMailDialogRendererOwnProps>;
export {};
//# sourceMappingURL=ScheduledMailDialogRenderer.d.ts.map
import { __awaiter, __generator } from "tslib";
/**
 * Validates plugins before actually loading them from remote location.
 *
 * @param ctx - context in which the dashboard operates
 * @param dashboardWithPlugins - dashboard with plugins
 */
export function validatePluginsBeforeLoading(ctx, dashboardWithPlugins) {
    return __awaiter(this, void 0, void 0, function () {
        var backend, workspace, plugins, organization, _i, plugins_1, plugin, pluginResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    backend = ctx.backend, workspace = ctx.workspace;
                    plugins = dashboardWithPlugins.references.plugins;
                    return [4 /*yield*/, backend.organizations().getCurrentOrganization()];
                case 1:
                    organization = _a.sent();
                    _i = 0, plugins_1 = plugins;
                    _a.label = 2;
                case 2:
                    if (!(_i < plugins_1.length)) return [3 /*break*/, 5];
                    plugin = plugins_1[_i];
                    return [4 /*yield*/, organization
                            .securitySettings()
                            .isDashboardPluginUrlValid(plugin.url, workspace)];
                case 3:
                    pluginResult = _a.sent();
                    if (!pluginResult) {
                        // eslint-disable-next-line no-console
                        console.error("Dashboard plugin URL is not valid: " + plugin.url);
                        return [2 /*return*/, false];
                    }
                    _a.label = 4;
                case 4:
                    _i++;
                    return [3 /*break*/, 2];
                case 5: return [2 /*return*/, true];
            }
        });
    });
}
//# sourceMappingURL=beforeLoadPluginValidation.js.map
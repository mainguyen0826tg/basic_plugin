import { __extends, __read, __spread } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { Component, createRef } from "react";
import { injectIntl, FormattedMessage } from "react-intl";
import { CSSTransition, TransitionGroup } from "react-transition-group";
import cx from "classnames";
import { withTheme } from "@gooddata/sdk-ui-theme-provider";
import uniqueId from "lodash/uniqueId";
import debounce from "lodash/debounce";
import { Overlay } from "../Overlay";
import { removeFromDom } from "../utils/domUtilities";
import { Icon } from "../Icon";
import { getItemActiveColor, getTextColor, getItemHoverColor, getSeparatorColor, getWorkspacePickerHoverColor, } from "./colors";
import { addCssToStylesheet } from "./addCssToStylesheet";
import { HeaderHelp } from "./HeaderHelp";
import { HeaderAccount } from "./HeaderAccount";
import { HeaderMenu } from "./HeaderMenu";
import { HeaderUpsellButton } from "./HeaderUpsellButton";
function getOuterWidth(element) {
    var width = element.offsetWidth;
    var _a = getComputedStyle(element), marginLeft = _a.marginLeft, marginRight = _a.marginRight;
    return width + parseInt(marginLeft, 10) + parseInt(marginRight, 10);
}
function getWidthOfChildren(element, selector) {
    if (selector === void 0) { selector = "> *"; }
    var SAFETY_PADDING = 10;
    return Array.from(element.querySelectorAll(selector))
        .map(getOuterWidth)
        .reduce(function (sum, childWidth) { return sum + childWidth; }, SAFETY_PADDING);
}
var AppHeaderCore = /** @class */ (function (_super) {
    __extends(AppHeaderCore, _super);
    function AppHeaderCore(props) {
        var _this = _super.call(this, props) || this;
        _this.nodeRef = createRef();
        _this.resizeHandler = debounce(function () { return _this.measure(); }, 100);
        _this.getClassNames = function () {
            var _a;
            return cx((_a = {
                    "gd-header": true
                },
                _a[_this.state.guid] = true,
                _a[_this.props.className] = !!_this.props.className,
                _a));
        };
        _this.measureChildren = function () {
            var currentDOMNode = _this.nodeRef.current;
            var childrenWidth = getWidthOfChildren(currentDOMNode, ".gd-header-measure");
            _this.setState({
                childrenWidth: childrenWidth,
            }, _this.measure);
        };
        _this.measure = function () {
            var currentDOMNode = _this.nodeRef.current;
            if (!currentDOMNode) {
                // ref is null because 'this.measure()' is called after 100ms 'componentWillUnmount' called,
                // which cleans the nodeRef
                return;
            }
            var currentWidth = currentDOMNode.clientWidth;
            var responsiveMode = currentWidth < _this.state.childrenWidth;
            if (_this.state.responsiveMode !== responsiveMode) {
                _this.setState({
                    responsiveMode: responsiveMode,
                    isOverlayMenuOpen: false,
                    isHelpMenuOpen: false,
                });
            }
        };
        _this.createStyles = function () {
            var guid = _this.state.guid;
            var _a = _this.props, activeColor = _a.activeColor, headerColor = _a.headerColor, headerTextColor = _a.headerTextColor;
            var textColor = getTextColor(headerTextColor, headerColor);
            var itemActiveColor = getItemActiveColor(activeColor, headerColor);
            var itemHoverColor = getItemHoverColor(headerColor, activeColor);
            var separatorColor = getSeparatorColor(headerColor, activeColor);
            var workspacesPickerHoverColor = getWorkspacePickerHoverColor(headerColor);
            var css = [];
            css.push("." + guid + " { color: " + textColor + "; background: " + headerColor + "}");
            css.push("." + guid + " .gd-header-menu-section { border-color: " + separatorColor + "}");
            css.push("." + guid + " .gd-header-menu-item:hover { border-color: " + itemHoverColor + "}");
            css.push("." + guid + " .gd-header-menu-item.active { border-color: var(--gd-palette-primary-base, " + itemActiveColor + ")}");
            css.push("." + guid + " .gd-header-project { border-color: " + separatorColor + "}");
            css.push("." + guid + " .gd-header-project:hover { background-color: " + workspacesPickerHoverColor + "; color: " + textColor + "}");
            css.push("." + guid + " .hamburger-icon:not(.is-open) i { border-color: " + textColor + "}");
            css.push("." + guid + " .hamburger-icon:not(.is-open):after { border-color: " + textColor + "}");
            css.push("." + guid + " .hamburger-icon:not(.is-open):before { border-color: " + textColor + "}");
            _this.stylesheet = addCssToStylesheet("header-css-" + guid, css.join("\n"), true);
        };
        _this.setOverlayMenu = function (isOverlayMenuOpen) {
            _this.setState({
                isOverlayMenuOpen: isOverlayMenuOpen,
                isHelpMenuOpen: false,
            });
        };
        _this.setHelpMenu = function (isHelpMenuOpen) {
            _this.setState({
                isHelpMenuOpen: isHelpMenuOpen,
            });
        };
        _this.toggleHelpMenu = function () { return _this.setHelpMenu(!_this.state.isHelpMenuOpen); };
        _this.handleMenuItemClick = function (item, event) {
            if (_this.state.isHelpMenuOpen) {
                _this.setOverlayMenu(false);
            }
            _this.props.onMenuItemClick(item, event);
        };
        _this.addHelpItemGroup = function (itemGroups) {
            return !_this.props.documentationUrl ? itemGroups : __spread(itemGroups, [[_this.getHelpMenuLink()]]);
        };
        _this.getHelpMenu = function () { return [
            __spread([_this.getHelpMenuLink("gd-icon-header-help-back")], _this.props.helpMenuItems),
        ]; };
        _this.getHelpMenuLink = function (icon) {
            if (icon === void 0) { icon = "gd-icon-header-help"; }
            return ({
                key: "gs.header.help",
                className: "s-menu-help " + icon,
                href: _this.state.responsiveMode && _this.props.helpMenuItems ? undefined : _this.props.documentationUrl,
                onClick: _this.state.responsiveMode && _this.props.helpMenuItems ? _this.toggleHelpMenu : undefined,
            });
        };
        _this.renderNav = function () {
            return _this.state.responsiveMode ? _this.renderMobileNav() : _this.renderStandardNav();
        };
        _this.renderMobileNav = function () {
            var iconClasses = cx({
                "hamburger-icon": true,
                "is-open": _this.state.isOverlayMenuOpen,
            });
            return (React.createElement(React.Fragment, null,
                React.createElement("div", { className: "hamburger-wrapper", key: "hamburger-wrapper" },
                    React.createElement("div", { className: iconClasses, key: "hamburger-icon", onClick: function () {
                            _this.setOverlayMenu(!_this.state.isOverlayMenuOpen);
                        } },
                        React.createElement("i", null))),
                _this.state.isOverlayMenuOpen && _this.renderOverlayMenu()));
        };
        _this.renderOverlayMenu = function () {
            return (React.createElement(Overlay, { key: "header-overlay-menu", alignPoints: [
                    {
                        align: "tr tr",
                    },
                ], closeOnOutsideClick: _this.state.isOverlayMenuOpen, isModal: _this.state.isOverlayMenuOpen, positionType: "fixed", onClose: function () {
                    _this.setOverlayMenu(false);
                } },
                React.createElement(TransitionGroup, null,
                    React.createElement(CSSTransition, { classNames: "gd-header", timeout: 300 }, _this.renderVerticalMenu()))));
        };
        _this.renderVerticalMenu = function () {
            var badges = _this.props.badges;
            var menuItemsGroups = !_this.state.isHelpMenuOpen
                ? _this.addHelpItemGroup(_this.props.menuItemsGroups)
                : _this.getHelpMenu();
            return (React.createElement("div", { key: "overlay-menu", className: "gd-header-menu-vertical-wrapper" },
                React.createElement("div", { className: "gd-header-menu-vertical-header" }, "Menu"),
                React.createElement("div", { className: "gd-header-menu-vertical-content" },
                    React.createElement(HeaderMenu, { onMenuItemClick: _this.handleMenuItemClick, sections: menuItemsGroups, className: "gd-header-menu-vertical" })),
                React.createElement("div", { className: "gd-header-menu-vertical-footer" },
                    !!badges && React.createElement("div", { className: "gd-header-vertical-badges" }, badges),
                    React.createElement("div", { className: "gd-header-menu-vertical-bottom-item" },
                        React.createElement("span", { className: "gd-header-username gd-icon-user" }, _this.props.userName)),
                    React.createElement("div", null, _this.renderLogoutButton()))));
        };
        _this.renderLogoutButton = function () {
            var _a, _b, _c;
            var _d = __read(_this.props.accountMenuItems.filter(function (item) { return item.key === "gs.header.logout"; }), 1), logoutMenuItem = _d[0];
            return logoutMenuItem ? (React.createElement("button", { className: "logout-button gd-button s-logout", onClick: function (e) {
                    _this.props.onMenuItemClick(logoutMenuItem, e);
                } },
                React.createElement(Icon.Logout, { className: "gd-icon-logout", color: (_c = (_b = (_a = _this.props.theme) === null || _a === void 0 ? void 0 : _a.palette) === null || _b === void 0 ? void 0 : _b.complementary) === null || _c === void 0 ? void 0 : _c.c0 }),
                React.createElement("span", { className: "gd-button-text" },
                    React.createElement(FormattedMessage, { id: "gs.header.logout" })))) : (false);
        };
        _this.renderStandardNav = function () {
            var badges = _this.props.badges;
            return (React.createElement("div", { className: "gd-header-stretch gd-header-menu-wrapper" },
                React.createElement(HeaderMenu, { onMenuItemClick: _this.props.onMenuItemClick, sections: _this.props.menuItemsGroups, className: "gd-header-menu-horizontal" }),
                _this.props.showUpsellButton && (React.createElement(HeaderUpsellButton, { onUpsellButtonClick: _this.props.onUpsellButtonClick })),
                !!_this.props.helpMenuItems.length && (React.createElement(HeaderHelp, { onMenuItemClick: _this.props.onMenuItemClick, className: "gd-header-measure", items: _this.props.helpMenuItems, disableDropdown: _this.props.disableHelpDropdown, onHelpClicked: _this.props.onHelpClick, helpRedirectUrl: _this.props.helpRedirectUrl })),
                React.createElement(HeaderAccount, { userName: _this.props.userName, onMenuItemClick: _this.props.onMenuItemClick, className: "gd-header-measure", items: _this.props.accountMenuItems }),
                !!badges && React.createElement("div", { className: "gd-header-badges gd-header-measure" }, badges)));
        };
        _this.state = {
            childrenWidth: 0,
            guid: uniqueId("header-"),
            isOverlayMenuOpen: false,
            responsiveMode: false,
            isHelpMenuOpen: false,
        };
        return _this;
    }
    AppHeaderCore.prototype.render = function () {
        var _a = this.props, logoUrl = _a.logoUrl, logoTitle = _a.logoTitle, workspacePicker = _a.workspacePicker;
        this.createStyles();
        var logoLinkClassName = cx({
            "gd-header-logo": true,
            "gd-header-measure": true,
            "gd-header-shrink": this.state.responsiveMode,
        });
        return (React.createElement("div", { className: this.getClassNames(), ref: this.nodeRef },
            React.createElement("a", { href: this.props.logoHref, onClick: this.props.onLogoClick, className: logoLinkClassName },
                React.createElement("img", { src: logoUrl, title: logoTitle, onLoad: this.measureChildren, onError: this.measureChildren, alt: "" })),
            workspacePicker,
            this.renderNav()));
    };
    AppHeaderCore.prototype.componentDidMount = function () {
        window.addEventListener("resize", this.resizeHandler);
    };
    AppHeaderCore.prototype.componentWillUnmount = function () {
        window.removeEventListener("resize", this.resizeHandler);
        removeFromDom(this.stylesheet);
    };
    AppHeaderCore.defaultProps = {
        logoHref: "/",
        accountMenuItems: [],
        helpMenuItems: [],
        menuItemsGroups: [],
    };
    return AppHeaderCore;
}(Component));
/**
 * @internal
 */
export var AppHeader = withTheme(injectIntl(AppHeaderCore));
//# sourceMappingURL=Header.js.map
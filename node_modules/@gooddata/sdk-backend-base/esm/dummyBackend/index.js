import { __assign, __awaiter, __extends, __generator, __spreadArrays } from "tslib";
// (C) 2019-2021 GoodData Corporation
import { NoDataError, NotSupported, } from "@gooddata/sdk-backend-spi";
import { defFingerprint, defWithDimensions, defWithSorting, defWithDateFormat, idRef, isIdentifierRef, isUriRef, } from "@gooddata/sdk-model";
import isEqual from "lodash/isEqual";
import isEmpty from "lodash/isEmpty";
import { AbstractExecutionFactory } from "../toolkit/execution";
/**
 *
 */
export var defaultDummyBackendConfig = {
    hostname: "test",
    raiseNoDataExceptions: "without-data-view",
};
/**
 * Returns dummy backend - this backend focuses on the execution 'branch' of the SPI. it implements
 * execution factory and prepared execution so that clients receive NoData exception when trying to obtain
 * results.
 *
 * This implementation is suitable when testing code which builds and configures an instance of IPreparedExecution or
 * testing component behavior when backend returns no results.
 *
 * @remarks see {@link dummyBackendEmptyData} for a variant of dummy backend
 * @param config - optionally provide configuration of the backend (host/user)
 * @internal
 */
export function dummyBackend(config) {
    if (config === void 0) { config = defaultDummyBackendConfig; }
    var noopBackend = {
        capabilities: {
            canCalculateTotals: true,
            canCalculateSubTotals: true,
            canCalculateNativeTotals: true,
            canCalculateGrandTotals: true,
        },
        config: config,
        onHostname: function (hostname) {
            return dummyBackend(__assign(__assign({}, config), { hostname: hostname }));
        },
        withTelemetry: function (_component, _props) {
            return noopBackend;
        },
        withAuthentication: function (_) {
            return this;
        },
        organization: function (organizationId) {
            return new DummyOrganization(organizationId);
        },
        organizations: function () {
            return {
                getCurrentOrganization: function () {
                    return Promise.resolve(new DummyOrganization("dummy-organization-id"));
                },
            };
        },
        currentUser: function () {
            throw new NotSupported("not supported");
        },
        workspace: function (id) {
            return dummyWorkspace(id, config);
        },
        workspaces: function () {
            throw new NotSupported("not supported");
        },
        authenticate: function () {
            return Promise.resolve({ userId: "dummyUser" });
        },
        deauthenticate: function () {
            return Promise.resolve();
        },
        isAuthenticated: function () {
            return Promise.resolve({ userId: "dummyUser" });
        },
    };
    return noopBackend;
}
/**
 * Convenience function to create a dummy backend configured to NOT throw exceptions when client requests
 * data view. Instead, it returns an empty data view (which does not follow the SPI contract...)
 *
 * While this behavior violates contract of the SPI, a backend configured in this way is suitable for
 * particular test scenarios - for instance in tests that exercise logic which only works with IDataView's
 * execution definition.
 *
 * @internal
 */
export function dummyBackendEmptyData() {
    return dummyBackend({ hostname: "test", raiseNoDataExceptions: false });
}
/**
 * Creates a new, empty data view for the provided execution definition. The definition will be retained as-is, data
 * will be empty.
 *
 * @param definition - execution definition
 * @param result - optionally a result to link with the data view, if not provided an execution result will be
 *  created
 * @param config - optionally override config that will be passed to exec result that may be created for the
 *  data view (it is needed there in order to correctly handle readAll() and read()); config will not be used
 *  if the `result` parameter is provided explicitly
 * @returns new instance of data view
 * @internal
 */
export function dummyDataView(definition, result, config) {
    if (config === void 0) { config = defaultDummyBackendConfig; }
    var factory = new DummyExecutionFactory(config, definition.workspace);
    var execResult = result ? result : dummyExecutionResult(definition, factory, config);
    var fp = defFingerprint(definition) + "/emptyView";
    return {
        definition: definition,
        result: execResult,
        headerItems: [],
        data: [],
        offset: [0, 0],
        count: [0, 0],
        totalCount: [0, 0],
        fingerprint: function () {
            return fp;
        },
        equals: function (other) {
            return fp === other.fingerprint();
        },
    };
}
//
// Internals
//
function dummyWorkspace(workspace, config) {
    return {
        workspace: workspace,
        getDescriptor: function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, dummyDescriptor(this.workspace)];
                });
            });
        },
        getParentWorkspace: function () {
            throw new NotSupported("not supported");
        },
        execution: function () {
            return new DummyExecutionFactory(config, workspace);
        },
        catalog: function () {
            return new DummyWorkspaceCatalogFactory(workspace);
        },
        attributes: function () {
            return new DummyWorkspaceAttributesService(workspace);
        },
        measures: function () {
            return new DummyWorkspaceMeasuresService(workspace);
        },
        facts: function () {
            throw new NotSupported("not supported");
        },
        settings: function () {
            return new DummyWorkspaceSettingsService(workspace);
        },
        insights: function () {
            throw new NotSupported("not supported");
        },
        dashboards: function () {
            throw new NotSupported("not supported");
        },
        styling: function () {
            throw new NotSupported("not supported");
        },
        datasets: function () {
            throw new NotSupported("not supported");
        },
        permissions: function () {
            throw new NotSupported("not supported");
        },
        users: function () {
            throw new NotSupported("not supported");
        },
        dateFilterConfigs: function () {
            throw new NotSupported("not supported");
        },
    };
}
function dummyDescriptor(workspaceId) {
    return {
        id: workspaceId,
        title: "Title",
        description: "Description",
        isDemo: false,
    };
}
var DummyExecutionFactory = /** @class */ (function (_super) {
    __extends(DummyExecutionFactory, _super);
    function DummyExecutionFactory(config, workspace) {
        var _this = _super.call(this, workspace) || this;
        _this.config = config;
        return _this;
    }
    DummyExecutionFactory.prototype.forDefinition = function (def) {
        return dummyPreparedExecution(def, this, this.config);
    };
    return DummyExecutionFactory;
}(AbstractExecutionFactory));
function dummyExecutionResult(definition, executionFactory, config) {
    var fp = defFingerprint(definition) + "/emptyResult";
    function dummyRead() {
        if (config.raiseNoDataExceptions) {
            return Promise.reject(new NoDataError("Empty data view from dummy backend", config.raiseNoDataExceptions === "with-data-view"
                ? dummyDataView(definition, result, config)
                : undefined));
        }
        return Promise.resolve(dummyDataView(definition, result, config));
    }
    var result = {
        definition: definition,
        dimensions: [],
        readAll: function () {
            return dummyRead();
        },
        readWindow: function (_1, _2) {
            return dummyRead();
        },
        fingerprint: function () {
            return fp;
        },
        equals: function (other) {
            return fp === other.fingerprint();
        },
        export: function (_) {
            throw new NotSupported("...");
        },
        transform: function () {
            return executionFactory.forDefinition(definition);
        },
    };
    return result;
}
function dummyPreparedExecution(definition, executionFactory, config) {
    var fp = defFingerprint(definition);
    return {
        definition: definition,
        withDimensions: function () {
            var dim = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                dim[_i] = arguments[_i];
            }
            return executionFactory.forDefinition(defWithDimensions.apply(void 0, __spreadArrays([definition], dim)));
        },
        withSorting: function () {
            var items = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                items[_i] = arguments[_i];
            }
            return executionFactory.forDefinition(defWithSorting(definition, items));
        },
        withDateFormat: function (dateFormat) {
            return executionFactory.forDefinition(defWithDateFormat(definition, dateFormat));
        },
        execute: function () {
            return new Promise(function (r) { return r(dummyExecutionResult(definition, executionFactory, config)); });
        },
        explain: function () {
            // eslint-disable-next-line no-console
            console.warn("Backend does not support explain mode");
            return new Promise(function (resolve) { return resolve(); });
        },
        fingerprint: function () {
            return fp;
        },
        equals: function (other) {
            return isEqual(this.definition, other.definition);
        },
        withExecConfig: function (config) {
            if (!isEmpty(config === null || config === void 0 ? void 0 : config.dataSamplingPercentage)) {
                // eslint-disable-next-line no-console
                console.warn("Backend does not support data sampling, result will be not affected");
            }
            return executionFactory.forDefinition(definition);
        },
    };
}
var DummyWorkspaceCatalogFactory = /** @class */ (function () {
    function DummyWorkspaceCatalogFactory(workspace, options) {
        if (options === void 0) { options = {
            types: ["attribute", "measure", "fact", "dateDataset"],
            excludeTags: [],
            includeTags: [],
        }; }
        this.workspace = workspace;
        this.options = options;
    }
    DummyWorkspaceCatalogFactory.prototype.withOptions = function (options) {
        var newOptions = __assign(__assign({}, this.options), options);
        return new DummyWorkspaceCatalogFactory(this.workspace, newOptions);
    };
    DummyWorkspaceCatalogFactory.prototype.forDataset = function (dataset) {
        return this.withOptions({
            dataset: dataset,
        });
    };
    DummyWorkspaceCatalogFactory.prototype.forTypes = function (types) {
        return this.withOptions({
            types: types,
        });
    };
    DummyWorkspaceCatalogFactory.prototype.includeTags = function (tags) {
        return this.withOptions({
            includeTags: tags,
        });
    };
    DummyWorkspaceCatalogFactory.prototype.excludeTags = function (tags) {
        return this.withOptions({
            excludeTags: tags,
        });
    };
    DummyWorkspaceCatalogFactory.prototype.load = function () {
        return Promise.resolve("draw the rest of the owl");
    };
    return DummyWorkspaceCatalogFactory;
}());
var DummyOrganization = /** @class */ (function () {
    function DummyOrganization(organizationId) {
        this.organizationId = organizationId;
    }
    DummyOrganization.prototype.getDescriptor = function () {
        return Promise.resolve({
            id: this.organizationId,
            title: "dummy organization",
        });
    };
    DummyOrganization.prototype.securitySettings = function () {
        return {
            scope: "/gdc/domains/" + this.organizationId,
            isUrlValid: function (_url, _context) {
                return Promise.resolve(true);
            },
            isDashboardPluginUrlValid: function (_url, _workspace) {
                return Promise.resolve(true);
            },
        };
    };
    return DummyOrganization;
}());
var DummyWorkspaceSettingsService = /** @class */ (function () {
    function DummyWorkspaceSettingsService(workspace) {
        this.workspace = workspace;
    }
    DummyWorkspaceSettingsService.prototype.getSettings = function () {
        return Promise.resolve({
            workspace: this.workspace,
            testSetting: "test_value",
        });
    };
    DummyWorkspaceSettingsService.prototype.getSettingsForCurrentUser = function () {
        return Promise.resolve({
            workspace: this.workspace,
            testSetting: "test_value",
            userId: "test_user_id",
            locale: "test_locale",
            separators: {
                thousand: ",",
                decimal: ".",
            },
        });
    };
    return DummyWorkspaceSettingsService;
}());
var DummyWorkspaceAttributesService = /** @class */ (function () {
    function DummyWorkspaceAttributesService(workspace) {
        this.workspace = workspace;
    }
    DummyWorkspaceAttributesService.prototype.elements = function () {
        throw new NotSupported("not supported");
    };
    DummyWorkspaceAttributesService.prototype.getAttributeDisplayForm = function (ref) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, {
                        attribute: idRef("dummyAttribute"),
                        deprecated: false,
                        description: "Dummy attribute",
                        id: isIdentifierRef(ref) ? ref.identifier : "dummyDisplayForm",
                        production: true,
                        ref: ref,
                        title: "Dummy display form",
                        type: "displayForm",
                        unlisted: false,
                        uri: isUriRef(ref) ? ref.uri : "/gdc/md/" + ref.identifier,
                    }];
            });
        });
    };
    DummyWorkspaceAttributesService.prototype.getAttributeDisplayForms = function (refs) {
        var _this = this;
        return Promise.all(refs.map(function (ref) { return _this.getAttributeDisplayForm(ref); }));
    };
    DummyWorkspaceAttributesService.prototype.getAttribute = function (_ref) {
        throw new NotSupported("not supported");
    };
    DummyWorkspaceAttributesService.prototype.getAttributes = function (_refs) {
        throw new NotSupported("not supported");
    };
    DummyWorkspaceAttributesService.prototype.getCommonAttributes = function (_attributeRefs) {
        throw new NotSupported("not supported");
    };
    DummyWorkspaceAttributesService.prototype.getCommonAttributesBatch = function (_attributesRefsBatch) {
        throw new NotSupported("not supported");
    };
    DummyWorkspaceAttributesService.prototype.getAttributeDatasetMeta = function (_ref) {
        throw new NotSupported("not supported");
    };
    return DummyWorkspaceAttributesService;
}());
var DummyWorkspaceMeasuresService = /** @class */ (function () {
    function DummyWorkspaceMeasuresService(workspace) {
        this.workspace = workspace;
    }
    DummyWorkspaceMeasuresService.prototype.createMeasure = function (measure) {
        return Promise.resolve({
            id: "test_metric_id",
            uri: "test_metric_id",
            ref: idRef("test_metric_id", "measure"),
            type: "measure",
            title: measure.title || "",
            description: measure.description || "",
            deprecated: measure.deprecated || false,
            expression: measure.expression || "",
            format: measure.format || "",
            production: measure.production || false,
            isLocked: measure.isLocked || false,
            unlisted: measure.unlisted || false,
        });
    };
    DummyWorkspaceMeasuresService.prototype.deleteMeasure = function (_measureRef) {
        return Promise.resolve(undefined);
    };
    DummyWorkspaceMeasuresService.prototype.getMeasureExpressionTokens = function (_ref) {
        return Promise.resolve([]);
    };
    DummyWorkspaceMeasuresService.prototype.getMeasureReferencingObjects = function (_measureRef) {
        return Promise.resolve({});
    };
    DummyWorkspaceMeasuresService.prototype.updateMeasure = function (measure) {
        return Promise.resolve(__assign({}, measure));
    };
    return DummyWorkspaceMeasuresService;
}());
//# sourceMappingURL=index.js.map
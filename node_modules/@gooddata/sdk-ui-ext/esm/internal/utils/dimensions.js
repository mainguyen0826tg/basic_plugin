import { __assign, __spreadArrays } from "tslib";
// (C) 2007-2020 GoodData Corporation
import { attributeLocalId, bucketAttribute, bucketAttributes, bucketIsEmpty, insightAttributes, insightBucket, insightTotals, MeasureGroupIdentifier, } from "@gooddata/sdk-model";
import { BucketNames, VisualizationTypes } from "@gooddata/sdk-ui";
import { ViewByAttributesLimit } from "@gooddata/sdk-ui-charts";
export function getPivotTableDimensions(insight) {
    var row = insightBucket(insight, BucketNames.ATTRIBUTE);
    var columns = insightBucket(insight, BucketNames.COLUMNS);
    var measures = insightBucket(insight, BucketNames.MEASURES);
    var rowAttributeIds = row ? bucketAttributes(row).map(attributeLocalId) : [];
    var columnAttributeIds = columns ? bucketAttributes(columns).map(attributeLocalId) : [];
    var measuresItemIdentifiers = measures && !bucketIsEmpty(measures) ? [MeasureGroupIdentifier] : [];
    var totals = insightTotals(insight);
    var totalsProp = totals.length ? { totals: totals } : {};
    return [
        __assign({ itemIdentifiers: rowAttributeIds }, totalsProp),
        {
            itemIdentifiers: __spreadArrays(columnAttributeIds, measuresItemIdentifiers),
        },
    ];
}
function getPieOrDonutDimensions(insight) {
    var viewBy = insightBucket(insight, BucketNames.VIEW);
    if (viewBy && !bucketIsEmpty(viewBy)) {
        return [
            {
                itemIdentifiers: [MeasureGroupIdentifier],
            },
            {
                itemIdentifiers: bucketAttributes(viewBy).map(attributeLocalId),
            },
        ];
    }
    return [
        {
            itemIdentifiers: [],
        },
        {
            itemIdentifiers: [MeasureGroupIdentifier],
        },
    ];
}
function getBarDimensions(insight) {
    var viewBy = insightBucket(insight, BucketNames.VIEW);
    var viewByAttributes = viewBy ? bucketAttributes(viewBy) : [];
    var stack = insightBucket(insight, BucketNames.STACK);
    if (!stack || bucketIsEmpty(stack)) {
        return [
            {
                itemIdentifiers: [MeasureGroupIdentifier],
            },
            {
                itemIdentifiers: viewByAttributes.map(attributeLocalId),
            },
        ];
    }
    return [
        {
            itemIdentifiers: bucketAttributes(stack).map(attributeLocalId),
        },
        {
            itemIdentifiers: __spreadArrays(viewByAttributes.map(attributeLocalId), [MeasureGroupIdentifier]),
        },
    ];
}
function getAreaDimensions(insight) {
    var viewBucket = insightBucket(insight, BucketNames.VIEW);
    var viewByAttributes = viewBucket ? bucketAttributes(viewBucket) : [];
    var stackBucket = insightBucket(insight, BucketNames.STACK);
    if (viewByAttributes.length > 1) {
        // only take first two view items
        var _a = viewByAttributes
            .slice(0, ViewByAttributesLimit)
            .map(attributeLocalId), viewItemIdentifier = _a[0], stackItemIdentifier = _a[1];
        return [
            {
                itemIdentifiers: [stackItemIdentifier],
            },
            {
                itemIdentifiers: [viewItemIdentifier, MeasureGroupIdentifier],
            },
        ];
    }
    if (!stackBucket || bucketIsEmpty(stackBucket)) {
        return [
            {
                itemIdentifiers: [MeasureGroupIdentifier],
            },
            {
                itemIdentifiers: viewByAttributes.map(attributeLocalId),
            },
        ];
    }
    return [
        {
            itemIdentifiers: bucketAttributes(stackBucket).map(attributeLocalId),
        },
        {
            itemIdentifiers: __spreadArrays(viewByAttributes.map(attributeLocalId), [MeasureGroupIdentifier]),
        },
    ];
}
function getLineDimensions(insight) {
    var trend = insightBucket(insight, BucketNames.TREND);
    var trendAttributes = trend ? bucketAttributes(trend) : [];
    var segment = insightBucket(insight, BucketNames.SEGMENT);
    if (!segment || bucketIsEmpty(segment)) {
        return [
            {
                itemIdentifiers: [MeasureGroupIdentifier],
            },
            {
                itemIdentifiers: trendAttributes.map(attributeLocalId),
            },
        ];
    }
    return [
        {
            itemIdentifiers: bucketAttributes(segment).map(attributeLocalId),
        },
        {
            itemIdentifiers: __spreadArrays(trendAttributes.map(attributeLocalId), [MeasureGroupIdentifier]),
        },
    ];
}
export function getHeadlinesDimensions() {
    return [{ itemIdentifiers: [MeasureGroupIdentifier] }];
}
function getScatterDimensions(insight) {
    var attribute = insightBucket(insight, BucketNames.ATTRIBUTE);
    if (attribute && !bucketIsEmpty(attribute)) {
        return [
            {
                itemIdentifiers: bucketAttributes(attribute).map(attributeLocalId),
            },
            {
                itemIdentifiers: [MeasureGroupIdentifier],
            },
        ];
    }
    return [
        {
            itemIdentifiers: [],
        },
        {
            itemIdentifiers: [MeasureGroupIdentifier],
        },
    ];
}
// Heatmap
function getHeatmapDimensionsFromMdObj(insight) {
    return getHeatmapDimensionsFromBuckets(insight);
}
function getHeatmapDimensionsFromBuckets(insight) {
    var view = insightBucket(insight, BucketNames.VIEW);
    var viewAttributes = view ? bucketAttributes(view) : [];
    var stack = insightBucket(insight, BucketNames.STACK);
    if (!stack || bucketIsEmpty(stack)) {
        return [
            {
                itemIdentifiers: viewAttributes.map(attributeLocalId),
            },
            {
                itemIdentifiers: [MeasureGroupIdentifier],
            },
        ];
    }
    return [
        {
            itemIdentifiers: viewAttributes.map(attributeLocalId),
        },
        {
            itemIdentifiers: __spreadArrays(bucketAttributes(stack).map(attributeLocalId), [MeasureGroupIdentifier]),
        },
    ];
}
function getBubbleDimensions(insight) {
    var view = insightBucket(insight, BucketNames.VIEW);
    var viewAttributes = view ? bucketAttributes(view) : [];
    var stack = insightBucket(insight, BucketNames.STACK);
    if (!stack || bucketIsEmpty(stack)) {
        return [
            {
                itemIdentifiers: viewAttributes.map(attributeLocalId),
            },
            {
                itemIdentifiers: [MeasureGroupIdentifier],
            },
        ];
    }
    return [
        {
            itemIdentifiers: __spreadArrays(viewAttributes.map(attributeLocalId), bucketAttributes(stack).map(attributeLocalId)),
        },
        {
            itemIdentifiers: [MeasureGroupIdentifier],
        },
    ];
}
/**
 * generateDimensions
 * is a function that generates dimensions based on buckets and visualization objects.
 * WARNING: It duplicates logic from pluggable visualizations.
 *          Remove once react components support pluggable visualizations.
 * @param insight - insight being visualized
 * @param type:VisType - visualization type string
 * @internal
 */
export function generateDimensions(insight, type) {
    switch (type) {
        case VisualizationTypes.TABLE: {
            return getPivotTableDimensions(insight);
        }
        case VisualizationTypes.PIE:
        case VisualizationTypes.DONUT:
        case VisualizationTypes.FUNNEL: {
            return getPieOrDonutDimensions(insight);
        }
        case VisualizationTypes.TREEMAP: {
            return getTreemapDimensionsFromMdObj(insight);
        }
        case VisualizationTypes.LINE: {
            return getLineDimensions(insight);
        }
        case VisualizationTypes.AREA: {
            return getAreaDimensions(insight);
        }
        case VisualizationTypes.BAR:
        case VisualizationTypes.BULLET:
        case VisualizationTypes.COMBO:
        case VisualizationTypes.COMBO2:
        case VisualizationTypes.COLUMN: {
            return getBarDimensions(insight);
        }
        case VisualizationTypes.HEADLINE: {
            return getHeadlinesDimensions();
        }
        case VisualizationTypes.SCATTER: {
            return getScatterDimensions(insight);
        }
        case VisualizationTypes.HEATMAP: {
            return getHeatmapDimensionsFromMdObj(insight);
        }
        case VisualizationTypes.BUBBLE: {
            return getBubbleDimensions(insight);
        }
    }
    return [];
}
export function generateStackedDimensions(insight) {
    var viewBucket = insightBucket(insight, BucketNames.ATTRIBUTE);
    var viewAttributes = viewBucket ? bucketAttributes(viewBucket) : [];
    var stackAttribute = bucketAttribute(insightBucket(insight, BucketNames.STACK));
    return [
        {
            itemIdentifiers: stackAttribute ? [attributeLocalId(stackAttribute)] : [],
        },
        {
            itemIdentifiers: __spreadArrays(viewAttributes.map(attributeLocalId), [MeasureGroupIdentifier]),
        },
    ];
}
// Treemap
function getTreemapDimensionsFromMdObj(insight) {
    return getTreemapDimensionsFromBuckets(insight);
}
function getTreemapDimensionsFromBuckets(insight) {
    return getTreemapDimensionsFromAFM(insight);
}
function getTreemapDimensionsFromAFM(insight) {
    var attributes = insightAttributes(insight);
    if (attributes.length === 1) {
        return [
            {
                itemIdentifiers: [MeasureGroupIdentifier],
            },
            {
                itemIdentifiers: attributes.map(attributeLocalId),
            },
        ];
    }
    return [
        {
            itemIdentifiers: attributes.map(attributeLocalId),
        },
        {
            itemIdentifiers: [MeasureGroupIdentifier],
        },
    ];
}
//# sourceMappingURL=dimensions.js.map
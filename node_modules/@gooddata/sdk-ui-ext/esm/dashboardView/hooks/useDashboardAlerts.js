import { useBackend, useCancelablePromise, useWorkspace, } from "@gooddata/sdk-ui";
import { objRefToString } from "@gooddata/sdk-model";
import { dashboardAlertsDataLoaderFactory } from "../../dataLoaders";
import { backendInvariant, workspaceInvariant } from "./utils";
/**
 * Hook allowing to download dashboard alerts data for the current user
 * @param config - configuration of the hook
 * @beta
 * @deprecated superseded by Dashboard component; please see `@gooddata/sdk-ui-dashboard` and GoodData.UI documentation for v8.7
 */
export function useDashboardAlerts(_a) {
    var dashboard = _a.dashboard, backend = _a.backend, onCancel = _a.onCancel, onError = _a.onError, onLoading = _a.onLoading, onPending = _a.onPending, onSuccess = _a.onSuccess, workspace = _a.workspace;
    var effectiveBackend = useBackend(backend);
    var effectiveWorkspace = useWorkspace(workspace);
    backendInvariant(effectiveBackend, "useDashboardAlerts");
    workspaceInvariant(effectiveWorkspace, "useDashboardAlerts");
    var loader = dashboardAlertsDataLoaderFactory.forWorkspace(effectiveWorkspace);
    var promise = function () { return loader.getDashboardAlerts(effectiveBackend, dashboard); };
    return useCancelablePromise({ promise: promise, onCancel: onCancel, onError: onError, onLoading: onLoading, onPending: onPending, onSuccess: onSuccess }, [
        effectiveBackend,
        effectiveWorkspace,
        objRefToString(dashboard),
    ]);
}
//# sourceMappingURL=useDashboardAlerts.js.map
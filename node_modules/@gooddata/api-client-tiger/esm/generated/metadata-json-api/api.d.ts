import { Configuration } from "./configuration";
import { AxiosPromise, AxiosInstance } from "axios";
import { RequestArgs, BaseAPI } from "./base";
/**
 * An id of the table from PDM mapped to this dataset. Including ID of data source.
 * @export
 * @interface DataSourceTableIdentifier
 */
export interface DataSourceTableIdentifier {
    /**
     * ID of table.
     * @type {string}
     * @memberof DataSourceTableIdentifier
     */
    id: string;
    /**
     * Data source ID.
     * @type {string}
     * @memberof DataSourceTableIdentifier
     */
    dataSourceId: string;
    /**
     * Data source entity type.
     * @type {string}
     * @memberof DataSourceTableIdentifier
     */
    type: DataSourceTableIdentifierTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum DataSourceTableIdentifierTypeEnum {
    DataSource = "dataSource"
}
/**
 *
 * @export
 * @interface DatasetReferenceIdentifier
 */
export interface DatasetReferenceIdentifier {
    /**
     *
     * @type {string}
     * @memberof DatasetReferenceIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DatasetReferenceIdentifier
     */
    type: DatasetReferenceIdentifierTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum DatasetReferenceIdentifierTypeEnum {
    Dataset = "dataset"
}
/**
 *
 * @export
 * @interface DeclarativeAnalyticalDashboard
 */
export interface DeclarativeAnalyticalDashboard {
    /**
     * Analytical dashboard ID.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    id: string;
    /**
     * Analytical dashboard title.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    title: string;
    /**
     * Analytical dashboard description.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    description?: string;
    /**
     * A server agnostic definition of the dashboard plugin in JSON format.
     * @type {object}
     * @memberof DeclarativeAnalyticalDashboard
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeAnalyticalDashboard
     */
    tags?: Array<string>;
}
/**
 * Entities describing users\' view on data.
 * @export
 * @interface DeclarativeAnalytics
 */
export interface DeclarativeAnalytics {
    /**
     *
     * @type {DeclarativeAnalyticsLayer}
     * @memberof DeclarativeAnalytics
     */
    analytics?: DeclarativeAnalyticsLayer;
}
/**
 *
 * @export
 * @interface DeclarativeAnalyticsLayer
 */
export interface DeclarativeAnalyticsLayer {
    /**
     * A list of analytical dashboards available in the model.
     * @type {Array<DeclarativeAnalyticalDashboard>}
     * @memberof DeclarativeAnalyticsLayer
     */
    analyticalDashboards?: Array<DeclarativeAnalyticalDashboard>;
    /**
     * A list of filter contexts available in the model.
     * @type {Array<DeclarativeFilterContext>}
     * @memberof DeclarativeAnalyticsLayer
     */
    filterContexts?: Array<DeclarativeFilterContext>;
    /**
     * A list of metrics available in the model.
     * @type {Array<DeclarativeMetric>}
     * @memberof DeclarativeAnalyticsLayer
     */
    metrics?: Array<DeclarativeMetric>;
    /**
     * A list of visualization objects available in the model.
     * @type {Array<DeclarativeVisualizationObject>}
     * @memberof DeclarativeAnalyticsLayer
     */
    visualizationObjects?: Array<DeclarativeVisualizationObject>;
    /**
     * A list of dashboard plugins available in the model.
     * @type {Array<DeclarativeDashboardPlugin>}
     * @memberof DeclarativeAnalyticsLayer
     */
    dashboardPlugins?: Array<DeclarativeDashboardPlugin>;
}
/**
 * A dataset attribute.
 * @export
 * @interface DeclarativeAttribute
 */
export interface DeclarativeAttribute {
    /**
     * Attribute ID.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    id: string;
    /**
     * Attribute title.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    title: string;
    /**
     * Attribute description.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    description?: string;
    /**
     * An array of attribute labels.
     * @type {Array<DeclarativeLabel>}
     * @memberof DeclarativeAttribute
     */
    labels: Array<DeclarativeLabel>;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeAttribute
     */
    tags?: Array<string>;
}
/**
 * A table column.
 * @export
 * @interface DeclarativeColumn
 */
export interface DeclarativeColumn {
    /**
     * Column name
     * @type {string}
     * @memberof DeclarativeColumn
     */
    name: string;
    /**
     * Column type
     * @type {string}
     * @memberof DeclarativeColumn
     */
    dataType: DeclarativeColumnDataTypeEnum;
    /**
     * Is column part of primary key?
     * @type {boolean}
     * @memberof DeclarativeColumn
     */
    isPrimaryKey?: boolean;
    /**
     * Referenced table (Foreign key)
     * @type {string}
     * @memberof DeclarativeColumn
     */
    referencedTableId?: string;
    /**
     * Referenced table (Foreign key)
     * @type {string}
     * @memberof DeclarativeColumn
     */
    referencedTableColumn?: string;
}
/**
 * @export
 * @enum {string}
 */
export declare enum DeclarativeColumnDataTypeEnum {
    INT = "INT",
    STRING = "STRING",
    DATE = "DATE",
    NUMERIC = "NUMERIC",
    TIMESTAMP = "TIMESTAMP",
    BOOLEAN = "BOOLEAN"
}
/**
 *
 * @export
 * @interface DeclarativeDashboardPlugin
 */
export interface DeclarativeDashboardPlugin {
    /**
     * Dashboard plugin object ID.
     * @type {string}
     * @memberof DeclarativeDashboardPlugin
     */
    id: string;
    /**
     * Dashboard plugin object title.
     * @type {string}
     * @memberof DeclarativeDashboardPlugin
     */
    title: string;
    /**
     * Dashboard plugin description.
     * @type {string}
     * @memberof DeclarativeDashboardPlugin
     */
    description?: string;
    /**
     * A server agnostic definition of the dashboard plugin in JSON format.
     * @type {object}
     * @memberof DeclarativeDashboardPlugin
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeDashboardPlugin
     */
    tags?: Array<string>;
}
/**
 * A data source and its properties.
 * @export
 * @interface DeclarativeDataSource
 */
export interface DeclarativeDataSource {
    /**
     * Data source ID.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    id: string;
    /**
     * Name of the data source.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    name: string;
    /**
     * Type of database.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    type: DeclarativeDataSourceTypeEnum;
    /**
     * An connection string relevant to type of database.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    url: string;
    /**
     * A scheme/database with the data.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    schema: string;
    /**
     * User with permission connect the data source/database.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    username?: string;
    /**
     * Password for the data-source user, property is never returned back.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    password?: string;
    /**
     * Token as an alternative to username and password.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    token?: string;
    /**
     * Enable caching of intermediate results.
     * @type {boolean}
     * @memberof DeclarativeDataSource
     */
    enableCaching?: boolean;
    /**
     * Path to schema, where intermediate caches are stored.
     * @type {Array<string>}
     * @memberof DeclarativeDataSource
     */
    cachePath?: Array<string>;
    /**
     *
     * @type {DeclarativeTables}
     * @memberof DeclarativeDataSource
     */
    pdm?: DeclarativeTables;
}
/**
 * @export
 * @enum {string}
 */
export declare enum DeclarativeDataSourceTypeEnum {
    POSTGRESQL = "POSTGRESQL",
    REDSHIFT = "REDSHIFT",
    VERTICA = "VERTICA",
    SNOWFLAKE = "SNOWFLAKE",
    ADS = "ADS",
    BIGQUERY = "BIGQUERY",
    MSSQL = "MSSQL",
    PRESTO = "PRESTO",
    DREMIO = "DREMIO",
    DRILL = "DRILL"
}
/**
 * A data source and its properties.
 * @export
 * @interface DeclarativeDataSources
 */
export interface DeclarativeDataSources {
    /**
     *
     * @type {Array<DeclarativeDataSource>}
     * @memberof DeclarativeDataSources
     */
    dataSources: Array<DeclarativeDataSource>;
}
/**
 * A dataset defined by its properties.
 * @export
 * @interface DeclarativeDataset
 */
export interface DeclarativeDataset {
    /**
     * The Dataset ID. This ID is further used to refer to this instance of dataset.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    id: string;
    /**
     * A dataset title.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    title: string;
    /**
     * A dataset description.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    description?: string;
    /**
     * An array of grain identifiers.
     * @type {Array<GrainIdentifier>}
     * @memberof DeclarativeDataset
     */
    grain: Array<GrainIdentifier>;
    /**
     * An array of attributes.
     * @type {Array<DeclarativeAttribute>}
     * @memberof DeclarativeDataset
     */
    attributes?: Array<DeclarativeAttribute>;
    /**
     * An array of facts.
     * @type {Array<DeclarativeFact>}
     * @memberof DeclarativeDataset
     */
    facts?: Array<DeclarativeFact>;
    /**
     * An array of references.
     * @type {Array<DeclarativeReference>}
     * @memberof DeclarativeDataset
     */
    references: Array<DeclarativeReference>;
    /**
     *
     * @type {DataSourceTableIdentifier}
     * @memberof DeclarativeDataset
     */
    dataSourceTableId?: DataSourceTableIdentifier;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeDataset
     */
    tags?: Array<string>;
}
/**
 * A date dataset.
 * @export
 * @interface DeclarativeDateDataset
 */
export interface DeclarativeDateDataset {
    /**
     * Date dataset ID.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    id: string;
    /**
     * Date dataset title.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    title: string;
    /**
     * Date dataset description.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    description?: string;
    /**
     *
     * @type {GranularitiesFormatting}
     * @memberof DeclarativeDateDataset
     */
    granularitiesFormatting: GranularitiesFormatting;
    /**
     * An array of date granularities. All listed granularities will be available for date dataset.
     * @type {Array<string>}
     * @memberof DeclarativeDateDataset
     */
    granularities: Array<DeclarativeDateDatasetGranularitiesEnum>;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeDateDataset
     */
    tags?: Array<string>;
}
/**
 * @export
 * @enum {string}
 */
export declare enum DeclarativeDateDatasetGranularitiesEnum {
    MINUTE = "MINUTE",
    HOUR = "HOUR",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    QUARTER = "QUARTER",
    YEAR = "YEAR",
    MINUTEOFHOUR = "MINUTE_OF_HOUR",
    HOUROFDAY = "HOUR_OF_DAY",
    DAYOFWEEK = "DAY_OF_WEEK",
    DAYOFMONTH = "DAY_OF_MONTH",
    DAYOFYEAR = "DAY_OF_YEAR",
    WEEKOFYEAR = "WEEK_OF_YEAR",
    MONTHOFYEAR = "MONTH_OF_YEAR",
    QUARTEROFYEAR = "QUARTER_OF_YEAR"
}
/**
 * A dataset fact.
 * @export
 * @interface DeclarativeFact
 */
export interface DeclarativeFact {
    /**
     * Fact ID.
     * @type {string}
     * @memberof DeclarativeFact
     */
    id: string;
    /**
     * Fact title.
     * @type {string}
     * @memberof DeclarativeFact
     */
    title: string;
    /**
     * Fact description.
     * @type {string}
     * @memberof DeclarativeFact
     */
    description?: string;
    /**
     * A name of the source column in the table.
     * @type {string}
     * @memberof DeclarativeFact
     */
    sourceColumn: string;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeFact
     */
    tags?: Array<string>;
}
/**
 *
 * @export
 * @interface DeclarativeFilterContext
 */
export interface DeclarativeFilterContext {
    /**
     * Filter Context ID.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    id: string;
    /**
     * Filter Context title.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    title: string;
    /**
     * Filter Context description.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    description?: string;
    /**
     * A server agnostic definition of the dashboard plugin in JSON format.
     * @type {object}
     * @memberof DeclarativeFilterContext
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeFilterContext
     */
    tags?: Array<string>;
}
/**
 * A attribute label.
 * @export
 * @interface DeclarativeLabel
 */
export interface DeclarativeLabel {
    /**
     * Label ID.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    id: string;
    /**
     * Label title.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    title: string;
    /**
     * Label description.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    description?: string;
    /**
     * A flag indicating whether the label should be treated as a primary one.
     * @type {boolean}
     * @memberof DeclarativeLabel
     */
    primary: boolean;
    /**
     * A name of the source column in the table.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    sourceColumn: string;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeLabel
     */
    tags?: Array<string>;
}
/**
 * A logical data model (LDM) representation.
 * @export
 * @interface DeclarativeLdm
 */
export interface DeclarativeLdm {
    /**
     * An array containing datasets.
     * @type {Array<DeclarativeDataset>}
     * @memberof DeclarativeLdm
     */
    datasets?: Array<DeclarativeDataset>;
    /**
     * An array containing date-related datasets.
     * @type {Array<DeclarativeDateDataset>}
     * @memberof DeclarativeLdm
     */
    dateInstances?: Array<DeclarativeDateDataset>;
}
/**
 *
 * @export
 * @interface DeclarativeMetric
 */
export interface DeclarativeMetric {
    /**
     * Metric ID.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    id: string;
    /**
     * Metric title.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    title: string;
    /**
     * Metric description.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    description?: string;
    /**
     * A server agnostic definition of the dashboard plugin in JSON format.
     * @type {object}
     * @memberof DeclarativeMetric
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeMetric
     */
    tags?: Array<string>;
}
/**
 * A data model structured as a set of its attributes.
 * @export
 * @interface DeclarativeModel
 */
export interface DeclarativeModel {
    /**
     *
     * @type {DeclarativeLdm}
     * @memberof DeclarativeModel
     */
    ldm?: DeclarativeLdm;
}
/**
 * Complete definition of an organization in a declarative form.
 * @export
 * @interface DeclarativeOrganization
 */
export interface DeclarativeOrganization {
    /**
     *
     * @type {DeclarativeOrganizationInfo}
     * @memberof DeclarativeOrganization
     */
    organization: DeclarativeOrganizationInfo;
    /**
     *
     * @type {Array<DeclarativeUser>}
     * @memberof DeclarativeOrganization
     */
    users?: Array<DeclarativeUser>;
    /**
     *
     * @type {Array<DeclarativeUserGroup>}
     * @memberof DeclarativeOrganization
     */
    userGroups?: Array<DeclarativeUserGroup>;
    /**
     *
     * @type {Array<DeclarativeDataSource>}
     * @memberof DeclarativeOrganization
     */
    dataSources?: Array<DeclarativeDataSource>;
    /**
     *
     * @type {Array<DeclarativeWorkspace>}
     * @memberof DeclarativeOrganization
     */
    workspaces?: Array<DeclarativeWorkspace>;
    /**
     *
     * @type {Array<DeclarativeWorkspaceDataFilter>}
     * @memberof DeclarativeOrganization
     */
    workspaceDataFilters?: Array<DeclarativeWorkspaceDataFilter>;
}
/**
 * Information available about an organization.
 * @export
 * @interface DeclarativeOrganizationInfo
 */
export interface DeclarativeOrganizationInfo {
    /**
     * Identifier of the organization.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    id: string;
    /**
     * Formal name of the organization.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    name: string;
    /**
     * Formal hostname used in deployment.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    hostname: string;
    /**
     * URI of the authentication provider.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    oauthIssuerLocation?: string;
    /**
     * Identifier of the authentication provider
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    oauthClientId?: string;
    /**
     * Communication secret of the authentication provider (never returned back).
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    oauthClientSecret?: string;
}
/**
 * A physical data model (PDM) representation for single data source.
 * @export
 * @interface DeclarativePdm
 */
export interface DeclarativePdm {
    /**
     *
     * @type {DeclarativeTables}
     * @memberof DeclarativePdm
     */
    pdm: DeclarativeTables;
}
/**
 * A dataset reference.
 * @export
 * @interface DeclarativeReference
 */
export interface DeclarativeReference {
    /**
     *
     * @type {ReferenceIdentifier}
     * @memberof DeclarativeReference
     */
    identifier: ReferenceIdentifier;
    /**
     * The multi-value flag enables many-to-many cardinality for references.
     * @type {boolean}
     * @memberof DeclarativeReference
     */
    multivalue: boolean;
    /**
     * An array of source column names for a given reference.
     * @type {Array<string>}
     * @memberof DeclarativeReference
     */
    sourceColumns: Array<string>;
}
/**
 * A database table.
 * @export
 * @interface DeclarativeTable
 */
export interface DeclarativeTable {
    /**
     * Table id.
     * @type {string}
     * @memberof DeclarativeTable
     */
    id: string;
    /**
     * Path to table.
     * @type {Array<string>}
     * @memberof DeclarativeTable
     */
    path: Array<string>;
    /**
     * Table type: TABLE or VIEW.
     * @type {string}
     * @memberof DeclarativeTable
     */
    type: string;
    /**
     * An array of physical columns
     * @type {Array<DeclarativeColumn>}
     * @memberof DeclarativeTable
     */
    columns: Array<DeclarativeColumn>;
}
/**
 * A physical data model (PDM) tables.
 * @export
 * @interface DeclarativeTables
 */
export interface DeclarativeTables {
    /**
     * An array of physical database tables.
     * @type {Array<DeclarativeTable>}
     * @memberof DeclarativeTables
     */
    tables: Array<DeclarativeTable>;
}
/**
 * A user and its properties
 * @export
 * @interface DeclarativeUser
 */
export interface DeclarativeUser {
    /**
     * User identifier.
     * @type {string}
     * @memberof DeclarativeUser
     */
    id: string;
    /**
     * User identification in the authentication manager.
     * @type {string}
     * @memberof DeclarativeUser
     */
    authId?: string;
    /**
     *
     * @type {Array<UserGroupIdentifier>}
     * @memberof DeclarativeUser
     */
    userGroups?: Array<UserGroupIdentifier>;
}
/**
 * A user-group and its properties
 * @export
 * @interface DeclarativeUserGroup
 */
export interface DeclarativeUserGroup {
    /**
     * UserGroup identifier.
     * @type {string}
     * @memberof DeclarativeUserGroup
     */
    id: string;
    /**
     *
     * @type {Array<UserGroupIdentifier>}
     * @memberof DeclarativeUserGroup
     */
    parents?: Array<UserGroupIdentifier>;
}
/**
 * Declarative form of userGroups and its properties.
 * @export
 * @interface DeclarativeUserGroups
 */
export interface DeclarativeUserGroups {
    /**
     *
     * @type {Array<DeclarativeUserGroup>}
     * @memberof DeclarativeUserGroups
     */
    userGroups: Array<DeclarativeUserGroup>;
}
/**
 * Declarative form of users and its properties.
 * @export
 * @interface DeclarativeUsers
 */
export interface DeclarativeUsers {
    /**
     *
     * @type {Array<DeclarativeUser>}
     * @memberof DeclarativeUsers
     */
    users: Array<DeclarativeUser>;
}
/**
 * Declarative form of both users and user groups and theirs properties.
 * @export
 * @interface DeclarativeUsersUserGroups
 */
export interface DeclarativeUsersUserGroups {
    /**
     *
     * @type {Array<DeclarativeUser>}
     * @memberof DeclarativeUsersUserGroups
     */
    users: Array<DeclarativeUser>;
    /**
     *
     * @type {Array<DeclarativeUserGroup>}
     * @memberof DeclarativeUsersUserGroups
     */
    userGroups: Array<DeclarativeUserGroup>;
}
/**
 *
 * @export
 * @interface DeclarativeVisualizationObject
 */
export interface DeclarativeVisualizationObject {
    /**
     * Visualization object ID.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    id: string;
    /**
     * Visualization object title.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    title: string;
    /**
     * Visualization object description.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    description?: string;
    /**
     * A server agnostic definition of the dashboard plugin in JSON format.
     * @type {object}
     * @memberof DeclarativeVisualizationObject
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeVisualizationObject
     */
    tags?: Array<string>;
}
/**
 * A declarative form of a particular workspace.
 * @export
 * @interface DeclarativeWorkspace
 */
export interface DeclarativeWorkspace {
    /**
     * Identifier of a workspace
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    id: string;
    /**
     * Name of a workspace to view.
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    name: string;
    /**
     *
     * @type {DeclarativeWorkspaceModel}
     * @memberof DeclarativeWorkspace
     */
    model?: DeclarativeWorkspaceModel;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspace
     */
    parent?: WorkspaceIdentifier;
    /**
     *
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    computeClient?: DeclarativeWorkspaceComputeClientEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum DeclarativeWorkspaceComputeClientEnum {
    AQE = "AQE",
    CALCIQUE = "CALCIQUE"
}
/**
 * Workspace Data Filters serving the filtering of what data users can see in workspaces.
 * @export
 * @interface DeclarativeWorkspaceDataFilter
 */
export interface DeclarativeWorkspaceDataFilter {
    /**
     * Workspace Data Filters ID. This ID is further used to refer to this instance.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    id: string;
    /**
     * Workspace Data Filters title.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    title: string;
    /**
     * Workspace Data Filters description.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    description?: string;
    /**
     * Workspace Data Filters column name. Data are filtered using this physical column.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    columnName: string;
    /**
     * Filter settings specifying values of filters valid for the workspace.
     * @type {Array<DeclarativeWorkspaceDataFilterSetting>}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    workspaceDataFilterSettings: Array<DeclarativeWorkspaceDataFilterSetting>;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    workspace?: WorkspaceIdentifier;
}
/**
 * Workspace Data Filters serving the filtering of what data users can see in workspaces.
 * @export
 * @interface DeclarativeWorkspaceDataFilterSetting
 */
export interface DeclarativeWorkspaceDataFilterSetting {
    /**
     * Workspace Data Filters ID. This ID is further used to refer to this instance.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    id: string;
    /**
     * Workspace Data Filters setting title.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    title: string;
    /**
     * Workspace Data Filters setting description.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    description?: string;
    /**
     * Only those rows are returned, where columnName from filter matches those values.
     * @type {Array<string>}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    filterValues: Array<string>;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    workspace: WorkspaceIdentifier;
}
/**
 * Declarative form of data filters.
 * @export
 * @interface DeclarativeWorkspaceDataFilters
 */
export interface DeclarativeWorkspaceDataFilters {
    /**
     *
     * @type {Array<DeclarativeWorkspaceDataFilter>}
     * @memberof DeclarativeWorkspaceDataFilters
     */
    workspaceDataFilters: Array<DeclarativeWorkspaceDataFilter>;
}
/**
 * A declarative form of a model and analytics for a workspace.
 * @export
 * @interface DeclarativeWorkspaceModel
 */
export interface DeclarativeWorkspaceModel {
    /**
     *
     * @type {DeclarativeLdm}
     * @memberof DeclarativeWorkspaceModel
     */
    ldm?: DeclarativeLdm;
    /**
     *
     * @type {DeclarativeAnalyticsLayer}
     * @memberof DeclarativeWorkspaceModel
     */
    analytics?: DeclarativeAnalyticsLayer;
}
/**
 * A declarative form of a all workspace layout.
 * @export
 * @interface DeclarativeWorkspaces
 */
export interface DeclarativeWorkspaces {
    /**
     *
     * @type {Array<DeclarativeWorkspace>}
     * @memberof DeclarativeWorkspaces
     */
    workspaces: Array<DeclarativeWorkspace>;
    /**
     *
     * @type {Array<DeclarativeWorkspaceDataFilter>}
     * @memberof DeclarativeWorkspaces
     */
    workspaceDataFilters: Array<DeclarativeWorkspaceDataFilter>;
}
/**
 * A request containing all information needed for generation of logical model.
 * @export
 * @interface GenerateLdmRequest
 */
export interface GenerateLdmRequest {
    /**
     * A separator between prefixes and the names. Default is \"__\".
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    separator: string;
    /**
     * Tables starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    tablePrefix?: string;
    /**
     * Views starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    viewPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as primary labels. The prefix is then followed by the value of `separator` parameter. Given the primary label prefix is `pl` and separator is `__`, the columns with name like `pl__country_id` will be considered as primary labels.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    primaryLabelPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as secondary labels. The prefix is then followed by the value of `separator` parameter. Given the secondary label prefix is `sl` and separator is `__`, the columns with name like `sl__country_id_country_name` will be considered as secondary labels.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    secondaryLabelPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as facts. The prefix is then followed by the value of `separator` parameter. Given the fact prefix is `f` and separator is `__`, the columns with name like `f__sold` will be considered as facts.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    factPrefix?: string;
    /**
     * Option to control date granularities for date datasets. Empty value enables common date granularities (DAY, WEEK, MONTH, QUARTER, YEAR). Default value is `all` which enables all available date granularities, including time granularities (like hours, minutes).
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    dateGranularities?: string;
    /**
     * Columns starting with this prefix will be considered as grains. The prefix is then followed by the value of `separator` parameter. Given the grain prefix is `g` and separator is `__`, the columns with name like `g__name` will be considered as grains.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    grainPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `r` and separator is `__`, the columns with name like `r__customer_name` will be considered as references.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    referencePrefix?: string;
    /**
     * Columns starting with this prefix will be considered as grain references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `gr` and separator is `__`, the columns with name like `gr__customer_name` will be considered as grain references.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    grainReferencePrefix?: string;
    /**
     * Columns starting with this prefix will be considered as denormalization references. The prefix is then followed by the value of `separator` parameter. Given the denormalization reference prefix is `dr` and separator is `__`, the columns with name like `dr__customer_name` will be considered as denormalization references.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    denormPrefix?: string;
    /**
     * Column serving as workspace data filter. No labels are auto generated for such columns.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    wdfPrefix?: string;
}
/**
 * A grain identifier.
 * @export
 * @interface GrainIdentifier
 */
export interface GrainIdentifier {
    /**
     * Grain ID.
     * @type {string}
     * @memberof GrainIdentifier
     */
    id: string;
    /**
     * A type of the grain.
     * @type {string}
     * @memberof GrainIdentifier
     */
    type: GrainIdentifierTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum GrainIdentifierTypeEnum {
    Attribute = "attribute",
    Dataset = "dataset"
}
/**
 * A date dataset granularities title formatting rules.
 * @export
 * @interface GranularitiesFormatting
 */
export interface GranularitiesFormatting {
    /**
     * Title base is used as a token in title pattern. If left empty, it is replaced by date dataset title.
     * @type {string}
     * @memberof GranularitiesFormatting
     */
    titleBase: string;
    /**
     * This pattern is used to generate the title of attributes and labels that result from the granularities. There are two tokens available:  * `%titleBase` - represents shared part by all titles, or title of Date Dataset if left empty * `%granularityTitle` - represents `DateGranularity` built-in title
     * @type {string}
     * @memberof GranularitiesFormatting
     */
    titlePattern: string;
}
/**
 * JSON:API representation of analyticalDashboard entity.
 * @export
 * @interface JsonApiAnalyticalDashboardIn
 */
export interface JsonApiAnalyticalDashboardIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    type: JsonApiAnalyticalDashboardInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiAnalyticalDashboardInTypeEnum {
    AnalyticalDashboard = "analyticalDashboard"
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardInAttributes
 */
export interface JsonApiAnalyticalDashboardInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardInAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardInAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAnalyticalDashboardInAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiAnalyticalDashboardInAttributes
     */
    areRelationsValid?: boolean;
    /**
     * Free-form JSON content.
     * @type {object}
     * @memberof JsonApiAnalyticalDashboardInAttributes
     */
    content?: object;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardInDocument
 */
export interface JsonApiAnalyticalDashboardInDocument {
    /**
     *
     * @type {JsonApiAnalyticalDashboardIn}
     * @memberof JsonApiAnalyticalDashboardInDocument
     */
    data: JsonApiAnalyticalDashboardIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiAnalyticalDashboardLinkage
 */
export interface JsonApiAnalyticalDashboardLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardLinkage
     */
    type: JsonApiAnalyticalDashboardLinkageTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiAnalyticalDashboardLinkageTypeEnum {
    AnalyticalDashboard = "analyticalDashboard"
}
/**
 * JSON:API representation of analyticalDashboard entity.
 * @export
 * @interface JsonApiAnalyticalDashboardOut
 */
export interface JsonApiAnalyticalDashboardOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    type: JsonApiAnalyticalDashboardOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationships}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    relationships?: JsonApiAnalyticalDashboardOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiAnalyticalDashboardOutTypeEnum {
    AnalyticalDashboard = "analyticalDashboard"
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutDocument
 */
export interface JsonApiAnalyticalDashboardOutDocument {
    /**
     *
     * @type {JsonApiAnalyticalDashboardOut}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    data: JsonApiAnalyticalDashboardOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAnalyticalDashboardOutIncludes>}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    included?: Array<JsonApiAnalyticalDashboardOutIncludes>;
}
/**
 * @type JsonApiAnalyticalDashboardOutIncludes
 * @export
 */
export declare type JsonApiAnalyticalDashboardOutIncludes = JsonApiAnalyticalDashboardOutWithLinks | JsonApiDashboardPluginOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiFilterContextOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks | JsonApiVisualizationObjectOutWithLinks;
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiAnalyticalDashboardOutList
 */
export interface JsonApiAnalyticalDashboardOutList {
    /**
     *
     * @type {Array<JsonApiAnalyticalDashboardOutWithLinks>}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    data: Array<JsonApiAnalyticalDashboardOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAnalyticalDashboardOutIncludes>}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    included?: Array<JsonApiAnalyticalDashboardOutIncludes>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationships
 */
export interface JsonApiAnalyticalDashboardOutRelationships {
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    visualizationObjects?: JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    analyticalDashboards?: JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsMetrics}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    metrics?: JsonApiAnalyticalDashboardOutRelationshipsMetrics;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    datasets?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsFilterContexts}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    filterContexts?: JsonApiAnalyticalDashboardOutRelationshipsFilterContexts;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    dashboardPlugins?: JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiAnalyticalDashboardLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards
     */
    data: Array<JsonApiAnalyticalDashboardLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiDashboardPluginLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins
     */
    data: Array<JsonApiDashboardPluginLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsDatasets
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsDatasets {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiDatasetLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsDatasets
     */
    data: Array<JsonApiDatasetLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsFilterContexts
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsFilterContexts {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiFilterContextLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsFilterContexts
     */
    data: Array<JsonApiFilterContextLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsLabels
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsLabels {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiLabelLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsLabels
     */
    data: Array<JsonApiLabelLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsMetrics
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsMetrics {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiMetricLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsMetrics
     */
    data: Array<JsonApiMetricLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects
 */
export interface JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiVisualizationObjectLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects
     */
    data: Array<JsonApiVisualizationObjectLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutWithLinks
 */
export interface JsonApiAnalyticalDashboardOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    type: JsonApiAnalyticalDashboardOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationships}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    relationships?: JsonApiAnalyticalDashboardOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiAnalyticalDashboardOutWithLinksTypeEnum {
    AnalyticalDashboard = "analyticalDashboard"
}
/**
 * JSON:API representation of apiToken entity.
 * @export
 * @interface JsonApiApiTokenIn
 */
export interface JsonApiApiTokenIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenIn
     */
    type: JsonApiApiTokenInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenIn
     */
    id: string;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiApiTokenInTypeEnum {
    ApiToken = "apiToken"
}
/**
 *
 * @export
 * @interface JsonApiApiTokenInDocument
 */
export interface JsonApiApiTokenInDocument {
    /**
     *
     * @type {JsonApiApiTokenIn}
     * @memberof JsonApiApiTokenInDocument
     */
    data: JsonApiApiTokenIn;
}
/**
 * JSON:API representation of apiToken entity.
 * @export
 * @interface JsonApiApiTokenOut
 */
export interface JsonApiApiTokenOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenOut
     */
    type: JsonApiApiTokenOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenOut
     */
    id: string;
    /**
     *
     * @type {JsonApiApiTokenOutAttributes}
     * @memberof JsonApiApiTokenOut
     */
    attributes?: JsonApiApiTokenOutAttributes;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiApiTokenOutTypeEnum {
    ApiToken = "apiToken"
}
/**
 *
 * @export
 * @interface JsonApiApiTokenOutAttributes
 */
export interface JsonApiApiTokenOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiApiTokenOutAttributes
     */
    bearerToken?: string;
}
/**
 *
 * @export
 * @interface JsonApiApiTokenOutDocument
 */
export interface JsonApiApiTokenOutDocument {
    /**
     *
     * @type {JsonApiApiTokenOut}
     * @memberof JsonApiApiTokenOutDocument
     */
    data: JsonApiApiTokenOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiApiTokenOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiApiTokenOutList
 */
export interface JsonApiApiTokenOutList {
    /**
     *
     * @type {Array<JsonApiApiTokenOutWithLinks>}
     * @memberof JsonApiApiTokenOutList
     */
    data: Array<JsonApiApiTokenOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiApiTokenOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiApiTokenOutWithLinks
 */
export interface JsonApiApiTokenOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    type: JsonApiApiTokenOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiApiTokenOutAttributes}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    attributes?: JsonApiApiTokenOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiApiTokenOutWithLinksTypeEnum {
    ApiToken = "apiToken"
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiAttributeLinkage
 */
export interface JsonApiAttributeLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeLinkage
     */
    type: JsonApiAttributeLinkageTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiAttributeLinkageTypeEnum {
    Attribute = "attribute"
}
/**
 * JSON:API representation of attribute entity.
 * @export
 * @interface JsonApiAttributeOut
 */
export interface JsonApiAttributeOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeOut
     */
    type: JsonApiAttributeOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeOutAttributes}
     * @memberof JsonApiAttributeOut
     */
    attributes?: JsonApiAttributeOutAttributes;
    /**
     *
     * @type {JsonApiAttributeOutRelationships}
     * @memberof JsonApiAttributeOut
     */
    relationships?: JsonApiAttributeOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiAttributeOutTypeEnum {
    Attribute = "attribute"
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutAttributes
 */
export interface JsonApiAttributeOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAttributeOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    granularity?: JsonApiAttributeOutAttributesGranularityEnum;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiAttributeOutAttributes
     */
    areRelationsValid?: boolean;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiAttributeOutAttributesGranularityEnum {
    MINUTE = "MINUTE",
    HOUR = "HOUR",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    QUARTER = "QUARTER",
    YEAR = "YEAR",
    MINUTEOFHOUR = "MINUTE_OF_HOUR",
    HOUROFDAY = "HOUR_OF_DAY",
    DAYOFWEEK = "DAY_OF_WEEK",
    DAYOFMONTH = "DAY_OF_MONTH",
    DAYOFYEAR = "DAY_OF_YEAR",
    WEEKOFYEAR = "WEEK_OF_YEAR",
    MONTHOFYEAR = "MONTH_OF_YEAR",
    QUARTEROFYEAR = "QUARTER_OF_YEAR"
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutDocument
 */
export interface JsonApiAttributeOutDocument {
    /**
     *
     * @type {JsonApiAttributeOut}
     * @memberof JsonApiAttributeOutDocument
     */
    data: JsonApiAttributeOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAttributeOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutIncludes>}
     * @memberof JsonApiAttributeOutDocument
     */
    included?: Array<JsonApiAttributeOutIncludes>;
}
/**
 * @type JsonApiAttributeOutIncludes
 * @export
 */
export declare type JsonApiAttributeOutIncludes = JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks;
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiAttributeOutList
 */
export interface JsonApiAttributeOutList {
    /**
     *
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiAttributeOutList
     */
    data: Array<JsonApiAttributeOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiAttributeOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutIncludes>}
     * @memberof JsonApiAttributeOutList
     */
    included?: Array<JsonApiAttributeOutIncludes>;
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutRelationships
 */
export interface JsonApiAttributeOutRelationships {
    /**
     *
     * @type {JsonApiAttributeOutRelationshipsDataset}
     * @memberof JsonApiAttributeOutRelationships
     */
    dataset?: JsonApiAttributeOutRelationshipsDataset;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiAttributeOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutRelationshipsDataset
 */
export interface JsonApiAttributeOutRelationshipsDataset {
    /**
     *
     * @type {JsonApiDatasetToOneLinkage}
     * @memberof JsonApiAttributeOutRelationshipsDataset
     */
    data: JsonApiDatasetToOneLinkage | null;
}
/**
 *
 * @export
 * @interface JsonApiAttributeOutWithLinks
 */
export interface JsonApiAttributeOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeOutWithLinks
     */
    type: JsonApiAttributeOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeOutAttributes}
     * @memberof JsonApiAttributeOutWithLinks
     */
    attributes?: JsonApiAttributeOutAttributes;
    /**
     *
     * @type {JsonApiAttributeOutRelationships}
     * @memberof JsonApiAttributeOutWithLinks
     */
    relationships?: JsonApiAttributeOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAttributeOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiAttributeOutWithLinksTypeEnum {
    Attribute = "attribute"
}
/**
 * @type JsonApiAttributeToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export declare type JsonApiAttributeToOneLinkage = JsonApiAttributeLinkage;
/**
 * JSON:API representation of cookieSecurityConfiguration entity.
 * @export
 * @interface JsonApiCookieSecurityConfigurationIn
 */
export interface JsonApiCookieSecurityConfigurationIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationIn
     */
    type: JsonApiCookieSecurityConfigurationInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationIn
     */
    id: string;
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationInAttributes}
     * @memberof JsonApiCookieSecurityConfigurationIn
     */
    attributes?: JsonApiCookieSecurityConfigurationInAttributes;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiCookieSecurityConfigurationInTypeEnum {
    CookieSecurityConfiguration = "cookieSecurityConfiguration"
}
/**
 *
 * @export
 * @interface JsonApiCookieSecurityConfigurationInAttributes
 */
export interface JsonApiCookieSecurityConfigurationInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationInAttributes
     */
    lastRotation?: string;
    /**
     * Length of interval between automatic rotations expressed in format of ISO 8601 duration
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationInAttributes
     */
    rotationInterval?: string;
}
/**
 *
 * @export
 * @interface JsonApiCookieSecurityConfigurationInDocument
 */
export interface JsonApiCookieSecurityConfigurationInDocument {
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationIn}
     * @memberof JsonApiCookieSecurityConfigurationInDocument
     */
    data: JsonApiCookieSecurityConfigurationIn;
}
/**
 * JSON:API representation of cookieSecurityConfiguration entity.
 * @export
 * @interface JsonApiCookieSecurityConfigurationOut
 */
export interface JsonApiCookieSecurityConfigurationOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationOut
     */
    type: JsonApiCookieSecurityConfigurationOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationOut
     */
    id: string;
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationInAttributes}
     * @memberof JsonApiCookieSecurityConfigurationOut
     */
    attributes?: JsonApiCookieSecurityConfigurationInAttributes;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiCookieSecurityConfigurationOutTypeEnum {
    CookieSecurityConfiguration = "cookieSecurityConfiguration"
}
/**
 *
 * @export
 * @interface JsonApiCookieSecurityConfigurationOutDocument
 */
export interface JsonApiCookieSecurityConfigurationOutDocument {
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationOut}
     * @memberof JsonApiCookieSecurityConfigurationOutDocument
     */
    data: JsonApiCookieSecurityConfigurationOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiCookieSecurityConfigurationOutDocument
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of dashboardPlugin entity.
 * @export
 * @interface JsonApiDashboardPluginIn
 */
export interface JsonApiDashboardPluginIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDashboardPluginIn
     */
    type: JsonApiDashboardPluginInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDashboardPluginIn
     */
    id: string;
    /**
     *
     * @type {JsonApiDashboardPluginInAttributes}
     * @memberof JsonApiDashboardPluginIn
     */
    attributes?: JsonApiDashboardPluginInAttributes;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDashboardPluginInTypeEnum {
    DashboardPlugin = "dashboardPlugin"
}
/**
 *
 * @export
 * @interface JsonApiDashboardPluginInAttributes
 */
export interface JsonApiDashboardPluginInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginInAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginInAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDashboardPluginInAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDashboardPluginInAttributes
     */
    areRelationsValid?: boolean;
    /**
     * Free-form JSON content.
     * @type {object}
     * @memberof JsonApiDashboardPluginInAttributes
     */
    content?: object;
}
/**
 *
 * @export
 * @interface JsonApiDashboardPluginInDocument
 */
export interface JsonApiDashboardPluginInDocument {
    /**
     *
     * @type {JsonApiDashboardPluginIn}
     * @memberof JsonApiDashboardPluginInDocument
     */
    data: JsonApiDashboardPluginIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiDashboardPluginLinkage
 */
export interface JsonApiDashboardPluginLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginLinkage
     */
    type: JsonApiDashboardPluginLinkageTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDashboardPluginLinkageTypeEnum {
    DashboardPlugin = "dashboardPlugin"
}
/**
 * JSON:API representation of dashboardPlugin entity.
 * @export
 * @interface JsonApiDashboardPluginOut
 */
export interface JsonApiDashboardPluginOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDashboardPluginOut
     */
    type: JsonApiDashboardPluginOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDashboardPluginOut
     */
    id: string;
    /**
     *
     * @type {JsonApiDashboardPluginInAttributes}
     * @memberof JsonApiDashboardPluginOut
     */
    attributes?: JsonApiDashboardPluginInAttributes;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDashboardPluginOutTypeEnum {
    DashboardPlugin = "dashboardPlugin"
}
/**
 *
 * @export
 * @interface JsonApiDashboardPluginOutDocument
 */
export interface JsonApiDashboardPluginOutDocument {
    /**
     *
     * @type {JsonApiDashboardPluginOut}
     * @memberof JsonApiDashboardPluginOutDocument
     */
    data: JsonApiDashboardPluginOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDashboardPluginOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDashboardPluginOutList
 */
export interface JsonApiDashboardPluginOutList {
    /**
     *
     * @type {Array<JsonApiDashboardPluginOutWithLinks>}
     * @memberof JsonApiDashboardPluginOutList
     */
    data: Array<JsonApiDashboardPluginOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDashboardPluginOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiDashboardPluginOutWithLinks
 */
export interface JsonApiDashboardPluginOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDashboardPluginOutWithLinks
     */
    type: JsonApiDashboardPluginOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDashboardPluginOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiDashboardPluginInAttributes}
     * @memberof JsonApiDashboardPluginOutWithLinks
     */
    attributes?: JsonApiDashboardPluginInAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDashboardPluginOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDashboardPluginOutWithLinksTypeEnum {
    DashboardPlugin = "dashboardPlugin"
}
/**
 * JSON:API representation of dataSource entity.
 * @export
 * @interface JsonApiDataSourceIn
 */
export interface JsonApiDataSourceIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceIn
     */
    type: JsonApiDataSourceInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceIn
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceInAttributes}
     * @memberof JsonApiDataSourceIn
     */
    attributes: JsonApiDataSourceInAttributes;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDataSourceInTypeEnum {
    DataSource = "dataSource"
}
/**
 *
 * @export
 * @interface JsonApiDataSourceInAttributes
 */
export interface JsonApiDataSourceInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    type: JsonApiDataSourceInAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    url: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    schema: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    token?: string;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDataSourceInAttributes
     */
    enableCaching?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDataSourceInAttributes
     */
    cachePath?: Array<string>;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDataSourceInAttributesTypeEnum {
    POSTGRESQL = "POSTGRESQL",
    REDSHIFT = "REDSHIFT",
    VERTICA = "VERTICA",
    SNOWFLAKE = "SNOWFLAKE",
    ADS = "ADS",
    BIGQUERY = "BIGQUERY",
    MSSQL = "MSSQL",
    PRESTO = "PRESTO",
    DREMIO = "DREMIO",
    DRILL = "DRILL"
}
/**
 *
 * @export
 * @interface JsonApiDataSourceInDocument
 */
export interface JsonApiDataSourceInDocument {
    /**
     *
     * @type {JsonApiDataSourceIn}
     * @memberof JsonApiDataSourceInDocument
     */
    data: JsonApiDataSourceIn;
}
/**
 * JSON:API representation of dataSource entity.
 * @export
 * @interface JsonApiDataSourceOut
 */
export interface JsonApiDataSourceOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceOut
     */
    type: JsonApiDataSourceOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceOut
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceOutAttributes}
     * @memberof JsonApiDataSourceOut
     */
    attributes: JsonApiDataSourceOutAttributes;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDataSourceOutTypeEnum {
    DataSource = "dataSource"
}
/**
 *
 * @export
 * @interface JsonApiDataSourceOutAttributes
 */
export interface JsonApiDataSourceOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    type: JsonApiDataSourceOutAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    url: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    schema: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    username?: string;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDataSourceOutAttributes
     */
    enableCaching?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDataSourceOutAttributes
     */
    cachePath?: Array<string>;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDataSourceOutAttributesTypeEnum {
    POSTGRESQL = "POSTGRESQL",
    REDSHIFT = "REDSHIFT",
    VERTICA = "VERTICA",
    SNOWFLAKE = "SNOWFLAKE",
    ADS = "ADS",
    BIGQUERY = "BIGQUERY",
    MSSQL = "MSSQL",
    PRESTO = "PRESTO",
    DREMIO = "DREMIO",
    DRILL = "DRILL"
}
/**
 *
 * @export
 * @interface JsonApiDataSourceOutDocument
 */
export interface JsonApiDataSourceOutDocument {
    /**
     *
     * @type {JsonApiDataSourceOut}
     * @memberof JsonApiDataSourceOutDocument
     */
    data: JsonApiDataSourceOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDataSourceOutList
 */
export interface JsonApiDataSourceOutList {
    /**
     *
     * @type {Array<JsonApiDataSourceOutWithLinks>}
     * @memberof JsonApiDataSourceOutList
     */
    data: Array<JsonApiDataSourceOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDataSourceOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiDataSourceOutWithLinks
 */
export interface JsonApiDataSourceOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    type: JsonApiDataSourceOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceOutAttributes}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    attributes: JsonApiDataSourceOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDataSourceOutWithLinksTypeEnum {
    DataSource = "dataSource"
}
/**
 * Tables in data source
 * @export
 * @interface JsonApiDataSourceTableOut
 */
export interface JsonApiDataSourceTableOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceTableOut
     */
    type: JsonApiDataSourceTableOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceTableOut
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceTableOutAttributes}
     * @memberof JsonApiDataSourceTableOut
     */
    attributes?: JsonApiDataSourceTableOutAttributes;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDataSourceTableOutTypeEnum {
    DataSourceTable = "dataSourceTable"
}
/**
 *
 * @export
 * @interface JsonApiDataSourceTableOutAttributes
 */
export interface JsonApiDataSourceTableOutAttributes {
    /**
     * Path to table.
     * @type {Array<string>}
     * @memberof JsonApiDataSourceTableOutAttributes
     */
    path?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributes
     */
    type?: JsonApiDataSourceTableOutAttributesTypeEnum;
    /**
     *
     * @type {Array<JsonApiDataSourceTableOutAttributesColumns>}
     * @memberof JsonApiDataSourceTableOutAttributes
     */
    columns?: Array<JsonApiDataSourceTableOutAttributesColumns>;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDataSourceTableOutAttributesTypeEnum {
    TABLE = "TABLE",
    VIEW = "VIEW"
}
/**
 * Table columns in data source
 * @export
 * @interface JsonApiDataSourceTableOutAttributesColumns
 */
export interface JsonApiDataSourceTableOutAttributesColumns {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    dataType: JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    isPrimaryKey?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    referencedTableId?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    referencedTableColumn?: string;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum {
    INT = "INT",
    STRING = "STRING",
    DATE = "DATE",
    NUMERIC = "NUMERIC",
    TIMESTAMP = "TIMESTAMP",
    BOOLEAN = "BOOLEAN"
}
/**
 *
 * @export
 * @interface JsonApiDataSourceTableOutDocument
 */
export interface JsonApiDataSourceTableOutDocument {
    /**
     *
     * @type {JsonApiDataSourceTableOut}
     * @memberof JsonApiDataSourceTableOutDocument
     */
    data: JsonApiDataSourceTableOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceTableOutDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDataSourceTableOutList
 */
export interface JsonApiDataSourceTableOutList {
    /**
     *
     * @type {Array<JsonApiDataSourceTableOutWithLinks>}
     * @memberof JsonApiDataSourceTableOutList
     */
    data: Array<JsonApiDataSourceTableOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDataSourceTableOutList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiDataSourceTableOutWithLinks
 */
export interface JsonApiDataSourceTableOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    type: JsonApiDataSourceTableOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceTableOutAttributes}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    attributes?: JsonApiDataSourceTableOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDataSourceTableOutWithLinksTypeEnum {
    DataSourceTable = "dataSourceTable"
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiDatasetLinkage
 */
export interface JsonApiDatasetLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetLinkage
     */
    type: JsonApiDatasetLinkageTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDatasetLinkageTypeEnum {
    Dataset = "dataset"
}
/**
 * JSON:API representation of dataset entity.
 * @export
 * @interface JsonApiDatasetOut
 */
export interface JsonApiDatasetOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDatasetOut
     */
    type: JsonApiDatasetOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDatasetOut
     */
    id: string;
    /**
     *
     * @type {JsonApiDatasetOutAttributes}
     * @memberof JsonApiDatasetOut
     */
    attributes: JsonApiDatasetOutAttributes;
    /**
     *
     * @type {JsonApiDatasetOutRelationships}
     * @memberof JsonApiDatasetOut
     */
    relationships?: JsonApiDatasetOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDatasetOutTypeEnum {
    Dataset = "dataset"
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributes
 */
export interface JsonApiDatasetOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDatasetOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    type: JsonApiDatasetOutAttributesTypeEnum;
    /**
     *
     * @type {Array<JsonApiDatasetOutAttributesGrain>}
     * @memberof JsonApiDatasetOutAttributes
     */
    grain?: Array<JsonApiDatasetOutAttributesGrain>;
    /**
     *
     * @type {Array<JsonApiDatasetOutAttributesReferenceProperties>}
     * @memberof JsonApiDatasetOutAttributes
     */
    referenceProperties?: Array<JsonApiDatasetOutAttributesReferenceProperties>;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    dataSourceTableId?: string;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDatasetOutAttributes
     */
    areRelationsValid?: boolean;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDatasetOutAttributesTypeEnum {
    NORMAL = "NORMAL",
    DATE = "DATE"
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributesGrain
 */
export interface JsonApiDatasetOutAttributesGrain {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesGrain
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesGrain
     */
    type: JsonApiDatasetOutAttributesGrainTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDatasetOutAttributesGrainTypeEnum {
    Attribute = "attribute",
    Dataset = "dataset"
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributesReferenceProperties
 */
export interface JsonApiDatasetOutAttributesReferenceProperties {
    /**
     *
     * @type {DatasetReferenceIdentifier}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    identifier: DatasetReferenceIdentifier;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    multivalue: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    sourceColumns: Array<string>;
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutDocument
 */
export interface JsonApiDatasetOutDocument {
    /**
     *
     * @type {JsonApiDatasetOut}
     * @memberof JsonApiDatasetOutDocument
     */
    data: JsonApiDatasetOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDatasetOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutIncludes>}
     * @memberof JsonApiDatasetOutDocument
     */
    included?: Array<JsonApiDatasetOutIncludes>;
}
/**
 * @type JsonApiDatasetOutIncludes
 * @export
 */
export declare type JsonApiDatasetOutIncludes = JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiFactOutWithLinks;
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDatasetOutList
 */
export interface JsonApiDatasetOutList {
    /**
     *
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiDatasetOutList
     */
    data: Array<JsonApiDatasetOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDatasetOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutIncludes>}
     * @memberof JsonApiDatasetOutList
     */
    included?: Array<JsonApiDatasetOutIncludes>;
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutRelationships
 */
export interface JsonApiDatasetOutRelationships {
    /**
     *
     * @type {JsonApiFilterContextOutRelationshipsAttributes}
     * @memberof JsonApiDatasetOutRelationships
     */
    attributes?: JsonApiFilterContextOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationshipsFacts}
     * @memberof JsonApiDatasetOutRelationships
     */
    facts?: JsonApiMetricOutRelationshipsFacts;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiDatasetOutRelationships
     */
    references?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
}
/**
 *
 * @export
 * @interface JsonApiDatasetOutWithLinks
 */
export interface JsonApiDatasetOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDatasetOutWithLinks
     */
    type: JsonApiDatasetOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDatasetOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiDatasetOutAttributes}
     * @memberof JsonApiDatasetOutWithLinks
     */
    attributes: JsonApiDatasetOutAttributes;
    /**
     *
     * @type {JsonApiDatasetOutRelationships}
     * @memberof JsonApiDatasetOutWithLinks
     */
    relationships?: JsonApiDatasetOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDatasetOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiDatasetOutWithLinksTypeEnum {
    Dataset = "dataset"
}
/**
 * @type JsonApiDatasetToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export declare type JsonApiDatasetToOneLinkage = JsonApiDatasetLinkage;
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiFactLinkage
 */
export interface JsonApiFactLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiFactLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactLinkage
     */
    type: JsonApiFactLinkageTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiFactLinkageTypeEnum {
    Fact = "fact"
}
/**
 * JSON:API representation of fact entity.
 * @export
 * @interface JsonApiFactOut
 */
export interface JsonApiFactOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFactOut
     */
    type: JsonApiFactOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFactOut
     */
    id: string;
    /**
     *
     * @type {JsonApiFactOutAttributes}
     * @memberof JsonApiFactOut
     */
    attributes?: JsonApiFactOutAttributes;
    /**
     *
     * @type {JsonApiFactOutRelationships}
     * @memberof JsonApiFactOut
     */
    relationships?: JsonApiFactOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiFactOutTypeEnum {
    Fact = "fact"
}
/**
 *
 * @export
 * @interface JsonApiFactOutAttributes
 */
export interface JsonApiFactOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiFactOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    sourceColumn?: string;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiFactOutAttributes
     */
    areRelationsValid?: boolean;
}
/**
 *
 * @export
 * @interface JsonApiFactOutDocument
 */
export interface JsonApiFactOutDocument {
    /**
     *
     * @type {JsonApiFactOut}
     * @memberof JsonApiFactOutDocument
     */
    data: JsonApiFactOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFactOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiFactOutDocument
     */
    included?: Array<JsonApiDatasetOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiFactOutList
 */
export interface JsonApiFactOutList {
    /**
     *
     * @type {Array<JsonApiFactOutWithLinks>}
     * @memberof JsonApiFactOutList
     */
    data: Array<JsonApiFactOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiFactOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiFactOutList
     */
    included?: Array<JsonApiDatasetOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiFactOutRelationships
 */
export interface JsonApiFactOutRelationships {
    /**
     *
     * @type {JsonApiAttributeOutRelationshipsDataset}
     * @memberof JsonApiFactOutRelationships
     */
    dataset?: JsonApiAttributeOutRelationshipsDataset;
}
/**
 *
 * @export
 * @interface JsonApiFactOutWithLinks
 */
export interface JsonApiFactOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFactOutWithLinks
     */
    type: JsonApiFactOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFactOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiFactOutAttributes}
     * @memberof JsonApiFactOutWithLinks
     */
    attributes?: JsonApiFactOutAttributes;
    /**
     *
     * @type {JsonApiFactOutRelationships}
     * @memberof JsonApiFactOutWithLinks
     */
    relationships?: JsonApiFactOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFactOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiFactOutWithLinksTypeEnum {
    Fact = "fact"
}
/**
 * JSON:API representation of filterContext entity.
 * @export
 * @interface JsonApiFilterContextIn
 */
export interface JsonApiFilterContextIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextIn
     */
    type: JsonApiFilterContextInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextIn
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiFilterContextIn
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiFilterContextInTypeEnum {
    FilterContext = "filterContext"
}
/**
 *
 * @export
 * @interface JsonApiFilterContextInDocument
 */
export interface JsonApiFilterContextInDocument {
    /**
     *
     * @type {JsonApiFilterContextIn}
     * @memberof JsonApiFilterContextInDocument
     */
    data: JsonApiFilterContextIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiFilterContextLinkage
 */
export interface JsonApiFilterContextLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiFilterContextLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFilterContextLinkage
     */
    type: JsonApiFilterContextLinkageTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiFilterContextLinkageTypeEnum {
    FilterContext = "filterContext"
}
/**
 * JSON:API representation of filterContext entity.
 * @export
 * @interface JsonApiFilterContextOut
 */
export interface JsonApiFilterContextOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextOut
     */
    type: JsonApiFilterContextOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiFilterContextOut
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
    /**
     *
     * @type {JsonApiFilterContextOutRelationships}
     * @memberof JsonApiFilterContextOut
     */
    relationships?: JsonApiFilterContextOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiFilterContextOutTypeEnum {
    FilterContext = "filterContext"
}
/**
 *
 * @export
 * @interface JsonApiFilterContextOutDocument
 */
export interface JsonApiFilterContextOutDocument {
    /**
     *
     * @type {JsonApiFilterContextOut}
     * @memberof JsonApiFilterContextOutDocument
     */
    data: JsonApiFilterContextOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFilterContextOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFilterContextOutIncludes>}
     * @memberof JsonApiFilterContextOutDocument
     */
    included?: Array<JsonApiFilterContextOutIncludes>;
}
/**
 * @type JsonApiFilterContextOutIncludes
 * @export
 */
export declare type JsonApiFilterContextOutIncludes = JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks;
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiFilterContextOutList
 */
export interface JsonApiFilterContextOutList {
    /**
     *
     * @type {Array<JsonApiFilterContextOutWithLinks>}
     * @memberof JsonApiFilterContextOutList
     */
    data: Array<JsonApiFilterContextOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiFilterContextOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFilterContextOutIncludes>}
     * @memberof JsonApiFilterContextOutList
     */
    included?: Array<JsonApiFilterContextOutIncludes>;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextOutRelationships
 */
export interface JsonApiFilterContextOutRelationships {
    /**
     *
     * @type {JsonApiFilterContextOutRelationshipsAttributes}
     * @memberof JsonApiFilterContextOutRelationships
     */
    attributes?: JsonApiFilterContextOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiFilterContextOutRelationships
     */
    datasets?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiFilterContextOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextOutRelationshipsAttributes
 */
export interface JsonApiFilterContextOutRelationshipsAttributes {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiAttributeLinkage>}
     * @memberof JsonApiFilterContextOutRelationshipsAttributes
     */
    data: Array<JsonApiAttributeLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextOutWithLinks
 */
export interface JsonApiFilterContextOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    type: JsonApiFilterContextOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
    /**
     *
     * @type {JsonApiFilterContextOutRelationships}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    relationships?: JsonApiFilterContextOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiFilterContextOutWithLinksTypeEnum {
    FilterContext = "filterContext"
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiLabelLinkage
 */
export interface JsonApiLabelLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelLinkage
     */
    type: JsonApiLabelLinkageTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiLabelLinkageTypeEnum {
    Label = "label"
}
/**
 * JSON:API representation of label entity.
 * @export
 * @interface JsonApiLabelOut
 */
export interface JsonApiLabelOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiLabelOut
     */
    type: JsonApiLabelOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiLabelOut
     */
    id: string;
    /**
     *
     * @type {JsonApiLabelOutAttributes}
     * @memberof JsonApiLabelOut
     */
    attributes?: JsonApiLabelOutAttributes;
    /**
     *
     * @type {JsonApiLabelOutRelationships}
     * @memberof JsonApiLabelOut
     */
    relationships?: JsonApiLabelOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiLabelOutTypeEnum {
    Label = "label"
}
/**
 *
 * @export
 * @interface JsonApiLabelOutAttributes
 */
export interface JsonApiLabelOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiLabelOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiLabelOutAttributes
     */
    primary?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    sourceColumn?: string;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiLabelOutAttributes
     */
    areRelationsValid?: boolean;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutDocument
 */
export interface JsonApiLabelOutDocument {
    /**
     *
     * @type {JsonApiLabelOut}
     * @memberof JsonApiLabelOutDocument
     */
    data: JsonApiLabelOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiLabelOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiLabelOutDocument
     */
    included?: Array<JsonApiAttributeOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiLabelOutList
 */
export interface JsonApiLabelOutList {
    /**
     *
     * @type {Array<JsonApiLabelOutWithLinks>}
     * @memberof JsonApiLabelOutList
     */
    data: Array<JsonApiLabelOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiLabelOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiLabelOutList
     */
    included?: Array<JsonApiAttributeOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutRelationships
 */
export interface JsonApiLabelOutRelationships {
    /**
     *
     * @type {JsonApiLabelOutRelationshipsAttribute}
     * @memberof JsonApiLabelOutRelationships
     */
    attribute?: JsonApiLabelOutRelationshipsAttribute;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutRelationshipsAttribute
 */
export interface JsonApiLabelOutRelationshipsAttribute {
    /**
     *
     * @type {JsonApiAttributeToOneLinkage}
     * @memberof JsonApiLabelOutRelationshipsAttribute
     */
    data: JsonApiAttributeToOneLinkage | null;
}
/**
 *
 * @export
 * @interface JsonApiLabelOutWithLinks
 */
export interface JsonApiLabelOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiLabelOutWithLinks
     */
    type: JsonApiLabelOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiLabelOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiLabelOutAttributes}
     * @memberof JsonApiLabelOutWithLinks
     */
    attributes?: JsonApiLabelOutAttributes;
    /**
     *
     * @type {JsonApiLabelOutRelationships}
     * @memberof JsonApiLabelOutWithLinks
     */
    relationships?: JsonApiLabelOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiLabelOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiLabelOutWithLinksTypeEnum {
    Label = "label"
}
/**
 * JSON:API representation of metric entity.
 * @export
 * @interface JsonApiMetricIn
 */
export interface JsonApiMetricIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricIn
     */
    type: JsonApiMetricInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricIn
     */
    id: string;
    /**
     *
     * @type {JsonApiMetricInAttributes}
     * @memberof JsonApiMetricIn
     */
    attributes: JsonApiMetricInAttributes;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiMetricInTypeEnum {
    Metric = "metric"
}
/**
 *
 * @export
 * @interface JsonApiMetricInAttributes
 */
export interface JsonApiMetricInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricInAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricInAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiMetricInAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiMetricInAttributes
     */
    areRelationsValid?: boolean;
    /**
     *
     * @type {JsonApiMetricInAttributesContent}
     * @memberof JsonApiMetricInAttributes
     */
    content: JsonApiMetricInAttributesContent;
}
/**
 *
 * @export
 * @interface JsonApiMetricInAttributesContent
 */
export interface JsonApiMetricInAttributesContent {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricInAttributesContent
     */
    format?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricInAttributesContent
     */
    maql: string;
}
/**
 *
 * @export
 * @interface JsonApiMetricInDocument
 */
export interface JsonApiMetricInDocument {
    /**
     *
     * @type {JsonApiMetricIn}
     * @memberof JsonApiMetricInDocument
     */
    data: JsonApiMetricIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiMetricLinkage
 */
export interface JsonApiMetricLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricLinkage
     */
    type: JsonApiMetricLinkageTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiMetricLinkageTypeEnum {
    Metric = "metric"
}
/**
 * JSON:API representation of metric entity.
 * @export
 * @interface JsonApiMetricOut
 */
export interface JsonApiMetricOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricOut
     */
    type: JsonApiMetricOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricOut
     */
    id: string;
    /**
     *
     * @type {JsonApiMetricInAttributes}
     * @memberof JsonApiMetricOut
     */
    attributes: JsonApiMetricInAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationships}
     * @memberof JsonApiMetricOut
     */
    relationships?: JsonApiMetricOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiMetricOutTypeEnum {
    Metric = "metric"
}
/**
 *
 * @export
 * @interface JsonApiMetricOutDocument
 */
export interface JsonApiMetricOutDocument {
    /**
     *
     * @type {JsonApiMetricOut}
     * @memberof JsonApiMetricOutDocument
     */
    data: JsonApiMetricOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiMetricOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiMetricOutIncludes>}
     * @memberof JsonApiMetricOutDocument
     */
    included?: Array<JsonApiMetricOutIncludes>;
}
/**
 * @type JsonApiMetricOutIncludes
 * @export
 */
export declare type JsonApiMetricOutIncludes = JsonApiAttributeOutWithLinks | JsonApiFactOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks;
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiMetricOutList
 */
export interface JsonApiMetricOutList {
    /**
     *
     * @type {Array<JsonApiMetricOutWithLinks>}
     * @memberof JsonApiMetricOutList
     */
    data: Array<JsonApiMetricOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiMetricOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiMetricOutIncludes>}
     * @memberof JsonApiMetricOutList
     */
    included?: Array<JsonApiMetricOutIncludes>;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutRelationships
 */
export interface JsonApiMetricOutRelationships {
    /**
     *
     * @type {JsonApiMetricOutRelationshipsFacts}
     * @memberof JsonApiMetricOutRelationships
     */
    facts?: JsonApiMetricOutRelationshipsFacts;
    /**
     *
     * @type {JsonApiFilterContextOutRelationshipsAttributes}
     * @memberof JsonApiMetricOutRelationships
     */
    attributes?: JsonApiFilterContextOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiMetricOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsMetrics}
     * @memberof JsonApiMetricOutRelationships
     */
    metrics?: JsonApiAnalyticalDashboardOutRelationshipsMetrics;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutRelationshipsFacts
 */
export interface JsonApiMetricOutRelationshipsFacts {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiFactLinkage>}
     * @memberof JsonApiMetricOutRelationshipsFacts
     */
    data: Array<JsonApiFactLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiMetricOutWithLinks
 */
export interface JsonApiMetricOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricOutWithLinks
     */
    type: JsonApiMetricOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiMetricInAttributes}
     * @memberof JsonApiMetricOutWithLinks
     */
    attributes: JsonApiMetricInAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationships}
     * @memberof JsonApiMetricOutWithLinks
     */
    relationships?: JsonApiMetricOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiMetricOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiMetricOutWithLinksTypeEnum {
    Metric = "metric"
}
/**
 * JSON:API representation of organization entity.
 * @export
 * @interface JsonApiOrganizationIn
 */
export interface JsonApiOrganizationIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationIn
     */
    type: JsonApiOrganizationInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationIn
     */
    id: string;
    /**
     *
     * @type {JsonApiOrganizationInAttributes}
     * @memberof JsonApiOrganizationIn
     */
    attributes?: JsonApiOrganizationInAttributes;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiOrganizationInTypeEnum {
    Organization = "organization"
}
/**
 *
 * @export
 * @interface JsonApiOrganizationInAttributes
 */
export interface JsonApiOrganizationInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    hostname?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthIssuerLocation?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthClientId?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthClientSecret?: string;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationInDocument
 */
export interface JsonApiOrganizationInDocument {
    /**
     *
     * @type {JsonApiOrganizationIn}
     * @memberof JsonApiOrganizationInDocument
     */
    data: JsonApiOrganizationIn;
}
/**
 * JSON:API representation of organization entity.
 * @export
 * @interface JsonApiOrganizationOut
 */
export interface JsonApiOrganizationOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationOut
     */
    type: JsonApiOrganizationOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationOut
     */
    id: string;
    /**
     *
     * @type {JsonApiOrganizationOutAttributes}
     * @memberof JsonApiOrganizationOut
     */
    attributes?: JsonApiOrganizationOutAttributes;
    /**
     *
     * @type {JsonApiOrganizationOutRelationships}
     * @memberof JsonApiOrganizationOut
     */
    relationships?: JsonApiOrganizationOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiOrganizationOutTypeEnum {
    Organization = "organization"
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutAttributes
 */
export interface JsonApiOrganizationOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    hostname?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    oauthIssuerLocation?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    oauthClientId?: string;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutDocument
 */
export interface JsonApiOrganizationOutDocument {
    /**
     *
     * @type {JsonApiOrganizationOut}
     * @memberof JsonApiOrganizationOutDocument
     */
    data: JsonApiOrganizationOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiOrganizationOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiOrganizationOutIncludes>}
     * @memberof JsonApiOrganizationOutDocument
     */
    included?: Array<JsonApiOrganizationOutIncludes>;
}
/**
 * @type JsonApiOrganizationOutIncludes
 * @export
 */
export declare type JsonApiOrganizationOutIncludes = JsonApiUserGroupOutWithLinks | JsonApiUserOutWithLinks;
/**
 *
 * @export
 * @interface JsonApiOrganizationOutRelationships
 */
export interface JsonApiOrganizationOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUser}
     * @memberof JsonApiOrganizationOutRelationships
     */
    bootstrapUser?: JsonApiOrganizationOutRelationshipsBootstrapUser;
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUserGroup}
     * @memberof JsonApiOrganizationOutRelationships
     */
    bootstrapUserGroup?: JsonApiOrganizationOutRelationshipsBootstrapUserGroup;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutRelationshipsBootstrapUser
 */
export interface JsonApiOrganizationOutRelationshipsBootstrapUser {
    /**
     *
     * @type {JsonApiUserToOneLinkage}
     * @memberof JsonApiOrganizationOutRelationshipsBootstrapUser
     */
    data: JsonApiUserToOneLinkage | null;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationOutRelationshipsBootstrapUserGroup
 */
export interface JsonApiOrganizationOutRelationshipsBootstrapUserGroup {
    /**
     *
     * @type {JsonApiUserGroupToOneLinkage}
     * @memberof JsonApiOrganizationOutRelationshipsBootstrapUserGroup
     */
    data: JsonApiUserGroupToOneLinkage | null;
}
/**
 * JSON:API representation of userGroup entity.
 * @export
 * @interface JsonApiUserGroupIn
 */
export interface JsonApiUserGroupIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupIn
     */
    type: JsonApiUserGroupInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupIn
     */
    id: string;
    /**
     *
     * @type {JsonApiUserGroupOutRelationships}
     * @memberof JsonApiUserGroupIn
     */
    relationships?: JsonApiUserGroupOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiUserGroupInTypeEnum {
    UserGroup = "userGroup"
}
/**
 *
 * @export
 * @interface JsonApiUserGroupInDocument
 */
export interface JsonApiUserGroupInDocument {
    /**
     *
     * @type {JsonApiUserGroupIn}
     * @memberof JsonApiUserGroupInDocument
     */
    data: JsonApiUserGroupIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiUserGroupLinkage
 */
export interface JsonApiUserGroupLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserGroupLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserGroupLinkage
     */
    type: JsonApiUserGroupLinkageTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiUserGroupLinkageTypeEnum {
    UserGroup = "userGroup"
}
/**
 * JSON:API representation of userGroup entity.
 * @export
 * @interface JsonApiUserGroupOut
 */
export interface JsonApiUserGroupOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupOut
     */
    type: JsonApiUserGroupOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupOut
     */
    id: string;
    /**
     *
     * @type {JsonApiUserGroupOutRelationships}
     * @memberof JsonApiUserGroupOut
     */
    relationships?: JsonApiUserGroupOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiUserGroupOutTypeEnum {
    UserGroup = "userGroup"
}
/**
 *
 * @export
 * @interface JsonApiUserGroupOutDocument
 */
export interface JsonApiUserGroupOutDocument {
    /**
     *
     * @type {JsonApiUserGroupOut}
     * @memberof JsonApiUserGroupOutDocument
     */
    data: JsonApiUserGroupOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserGroupOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserGroupOutDocument
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserGroupOutList
 */
export interface JsonApiUserGroupOutList {
    /**
     *
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserGroupOutList
     */
    data: Array<JsonApiUserGroupOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserGroupOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserGroupOutList
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupOutRelationships
 */
export interface JsonApiUserGroupOutRelationships {
    /**
     *
     * @type {JsonApiUserGroupOutRelationshipsParents}
     * @memberof JsonApiUserGroupOutRelationships
     */
    parents?: JsonApiUserGroupOutRelationshipsParents;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupOutRelationshipsParents
 */
export interface JsonApiUserGroupOutRelationshipsParents {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiUserGroupLinkage>}
     * @memberof JsonApiUserGroupOutRelationshipsParents
     */
    data: Array<JsonApiUserGroupLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupOutWithLinks
 */
export interface JsonApiUserGroupOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    type: JsonApiUserGroupOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiUserGroupOutRelationships}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    relationships?: JsonApiUserGroupOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiUserGroupOutWithLinksTypeEnum {
    UserGroup = "userGroup"
}
/**
 * @type JsonApiUserGroupToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export declare type JsonApiUserGroupToOneLinkage = JsonApiUserGroupLinkage;
/**
 * JSON:API representation of user entity.
 * @export
 * @interface JsonApiUserIn
 */
export interface JsonApiUserIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserIn
     */
    type: JsonApiUserInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserIn
     */
    id: string;
    /**
     *
     * @type {JsonApiUserOutAttributes}
     * @memberof JsonApiUserIn
     */
    attributes?: JsonApiUserOutAttributes;
    /**
     *
     * @type {JsonApiUserOutRelationships}
     * @memberof JsonApiUserIn
     */
    relationships?: JsonApiUserOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiUserInTypeEnum {
    User = "user"
}
/**
 *
 * @export
 * @interface JsonApiUserInDocument
 */
export interface JsonApiUserInDocument {
    /**
     *
     * @type {JsonApiUserIn}
     * @memberof JsonApiUserInDocument
     */
    data: JsonApiUserIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiUserLinkage
 */
export interface JsonApiUserLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserLinkage
     */
    type: JsonApiUserLinkageTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiUserLinkageTypeEnum {
    User = "user"
}
/**
 * JSON:API representation of user entity.
 * @export
 * @interface JsonApiUserOut
 */
export interface JsonApiUserOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserOut
     */
    type: JsonApiUserOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserOut
     */
    id: string;
    /**
     *
     * @type {JsonApiUserOutAttributes}
     * @memberof JsonApiUserOut
     */
    attributes?: JsonApiUserOutAttributes;
    /**
     *
     * @type {JsonApiUserOutRelationships}
     * @memberof JsonApiUserOut
     */
    relationships?: JsonApiUserOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiUserOutTypeEnum {
    User = "user"
}
/**
 *
 * @export
 * @interface JsonApiUserOutAttributes
 */
export interface JsonApiUserOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserOutAttributes
     */
    authenticationId?: string;
}
/**
 *
 * @export
 * @interface JsonApiUserOutDocument
 */
export interface JsonApiUserOutDocument {
    /**
     *
     * @type {JsonApiUserOut}
     * @memberof JsonApiUserOutDocument
     */
    data: JsonApiUserOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserOutDocument
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserOutList
 */
export interface JsonApiUserOutList {
    /**
     *
     * @type {Array<JsonApiUserOutWithLinks>}
     * @memberof JsonApiUserOutList
     */
    data: Array<JsonApiUserOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserOutList
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiUserOutRelationships
 */
export interface JsonApiUserOutRelationships {
    /**
     *
     * @type {JsonApiUserGroupOutRelationshipsParents}
     * @memberof JsonApiUserOutRelationships
     */
    userGroups?: JsonApiUserGroupOutRelationshipsParents;
}
/**
 *
 * @export
 * @interface JsonApiUserOutWithLinks
 */
export interface JsonApiUserOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserOutWithLinks
     */
    type: JsonApiUserOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiUserOutAttributes}
     * @memberof JsonApiUserOutWithLinks
     */
    attributes?: JsonApiUserOutAttributes;
    /**
     *
     * @type {JsonApiUserOutRelationships}
     * @memberof JsonApiUserOutWithLinks
     */
    relationships?: JsonApiUserOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiUserOutWithLinksTypeEnum {
    User = "user"
}
/**
 * @type JsonApiUserToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export declare type JsonApiUserToOneLinkage = JsonApiUserLinkage;
/**
 * JSON:API representation of visualizationObject entity.
 * @export
 * @interface JsonApiVisualizationObjectIn
 */
export interface JsonApiVisualizationObjectIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectIn
     */
    type: JsonApiVisualizationObjectInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectIn
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiVisualizationObjectIn
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiVisualizationObjectInTypeEnum {
    VisualizationObject = "visualizationObject"
}
/**
 *
 * @export
 * @interface JsonApiVisualizationObjectInDocument
 */
export interface JsonApiVisualizationObjectInDocument {
    /**
     *
     * @type {JsonApiVisualizationObjectIn}
     * @memberof JsonApiVisualizationObjectInDocument
     */
    data: JsonApiVisualizationObjectIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiVisualizationObjectLinkage
 */
export interface JsonApiVisualizationObjectLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiVisualizationObjectLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiVisualizationObjectLinkage
     */
    type: JsonApiVisualizationObjectLinkageTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiVisualizationObjectLinkageTypeEnum {
    VisualizationObject = "visualizationObject"
}
/**
 * JSON:API representation of visualizationObject entity.
 * @export
 * @interface JsonApiVisualizationObjectOut
 */
export interface JsonApiVisualizationObjectOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectOut
     */
    type: JsonApiVisualizationObjectOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiVisualizationObjectOut
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
    /**
     *
     * @type {JsonApiVisualizationObjectOutRelationships}
     * @memberof JsonApiVisualizationObjectOut
     */
    relationships?: JsonApiVisualizationObjectOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiVisualizationObjectOutTypeEnum {
    VisualizationObject = "visualizationObject"
}
/**
 *
 * @export
 * @interface JsonApiVisualizationObjectOutDocument
 */
export interface JsonApiVisualizationObjectOutDocument {
    /**
     *
     * @type {JsonApiVisualizationObjectOut}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    data: JsonApiVisualizationObjectOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiVisualizationObjectOutIncludes>}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    included?: Array<JsonApiVisualizationObjectOutIncludes>;
}
/**
 * @type JsonApiVisualizationObjectOutIncludes
 * @export
 */
export declare type JsonApiVisualizationObjectOutIncludes = JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiFactOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks;
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiVisualizationObjectOutList
 */
export interface JsonApiVisualizationObjectOutList {
    /**
     *
     * @type {Array<JsonApiVisualizationObjectOutWithLinks>}
     * @memberof JsonApiVisualizationObjectOutList
     */
    data: Array<JsonApiVisualizationObjectOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiVisualizationObjectOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiVisualizationObjectOutIncludes>}
     * @memberof JsonApiVisualizationObjectOutList
     */
    included?: Array<JsonApiVisualizationObjectOutIncludes>;
}
/**
 *
 * @export
 * @interface JsonApiVisualizationObjectOutRelationships
 */
export interface JsonApiVisualizationObjectOutRelationships {
    /**
     *
     * @type {JsonApiMetricOutRelationshipsFacts}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    facts?: JsonApiMetricOutRelationshipsFacts;
    /**
     *
     * @type {JsonApiFilterContextOutRelationshipsAttributes}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    attributes?: JsonApiFilterContextOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsMetrics}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    metrics?: JsonApiAnalyticalDashboardOutRelationshipsMetrics;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiVisualizationObjectOutRelationships
     */
    datasets?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
}
/**
 *
 * @export
 * @interface JsonApiVisualizationObjectOutWithLinks
 */
export interface JsonApiVisualizationObjectOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    type: JsonApiVisualizationObjectOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInAttributes}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardInAttributes;
    /**
     *
     * @type {JsonApiVisualizationObjectOutRelationships}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    relationships?: JsonApiVisualizationObjectOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiVisualizationObjectOutWithLinksTypeEnum {
    VisualizationObject = "visualizationObject"
}
/**
 * JSON:API representation of workspaceDataFilter entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterIn
 */
export interface JsonApiWorkspaceDataFilterIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    type: JsonApiWorkspaceDataFilterInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInAttributes}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    attributes?: JsonApiWorkspaceDataFilterInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInRelationships}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    relationships?: JsonApiWorkspaceDataFilterInRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiWorkspaceDataFilterInTypeEnum {
    WorkspaceDataFilter = "workspaceDataFilter"
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterInAttributes
 */
export interface JsonApiWorkspaceDataFilterInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterInAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterInAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterInAttributes
     */
    columnName?: string;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterInDocument
 */
export interface JsonApiWorkspaceDataFilterInDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterIn}
     * @memberof JsonApiWorkspaceDataFilterInDocument
     */
    data: JsonApiWorkspaceDataFilterIn;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterInRelationships
 */
export interface JsonApiWorkspaceDataFilterInRelationships {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInRelationshipsFilterSettings}
     * @memberof JsonApiWorkspaceDataFilterInRelationships
     */
    filterSettings?: JsonApiWorkspaceDataFilterInRelationshipsFilterSettings;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterInRelationshipsFilterSettings
 */
export interface JsonApiWorkspaceDataFilterInRelationshipsFilterSettings {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiWorkspaceDataFilterSettingLinkage>}
     * @memberof JsonApiWorkspaceDataFilterInRelationshipsFilterSettings
     */
    data: Array<JsonApiWorkspaceDataFilterSettingLinkage>;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiWorkspaceDataFilterLinkage
 */
export interface JsonApiWorkspaceDataFilterLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterLinkage
     */
    type: JsonApiWorkspaceDataFilterLinkageTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiWorkspaceDataFilterLinkageTypeEnum {
    WorkspaceDataFilter = "workspaceDataFilter"
}
/**
 * JSON:API representation of workspaceDataFilter entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterOut
 */
export interface JsonApiWorkspaceDataFilterOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    type: JsonApiWorkspaceDataFilterOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInAttributes}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    attributes?: JsonApiWorkspaceDataFilterInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInRelationships}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    relationships?: JsonApiWorkspaceDataFilterInRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiWorkspaceDataFilterOutTypeEnum {
    WorkspaceDataFilter = "workspaceDataFilter"
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterOutDocument
 */
export interface JsonApiWorkspaceDataFilterOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterOut}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    data: JsonApiWorkspaceDataFilterOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    included?: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceDataFilterOutList
 */
export interface JsonApiWorkspaceDataFilterOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    data: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    included?: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterOutWithLinks
 */
export interface JsonApiWorkspaceDataFilterOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    type: JsonApiWorkspaceDataFilterOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInAttributes}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    attributes?: JsonApiWorkspaceDataFilterInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInRelationships}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    relationships?: JsonApiWorkspaceDataFilterInRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiWorkspaceDataFilterOutWithLinksTypeEnum {
    WorkspaceDataFilter = "workspaceDataFilter"
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingLinkage
 */
export interface JsonApiWorkspaceDataFilterSettingLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingLinkage
     */
    type: JsonApiWorkspaceDataFilterSettingLinkageTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiWorkspaceDataFilterSettingLinkageTypeEnum {
    WorkspaceDataFilterSetting = "workspaceDataFilterSetting"
}
/**
 * JSON:API representation of workspaceDataFilterSetting entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOut
 */
export interface JsonApiWorkspaceDataFilterSettingOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    type: JsonApiWorkspaceDataFilterSettingOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutAttributes}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    attributes?: JsonApiWorkspaceDataFilterSettingOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutRelationships}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    relationships?: JsonApiWorkspaceDataFilterSettingOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiWorkspaceDataFilterSettingOutTypeEnum {
    WorkspaceDataFilterSetting = "workspaceDataFilterSetting"
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutAttributes
 */
export interface JsonApiWorkspaceDataFilterSettingOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutAttributes
     */
    filterValues?: Array<string>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutDocument
 */
export interface JsonApiWorkspaceDataFilterSettingOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOut}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    data: JsonApiWorkspaceDataFilterSettingOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    included?: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutList
 */
export interface JsonApiWorkspaceDataFilterSettingOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    data: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    included?: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutRelationships
 */
export interface JsonApiWorkspaceDataFilterSettingOutRelationships {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter}
     * @memberof JsonApiWorkspaceDataFilterSettingOutRelationships
     */
    workspaceDataFilter?: JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter
 */
export interface JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterToOneLinkage}
     * @memberof JsonApiWorkspaceDataFilterSettingOutRelationshipsWorkspaceDataFilter
     */
    data: JsonApiWorkspaceDataFilterToOneLinkage | null;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutWithLinks
 */
export interface JsonApiWorkspaceDataFilterSettingOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    type: JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutAttributes}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    attributes?: JsonApiWorkspaceDataFilterSettingOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOutRelationships}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    relationships?: JsonApiWorkspaceDataFilterSettingOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum {
    WorkspaceDataFilterSetting = "workspaceDataFilterSetting"
}
/**
 * @type JsonApiWorkspaceDataFilterToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export declare type JsonApiWorkspaceDataFilterToOneLinkage = JsonApiWorkspaceDataFilterLinkage;
/**
 * JSON:API representation of workspace entity.
 * @export
 * @interface JsonApiWorkspaceIn
 */
export interface JsonApiWorkspaceIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceIn
     */
    type: JsonApiWorkspaceInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceIn
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceOutAttributes}
     * @memberof JsonApiWorkspaceIn
     */
    attributes?: JsonApiWorkspaceOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceOutRelationships}
     * @memberof JsonApiWorkspaceIn
     */
    relationships?: JsonApiWorkspaceOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiWorkspaceInTypeEnum {
    Workspace = "workspace"
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceInDocument
 */
export interface JsonApiWorkspaceInDocument {
    /**
     *
     * @type {JsonApiWorkspaceIn}
     * @memberof JsonApiWorkspaceInDocument
     */
    data: JsonApiWorkspaceIn;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiWorkspaceLinkage
 */
export interface JsonApiWorkspaceLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceLinkage
     */
    type: JsonApiWorkspaceLinkageTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiWorkspaceLinkageTypeEnum {
    Workspace = "workspace"
}
/**
 * JSON:API representation of workspace entity.
 * @export
 * @interface JsonApiWorkspaceOut
 */
export interface JsonApiWorkspaceOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceOut
     */
    type: JsonApiWorkspaceOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceOut
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceOutMeta}
     * @memberof JsonApiWorkspaceOut
     */
    meta?: JsonApiWorkspaceOutMeta;
    /**
     *
     * @type {JsonApiWorkspaceOutAttributes}
     * @memberof JsonApiWorkspaceOut
     */
    attributes?: JsonApiWorkspaceOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceOutRelationships}
     * @memberof JsonApiWorkspaceOut
     */
    relationships?: JsonApiWorkspaceOutRelationships;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiWorkspaceOutTypeEnum {
    Workspace = "workspace"
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceOutAttributes
 */
export interface JsonApiWorkspaceOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceOutAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceOutAttributes
     */
    computeClient?: JsonApiWorkspaceOutAttributesComputeClientEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiWorkspaceOutAttributesComputeClientEnum {
    AQE = "AQE",
    CALCIQUE = "CALCIQUE"
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceOutDocument
 */
export interface JsonApiWorkspaceOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceOut}
     * @memberof JsonApiWorkspaceOutDocument
     */
    data: JsonApiWorkspaceOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutDocument
     */
    included?: Array<JsonApiWorkspaceOutWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceOutList
 */
export interface JsonApiWorkspaceOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutList
     */
    data: Array<JsonApiWorkspaceOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutList
     */
    included?: Array<JsonApiWorkspaceOutWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceOutMeta
 */
export interface JsonApiWorkspaceOutMeta {
    /**
     *
     * @type {JsonApiWorkspaceOutMetaConfig}
     * @memberof JsonApiWorkspaceOutMeta
     */
    config?: JsonApiWorkspaceOutMetaConfig;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceOutMetaConfig
 */
export interface JsonApiWorkspaceOutMetaConfig {
    /**
     * is sampling enabled - based on type of data-source connected to this workspace
     * @type {boolean}
     * @memberof JsonApiWorkspaceOutMetaConfig
     */
    dataSamplingAvailable: boolean;
    /**
     * is approximate count enabled - based on type of data-source connected to this workspace
     * @type {boolean}
     * @memberof JsonApiWorkspaceOutMetaConfig
     */
    approximateCountAvailable: boolean;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceOutRelationships
 */
export interface JsonApiWorkspaceOutRelationships {
    /**
     *
     * @type {JsonApiWorkspaceOutRelationshipsParent}
     * @memberof JsonApiWorkspaceOutRelationships
     */
    parent?: JsonApiWorkspaceOutRelationshipsParent;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceOutRelationshipsParent
 */
export interface JsonApiWorkspaceOutRelationshipsParent {
    /**
     *
     * @type {JsonApiWorkspaceToOneLinkage}
     * @memberof JsonApiWorkspaceOutRelationshipsParent
     */
    data: JsonApiWorkspaceToOneLinkage | null;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceOutWithLinks
 */
export interface JsonApiWorkspaceOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    type: JsonApiWorkspaceOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceOutMeta}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    meta?: JsonApiWorkspaceOutMeta;
    /**
     *
     * @type {JsonApiWorkspaceOutAttributes}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    attributes?: JsonApiWorkspaceOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceOutRelationships}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    relationships?: JsonApiWorkspaceOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @export
 * @enum {string}
 */
export declare enum JsonApiWorkspaceOutWithLinksTypeEnum {
    Workspace = "workspace"
}
/**
 * @type JsonApiWorkspaceToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export declare type JsonApiWorkspaceToOneLinkage = JsonApiWorkspaceLinkage;
/**
 *
 * @export
 * @interface ListLinks
 */
export interface ListLinks {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof ListLinks
     */
    self: string;
    /**
     * A string containing the link\'s URL for the next page of data.
     * @type {string}
     * @memberof ListLinks
     */
    next?: string;
}
/**
 *
 * @export
 * @interface ListLinksAllOf
 */
export interface ListLinksAllOf {
    /**
     * A string containing the link\'s URL for the next page of data.
     * @type {string}
     * @memberof ListLinksAllOf
     */
    next?: string;
}
/**
 *
 * @export
 * @interface ObjectLinks
 */
export interface ObjectLinks {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof ObjectLinks
     */
    self: string;
}
/**
 *
 * @export
 * @interface ObjectLinksContainer
 */
export interface ObjectLinksContainer {
    /**
     *
     * @type {ObjectLinks}
     * @memberof ObjectLinksContainer
     */
    links?: ObjectLinks;
}
/**
 * A reference identifier.
 * @export
 * @interface ReferenceIdentifier
 */
export interface ReferenceIdentifier {
    /**
     * Reference ID.
     * @type {string}
     * @memberof ReferenceIdentifier
     */
    id: string;
    /**
     * A type of the reference.
     * @type {string}
     * @memberof ReferenceIdentifier
     */
    type: ReferenceIdentifierTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum ReferenceIdentifierTypeEnum {
    Dataset = "dataset"
}
/**
 * A user group identifier.
 * @export
 * @interface UserGroupIdentifier
 */
export interface UserGroupIdentifier {
    /**
     * Identifier of the user group.
     * @type {string}
     * @memberof UserGroupIdentifier
     */
    id: string;
    /**
     * A type.
     * @type {string}
     * @memberof UserGroupIdentifier
     */
    type: UserGroupIdentifierTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum UserGroupIdentifierTypeEnum {
    UserGroup = "userGroup"
}
/**
 * A workspace identifier.
 * @export
 * @interface WorkspaceIdentifier
 */
export interface WorkspaceIdentifier {
    /**
     * Identifier of the workspace.
     * @type {string}
     * @memberof WorkspaceIdentifier
     */
    id: string;
    /**
     * A type.
     * @type {string}
     * @memberof WorkspaceIdentifier
     */
    type: WorkspaceIdentifierTypeEnum;
}
/**
 * @export
 * @enum {string}
 */
export declare enum WorkspaceIdentifierTypeEnum {
    Workspace = "workspace"
}
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export declare const ActionsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Generate LDM from PDM stored in data source.
     * @summary Generate LDM from PDM
     * @param {string} dataSourceId
     * @param {GenerateLdmRequest} generateLdmRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateLogicalModel(params: {
        dataSourceId: string;
        generateLdmRequest: GenerateLdmRequest;
    }, options?: any): RequestArgs;
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUploadNotification(params: {
        dataSourceId: string;
    }, options?: any): RequestArgs;
};
/**
 * ActionsApi - functional programming interface
 * @export
 */
export declare const ActionsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Generate LDM from PDM stored in data source.
     * @summary Generate LDM from PDM
     * @param {string} dataSourceId
     * @param {GenerateLdmRequest} generateLdmRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateLogicalModel(params: {
        dataSourceId: string;
        generateLdmRequest: GenerateLdmRequest;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeclarativeModel>;
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUploadNotification(params: {
        dataSourceId: string;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
};
/**
 * ActionsApi - factory interface
 * @export
 */
export declare const ActionsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Generate LDM from PDM stored in data source.
     * @summary Generate LDM from PDM
     * @param {string} dataSourceId
     * @param {GenerateLdmRequest} generateLdmRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateLogicalModel(params: {
        dataSourceId: string;
        generateLdmRequest: GenerateLdmRequest;
    }, options?: any): AxiosPromise<DeclarativeModel>;
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUploadNotification(params: {
        dataSourceId: string;
    }, options?: any): AxiosPromise<void>;
};
/**
 * ActionsApi - interface
 * @export
 * @interface ActionsApi
 */
export interface ActionsApiInterface {
    /**
     * Generate LDM from PDM stored in data source.
     * @summary Generate LDM from PDM
     * @param {string} dataSourceId
     * @param {GenerateLdmRequest} generateLdmRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    generateLogicalModel(params: {
        dataSourceId: string;
        generateLdmRequest: GenerateLdmRequest;
    }, options?: any): AxiosPromise<DeclarativeModel>;
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    registerUploadNotification(params: {
        dataSourceId: string;
    }, options?: any): AxiosPromise<void>;
}
/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export declare class ActionsApi extends BaseAPI implements ActionsApiInterface {
    /**
     * Generate LDM from PDM stored in data source.
     * @summary Generate LDM from PDM
     * @param {string} dataSourceId
     * @param {GenerateLdmRequest} generateLdmRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    generateLogicalModel(params: {
        dataSourceId: string;
        generateLdmRequest: GenerateLdmRequest;
    }, options?: any): AxiosPromise<DeclarativeModel>;
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    registerUploadNotification(params: {
        dataSourceId: string;
    }, options?: any): AxiosPromise<void>;
}
/**
 * DataSourceEntitiesControllerApi - axios parameter creator
 * @export
 */
export declare const DataSourceEntitiesControllerApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} dataSourceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables(params: {
        dataSourceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables(params: {
        dataSourceId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
};
/**
 * DataSourceEntitiesControllerApi - functional programming interface
 * @export
 */
export declare const DataSourceEntitiesControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} dataSourceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables(params: {
        dataSourceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDataSourceTableOutList>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables(params: {
        dataSourceId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDataSourceTableOutDocument>;
};
/**
 * DataSourceEntitiesControllerApi - factory interface
 * @export
 */
export declare const DataSourceEntitiesControllerApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {string} dataSourceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables(params: {
        dataSourceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): AxiosPromise<JsonApiDataSourceTableOutList>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables(params: {
        dataSourceId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<JsonApiDataSourceTableOutDocument>;
};
/**
 * DataSourceEntitiesControllerApi - interface
 * @export
 * @interface DataSourceEntitiesControllerApi
 */
export interface DataSourceEntitiesControllerApiInterface {
    /**
     *
     * @param {string} dataSourceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntitiesControllerApiInterface
     */
    getAllEntitiesDataSourceTables(params: {
        dataSourceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiDataSourceTableOutList>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntitiesControllerApiInterface
     */
    getEntityDataSourceTables(params: {
        dataSourceId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDataSourceTableOutDocument>;
}
/**
 * DataSourceEntitiesControllerApi - object-oriented interface
 * @export
 * @class DataSourceEntitiesControllerApi
 * @extends {BaseAPI}
 */
export declare class DataSourceEntitiesControllerApi extends BaseAPI implements DataSourceEntitiesControllerApiInterface {
    /**
     *
     * @param {string} dataSourceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntitiesControllerApi
     */
    getAllEntitiesDataSourceTables(params: {
        dataSourceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiDataSourceTableOutList>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntitiesControllerApi
     */
    getEntityDataSourceTables(params: {
        dataSourceId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDataSourceTableOutDocument>;
}
/**
 * EntitiesApi - axios parameter creator
 * @export
 */
export declare const EntitiesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards(params: {
        workspaceId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens(params: {
        userId: string;
        jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins(params: {
        workspaceId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources(params: {
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts(params: {
        workspaceId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics(params: {
        workspaceId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups(params: {
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers(params: {
        jsonApiUserInDocument: JsonApiUserInDocument;
        include?: ("ALL" | "userGroups")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects(params: {
        workspaceId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces(params: {
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens(params: {
        userId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "dataset")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} dataSourceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables(params: {
        dataSourceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "attributes" | "facts" | "references")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "dataset")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "attributes" | "attribute")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilters" | "workspaceDataFilter")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        metaInclude?: ("config" | "all")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllOptions(params: {}, options?: any): RequestArgs;
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceDrivers(params: {}, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "dataset")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables(params: {
        dataSourceId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "attributes" | "facts" | "references")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "dataset")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "attributes" | "attribute")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "users" | "bootstrapUser" | "bootstrapUserGroup")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilters" | "workspaceDataFilter")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
        metaInclude?: ("config" | "all")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(params: {}, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations(params: {
        id: string;
        jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources(params: {
        id: string;
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations(params: {
        id: string;
        jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "users" | "bootstrapUser" | "bootstrapUserGroup")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups(params: {
        id: string;
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers(params: {
        id: string;
        jsonApiUserInDocument: JsonApiUserInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces(params: {
        id: string;
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
    }, options?: any): RequestArgs;
};
/**
 * EntitiesApi - functional programming interface
 * @export
 */
export declare const EntitiesApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards(params: {
        workspaceId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens(params: {
        userId: string;
        jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins(params: {
        workspaceId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources(params: {
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts(params: {
        workspaceId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics(params: {
        workspaceId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups(params: {
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers(params: {
        jsonApiUserInDocument: JsonApiUserInDocument;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects(params: {
        workspaceId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces(params: {
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        include?: Array<"workspaces" | "parent" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiAnalyticalDashboardOutList>;
    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens(params: {
        userId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiApiTokenOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "dataset")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiAttributeOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDashboardPluginOutList>;
    /**
     *
     * @param {string} dataSourceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables(params: {
        dataSourceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDataSourceTableOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDataSourceOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "attributes" | "facts" | "references")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDatasetOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "dataset")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiFactOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiFilterContextOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "attributes" | "attribute")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiLabelOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiMetricOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserGroupOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiVisualizationObjectOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilters" | "workspaceDataFilter")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceDataFilterOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        metaInclude?: ("config" | "all")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceOutList>;
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllOptions(params: {}, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceDrivers(params: {}, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "dataset")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiAttributeOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables(params: {
        dataSourceId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDataSourceTableOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "attributes" | "facts" | "references")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDatasetOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "dataset")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiFactOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "attributes" | "attribute")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiLabelOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "users" | "bootstrapUser" | "bootstrapUserGroup")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilters" | "workspaceDataFilter")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
        metaInclude?: ("config" | "all")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(params: {}, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations(params: {
        id: string;
        jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources(params: {
        id: string;
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations(params: {
        id: string;
        jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "users" | "bootstrapUser" | "bootstrapUserGroup")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups(params: {
        id: string;
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers(params: {
        id: string;
        jsonApiUserInDocument: JsonApiUserInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces(params: {
        id: string;
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceOutDocument>;
};
/**
 * EntitiesApi - factory interface
 * @export
 */
export declare const EntitiesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards(params: {
        workspaceId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens(params: {
        userId: string;
        jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins(params: {
        workspaceId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources(params: {
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts(params: {
        workspaceId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics(params: {
        workspaceId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups(params: {
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers(params: {
        jsonApiUserInDocument: JsonApiUserInDocument;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects(params: {
        workspaceId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces(params: {
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        include?: Array<"workspaces" | "parent" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutList>;
    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens(params: {
        userId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "dataset")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiAttributeOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutList>;
    /**
     *
     * @param {string} dataSourceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables(params: {
        dataSourceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): AxiosPromise<JsonApiDataSourceTableOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "attributes" | "facts" | "references")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiDatasetOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "dataset")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiFactOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "attributes" | "attribute")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiLabelOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiMetricOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): AxiosPromise<JsonApiUserOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilters" | "workspaceDataFilter")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        metaInclude?: ("config" | "all")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutList>;
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllOptions(params: {}, options?: any): AxiosPromise<void>;
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceDrivers(params: {}, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "dataset")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiAttributeOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables(params: {
        dataSourceId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<JsonApiDataSourceTableOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "attributes" | "facts" | "references")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiDatasetOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "dataset")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiFactOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "attributes" | "attribute")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiLabelOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "users" | "bootstrapUser" | "bootstrapUserGroup")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilters" | "workspaceDataFilter")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
        metaInclude?: ("config" | "all")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(params: {}, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations(params: {
        id: string;
        jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources(params: {
        id: string;
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations(params: {
        id: string;
        jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "users" | "bootstrapUser" | "bootstrapUserGroup")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups(params: {
        id: string;
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers(params: {
        id: string;
        jsonApiUserInDocument: JsonApiUserInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces(params: {
        id: string;
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
};
/**
 * EntitiesApi - interface
 * @export
 * @interface EntitiesApi
 */
export interface EntitiesApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityAnalyticalDashboards(params: {
        workspaceId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityApiTokens(params: {
        userId: string;
        jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityDashboardPlugins(params: {
        workspaceId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityDataSources(params: {
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityFilterContexts(params: {
        workspaceId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityMetrics(params: {
        workspaceId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityUserGroups(params: {
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityUsers(params: {
        jsonApiUserInDocument: JsonApiUserInDocument;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityVisualizationObjects(params: {
        workspaceId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityWorkspaces(params: {
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        include?: Array<"workspaces" | "parent" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesAnalyticalDashboards(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutList>;
    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesApiTokens(params: {
        userId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesAttributes(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "labels" | "dataset" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAttributeOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesDashboardPlugins(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutList>;
    /**
     *
     * @param {string} dataSourceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesDataSourceTables(params: {
        dataSourceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiDataSourceTableOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesDataSources(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesDatasets(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "facts" | "datasets" | "references" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDatasetOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesFacts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "dataset" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFactOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesFilterContexts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesLabels(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "attribute" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiLabelOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesMetrics(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiMetricOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesUserGroups(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "parents" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesUsers(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiUserOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesVisualizationObjects(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesWorkspaceDataFilters(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesWorkspaces(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaces" | "parent" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        metaInclude?: Array<"config" | "all">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutList>;
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllOptions(params: {}, options?: any): AxiosPromise<void>;
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getDataSourceDrivers(params: {}, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityAttributes(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "labels" | "dataset" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAttributeOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityCookieSecurityConfigurations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityDataSourceTables(params: {
        dataSourceId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDataSourceTableOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityDatasets(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "facts" | "datasets" | "references" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDatasetOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityFacts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "dataset" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFactOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityLabels(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "attribute" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiLabelOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityOrganizations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaces" | "parent" | "ALL">;
        metaInclude?: Array<"config" | "all">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getOrganization(params: {}, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityCookieSecurityConfigurations(params: {
        id: string;
        jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityDataSources(params: {
        id: string;
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityOrganizations(params: {
        id: string;
        jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityUserGroups(params: {
        id: string;
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityUsers(params: {
        id: string;
        jsonApiUserInDocument: JsonApiUserInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityWorkspaces(params: {
        id: string;
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaces" | "parent" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
}
/**
 * EntitiesApi - object-oriented interface
 * @export
 * @class EntitiesApi
 * @extends {BaseAPI}
 */
export declare class EntitiesApi extends BaseAPI implements EntitiesApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityAnalyticalDashboards(params: {
        workspaceId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityApiTokens(params: {
        userId: string;
        jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityDashboardPlugins(params: {
        workspaceId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityDataSources(params: {
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityFilterContexts(params: {
        workspaceId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityMetrics(params: {
        workspaceId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityUserGroups(params: {
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityUsers(params: {
        jsonApiUserInDocument: JsonApiUserInDocument;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityVisualizationObjects(params: {
        workspaceId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityWorkspaces(params: {
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        include?: Array<"workspaces" | "parent" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesAnalyticalDashboards(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutList>;
    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesApiTokens(params: {
        userId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesAttributes(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "labels" | "dataset" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAttributeOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesDashboardPlugins(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutList>;
    /**
     *
     * @param {string} dataSourceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesDataSourceTables(params: {
        dataSourceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiDataSourceTableOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesDataSources(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesDatasets(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "facts" | "datasets" | "references" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDatasetOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesFacts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "dataset" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFactOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesFilterContexts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesLabels(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "attribute" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiLabelOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesMetrics(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiMetricOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesUserGroups(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "parents" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesUsers(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiUserOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesVisualizationObjects(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesWorkspaceDataFilters(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesWorkspaces(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaces" | "parent" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        metaInclude?: Array<"config" | "all">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutList>;
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllOptions(params: {}, options?: any): AxiosPromise<void>;
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getDataSourceDrivers(params: {}, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityAttributes(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "labels" | "dataset" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAttributeOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityCookieSecurityConfigurations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityDataSourceTables(params: {
        dataSourceId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDataSourceTableOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityDatasets(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "facts" | "datasets" | "references" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDatasetOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityFacts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "dataset" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFactOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityLabels(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "attribute" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiLabelOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityOrganizations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaces" | "parent" | "ALL">;
        metaInclude?: Array<"config" | "all">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getOrganization(params: {}, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityCookieSecurityConfigurations(params: {
        id: string;
        jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityDataSources(params: {
        id: string;
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityOrganizations(params: {
        id: string;
        jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityUserGroups(params: {
        id: string;
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityUsers(params: {
        id: string;
        jsonApiUserInDocument: JsonApiUserInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityWorkspaces(params: {
        id: string;
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaces" | "parent" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
}
/**
 * LayoutApi - axios parameter creator
 * @export
 */
export declare const LayoutApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAnalyticsModel(params: {
        workspaceId: string;
    }, options?: any): RequestArgs;
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourcesLayout(params: {}, options?: any): RequestArgs;
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogicalModel(params: {
        workspaceId: string;
    }, options?: any): RequestArgs;
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationLayout(params: {}, options?: any): RequestArgs;
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPdmLayout(params: {
        dataSourceId: string;
    }, options?: any): RequestArgs;
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupsLayout(params: {}, options?: any): RequestArgs;
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersLayout(params: {}, options?: any): RequestArgs;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersUserGroupsLayout(params: {}, options?: any): RequestArgs;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceDataFiltersLayout(params: {}, options?: any): RequestArgs;
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceLayout(params: {
        workspaceId: string;
    }, options?: any): RequestArgs;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacesLayout(params: {}, options?: any): RequestArgs;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {DeclarativeDataSources} declarativeDataSources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDataSourcesLayout(params: {
        declarativeDataSources: DeclarativeDataSources;
    }, options?: any): RequestArgs;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {DeclarativeUserGroups} declarativeUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserGroupsLayout(params: {
        declarativeUserGroups: DeclarativeUserGroups;
    }, options?: any): RequestArgs;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {DeclarativeUsers} declarativeUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersLayout(params: {
        declarativeUsers: DeclarativeUsers;
    }, options?: any): RequestArgs;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {DeclarativeUsersUserGroups} declarativeUsersUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersUserGroupsLayout(params: {
        declarativeUsersUserGroups: DeclarativeUsersUserGroups;
    }, options?: any): RequestArgs;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWorkspaceLayout(params: {
        workspaceId: string;
        declarativeWorkspaceModel: DeclarativeWorkspaceModel;
    }, options?: any): RequestArgs;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAnalyticsModel(params: {
        workspaceId: string;
        declarativeAnalytics: DeclarativeAnalytics;
    }, options?: any): RequestArgs;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLogicalModel(params: {
        workspaceId: string;
        declarativeModel: DeclarativeModel;
    }, options?: any): RequestArgs;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {DeclarativeOrganization} declarativeOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setOrganizationLayout(params: {
        declarativeOrganization: DeclarativeOrganization;
    }, options?: any): RequestArgs;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {string} dataSourceId
     * @param {DeclarativePdm} declarativePdm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setPdmLayout(params: {
        dataSourceId: string;
        declarativePdm: DeclarativePdm;
    }, options?: any): RequestArgs;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspaceDataFiltersLayout(params: {
        declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
    }, options?: any): RequestArgs;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacesLayout(params: {
        declarativeWorkspaces: DeclarativeWorkspaces;
    }, options?: any): RequestArgs;
};
/**
 * LayoutApi - functional programming interface
 * @export
 */
export declare const LayoutApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAnalyticsModel(params: {
        workspaceId: string;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeclarativeAnalytics>;
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourcesLayout(params: {}, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeclarativeDataSources>;
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogicalModel(params: {
        workspaceId: string;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeclarativeModel>;
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationLayout(params: {}, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeclarativeOrganization>;
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPdmLayout(params: {
        dataSourceId: string;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeclarativePdm>;
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupsLayout(params: {}, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeclarativeUserGroups>;
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersLayout(params: {}, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeclarativeUsers>;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersUserGroupsLayout(params: {}, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeclarativeUsersUserGroups>;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceDataFiltersLayout(params: {}, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeclarativeWorkspaceDataFilters>;
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceLayout(params: {
        workspaceId: string;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeclarativeWorkspaceModel>;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacesLayout(params: {}, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeclarativeWorkspaces>;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {DeclarativeDataSources} declarativeDataSources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDataSourcesLayout(params: {
        declarativeDataSources: DeclarativeDataSources;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {DeclarativeUserGroups} declarativeUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserGroupsLayout(params: {
        declarativeUserGroups: DeclarativeUserGroups;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {DeclarativeUsers} declarativeUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersLayout(params: {
        declarativeUsers: DeclarativeUsers;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {DeclarativeUsersUserGroups} declarativeUsersUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersUserGroupsLayout(params: {
        declarativeUsersUserGroups: DeclarativeUsersUserGroups;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWorkspaceLayout(params: {
        workspaceId: string;
        declarativeWorkspaceModel: DeclarativeWorkspaceModel;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAnalyticsModel(params: {
        workspaceId: string;
        declarativeAnalytics: DeclarativeAnalytics;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLogicalModel(params: {
        workspaceId: string;
        declarativeModel: DeclarativeModel;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {DeclarativeOrganization} declarativeOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setOrganizationLayout(params: {
        declarativeOrganization: DeclarativeOrganization;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {string} dataSourceId
     * @param {DeclarativePdm} declarativePdm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setPdmLayout(params: {
        dataSourceId: string;
        declarativePdm: DeclarativePdm;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspaceDataFiltersLayout(params: {
        declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacesLayout(params: {
        declarativeWorkspaces: DeclarativeWorkspaces;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
};
/**
 * LayoutApi - factory interface
 * @export
 */
export declare const LayoutApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAnalyticsModel(params: {
        workspaceId: string;
    }, options?: any): AxiosPromise<DeclarativeAnalytics>;
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourcesLayout(params: {}, options?: any): AxiosPromise<DeclarativeDataSources>;
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogicalModel(params: {
        workspaceId: string;
    }, options?: any): AxiosPromise<DeclarativeModel>;
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationLayout(params: {}, options?: any): AxiosPromise<DeclarativeOrganization>;
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPdmLayout(params: {
        dataSourceId: string;
    }, options?: any): AxiosPromise<DeclarativePdm>;
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupsLayout(params: {}, options?: any): AxiosPromise<DeclarativeUserGroups>;
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersLayout(params: {}, options?: any): AxiosPromise<DeclarativeUsers>;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersUserGroupsLayout(params: {}, options?: any): AxiosPromise<DeclarativeUsersUserGroups>;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceDataFiltersLayout(params: {}, options?: any): AxiosPromise<DeclarativeWorkspaceDataFilters>;
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceLayout(params: {
        workspaceId: string;
    }, options?: any): AxiosPromise<DeclarativeWorkspaceModel>;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacesLayout(params: {}, options?: any): AxiosPromise<DeclarativeWorkspaces>;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {DeclarativeDataSources} declarativeDataSources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDataSourcesLayout(params: {
        declarativeDataSources: DeclarativeDataSources;
    }, options?: any): AxiosPromise<void>;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {DeclarativeUserGroups} declarativeUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserGroupsLayout(params: {
        declarativeUserGroups: DeclarativeUserGroups;
    }, options?: any): AxiosPromise<void>;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {DeclarativeUsers} declarativeUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersLayout(params: {
        declarativeUsers: DeclarativeUsers;
    }, options?: any): AxiosPromise<void>;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {DeclarativeUsersUserGroups} declarativeUsersUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersUserGroupsLayout(params: {
        declarativeUsersUserGroups: DeclarativeUsersUserGroups;
    }, options?: any): AxiosPromise<void>;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWorkspaceLayout(params: {
        workspaceId: string;
        declarativeWorkspaceModel: DeclarativeWorkspaceModel;
    }, options?: any): AxiosPromise<void>;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAnalyticsModel(params: {
        workspaceId: string;
        declarativeAnalytics: DeclarativeAnalytics;
    }, options?: any): AxiosPromise<void>;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLogicalModel(params: {
        workspaceId: string;
        declarativeModel: DeclarativeModel;
    }, options?: any): AxiosPromise<void>;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {DeclarativeOrganization} declarativeOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setOrganizationLayout(params: {
        declarativeOrganization: DeclarativeOrganization;
    }, options?: any): AxiosPromise<void>;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {string} dataSourceId
     * @param {DeclarativePdm} declarativePdm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setPdmLayout(params: {
        dataSourceId: string;
        declarativePdm: DeclarativePdm;
    }, options?: any): AxiosPromise<void>;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspaceDataFiltersLayout(params: {
        declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
    }, options?: any): AxiosPromise<void>;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacesLayout(params: {
        declarativeWorkspaces: DeclarativeWorkspaces;
    }, options?: any): AxiosPromise<void>;
};
/**
 * LayoutApi - interface
 * @export
 * @interface LayoutApi
 */
export interface LayoutApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getAnalyticsModel(params: {
        workspaceId: string;
    }, options?: any): AxiosPromise<DeclarativeAnalytics>;
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getDataSourcesLayout(params: {}, options?: any): AxiosPromise<DeclarativeDataSources>;
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getLogicalModel(params: {
        workspaceId: string;
    }, options?: any): AxiosPromise<DeclarativeModel>;
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getOrganizationLayout(params: {}, options?: any): AxiosPromise<DeclarativeOrganization>;
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getPdmLayout(params: {
        dataSourceId: string;
    }, options?: any): AxiosPromise<DeclarativePdm>;
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getUserGroupsLayout(params: {}, options?: any): AxiosPromise<DeclarativeUserGroups>;
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getUsersLayout(params: {}, options?: any): AxiosPromise<DeclarativeUsers>;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getUsersUserGroupsLayout(params: {}, options?: any): AxiosPromise<DeclarativeUsersUserGroups>;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getWorkspaceDataFiltersLayout(params: {}, options?: any): AxiosPromise<DeclarativeWorkspaceDataFilters>;
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getWorkspaceLayout(params: {
        workspaceId: string;
    }, options?: any): AxiosPromise<DeclarativeWorkspaceModel>;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getWorkspacesLayout(params: {}, options?: any): AxiosPromise<DeclarativeWorkspaces>;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {DeclarativeDataSources} declarativeDataSources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putDataSourcesLayout(params: {
        declarativeDataSources: DeclarativeDataSources;
    }, options?: any): AxiosPromise<void>;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {DeclarativeUserGroups} declarativeUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putUserGroupsLayout(params: {
        declarativeUserGroups: DeclarativeUserGroups;
    }, options?: any): AxiosPromise<void>;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {DeclarativeUsers} declarativeUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putUsersLayout(params: {
        declarativeUsers: DeclarativeUsers;
    }, options?: any): AxiosPromise<void>;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {DeclarativeUsersUserGroups} declarativeUsersUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putUsersUserGroupsLayout(params: {
        declarativeUsersUserGroups: DeclarativeUsersUserGroups;
    }, options?: any): AxiosPromise<void>;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putWorkspaceLayout(params: {
        workspaceId: string;
        declarativeWorkspaceModel: DeclarativeWorkspaceModel;
    }, options?: any): AxiosPromise<void>;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setAnalyticsModel(params: {
        workspaceId: string;
        declarativeAnalytics: DeclarativeAnalytics;
    }, options?: any): AxiosPromise<void>;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setLogicalModel(params: {
        workspaceId: string;
        declarativeModel: DeclarativeModel;
    }, options?: any): AxiosPromise<void>;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {DeclarativeOrganization} declarativeOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setOrganizationLayout(params: {
        declarativeOrganization: DeclarativeOrganization;
    }, options?: any): AxiosPromise<void>;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {string} dataSourceId
     * @param {DeclarativePdm} declarativePdm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setPdmLayout(params: {
        dataSourceId: string;
        declarativePdm: DeclarativePdm;
    }, options?: any): AxiosPromise<void>;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setWorkspaceDataFiltersLayout(params: {
        declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
    }, options?: any): AxiosPromise<void>;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setWorkspacesLayout(params: {
        declarativeWorkspaces: DeclarativeWorkspaces;
    }, options?: any): AxiosPromise<void>;
}
/**
 * LayoutApi - object-oriented interface
 * @export
 * @class LayoutApi
 * @extends {BaseAPI}
 */
export declare class LayoutApi extends BaseAPI implements LayoutApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getAnalyticsModel(params: {
        workspaceId: string;
    }, options?: any): AxiosPromise<DeclarativeAnalytics>;
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getDataSourcesLayout(params: {}, options?: any): AxiosPromise<DeclarativeDataSources>;
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getLogicalModel(params: {
        workspaceId: string;
    }, options?: any): AxiosPromise<DeclarativeModel>;
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getOrganizationLayout(params: {}, options?: any): AxiosPromise<DeclarativeOrganization>;
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getPdmLayout(params: {
        dataSourceId: string;
    }, options?: any): AxiosPromise<DeclarativePdm>;
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getUserGroupsLayout(params: {}, options?: any): AxiosPromise<DeclarativeUserGroups>;
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getUsersLayout(params: {}, options?: any): AxiosPromise<DeclarativeUsers>;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getUsersUserGroupsLayout(params: {}, options?: any): AxiosPromise<DeclarativeUsersUserGroups>;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getWorkspaceDataFiltersLayout(params: {}, options?: any): AxiosPromise<DeclarativeWorkspaceDataFilters>;
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getWorkspaceLayout(params: {
        workspaceId: string;
    }, options?: any): AxiosPromise<DeclarativeWorkspaceModel>;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getWorkspacesLayout(params: {}, options?: any): AxiosPromise<DeclarativeWorkspaces>;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {DeclarativeDataSources} declarativeDataSources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    putDataSourcesLayout(params: {
        declarativeDataSources: DeclarativeDataSources;
    }, options?: any): AxiosPromise<void>;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {DeclarativeUserGroups} declarativeUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    putUserGroupsLayout(params: {
        declarativeUserGroups: DeclarativeUserGroups;
    }, options?: any): AxiosPromise<void>;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {DeclarativeUsers} declarativeUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    putUsersLayout(params: {
        declarativeUsers: DeclarativeUsers;
    }, options?: any): AxiosPromise<void>;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {DeclarativeUsersUserGroups} declarativeUsersUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    putUsersUserGroupsLayout(params: {
        declarativeUsersUserGroups: DeclarativeUsersUserGroups;
    }, options?: any): AxiosPromise<void>;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    putWorkspaceLayout(params: {
        workspaceId: string;
        declarativeWorkspaceModel: DeclarativeWorkspaceModel;
    }, options?: any): AxiosPromise<void>;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setAnalyticsModel(params: {
        workspaceId: string;
        declarativeAnalytics: DeclarativeAnalytics;
    }, options?: any): AxiosPromise<void>;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setLogicalModel(params: {
        workspaceId: string;
        declarativeModel: DeclarativeModel;
    }, options?: any): AxiosPromise<void>;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {DeclarativeOrganization} declarativeOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setOrganizationLayout(params: {
        declarativeOrganization: DeclarativeOrganization;
    }, options?: any): AxiosPromise<void>;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {string} dataSourceId
     * @param {DeclarativePdm} declarativePdm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setPdmLayout(params: {
        dataSourceId: string;
        declarativePdm: DeclarativePdm;
    }, options?: any): AxiosPromise<void>;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setWorkspaceDataFiltersLayout(params: {
        declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
    }, options?: any): AxiosPromise<void>;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setWorkspacesLayout(params: {
        declarativeWorkspaces: DeclarativeWorkspaces;
    }, options?: any): AxiosPromise<void>;
}
/**
 * OrganizationControllerApi - axios parameter creator
 * @export
 */
export declare const OrganizationControllerApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "users" | "bootstrapUser" | "bootstrapUserGroup")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations(params: {
        id: string;
        jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations(params: {
        id: string;
        jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "users" | "bootstrapUser" | "bootstrapUserGroup")[] | undefined;
    }, options?: any): RequestArgs;
};
/**
 * OrganizationControllerApi - functional programming interface
 * @export
 */
export declare const OrganizationControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "users" | "bootstrapUser" | "bootstrapUserGroup")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations(params: {
        id: string;
        jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations(params: {
        id: string;
        jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "users" | "bootstrapUser" | "bootstrapUserGroup")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiOrganizationOutDocument>;
};
/**
 * OrganizationControllerApi - factory interface
 * @export
 */
export declare const OrganizationControllerApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "users" | "bootstrapUser" | "bootstrapUserGroup")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations(params: {
        id: string;
        jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations(params: {
        id: string;
        jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "users" | "bootstrapUser" | "bootstrapUserGroup")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiOrganizationOutDocument>;
};
/**
 * OrganizationControllerApi - interface
 * @export
 * @interface OrganizationControllerApi
 */
export interface OrganizationControllerApiInterface {
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    getEntityCookieSecurityConfigurations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    getEntityOrganizations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    updateEntityCookieSecurityConfigurations(params: {
        id: string;
        jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    updateEntityOrganizations(params: {
        id: string;
        jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiOrganizationOutDocument>;
}
/**
 * OrganizationControllerApi - object-oriented interface
 * @export
 * @class OrganizationControllerApi
 * @extends {BaseAPI}
 */
export declare class OrganizationControllerApi extends BaseAPI implements OrganizationControllerApiInterface {
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    getEntityCookieSecurityConfigurations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    getEntityOrganizations(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    updateEntityCookieSecurityConfigurations(params: {
        id: string;
        jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    updateEntityOrganizations(params: {
        id: string;
        jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiOrganizationOutDocument>;
}
/**
 * OrganizationModelControllerApi - axios parameter creator
 * @export
 */
export declare const OrganizationModelControllerApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources(params: {
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups(params: {
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers(params: {
        jsonApiUserInDocument: JsonApiUserInDocument;
        include?: ("ALL" | "userGroups")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces(params: {
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        metaInclude?: ("config" | "all")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
        metaInclude?: ("config" | "all")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources(params: {
        id: string;
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups(params: {
        id: string;
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers(params: {
        id: string;
        jsonApiUserInDocument: JsonApiUserInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces(params: {
        id: string;
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
    }, options?: any): RequestArgs;
};
/**
 * OrganizationModelControllerApi - functional programming interface
 * @export
 */
export declare const OrganizationModelControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources(params: {
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups(params: {
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers(params: {
        jsonApiUserInDocument: JsonApiUserInDocument;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces(params: {
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        include?: Array<"workspaces" | "parent" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDataSourceOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserGroupOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        metaInclude?: ("config" | "all")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceOutList>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
        metaInclude?: ("config" | "all")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources(params: {
        id: string;
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups(params: {
        id: string;
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers(params: {
        id: string;
        jsonApiUserInDocument: JsonApiUserInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces(params: {
        id: string;
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceOutDocument>;
};
/**
 * OrganizationModelControllerApi - factory interface
 * @export
 */
export declare const OrganizationModelControllerApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources(params: {
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups(params: {
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers(params: {
        jsonApiUserInDocument: JsonApiUserInDocument;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces(params: {
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        include?: Array<"workspaces" | "parent" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): AxiosPromise<JsonApiUserOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces(params: {
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        metaInclude?: ("config" | "all")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutList>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
        metaInclude?: ("config" | "all")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources(params: {
        id: string;
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups(params: {
        id: string;
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups" | "parents")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers(params: {
        id: string;
        jsonApiUserInDocument: JsonApiUserInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "userGroups")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces(params: {
        id: string;
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaces" | "parent")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
};
/**
 * OrganizationModelControllerApi - interface
 * @export
 * @interface OrganizationModelControllerApi
 */
export interface OrganizationModelControllerApiInterface {
    /**
     *
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityDataSources(params: {
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityUserGroups(params: {
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityUsers(params: {
        jsonApiUserInDocument: JsonApiUserInDocument;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityWorkspaces(params: {
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        include?: Array<"workspaces" | "parent" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesDataSources(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesUserGroups(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "parents" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesUsers(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiUserOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesWorkspaces(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaces" | "parent" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        metaInclude?: Array<"config" | "all">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutList>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaces" | "parent" | "ALL">;
        metaInclude?: Array<"config" | "all">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityDataSources(params: {
        id: string;
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityUserGroups(params: {
        id: string;
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityUsers(params: {
        id: string;
        jsonApiUserInDocument: JsonApiUserInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityWorkspaces(params: {
        id: string;
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaces" | "parent" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
}
/**
 * OrganizationModelControllerApi - object-oriented interface
 * @export
 * @class OrganizationModelControllerApi
 * @extends {BaseAPI}
 */
export declare class OrganizationModelControllerApi extends BaseAPI implements OrganizationModelControllerApiInterface {
    /**
     *
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    createEntityDataSources(params: {
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    createEntityUserGroups(params: {
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    createEntityUsers(params: {
        jsonApiUserInDocument: JsonApiUserInDocument;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    createEntityWorkspaces(params: {
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        include?: Array<"workspaces" | "parent" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    deleteEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    deleteEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    deleteEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    deleteEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesDataSources(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesUserGroups(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "parents" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesUsers(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiUserOutList>;
    /**
     *
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesWorkspaces(params: {
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaces" | "parent" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        metaInclude?: Array<"config" | "all">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutList>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityDataSources(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityUserGroups(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityUsers(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'all'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityWorkspaces(params: {
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaces" | "parent" | "ALL">;
        metaInclude?: Array<"config" | "all">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    updateEntityDataSources(params: {
        id: string;
        jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    updateEntityUserGroups(params: {
        id: string;
        jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "parents" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    updateEntityUsers(params: {
        id: string;
        jsonApiUserInDocument: JsonApiUserInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"userGroups" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    updateEntityWorkspaces(params: {
        id: string;
        jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaces" | "parent" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceOutDocument>;
}
/**
 * UserModelControllerApi - axios parameter creator
 * @export
 */
export declare const UserModelControllerApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens(params: {
        userId: string;
        jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens(params: {
        userId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
};
/**
 * UserModelControllerApi - functional programming interface
 * @export
 */
export declare const UserModelControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens(params: {
        userId: string;
        jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens(params: {
        userId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiApiTokenOutList>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiApiTokenOutDocument>;
};
/**
 * UserModelControllerApi - factory interface
 * @export
 */
export declare const UserModelControllerApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens(params: {
        userId: string;
        jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens(params: {
        userId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutList>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutDocument>;
};
/**
 * UserModelControllerApi - interface
 * @export
 * @interface UserModelControllerApi
 */
export interface UserModelControllerApiInterface {
    /**
     *
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    createEntityApiTokens(params: {
        userId: string;
        jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    deleteEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    getAllEntitiesApiTokens(params: {
        userId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutList>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    getEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutDocument>;
}
/**
 * UserModelControllerApi - object-oriented interface
 * @export
 * @class UserModelControllerApi
 * @extends {BaseAPI}
 */
export declare class UserModelControllerApi extends BaseAPI implements UserModelControllerApiInterface {
    /**
     *
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    createEntityApiTokens(params: {
        userId: string;
        jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    deleteEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    getAllEntitiesApiTokens(params: {
        userId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutList>;
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    getEntityApiTokens(params: {
        userId: string;
        id: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiApiTokenOutDocument>;
}
/**
 * WorkspaceObjectControllerApi - axios parameter creator
 * @export
 */
export declare const WorkspaceObjectControllerApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards(params: {
        workspaceId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins(params: {
        workspaceId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts(params: {
        workspaceId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics(params: {
        workspaceId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects(params: {
        workspaceId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "dataset")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "attributes" | "facts" | "references")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "dataset")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "attributes" | "attribute")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilters" | "workspaceDataFilter")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "dataset")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "attributes" | "facts" | "references")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "dataset")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "attributes" | "attribute")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilters" | "workspaceDataFilter")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
    }, options?: any): RequestArgs;
};
/**
 * WorkspaceObjectControllerApi - functional programming interface
 * @export
 */
export declare const WorkspaceObjectControllerApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards(params: {
        workspaceId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins(params: {
        workspaceId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts(params: {
        workspaceId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics(params: {
        workspaceId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects(params: {
        workspaceId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiAnalyticalDashboardOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "dataset")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiAttributeOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDashboardPluginOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "attributes" | "facts" | "references")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDatasetOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "dataset")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiFactOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiFilterContextOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "attributes" | "attribute")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiLabelOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiMetricOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiVisualizationObjectOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilters" | "workspaceDataFilter")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceDataFilterOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "dataset")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiAttributeOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "attributes" | "facts" | "references")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDatasetOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "dataset")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiFactOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "attributes" | "attribute")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiLabelOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilters" | "workspaceDataFilter")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
};
/**
 * WorkspaceObjectControllerApi - factory interface
 * @export
 */
export declare const WorkspaceObjectControllerApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards(params: {
        workspaceId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins(params: {
        workspaceId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts(params: {
        workspaceId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics(params: {
        workspaceId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects(params: {
        workspaceId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "dataset")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiAttributeOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "attributes" | "facts" | "references")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiDatasetOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "dataset")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiFactOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "attributes" | "attribute")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiLabelOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiMetricOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilters" | "workspaceDataFilter")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
        page?: number | undefined;
        size?: number | undefined;
        sort?: string[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "dataset")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiAttributeOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "attributes" | "facts" | "references")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiDatasetOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("datasets" | "ALL" | "dataset")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiFactOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "attributes" | "attribute")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiLabelOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilters" | "workspaceDataFilter")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
        xGDCVALIDATERELATIONS?: boolean | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "datasets" | "ALL" | "attributes")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("labels" | "metrics" | "datasets" | "ALL" | "attributes" | "facts")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        predicate?: {
            [key: string]: object;
        } | undefined;
        filter?: string | undefined;
        include?: ("ALL" | "workspaceDataFilterSettings" | "filterSettings")[] | undefined;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
};
/**
 * WorkspaceObjectControllerApi - interface
 * @export
 * @interface WorkspaceObjectControllerApi
 */
export interface WorkspaceObjectControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityAnalyticalDashboards(params: {
        workspaceId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityDashboardPlugins(params: {
        workspaceId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityFilterContexts(params: {
        workspaceId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityMetrics(params: {
        workspaceId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityVisualizationObjects(params: {
        workspaceId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesAnalyticalDashboards(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesAttributes(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "labels" | "dataset" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAttributeOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesDashboardPlugins(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesDatasets(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "facts" | "datasets" | "references" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDatasetOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesFacts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "dataset" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFactOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesFilterContexts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesLabels(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "attribute" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiLabelOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesMetrics(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiMetricOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesVisualizationObjects(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesWorkspaceDataFilters(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityAttributes(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "labels" | "dataset" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAttributeOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityDatasets(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "facts" | "datasets" | "references" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDatasetOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityFacts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "dataset" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFactOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityLabels(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "attribute" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiLabelOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
}
/**
 * WorkspaceObjectControllerApi - object-oriented interface
 * @export
 * @class WorkspaceObjectControllerApi
 * @extends {BaseAPI}
 */
export declare class WorkspaceObjectControllerApi extends BaseAPI implements WorkspaceObjectControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityAnalyticalDashboards(params: {
        workspaceId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityDashboardPlugins(params: {
        workspaceId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityFilterContexts(params: {
        workspaceId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityMetrics(params: {
        workspaceId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityVisualizationObjects(params: {
        workspaceId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesAnalyticalDashboards(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesAttributes(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "labels" | "dataset" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAttributeOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesDashboardPlugins(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesDatasets(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "facts" | "datasets" | "references" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDatasetOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesFacts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "dataset" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFactOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesFilterContexts(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesLabels(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "attribute" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiLabelOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesMetrics(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiMetricOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesVisualizationObjects(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesWorkspaceDataFilters(params: {
        workspaceId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
        page?: number;
        size?: number;
        sort?: Array<string>;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityAttributes(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "labels" | "dataset" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiAttributeOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityDatasets(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "facts" | "datasets" | "references" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiDatasetOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityFacts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"datasets" | "dataset" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFactOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityLabels(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "attribute" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiLabelOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityWorkspaceDataFilterSettings(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
        xGDCVALIDATERELATIONS?: boolean;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityAnalyticalDashboards(params: {
        workspaceId: string;
        objectId: string;
        jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityDashboardPlugins(params: {
        workspaceId: string;
        objectId: string;
        jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
    }, options?: any): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityFilterContexts(params: {
        workspaceId: string;
        objectId: string;
        jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityMetrics(params: {
        workspaceId: string;
        objectId: string;
        jsonApiMetricInDocument: JsonApiMetricInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityVisualizationObjects(params: {
        workspaceId: string;
        objectId: string;
        jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"facts" | "attributes" | "labels" | "metrics" | "datasets" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {{ [key: string]: object; }} [predicate] Composed query parameters used for filtering. \&#39;id\&#39; parameter can be used for all objects. Other parameters are present according to object type (title, description,...). You can specify any object parameter and parameter of related entity up to 2nd level (for example name&#x3D;John&amp;language&#x3D;english,czech&amp;address.city&#x3D;London&amp;father.id&#x3D;123).
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityWorkspaceDataFilters(params: {
        workspaceId: string;
        objectId: string;
        jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
        predicate?: {
            [key: string]: object;
        };
        filter?: string;
        include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    }, options?: any): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
}
//# sourceMappingURL=api.d.ts.map
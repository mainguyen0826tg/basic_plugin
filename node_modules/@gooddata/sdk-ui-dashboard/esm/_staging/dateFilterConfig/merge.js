import { __assign, __read, __rest, __spread } from "tslib";
// (C) 2019-2021 GoodData Corporation
import flow from "lodash/flow";
import uniqBy from "lodash/uniqBy";
import stringify from "json-stable-stringify";
import { sanitizeDateFilterOption } from "./sanitization";
/**
 * Merges presets so that presets that are semantically unique are de-duplicated.
 * @param projectPresets
 * @param dashboardPresets
 */
var mergePresets = function (projectPresets, dashboardPresets) {
    var merged = __spread((projectPresets || []), (dashboardPresets || [])).map(sanitizeDateFilterOption);
    return uniqBy(merged, stringify);
};
var addPresets = function (dashboardConfig) { return function (projectConfig) {
    var _a, _b, _c, _d, _e, _f;
    if (!dashboardConfig.addPresets) {
        return projectConfig;
    }
    var absolutePresets = mergePresets((_a = projectConfig === null || projectConfig === void 0 ? void 0 : projectConfig.absolutePresets) !== null && _a !== void 0 ? _a : [], (_c = (_b = dashboardConfig.addPresets) === null || _b === void 0 ? void 0 : _b.absolutePresets) !== null && _c !== void 0 ? _c : []);
    var relativePresets = mergePresets((_d = projectConfig === null || projectConfig === void 0 ? void 0 : projectConfig.relativePresets) !== null && _d !== void 0 ? _d : [], (_f = (_e = dashboardConfig.addPresets) === null || _e === void 0 ? void 0 : _e.relativePresets) !== null && _f !== void 0 ? _f : []);
    return __assign(__assign(__assign({}, projectConfig), (absolutePresets.length ? { absolutePresets: absolutePresets } : null)), (relativePresets.length ? { relativePresets: relativePresets } : null));
}; };
var hideNonArrayOptionType = function (key) {
    return function (dashboardConfig) {
        return function (projectConfig) {
            var _a;
            var _b;
            var configKey = projectConfig[key];
            if (!configKey) {
                return projectConfig;
            }
            if (!configKey.visible || !dashboardConfig.hideOptions) {
                return projectConfig;
            }
            return ((_b = dashboardConfig.hideOptions) === null || _b === void 0 ? void 0 : _b.includes(configKey.localIdentifier)) ? __assign(__assign({}, projectConfig), (_a = {}, _a[key] = __assign(__assign({}, projectConfig[key]), { visible: false }), _a)) : projectConfig;
        };
    };
};
var hideAllTime = hideNonArrayOptionType("allTime");
var hideAbsoluteForm = hideNonArrayOptionType("absoluteForm");
var hideRelativeForm = hideNonArrayOptionType("relativeForm");
var shouldHideRelativePreset = function (preset, dashboardConfig) {
    var hideForGranularity = dashboardConfig.hideGranularities && dashboardConfig.hideGranularities.includes(preset.granularity);
    var hideForId = dashboardConfig.hideOptions && dashboardConfig.hideOptions.includes(preset.localIdentifier);
    return hideForGranularity || hideForId || false;
};
var hideAbsolutePresets = function (dashboardConfig) { return function (projectConfig) {
    if (!projectConfig.absolutePresets ||
        !projectConfig.absolutePresets.length ||
        !dashboardConfig.hideOptions) {
        return projectConfig;
    }
    var absolutePresets = projectConfig.absolutePresets.map(function (preset) {
        var _a;
        return ((_a = dashboardConfig.hideOptions) === null || _a === void 0 ? void 0 : _a.includes(preset.localIdentifier)) ? __assign(__assign({}, preset), { visible: false }) : preset;
    });
    return __assign(__assign({}, projectConfig), { absolutePresets: absolutePresets });
}; };
var hideRelativePresets = function (dashboardConfig) { return function (projectConfig) {
    var canDashboardConfigHideRelativePreset = dashboardConfig.hideOptions || dashboardConfig.hideGranularities;
    if (!projectConfig.relativePresets ||
        !projectConfig.relativePresets.length ||
        !canDashboardConfigHideRelativePreset) {
        return projectConfig;
    }
    var relativePresets = projectConfig.relativePresets.map(function (preset) {
        return shouldHideRelativePreset(preset, dashboardConfig)
            ? __assign(__assign({}, preset), { visible: false }) : preset;
    });
    return __assign(__assign({}, projectConfig), { relativePresets: relativePresets });
}; };
var hideRelativeFormGranularities = function (dashboardConfig) { return function (projectConfig) {
    if (!projectConfig.relativeForm ||
        !projectConfig.relativeForm.visible ||
        !dashboardConfig.hideGranularities) {
        return projectConfig;
    }
    var granularities = projectConfig.relativeForm.availableGranularities.filter(function (granularity) { var _a, _b; return !((_b = (_a = dashboardConfig.hideGranularities) === null || _a === void 0 ? void 0 : _a.includes(granularity)) !== null && _b !== void 0 ? _b : false); });
    var relativeForm = projectConfig.relativeForm, projectConfigWithoutRelativeForm = __rest(projectConfig, ["relativeForm"]);
    return granularities.length > 0
        ? __assign(__assign({}, projectConfig), { relativeForm: __assign(__assign({}, relativeForm), { availableGranularities: granularities }) }) : projectConfigWithoutRelativeForm;
}; };
/**
 * Merges the date filter config with the dashboard-level overrides. The overrides may hide some presets
 * or add custom presets. This function addresses all that and returns the final merged Date Filter Config.
 *
 * @param config - date filter config
 * @param dashboardOverrides - dashboard-level overrides.
 */
export function mergeDateFilterConfigs(config, dashboardOverrides) {
    var pipeline = flow(addPresets(dashboardOverrides), hideAllTime(dashboardOverrides), hideAbsoluteForm(dashboardOverrides), hideRelativeForm(dashboardOverrides), hideRelativeFormGranularities(dashboardOverrides), hideAbsolutePresets(dashboardOverrides), hideRelativePresets(dashboardOverrides));
    return pipeline(config);
}
//# sourceMappingURL=merge.js.map
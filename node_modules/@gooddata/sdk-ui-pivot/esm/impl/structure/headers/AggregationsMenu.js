import { __extends } from "tslib";
// (C) 2019 GoodData Corporation
import cx from "classnames";
import React from "react";
import noop from "lodash/noop";
import { attributeDescriptorLocalId } from "@gooddata/sdk-backend-spi";
import { isMeasureValueFilter, measureValueFilterCondition, isRankingFilter, } from "@gooddata/sdk-model";
import { Bubble, BubbleHoverTrigger, Header, Icon, Item, ItemsWrapper, Menu, } from "@gooddata/sdk-ui-kit";
import { useTheme } from "@gooddata/sdk-ui-theme-provider";
import menuHelper from "./aggregationsMenuHelper";
import AggregationsSubMenu from "./AggregationsSubMenu";
import { isScopeCol, isSeriesCol, isRootCol, isSliceCol } from "../tableDescriptorTypes";
/*
 * TODO: same thing is in sdk-ui-ext .. but pivot must not depend on it. we may be in need of some lower-level
 *  project on which both of filters and ext can depend. perhaps the purpose of the new project would be to provide
 *  thin layer on top of goodstrap (?)
 */
var SHOW_DELAY_DEFAULT = 200;
var HIDE_DELAY_DEFAULT = 0;
var MenuToggler = function () {
    var _a, _b;
    var theme = useTheme();
    return (React.createElement("div", { className: "menu-icon" },
        React.createElement(Icon.BurgerMenu, { color: (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _a === void 0 ? void 0 : _a.complementary) === null || _b === void 0 ? void 0 : _b.c8 })));
};
var AggregationsMenu = /** @class */ (function (_super) {
    __extends(AggregationsMenu, _super);
    function AggregationsMenu() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AggregationsMenu.prototype.render = function () {
        var _a = this.props, intl = _a.intl, colId = _a.colId, getTableDescriptor = _a.getTableDescriptor, isMenuOpened = _a.isMenuOpened, onMenuOpenedChange = _a.onMenuOpenedChange;
        if (!colId) {
            return null;
        }
        // Because of Ag-grid react wrapper does not rerender the component when we pass
        // new gridOptions we need to pull the data manually on each render
        var tableDescriptor = getTableDescriptor();
        if (!tableDescriptor.canTableHaveTotals()) {
            return null;
        }
        var col = tableDescriptor.getCol(colId);
        if (isSliceCol(col) || isRootCol(col)) {
            // aggregation menu should not appear on headers of the slicing columns or on the
            // very to header which describes table grouping
            return null;
        }
        var measures = isSeriesCol(col)
            ? [col.seriesDescriptor.measureDescriptor]
            : tableDescriptor.getMeasures();
        var measureLocalIdentifiers = measures.map(function (m) { return m.measureHeaderItem.localIdentifier; });
        var totalsForHeader = this.getColumnTotals(measureLocalIdentifiers, isScopeCol(col));
        return (React.createElement(Menu, { toggler: React.createElement(MenuToggler, null), togglerWrapperClassName: this.getTogglerClassNames(), opened: isMenuOpened, onOpenedChange: onMenuOpenedChange, openAction: "click", closeOnScroll: true },
            React.createElement(ItemsWrapper, null,
                React.createElement("div", { className: "s-table-header-menu-content" },
                    React.createElement(Header, null, intl.formatMessage({ id: "visualizations.menu.aggregations" })),
                    this.renderMainMenuItems(totalsForHeader, measureLocalIdentifiers, tableDescriptor.getSlicingAttributes())))));
    };
    AggregationsMenu.prototype.getColumnTotals = function (measureLocalIdentifiers, isGroupedHeader) {
        var _a, _b, _c;
        var columnTotals = (_c = (_b = (_a = this.props).getTotals) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : [];
        if (isGroupedHeader) {
            return menuHelper.getTotalsForAttributeHeader(columnTotals, measureLocalIdentifiers);
        }
        return menuHelper.getTotalsForMeasureHeader(columnTotals, measureLocalIdentifiers[0]);
    };
    AggregationsMenu.prototype.getTogglerClassNames = function () {
        var _a = this.props, isMenuButtonVisible = _a.isMenuButtonVisible, isMenuOpened = _a.isMenuOpened;
        return cx("s-table-header-menu", "gd-pivot-table-header-menu", {
            "gd-pivot-table-header-menu--show": isMenuButtonVisible,
            "gd-pivot-table-header-menu--hide": !isMenuButtonVisible,
            "gd-pivot-table-header-menu--open": isMenuOpened,
        });
    };
    AggregationsMenu.prototype.renderMenuItemContent = function (totalType, onClick, isSelected, hasSubMenu, disabled, tooltipMessage) {
        if (hasSubMenu === void 0) { hasSubMenu = false; }
        var intl = this.props.intl;
        var onClickHandler = disabled ? noop : onClick;
        var itemElement = (React.createElement(Item, { checked: isSelected, subMenu: hasSubMenu, disabled: disabled },
            React.createElement("div", { onClick: onClickHandler, className: "gd-aggregation-menu-item-inner s-menu-aggregation-inner" }, intl.formatMessage({
                id: "visualizations.totals.dropdown.title." + totalType,
            }))));
        return disabled ? (React.createElement(BubbleHoverTrigger, { showDelay: SHOW_DELAY_DEFAULT, hideDelay: HIDE_DELAY_DEFAULT },
            itemElement,
            React.createElement(Bubble, { className: "bubble-primary", alignPoints: [{ align: "bc tc" }] }, tooltipMessage))) : (itemElement);
    };
    AggregationsMenu.prototype.getItemClassNames = function (totalType) {
        return cx("gd-aggregation-menu-item", "s-menu-aggregation", "s-menu-aggregation-" + totalType);
    };
    AggregationsMenu.prototype.isTableFilteredByMeasureValue = function () {
        var definition = this.props.getExecutionDefinition();
        // ignore measure value filters without condition, these are not yet specified by the user and are not sent as part of the execution
        return definition.filters.some(function (filter) { return isMeasureValueFilter(filter) && !!measureValueFilterCondition(filter); });
    };
    AggregationsMenu.prototype.isTableFilteredByRankingFilter = function () {
        var definition = this.props.getExecutionDefinition();
        return definition.filters.some(isRankingFilter);
    };
    AggregationsMenu.prototype.renderMainMenuItems = function (columnTotals, measureLocalIdentifiers, rowAttributeDescriptors) {
        var _this = this;
        var _a = this.props, intl = _a.intl, onAggregationSelect = _a.onAggregationSelect, showSubmenu = _a.showSubmenu, availableTotalTypes = _a.availableTotalTypes;
        var firstAttributeIdentifier = attributeDescriptorLocalId(rowAttributeDescriptors[0]);
        var isFilteredByMeasureValue = this.isTableFilteredByMeasureValue();
        var isFilteredByRankingFilter = this.isTableFilteredByRankingFilter();
        return availableTotalTypes.map(function (totalType) {
            var isSelected = menuHelper.isTotalEnabledForAttribute(firstAttributeIdentifier, totalType, columnTotals);
            var attributeDescriptor = rowAttributeDescriptors[0];
            var onClick = function () {
                return _this.props.onAggregationSelect({
                    type: totalType,
                    measureIdentifiers: measureLocalIdentifiers,
                    include: !isSelected,
                    attributeIdentifier: attributeDescriptor.attributeHeader.localIdentifier,
                });
            };
            var itemClassNames = _this.getItemClassNames(totalType);
            var disabled = totalType === "nat" && (isFilteredByMeasureValue || isFilteredByRankingFilter);
            var cause = isFilteredByMeasureValue ? "mvf" : "ranking";
            var tooltipMessage = disabled
                ? intl.formatMessage({ id: "visualizations.totals.dropdown.tooltip.nat.disabled." + cause })
                : undefined;
            var renderSubmenu = !disabled && showSubmenu && rowAttributeDescriptors.length > 0;
            var toggler = _this.renderMenuItemContent(totalType, onClick, isSelected, renderSubmenu, disabled, tooltipMessage);
            return (React.createElement("div", { className: itemClassNames, key: totalType }, renderSubmenu ? (React.createElement(AggregationsSubMenu, { intl: intl, totalType: totalType, rowAttributeDescriptors: rowAttributeDescriptors, columnTotals: columnTotals, measureLocalIdentifiers: measureLocalIdentifiers, onAggregationSelect: onAggregationSelect, toggler: toggler })) : (toggler)));
        });
    };
    return AggregationsMenu;
}(React.Component));
export default AggregationsMenu;
//# sourceMappingURL=AggregationsMenu.js.map
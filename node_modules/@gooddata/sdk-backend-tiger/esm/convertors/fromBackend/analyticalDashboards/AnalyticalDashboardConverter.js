// (C) 2020-2021 GoodData Corporation
import invariant from "ts-invariant";
import { AnalyticalDashboardModelV1, AnalyticalDashboardModelV2, isFilterContextData, } from "@gooddata/api-client-tiger";
import { convertDashboard as convertDashboardV1, convertFilterContextFilters as convertFilterContextFiltersV1, convertFilterContextFromBackend as convertFilterContextFromBackendV1, } from "./v1/AnalyticalDashboardConverter";
import { convertDashboard as convertDashboardV2, convertFilterContextFilters as convertFilterContextFiltersV2, convertFilterContextFromBackend as convertFilterContextFromBackendV2, convertDashboardPlugin as convertDashboardPluginV2, convertDashboardPluginWithLinks as convertDashboardPluginWithLinksV2, } from "./v2/AnalyticalDashboardConverter";
import { idRef } from "@gooddata/sdk-model";
import { isInheritedObject } from "../utils";
export var convertAnalyticalDashboard = function (analyticalDashboard) {
    var _a, _b, _c;
    var attributes = analyticalDashboard.attributes;
    return {
        ref: idRef(analyticalDashboard.id, "analyticalDashboard"),
        uri: analyticalDashboard.links.self,
        identifier: analyticalDashboard.id,
        title: (_a = attributes === null || attributes === void 0 ? void 0 : attributes.title) !== null && _a !== void 0 ? _a : "",
        description: (_b = attributes === null || attributes === void 0 ? void 0 : attributes.description) !== null && _b !== void 0 ? _b : "",
        created: "",
        updated: "",
        tags: (_c = attributes === null || attributes === void 0 ? void 0 : attributes.tags) !== null && _c !== void 0 ? _c : [],
        isLocked: isInheritedObject(analyticalDashboard.id),
        shareStatus: "public",
        isUnderStrictControl: true,
    };
};
export var convertAnalyticalDashboardToListItems = function (analyticalDashboards) {
    return analyticalDashboards.data.map(convertAnalyticalDashboard);
};
export function convertDashboard(analyticalDashboard, filterContext) {
    var content = analyticalDashboard.data.attributes.content;
    if (AnalyticalDashboardModelV1.isAnalyticalDashboard(content)) {
        return convertDashboardV1(analyticalDashboard, filterContext);
    }
    if (AnalyticalDashboardModelV2.isAnalyticalDashboard(content)) {
        return convertDashboardV2(analyticalDashboard, filterContext);
    }
    invariant(false, "Unknown analytical dashboard version");
}
export function convertFilterContextFromBackend(filterContext) {
    var content = filterContext.data.attributes.content;
    if (AnalyticalDashboardModelV1.isFilterContext(content)) {
        return convertFilterContextFromBackendV1(filterContext);
    }
    if (AnalyticalDashboardModelV2.isFilterContext(content)) {
        return convertFilterContextFromBackendV2(filterContext);
    }
    invariant(false, "Unknown filter context version");
}
export function convertDashboardPluginFromBackend(plugin) {
    var content = plugin.data.attributes.content;
    // V1 does not support plugins
    if (AnalyticalDashboardModelV2.isDashboardPlugin(content)) {
        return convertDashboardPluginV2(plugin);
    }
    invariant(false, "Unknown dashboard plugin version");
}
export function convertDashboardPluginWithLinksFromBackend(plugin) {
    var content = plugin.attributes.content;
    // V1 does not support plugins
    if (AnalyticalDashboardModelV2.isDashboardPlugin(content)) {
        return convertDashboardPluginWithLinksV2(plugin);
    }
    invariant(false, "Unknown dashboard plugin version");
}
function convertFilterContextFilters(content) {
    if (AnalyticalDashboardModelV1.isFilterContext(content)) {
        return convertFilterContextFiltersV1(content);
    }
    if (AnalyticalDashboardModelV2.isFilterContext(content)) {
        return convertFilterContextFiltersV2(content);
    }
    invariant(false, "Unknown filter context version");
}
export function getFilterContextFromIncluded(included) {
    var filterContext = included === null || included === void 0 ? void 0 : included.find(isFilterContextData);
    if (!filterContext) {
        return;
    }
    var id = filterContext.id, type = filterContext.type, attributes = filterContext.attributes;
    var _a = attributes, _b = _a.title, title = _b === void 0 ? "" : _b, _c = _a.description, description = _c === void 0 ? "" : _c, content = _a.content;
    return {
        ref: idRef(id, type),
        identifier: id,
        uri: filterContext.links.self,
        title: title,
        description: description,
        filters: convertFilterContextFilters(content),
    };
}
//# sourceMappingURL=AnalyticalDashboardConverter.js.map
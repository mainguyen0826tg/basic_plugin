import { __assign } from "tslib";
import { walkLayout, } from "@gooddata/sdk-backend-spi";
import { idRef } from "@gooddata/sdk-model";
import updateWith from "lodash/updateWith";
import { fixWidgetLegacyElementUris } from "../../fixLegacyElementUris";
import { cloneWithSanitizedIds } from "../../IdSanitization";
import { isInheritedObject } from "../../utils";
function setWidgetRefsInLayout(layout) {
    if (!layout) {
        return;
    }
    var widgetsPaths = [];
    walkLayout(layout, {
        widgetCallback: function (_, widgetPath) { return widgetsPaths.push(widgetPath); },
    });
    return widgetsPaths.reduce(function (layout, widgetPath, index) {
        return updateWith(layout, widgetPath, function (widget) {
            var temporaryWidgetId = widget.insight.identifier + "_widget-" + index;
            var convertedWidget = __assign(__assign({}, widget), { ref: idRef(temporaryWidgetId), uri: temporaryWidgetId, identifier: temporaryWidgetId });
            return fixWidgetLegacyElementUris(convertedWidget);
        });
    }, layout);
}
function getConvertedAnalyticalDashboardContent(analyticalDashboard) {
    return {
        dateFilterConfig: cloneWithSanitizedIds(analyticalDashboard.analyticalDashboard.dateFilterConfig),
        layout: setWidgetRefsInLayout(cloneWithSanitizedIds(analyticalDashboard.analyticalDashboard.layout)),
    };
}
export function convertDashboard(analyticalDashboard, filterContext) {
    var _a = analyticalDashboard.data, id = _a.id, _b = _a.attributes, attributes = _b === void 0 ? {} : _b;
    var _c = attributes.title, title = _c === void 0 ? "" : _c, _d = attributes.description, description = _d === void 0 ? "" : _d, content = attributes.content;
    var _e = getConvertedAnalyticalDashboardContent(content), dateFilterConfig = _e.dateFilterConfig, layout = _e.layout;
    return {
        type: "IDashboard",
        ref: idRef(id, "analyticalDashboard"),
        identifier: id,
        uri: analyticalDashboard.links.self,
        title: title,
        description: description,
        created: "",
        updated: "",
        // TODO: TIGER-HACK: inherited objects must be locked; they are read-only for all
        isLocked: isInheritedObject(id),
        shareStatus: "public",
        isUnderStrictControl: true,
        tags: attributes.tags,
        filterContext: filterContext,
        dateFilterConfig: dateFilterConfig,
        layout: layout,
    };
}
export function convertFilterContextFromBackend(filterContext) {
    var _a = filterContext.data, id = _a.id, type = _a.type, attributes = _a.attributes;
    var _b = attributes, _c = _b.title, title = _c === void 0 ? "" : _c, _d = _b.description, description = _d === void 0 ? "" : _d, content = _b.content;
    return {
        ref: idRef(id, type),
        identifier: id,
        uri: filterContext.links.self,
        title: title,
        description: description,
        filters: convertFilterContextFilters(content),
    };
}
export function convertFilterContextFilters(content) {
    return cloneWithSanitizedIds(content.filterContext.filters);
}
//# sourceMappingURL=AnalyticalDashboardConverter.js.map
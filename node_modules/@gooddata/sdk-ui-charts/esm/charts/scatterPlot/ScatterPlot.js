import { __assign } from "tslib";
// (C) 2007-2018 GoodData Corporation
import React from "react";
import { newBucket } from "@gooddata/sdk-model";
import { BucketNames, useResolveValuesWithPlaceholders, } from "@gooddata/sdk-ui";
import { pointyChartDimensions } from "../_commons/dimensions";
import { CoreScatterPlot } from "./CoreScatterPlot";
import { withChart } from "../_base/withChart";
//
// Internals
//
var scatterPlotDefinition = {
    chartName: "ScatterPlot",
    bucketPropsKeys: ["xAxisMeasure", "yAxisMeasure", "attribute", "filters", "sortBy"],
    bucketsFactory: function (props) {
        return [
            newBucket(BucketNames.MEASURES, props.xAxisMeasure),
            newBucket(BucketNames.SECONDARY_MEASURES, props.yAxisMeasure),
            newBucket(BucketNames.ATTRIBUTE, props.attribute),
        ];
    },
    executionFactory: function (props, buckets) {
        var _a;
        var backend = props.backend, workspace = props.workspace, execConfig = props.execConfig;
        return (_a = backend
            .withTelemetry("ScatterPlot", props)
            .workspace(workspace)
            .execution()
            .forBuckets(buckets, props.filters))
            .withSorting.apply(_a, props.sortBy).withDimensions(pointyChartDimensions)
            .withExecConfig(execConfig);
    },
};
var WrappedScatterPlot = withChart(scatterPlotDefinition)(CoreScatterPlot);
/**
 * [ScatterPlot](http://sdk.gooddata.com/gooddata-ui/docs/scatter_plot_component.html)
 *
 * Scatter plot shows data as points using Cartesian coordinates.
 *
 * Scatter plots typically have a minimum of two measures, one for the X-axis and the other for the Y-axis, and one
 * attribute, which determines the meaning of each data point. Scatter plots are useful for analyzing trends between
 * two measures or for tracking the magnitude of two measures from the same chart.
 *
 * @public
 */
export var ScatterPlot = function (props) {
    var _a = useResolveValuesWithPlaceholders([props.xAxisMeasure, props.yAxisMeasure, props.attribute, props.filters, props.sortBy], props.placeholdersResolutionContext), xAxisMeasure = _a[0], yAxisMeasure = _a[1], attribute = _a[2], filters = _a[3], sortBy = _a[4];
    return (React.createElement(WrappedScatterPlot, __assign({}, props, {
        xAxisMeasure: xAxisMeasure,
        yAxisMeasure: yAxisMeasure,
        attribute: attribute,
        filters: filters,
        sortBy: sortBy,
    })));
};
//# sourceMappingURL=ScatterPlot.js.map
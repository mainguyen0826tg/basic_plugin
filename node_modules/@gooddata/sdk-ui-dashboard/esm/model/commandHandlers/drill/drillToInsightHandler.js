import { __generator } from "tslib";
import { put, select } from "redux-saga/effects";
import { drillToInsightRequested, drillToInsightResolved, } from "../../events/drill";
import { selectInsightByRef } from "../../store/insights/insightsSelectors";
import { addIntersectionFiltersToInsight } from "@gooddata/sdk-ui-ext";
export function drillToInsightHandler(ctx, cmd) {
    var _a, drillDefinition, drillEvent, insight, insightWithDrillsApplied;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = cmd.payload, drillDefinition = _a.drillDefinition, drillEvent = _a.drillEvent;
                return [4 /*yield*/, select(selectInsightByRef(drillDefinition.target))];
            case 1:
                insight = _b.sent();
                return [4 /*yield*/, put(drillToInsightRequested(ctx, insight, drillDefinition, drillEvent, cmd.correlationId))];
            case 2:
                _b.sent();
                insightWithDrillsApplied = addIntersectionFiltersToInsight(insight, drillEvent.drillContext.intersection);
                return [2 /*return*/, drillToInsightResolved(ctx, insightWithDrillsApplied, cmd.payload.drillDefinition, cmd.payload.drillEvent, cmd.correlationId)];
        }
    });
}
//# sourceMappingURL=drillToInsightHandler.js.map
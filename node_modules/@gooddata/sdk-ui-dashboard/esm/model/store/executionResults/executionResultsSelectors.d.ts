import { ObjRef } from "@gooddata/sdk-model";
import { DashboardState } from "../types";
import { IExecutionResultEnvelope } from "./types";
/**
 * @alpha
 */
export declare const selectExecutionResult: (state: DashboardState, id: string | number) => IExecutionResultEnvelope | undefined;
/**
 * @alpha
 */
export declare const selectExecutionResultByRef: (ref: ObjRef) => import("@reduxjs/toolkit").OutputSelector<DashboardState, IExecutionResultEnvelope | undefined, (res: import("@reduxjs/toolkit").Dictionary<IExecutionResultEnvelope>) => IExecutionResultEnvelope | undefined>;
/**
 * @alpha
 */
export declare const selectIsExecutionResultReadyForExportByRef: (ref: ObjRef) => import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: IExecutionResultEnvelope | undefined, res2: import("@gooddata/sdk-backend-spi").IKpiWidget | import("@gooddata/sdk-backend-spi").IInsightWidget | undefined) => boolean>;
/**
 * @alpha
 */
export declare const selectIsExecutionResultExportableToCsvByRef: (ref: ObjRef) => import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: boolean, res2: import("@gooddata/sdk-backend-spi").IWorkspacePermissions, res3: import("@gooddata/sdk-backend-spi").ISettings) => boolean>;
/**
 * @alpha
 */
export declare const selectIsExecutionResultExportableToXlsxByRef: (ref: ObjRef) => import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res1: boolean, res2: import("@gooddata/sdk-backend-spi").IWorkspacePermissions, res3: import("@gooddata/sdk-backend-spi").ISettings) => boolean>;
//# sourceMappingURL=executionResultsSelectors.d.ts.map
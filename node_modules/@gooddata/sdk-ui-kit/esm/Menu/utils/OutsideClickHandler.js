import { __extends } from "tslib";
// (C) 2007-2018 GoodData Corporation
import React, { createRef } from "react";
var OutsideClickHandler = /** @class */ (function (_super) {
    __extends(OutsideClickHandler, _super);
    function OutsideClickHandler() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.wrapperElRef = createRef();
        _this.handleClick = function (e) {
            var _a;
            if (!_this.wrapperElRef.current) {
                // In IE11 the wrapperEl is not initialized for some reason.
                return;
            }
            var target = e.target;
            if (_this.wrapperElRef.current.contains(target) || ((_a = _this.props.toggler) === null || _a === void 0 ? void 0 : _a.contains(target))) {
                return;
            }
            if (_this.props.onOutsideClick) {
                _this.props.onOutsideClick(e);
            }
        };
        _this.addListeners = function () {
            document.addEventListener("mousedown", _this.handleClick, _this.props.useCapture);
        };
        _this.removeListeners = function () {
            document.removeEventListener("mousedown", _this.handleClick, _this.props.useCapture);
        };
        return _this;
    }
    OutsideClickHandler.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.onOutsideClick !== this.props.onOutsideClick ||
            prevProps.useCapture !== this.props.useCapture) {
            this.removeListeners();
            this.addListeners();
        }
    };
    OutsideClickHandler.prototype.componentDidMount = function () {
        this.addListeners();
    };
    OutsideClickHandler.prototype.componentWillUnmount = function () {
        this.removeListeners();
    };
    OutsideClickHandler.prototype.render = function () {
        return React.createElement("div", { ref: this.wrapperElRef }, this.props.children);
    };
    OutsideClickHandler.defaultProps = {
        // Set to true by default so that a `stopPropagation` in the
        // children will not prevent all outside click handlers from firing
        useCapture: true,
    };
    return OutsideClickHandler;
}(React.Component));
export { OutsideClickHandler };
//# sourceMappingURL=OutsideClickHandler.js.map
// (C) 2021 GoodData Corporation
import { __generator } from "tslib";
import { invalidArgumentsProvided } from "../../events/general";
import { selectLayout, selectStash } from "../../store/layout/layoutSelectors";
import { call, put, select } from "redux-saga/effects";
import isEmpty from "lodash/isEmpty";
import { layoutActions } from "../../store/layout";
import { layoutSectionAdded } from "../../events/layout";
import { validateSectionPlacement } from "./validation/layoutValidation";
import { validateAndResolveStashedItems } from "./validation/stashValidation";
import { resolveIndexOfNewItem } from "../../utils/arrayOps";
import { selectInsightsMap } from "../../store/insights/insightsSelectors";
import { batchActions } from "redux-batched-actions";
import { insightsActions } from "../../store/insights";
import { validateAndNormalizeWidgetItems, validateAndResolveItemFilterSettings, } from "./validation/itemValidation";
import { addTemporaryIdentityToWidgets } from "../../utils/dashboardItemUtils";
function validateAndResolveItems(commandCtx) {
    var ctx = commandCtx.ctx, layout = commandCtx.layout, stash = commandCtx.stash, initialItems = commandCtx.initialItems, index = commandCtx.cmd.payload.index;
    if (!validateSectionPlacement(layout, index)) {
        throw invalidArgumentsProvided(ctx, commandCtx.cmd, "Attempting to insert new section at wrong index " + index + ". There are currently " + layout.sections.length + " sections.");
    }
    var stashValidationResult = validateAndResolveStashedItems(stash, initialItems);
    if (!isEmpty(stashValidationResult.missing)) {
        throw invalidArgumentsProvided(ctx, commandCtx.cmd, "Attempting to use non-existing stashes. Identifiers of missing stashes: " + stashValidationResult.missing.join(", "));
    }
    return stashValidationResult;
}
export function addLayoutSectionHandler(ctx, cmd) {
    var _a, initialItems, commandCtx, _b, stashValidationResult, _c, index, initialHeader, autoResolveDateFilterDataset, normalizationResult, itemsToAdd, section;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = cmd.payload.initialItems, initialItems = _a === void 0 ? [] : _a;
                _b = {
                    ctx: ctx,
                    cmd: cmd,
                    initialItems: addTemporaryIdentityToWidgets(initialItems)
                };
                return [4 /*yield*/, select(selectLayout)];
            case 1:
                _b.layout = _d.sent();
                return [4 /*yield*/, select(selectStash)];
            case 2:
                _b.stash = _d.sent();
                return [4 /*yield*/, select(selectInsightsMap)];
            case 3:
                commandCtx = (_b.availableInsights = _d.sent(),
                    _b);
                stashValidationResult = validateAndResolveItems(commandCtx);
                _c = cmd.payload, index = _c.index, initialHeader = _c.initialHeader, autoResolveDateFilterDataset = _c.autoResolveDateFilterDataset;
                return [4 /*yield*/, call(validateAndNormalizeWidgetItems, ctx, stashValidationResult, cmd)];
            case 4:
                normalizationResult = _d.sent();
                return [4 /*yield*/, call(validateAndResolveItemFilterSettings, ctx, cmd, normalizationResult, autoResolveDateFilterDataset)];
            case 5:
                itemsToAdd = _d.sent();
                section = {
                    type: "IDashboardLayoutSection",
                    header: initialHeader,
                    items: itemsToAdd,
                };
                return [4 /*yield*/, put(batchActions([
                        insightsActions.addInsights(normalizationResult.resolvedInsights.loaded),
                        layoutActions.addSection({
                            section: section,
                            usedStashes: stashValidationResult.existing,
                            index: index,
                            undo: {
                                cmd: cmd,
                            },
                        }),
                    ]))];
            case 6:
                _d.sent();
                return [2 /*return*/, layoutSectionAdded(ctx, section, resolveIndexOfNewItem(commandCtx.layout.sections, index), cmd.correlationId)];
        }
    });
}
//# sourceMappingURL=addLayoutSectionHandler.js.map
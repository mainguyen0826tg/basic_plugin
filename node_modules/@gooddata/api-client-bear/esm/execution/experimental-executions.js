import { __assign, __spreadArrays } from "tslib";
// (C) 2007-2021 GoodData Corporation
import SparkMD5 from "spark-md5";
import invariant from "ts-invariant";
import cloneDeep from "lodash/cloneDeep";
import compact from "lodash/compact";
import filter from "lodash/filter";
import first from "lodash/first";
import find from "lodash/find";
import map from "lodash/map";
import merge from "lodash/merge";
import every from "lodash/every";
import isEmpty from "lodash/isEmpty";
import negate from "lodash/negate";
import partial from "lodash/partial";
import flatten from "lodash/flatten";
import set from "lodash/set";
import { getAttributesDisplayForms, GdcVisualizationObject } from "@gooddata/api-model-bear";
import { Rules } from "../utils/rules";
import { sortDefinitions } from "../utils/definitions";
import { getMissingUrisInAttributesMap } from "../utils/attributesMapLoader";
var isAttribute = GdcVisualizationObject.isAttribute;
var isMeasure = GdcVisualizationObject.isMeasure;
var notEmpty = negate(isEmpty);
function findHeaderForMappingFn(mapping, header) {
    return ((mapping.element === header.id || mapping.element === header.uri) && header.measureIndex === undefined);
}
function wrapMeasureIndexesFromMappings(metricMappings, headers) {
    if (metricMappings) {
        metricMappings.forEach(function (mapping) {
            var header = find(headers, partial(findHeaderForMappingFn, mapping));
            if (header) {
                header.measureIndex = mapping.measureIndex;
                header.isPoP = mapping.isPoP;
            }
        });
    }
    return headers;
}
var emptyResult = {
    extendedTabularDataResult: {
        values: [],
        warnings: [],
    },
};
var MAX_TITLE_LENGTH = 1000;
function getMetricTitle(suffix, title) {
    var maxLength = MAX_TITLE_LENGTH - suffix.length;
    if (title && title.length > maxLength) {
        if (title[title.length - 1] === ")") {
            return title.substring(0, maxLength - 2) + "\u2026)" + suffix;
        }
        return title.substring(0, maxLength - 1) + "\u2026" + suffix;
    }
    return "" + title + suffix;
}
var getBaseMetricTitle = partial(getMetricTitle, "");
var CONTRIBUTION_METRIC_FORMAT = "#,##0.00%";
function getPoPDefinition(measure) {
    var _a, _b;
    return (_b = (_a = measure === null || measure === void 0 ? void 0 : measure.definition) === null || _a === void 0 ? void 0 : _a.popMeasureDefinition) !== null && _b !== void 0 ? _b : {};
}
function getAggregation(measure) {
    var _a, _b;
    return ((_b = (_a = getDefinition(measure)) === null || _a === void 0 ? void 0 : _a.aggregation) !== null && _b !== void 0 ? _b : "").toLowerCase();
}
function isEmptyFilter(metricFilter) {
    var _a, _b, _c, _d, _e, _f;
    if (metricFilter === null || metricFilter === void 0 ? void 0 : metricFilter.positiveAttributeFilter) {
        return isEmpty((_a = metricFilter.positiveAttributeFilter) === null || _a === void 0 ? void 0 : _a.in);
    }
    if (metricFilter === null || metricFilter === void 0 ? void 0 : metricFilter.negativeAttributeFilter) {
        return isEmpty((_b = metricFilter.negativeAttributeFilter) === null || _b === void 0 ? void 0 : _b.notIn);
    }
    if (metricFilter === null || metricFilter === void 0 ? void 0 : metricFilter.absoluteDateFilter) {
        return (((_c = metricFilter === null || metricFilter === void 0 ? void 0 : metricFilter.absoluteDateFilter) === null || _c === void 0 ? void 0 : _c.from) === undefined &&
            ((_d = metricFilter === null || metricFilter === void 0 ? void 0 : metricFilter.absoluteDateFilter) === null || _d === void 0 ? void 0 : _d.to) === undefined);
    }
    return (((_e = metricFilter === null || metricFilter === void 0 ? void 0 : metricFilter.relativeDateFilter) === null || _e === void 0 ? void 0 : _e.from) === undefined &&
        ((_f = metricFilter === null || metricFilter === void 0 ? void 0 : metricFilter.relativeDateFilter) === null || _f === void 0 ? void 0 : _f.to) === undefined);
}
function allFiltersEmpty(item) {
    return every(map(getMeasureFilters(item), function (f) { return isEmptyFilter(f); }));
}
function isDerived(measure) {
    var aggregation = getAggregation(measure);
    return aggregation !== "" || !allFiltersEmpty(measure);
}
function getAttrTypeFromMap(dfUri, attributesMap) {
    var _a, _b, _c;
    return (_c = (_b = (_a = attributesMap === null || attributesMap === void 0 ? void 0 : attributesMap[dfUri]) === null || _a === void 0 ? void 0 : _a.attribute) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.type;
}
function getAttrUriFromMap(dfUri, attributesMap) {
    var _a, _b, _c;
    return (_c = (_b = (_a = attributesMap === null || attributesMap === void 0 ? void 0 : attributesMap[dfUri]) === null || _a === void 0 ? void 0 : _a.attribute) === null || _b === void 0 ? void 0 : _b.meta) === null || _c === void 0 ? void 0 : _c.uri;
}
function isAttrFilterNegative(attributeFilter) {
    return (attributeFilter === null || attributeFilter === void 0 ? void 0 : attributeFilter.negativeAttributeFilter) !== undefined;
}
function getAttrFilterElements(attributeFilter) {
    var _a, _b;
    var isNegative = isAttrFilterNegative(attributeFilter);
    var elements = isNegative
        ? (_a = attributeFilter === null || attributeFilter === void 0 ? void 0 : attributeFilter.negativeAttributeFilter) === null || _a === void 0 ? void 0 : _a.notIn : (_b = attributeFilter === null || attributeFilter === void 0 ? void 0 : attributeFilter.positiveAttributeFilter) === null || _b === void 0 ? void 0 : _b.in;
    return elements !== null && elements !== void 0 ? elements : [];
}
function getAttrFilterExpression(measureFilter, attributesMap) {
    var _a, _b;
    var isNegative = !!(measureFilter === null || measureFilter === void 0 ? void 0 : measureFilter.negativeAttributeFilter);
    var detailPath = isNegative ? "negativeAttributeFilter" : "positiveAttributeFilter";
    var attributeUri = getAttrUriFromMap((_b = (_a = measureFilter === null || measureFilter === void 0 ? void 0 : measureFilter[detailPath]) === null || _a === void 0 ? void 0 : _a.displayForm) === null || _b === void 0 ? void 0 : _b.uri, attributesMap);
    var elements = getAttrFilterElements(measureFilter);
    if (isEmpty(elements)) {
        return null;
    }
    var elementsForQuery = map(elements, function (e) { return "[" + e + "]"; });
    var negative = isNegative ? "NOT " : "";
    return "[" + attributeUri + "] " + negative + "IN (" + elementsForQuery.join(",") + ")";
}
function getDateFilterExpression() {
    // measure date filter was never supported
    return "";
}
function getFilterExpression(attributesMap, measureFilter) {
    if (GdcVisualizationObject.isAttributeFilter(measureFilter)) {
        return getAttrFilterExpression(measureFilter, attributesMap);
    }
    return getDateFilterExpression();
}
function getGeneratedMetricExpression(item, attributesMap) {
    var _a, _b;
    var aggregation = getAggregation(item).toUpperCase();
    var objectUri = (_b = (_a = getDefinition(item)) === null || _a === void 0 ? void 0 : _a.item) === null || _b === void 0 ? void 0 : _b.uri;
    var where = filter(map(getMeasureFilters(item), partial(getFilterExpression, attributesMap)), function (e) { return !!e; });
    return [
        "SELECT",
        aggregation ? aggregation + "([" + objectUri + "])" : "[" + objectUri + "]",
        notEmpty.apply(void 0, where) && "WHERE " + where.join(" AND "),
    ]
        .filter(Boolean)
        .join(" ");
}
function getPercentMetricExpression(category, attributesMap, measure) {
    var _a, _b, _c;
    var metricExpressionWithoutFilters = "SELECT [" + ((_b = (_a = getDefinition(measure)) === null || _a === void 0 ? void 0 : _a.item) === null || _b === void 0 ? void 0 : _b.uri) + "]";
    if (isDerived(measure)) {
        metricExpressionWithoutFilters = getGeneratedMetricExpression(set(cloneDeep(measure), ["definition", "measureDefinition", "filters"], []), attributesMap);
    }
    var attributeUri = getAttrUriFromMap((_c = category === null || category === void 0 ? void 0 : category.displayForm) === null || _c === void 0 ? void 0 : _c.uri, attributesMap);
    var whereFilters = filter(map(getMeasureFilters(measure), partial(getFilterExpression, attributesMap)), function (e) { return !!e; });
    var byAllExpression = attributeUri ? " BY ALL [" + attributeUri + "]" : "";
    var whereExpression = notEmpty.apply(void 0, whereFilters) ? " WHERE " + whereFilters.join(" AND ") : "";
    return "SELECT (" + metricExpressionWithoutFilters + whereExpression + ") / (" + metricExpressionWithoutFilters + byAllExpression + whereExpression + ")";
}
function getPoPExpression(attributeUri, metricExpression) {
    return "SELECT " + metricExpression + " FOR PREVIOUS ([" + attributeUri + "])";
}
function getGeneratedMetricHash(title, format, expression) {
    return SparkMD5.hash(expression + "#" + title + "#" + format);
}
function getMeasureType(measure) {
    var aggregation = getAggregation(measure);
    if (aggregation === "") {
        return "metric";
    }
    else if (aggregation === "count") {
        return "attribute";
    }
    return "fact";
}
function getGeneratedMetricIdentifier(item, aggregation, expressionCreator, hasher, attributesMap) {
    var _a, _b, _c;
    var _d = ((_c = (_b = (_a = getDefinition(item)) === null || _a === void 0 ? void 0 : _a.item) === null || _b === void 0 ? void 0 : _b.uri) !== null && _c !== void 0 ? _c : "").split("/"), prjId = _d[3], id = _d[5];
    var identifier = prjId + "_" + id;
    var hash = hasher(expressionCreator(item, attributesMap));
    var hasNoFilters = isEmpty(getMeasureFilters(item));
    var type = getMeasureType(item);
    var prefix = hasNoFilters || allFiltersEmpty(item) ? "" : "_filtered";
    return type + "_" + identifier + ".generated." + hash + prefix + "_" + aggregation;
}
function isDateAttribute(attribute, attributesMap) {
    var _a;
    if (attributesMap === void 0) { attributesMap = {}; }
    return getAttrTypeFromMap((_a = attribute === null || attribute === void 0 ? void 0 : attribute.displayForm) === null || _a === void 0 ? void 0 : _a.uri, attributesMap) !== undefined;
}
function getMeasureSorting(measure, mdObj) {
    var _a, _b, _c, _d;
    var sorting = (_b = (_a = mdObj === null || mdObj === void 0 ? void 0 : mdObj.properties) === null || _a === void 0 ? void 0 : _a.sortItems) !== null && _b !== void 0 ? _b : [];
    var matchedSorting = sorting.find(function (sortItem) {
        var _a, _b, _c;
        var measureSortItem = sortItem === null || sortItem === void 0 ? void 0 : sortItem.measureSortItem;
        if (measureSortItem) {
            // only one item now, we support only 2D data
            var identifier = (_c = (_b = (_a = measureSortItem.locators) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.measureLocatorItem) === null || _c === void 0 ? void 0 : _c.measureIdentifier;
            return identifier === (measure === null || measure === void 0 ? void 0 : measure.localIdentifier);
        }
        return false;
    });
    return (_d = (_c = matchedSorting === null || matchedSorting === void 0 ? void 0 : matchedSorting.measureSortItem) === null || _c === void 0 ? void 0 : _c.direction) !== null && _d !== void 0 ? _d : null;
}
function getCategorySorting(category, mdObj) {
    var _a, _b, _c, _d;
    var sorting = (_b = (_a = mdObj === null || mdObj === void 0 ? void 0 : mdObj.properties) === null || _a === void 0 ? void 0 : _a.sortItems) !== null && _b !== void 0 ? _b : [];
    var matchedSorting = sorting.find(function (sortItem) {
        var attributeSortItem = sortItem === null || sortItem === void 0 ? void 0 : sortItem.attributeSortItem;
        if (attributeSortItem) {
            var identifier = attributeSortItem === null || attributeSortItem === void 0 ? void 0 : attributeSortItem.attributeIdentifier;
            return identifier === (category === null || category === void 0 ? void 0 : category.localIdentifier);
        }
        return false;
    });
    return (_d = (_c = matchedSorting === null || matchedSorting === void 0 ? void 0 : matchedSorting.attributeSortItem) === null || _c === void 0 ? void 0 : _c.direction) !== null && _d !== void 0 ? _d : null;
}
var createPureMetric = function (measure, mdObj, measureIndex) {
    var _a, _b, _c;
    return ({
        element: (_c = (_b = (_a = measure === null || measure === void 0 ? void 0 : measure.definition) === null || _a === void 0 ? void 0 : _a.measureDefinition) === null || _b === void 0 ? void 0 : _b.item) === null || _c === void 0 ? void 0 : _c.uri,
        sort: getMeasureSorting(measure, mdObj),
        meta: { measureIndex: measureIndex },
    });
};
function createDerivedMetric(measure, mdObj, measureIndex, attributesMap) {
    var format = measure.format;
    var sort = getMeasureSorting(measure, mdObj);
    var title = getBaseMetricTitle(measure.title);
    var hasher = partial(getGeneratedMetricHash, title, format);
    var aggregation = getAggregation(measure);
    var element = getGeneratedMetricIdentifier(measure, aggregation.length ? aggregation : "base", getGeneratedMetricExpression, hasher, attributesMap);
    var definition = {
        metricDefinition: {
            identifier: element,
            expression: getGeneratedMetricExpression(measure, attributesMap),
            title: title,
            format: format,
        },
    };
    return {
        element: element,
        definition: definition,
        sort: sort,
        meta: {
            measureIndex: measureIndex,
        },
    };
}
function createContributionMetric(measure, mdObj, measureIndex, attributesMap) {
    var attribute = first(getAttributes(mdObj));
    var getMetricExpression = partial(getPercentMetricExpression, attribute, attributesMap);
    var title = getBaseMetricTitle(measure === null || measure === void 0 ? void 0 : measure.title);
    var hasher = partial(getGeneratedMetricHash, title, CONTRIBUTION_METRIC_FORMAT);
    var identifier = getGeneratedMetricIdentifier(measure, "percent", getMetricExpression, hasher, attributesMap);
    return {
        element: identifier,
        definition: {
            metricDefinition: {
                identifier: identifier,
                expression: getMetricExpression(measure),
                title: title,
                format: CONTRIBUTION_METRIC_FORMAT,
            },
        },
        sort: getMeasureSorting(measure, mdObj),
        meta: {
            measureIndex: measureIndex,
        },
    };
}
function getOriginalMeasureForPoP(popMeasure, mdObj) {
    return getMeasures(mdObj).find(function (measure) { var _a; return (measure === null || measure === void 0 ? void 0 : measure.localIdentifier) === ((_a = getPoPDefinition(popMeasure)) === null || _a === void 0 ? void 0 : _a.measureIdentifier); });
}
function createPoPMetric(popMeasure, mdObj, measureIndex, attributesMap) {
    var _a, _b, _c, _d, _e;
    var title = getBaseMetricTitle(popMeasure === null || popMeasure === void 0 ? void 0 : popMeasure.title);
    var format = popMeasure === null || popMeasure === void 0 ? void 0 : popMeasure.format;
    var hasher = partial(getGeneratedMetricHash, title, format);
    var attributeUri = (_c = (_b = (_a = popMeasure === null || popMeasure === void 0 ? void 0 : popMeasure.definition) === null || _a === void 0 ? void 0 : _a.popMeasureDefinition) === null || _b === void 0 ? void 0 : _b.popAttribute) === null || _c === void 0 ? void 0 : _c.uri;
    var originalMeasure = getOriginalMeasureForPoP(popMeasure, mdObj);
    var originalMeasureExpression = "[" + ((_e = (_d = getDefinition(originalMeasure)) === null || _d === void 0 ? void 0 : _d.item) === null || _e === void 0 ? void 0 : _e.uri) + "]";
    var metricExpression = getPoPExpression(attributeUri, originalMeasureExpression);
    if (isDerived(originalMeasure)) {
        var generated = createDerivedMetric(originalMeasure, mdObj, measureIndex, attributesMap);
        var generatedMeasureExpression = "(" + generated.definition.metricDefinition.expression + ")";
        metricExpression = getPoPExpression(attributeUri, generatedMeasureExpression);
    }
    var identifier = getGeneratedMetricIdentifier(originalMeasure, "pop", function () { return metricExpression; }, hasher, attributesMap);
    return {
        element: identifier,
        definition: {
            metricDefinition: {
                identifier: identifier,
                expression: metricExpression,
                title: title,
                format: format,
            },
        },
        sort: getMeasureSorting(popMeasure, mdObj),
        meta: {
            measureIndex: measureIndex,
            isPoP: true,
        },
    };
}
function createContributionPoPMetric(popMeasure, mdObj, measureIndex, attributesMap) {
    var _a, _b, _c;
    var attributeUri = (_c = (_b = (_a = popMeasure === null || popMeasure === void 0 ? void 0 : popMeasure.definition) === null || _a === void 0 ? void 0 : _a.popMeasureDefinition) === null || _b === void 0 ? void 0 : _b.popAttribute) === null || _c === void 0 ? void 0 : _c.uri;
    var originalMeasure = getOriginalMeasureForPoP(popMeasure, mdObj);
    var generated = createContributionMetric(originalMeasure, mdObj, measureIndex, attributesMap);
    var title = getBaseMetricTitle(popMeasure === null || popMeasure === void 0 ? void 0 : popMeasure.title);
    var format = CONTRIBUTION_METRIC_FORMAT;
    var hasher = partial(getGeneratedMetricHash, title, format);
    var generatedMeasureExpression = "(" + generated.definition.metricDefinition.expression + ")";
    var metricExpression = getPoPExpression(attributeUri, generatedMeasureExpression);
    var identifier = getGeneratedMetricIdentifier(originalMeasure, "pop", function () { return metricExpression; }, hasher, attributesMap);
    return {
        element: identifier,
        definition: {
            metricDefinition: {
                identifier: identifier,
                expression: metricExpression,
                title: title,
                format: format,
            },
        },
        sort: getMeasureSorting(),
        meta: {
            measureIndex: measureIndex,
            isPoP: true,
        },
    };
}
function categoryToElement(attributesMap, mdObj, category) {
    var _a;
    var element = getAttrUriFromMap((_a = category === null || category === void 0 ? void 0 : category.displayForm) === null || _a === void 0 ? void 0 : _a.uri, attributesMap);
    return {
        element: element,
        sort: getCategorySorting(category, mdObj),
    };
}
function isPoP(_a) {
    var definition = _a.definition;
    return (definition === null || definition === void 0 ? void 0 : definition.popMeasureDefinition) !== undefined;
}
function isContribution(_a) {
    var _b;
    var definition = _a.definition;
    return (_b = definition === null || definition === void 0 ? void 0 : definition.measureDefinition) === null || _b === void 0 ? void 0 : _b.computeRatio;
}
function isPoPContribution(popMeasure, mdObj) {
    if (isPoP(popMeasure)) {
        var originalMeasure = getOriginalMeasureForPoP(popMeasure, mdObj);
        return isContribution(originalMeasure);
    }
    return false;
}
function isCalculatedMeasure(_a) {
    var _b;
    var definition = _a.definition;
    return ((_b = definition === null || definition === void 0 ? void 0 : definition.measureDefinition) === null || _b === void 0 ? void 0 : _b.aggregation) === undefined;
}
var rules = new Rules();
rules.addRule([isPoPContribution], createContributionPoPMetric);
rules.addRule([isPoP], createPoPMetric);
rules.addRule([isContribution], createContributionMetric);
rules.addRule([isDerived], createDerivedMetric);
rules.addRule([isCalculatedMeasure], createPureMetric);
function getMetricFactory(measure, mdObj) {
    var factory = rules.match(measure, mdObj);
    invariant(factory, "Unknown metric factory for: " + measure);
    return factory;
}
function getExecutionDefinitionsAndColumns(mdObj, options, attributesMap) {
    var measures = getMeasures(mdObj);
    var attributes = getAttributes(mdObj);
    var metrics = flatten(map(measures, function (measure, index) {
        return getMetricFactory(measure, mdObj)(measure, mdObj, index, attributesMap);
    }));
    if (options.removeDateItems) {
        attributes = filter(attributes, function (attribute) { return !isDateAttribute(attribute, attributesMap); });
    }
    attributes = map(attributes, partial(categoryToElement, attributesMap, mdObj));
    var columns = compact(map(__spreadArrays(attributes, metrics), "element"));
    return {
        columns: columns,
        definitions: sortDefinitions(compact(map(metrics, "definition"))),
    };
}
function getBuckets(mdObj) {
    var _a;
    return (_a = mdObj === null || mdObj === void 0 ? void 0 : mdObj.buckets) !== null && _a !== void 0 ? _a : [];
}
function getAttributesInBucket(bucket) {
    return bucket.items.reduce(function (list, bucketItem) {
        if (isAttribute(bucketItem)) {
            list.push(bucketItem.visualizationAttribute);
        }
        return list;
    }, []);
}
function getAttributes(mdObject) {
    var buckets = getBuckets(mdObject);
    return buckets.reduce(function (categoriesList, bucket) { return categoriesList.concat(getAttributesInBucket(bucket)); }, []);
}
function getDefinition(measure) {
    var _a, _b;
    return (_b = (_a = measure === null || measure === void 0 ? void 0 : measure.definition) === null || _a === void 0 ? void 0 : _a.measureDefinition) !== null && _b !== void 0 ? _b : {};
}
function getMeasuresInBucket(bucket) {
    return bucket.items.reduce(function (list, bucketItem) {
        if (isMeasure(bucketItem)) {
            list.push(bucketItem.measure);
        }
        return list;
    }, []);
}
function getMeasures(mdObject) {
    var buckets = getBuckets(mdObject);
    return buckets.reduce(function (measuresList, bucket) { return measuresList.concat(getMeasuresInBucket(bucket)); }, []);
}
function getMeasureFilters(measure) {
    var _a, _b;
    return (_b = (_a = getDefinition(measure)) === null || _a === void 0 ? void 0 : _a.filters) !== null && _b !== void 0 ? _b : [];
}
/**
 * Module for execution on experimental execution resource
 *
 * @class execution
 * @module execution
 * @deprecated The module is in maintenance mode only (just the the compilation issues are being fixed when
 *      referenced utilities and interfaces are being changed) and is not being extended when AFM executor
 *      have new functionality added.
 */
var ExperimentalExecutionsModule = /** @class */ (function () {
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    function ExperimentalExecutionsModule(xhr, loadAttributesMap) {
        this.xhr = xhr;
        this.loadAttributesMap = loadAttributesMap;
    }
    /**
     * For the given projectId it returns table structure with the given
     * elements in column headers.
     *
     * @method getData
     * @param {String} projectId - GD project identifier
     * @param {Array} columns - An array of attribute or metric identifiers.
     * @param {Object} executionConfiguration - Execution configuration - can contain for example
     *                 property "where" containing query-like filters
     *                 property "orderBy" contains array of sorted properties to order in form
     *                      [{column: 'identifier', direction: 'asc|desc'}]
     * @param {Object} settings - Supports additional settings accepted by the underlying
     *                             xhr.ajax() calls
     *
     * @return {Object} Structure with `headers` and `rawData` keys filled with values from execution.
     */
    ExperimentalExecutionsModule.prototype.getData = function (projectId, columns, executionConfiguration, settings) {
        var _this = this;
        if (executionConfiguration === void 0) { executionConfiguration = {}; }
        if (settings === void 0) { settings = {}; }
        if (process.env.NODE_ENV !== "test") {
            // eslint-disable-next-line no-console
            console.warn("ExperimentalExecutionsModule is deprecated and is no longer being maintained. " +
                "Please migrate to the ExecuteAfmModule.");
        }
        var executedReport = {
            isLoaded: false,
        };
        // Create request and result structures
        var request = {
            execution: { columns: columns },
        };
        // enrich configuration with supported properties such as
        // where clause with query-like filters
        ["where", "orderBy", "definitions"].forEach(function (property) {
            if (executionConfiguration[property]) {
                request.execution[property] = executionConfiguration[property];
            }
        });
        // Execute request
        return this.xhr
            .post("/gdc/internal/projects/" + projectId + "/experimental/executions", __assign(__assign({}, settings), { body: JSON.stringify(request) }))
            .then(function (r) { return r.getData(); })
            .then(function (response) {
            var _a, _b;
            executedReport.headers = wrapMeasureIndexesFromMappings(executionConfiguration === null || executionConfiguration === void 0 ? void 0 : executionConfiguration.metricMappings, (_b = (_a = response === null || response === void 0 ? void 0 : response.executionResult) === null || _a === void 0 ? void 0 : _a.headers) !== null && _b !== void 0 ? _b : []);
            // Start polling on url returned in the executionResult for tabularData
            return _this.loadExtendedDataResults(response.executionResult.extendedTabularDataResult, settings);
        })
            .then(function (r) {
            var _a, _b, _c, _d;
            var result = r.result, status = r.status;
            return __assign(__assign({}, executedReport), { rawData: (_b = (_a = result === null || result === void 0 ? void 0 : result.extendedTabularDataResult) === null || _a === void 0 ? void 0 : _a.values) !== null && _b !== void 0 ? _b : [], warnings: (_d = (_c = result === null || result === void 0 ? void 0 : result.extendedTabularDataResult) === null || _c === void 0 ? void 0 : _c.warnings) !== null && _d !== void 0 ? _d : [], isLoaded: true, isEmpty: status === 204 });
        });
    };
    ExperimentalExecutionsModule.prototype.mdToExecutionDefinitionsAndColumns = function (projectId, mdObj, options) {
        if (options === void 0) { options = {}; }
        var allDfUris = getAttributesDisplayForms(mdObj);
        var attributesMapPromise = this.getAttributesMap(options, allDfUris, projectId);
        return attributesMapPromise.then(function (attributesMap) {
            return getExecutionDefinitionsAndColumns(mdObj, options, attributesMap);
        });
    };
    ExperimentalExecutionsModule.prototype.getAttributesMap = function (options, displayFormUris, projectId) {
        var _a;
        if (options === void 0) { options = {}; }
        var attributesMap = (_a = options.attributesMap) !== null && _a !== void 0 ? _a : {};
        var missingUris = getMissingUrisInAttributesMap(displayFormUris, attributesMap);
        return this.loadAttributesMap(projectId, missingUris).then(function (result) {
            return __assign(__assign({}, attributesMap), result);
        });
    };
    ExperimentalExecutionsModule.prototype.loadExtendedDataResults = function (uri, settings, prevResult) {
        var _this = this;
        if (prevResult === void 0) { prevResult = emptyResult; }
        return new Promise(function (resolve, reject) {
            _this.xhr
                .ajax(uri, settings)
                .then(function (r) {
                var response = r.response;
                if (response.status === 204) {
                    return {
                        status: response.status,
                        result: "",
                    };
                }
                return {
                    status: response.status,
                    result: r.getData(),
                };
            })
                .then(function (_a) {
                var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                var status = _a.status, result = _a.result;
                var values = __spreadArrays(((_c = (_b = prevResult === null || prevResult === void 0 ? void 0 : prevResult.extendedTabularDataResult) === null || _b === void 0 ? void 0 : _b.values) !== null && _c !== void 0 ? _c : []), ((_e = (_d = result === null || result === void 0 ? void 0 : result.extendedTabularDataResult) === null || _d === void 0 ? void 0 : _d.values) !== null && _e !== void 0 ? _e : []));
                var warnings = __spreadArrays(((_g = (_f = prevResult === null || prevResult === void 0 ? void 0 : prevResult.extendedTabularDataResult) === null || _f === void 0 ? void 0 : _f.warnings) !== null && _g !== void 0 ? _g : []), ((_j = (_h = result === null || result === void 0 ? void 0 : result.extendedTabularDataResult) === null || _h === void 0 ? void 0 : _h.warnings) !== null && _j !== void 0 ? _j : []));
                var updatedResult = merge({}, prevResult, {
                    extendedTabularDataResult: {
                        values: values,
                        warnings: warnings,
                    },
                });
                var nextUri = (_l = (_k = result === null || result === void 0 ? void 0 : result.extendedTabularDataResult) === null || _k === void 0 ? void 0 : _k.paging) === null || _l === void 0 ? void 0 : _l.next;
                if (nextUri) {
                    resolve(_this.loadExtendedDataResults(nextUri, settings, updatedResult));
                }
                else {
                    resolve({ status: status, result: updatedResult });
                }
            }, reject);
        });
    };
    return ExperimentalExecutionsModule;
}());
export { ExperimentalExecutionsModule };
//# sourceMappingURL=experimental-executions.js.map
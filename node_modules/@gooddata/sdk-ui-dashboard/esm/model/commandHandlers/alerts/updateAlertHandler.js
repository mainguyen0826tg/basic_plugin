import { __generator } from "tslib";
import { call, put } from "redux-saga/effects";
import { objRefToString } from "@gooddata/sdk-model";
import { alertUpdated } from "../../events/alerts";
import { alertsActions } from "../../store/alerts";
function updateAlert(ctx, alert) {
    var backend = ctx.backend, workspace = ctx.workspace;
    return backend.workspace(workspace).dashboards().updateWidgetAlert(alert);
}
export function updateAlertHandler(ctx, cmd) {
    var alert;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, call(updateAlert, ctx, cmd.payload.alert)];
            case 1:
                alert = _a.sent();
                return [4 /*yield*/, put(alertsActions.updateAlert({
                        changes: cmd.payload.alert,
                        id: objRefToString(cmd.payload.alert.ref),
                    }))];
            case 2:
                _a.sent();
                return [2 /*return*/, alertUpdated(ctx, alert, cmd.correlationId)];
        }
    });
}
//# sourceMappingURL=updateAlertHandler.js.map
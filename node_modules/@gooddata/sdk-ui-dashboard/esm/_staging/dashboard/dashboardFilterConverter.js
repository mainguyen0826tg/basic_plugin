// (C) 2021 GoodData Corporation
import { absoluteDateFilterValues, filterAttributeElements, filterObjRef, idRef, isNegativeAttributeFilter, isRelativeDateFilter, newNegativeAttributeFilter, newPositiveAttributeFilter, relativeDateFilterValues, } from "@gooddata/sdk-model";
import { DateFilterHelpers } from "@gooddata/sdk-ui-filters";
/**
 * Converts {@link IDashboardAttributeFilter} to {@link IAttributeFilter}.
 *
 * @internal
 * @param dashboardFilter - filter to convert
 * @returns converted filter
 */
export function dashboardAttributeFilterToAttributeFilter(dashboardFilter) {
    var _a = dashboardFilter.attributeFilter, attributeElements = _a.attributeElements, displayForm = _a.displayForm, negativeSelection = _a.negativeSelection;
    if (negativeSelection) {
        return newNegativeAttributeFilter(displayForm, attributeElements);
    }
    else {
        return newPositiveAttributeFilter(displayForm, attributeElements);
    }
}
/**
 * Converts {@link IAttributeFilter} to {@link IDashboardAttributeFilter}.
 *
 * @internal
 * @param filter - filter to convert
 * @param localIdentifier - localIdentifier of the filter
 * @returns converted filter
 */
export function attributeFilterToDashboardAttributeFilter(filter, localIdentifier) {
    var attributeElements = filterAttributeElements(filter);
    var displayForm = filterObjRef(filter);
    return {
        attributeFilter: {
            attributeElements: attributeElements,
            displayForm: displayForm,
            negativeSelection: isNegativeAttributeFilter(filter),
            localIdentifier: localIdentifier,
        },
    };
}
/**
 * Converts {@link DateFilterOption} to {@link IDashboardDateFilter} or undefined.
 *
 * @param dateFilterOption - date filter option to convert
 * @param excludeCurrentPeriod - whether or not to exclude the current period
 * @returns converted filter or undefined for All time filter
 */
export function dateFilterOptionToDashboardDateFilter(dateFilterOption, excludeCurrentPeriod) {
    var tempDateDatasetId = idRef("TEMP");
    var afmFilter = DateFilterHelpers.mapOptionToAfm(dateFilterOption, tempDateDatasetId, excludeCurrentPeriod);
    if (!afmFilter) {
        return undefined;
    }
    if (isRelativeDateFilter(afmFilter)) {
        var _a = relativeDateFilterValues(afmFilter), from = _a.from, to = _a.to, granularity = _a.granularity;
        return {
            dateFilter: {
                type: "relative",
                granularity: granularity,
                from: from,
                to: to,
            },
        };
    }
    else {
        var _b = absoluteDateFilterValues(afmFilter), from = _b.from, to = _b.to;
        return {
            dateFilter: {
                type: "absolute",
                granularity: "GDC.time.date",
                from: from,
                to: to,
            },
        };
    }
}
//# sourceMappingURL=dashboardFilterConverter.js.map
import { __awaiter, __generator } from "tslib";
// (C) 2021 GoodData Corporation
import { validatePluginUrlIsSane } from "@gooddata/sdk-backend-base";
var SecuritySettingsService = /** @class */ (function () {
    /**
     * Constructs a new SecuritySettingsService
     * @param authCall - call guard to perform API calls through
     * @param scope - URI of the scope. For now only the organization (domain) URI is supported by the backend.
     *  The plan is to support also workspace URI and user profile URI.
     */
    function SecuritySettingsService(authCall, scope) {
        var _this = this;
        this.authCall = authCall;
        this.scope = scope;
        this.isUrlValid = function (url, context) {
            return _this.authCall(function (sdk) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, sdk.xhr
                            .postParsed("/gdc/securitySettings/validate", {
                            body: {
                                validationRequest: {
                                    type: context,
                                    value: url,
                                    scope: this.scope,
                                },
                            },
                        })
                            .then(function (_a) {
                            var validationResponse = _a.validationResponse;
                            return validationResponse.valid;
                        })];
                });
            }); });
        };
        this.isDashboardPluginUrlValid = function (url, workspace) { return __awaiter(_this, void 0, void 0, function () {
            var sanitizationError, setting, hostList, allowedHosts;
            var _this = this;
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        sanitizationError = validatePluginUrlIsSane(url);
                        if (sanitizationError) {
                            // eslint-disable-next-line no-console
                            console.warn("Dashboard plugin URL is not valid: ", sanitizationError);
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.authCall(function (sdk) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    return [2 /*return*/, sdk.project.getConfigItem(workspace, "dashboardPluginHosts")];
                                });
                            }); })];
                    case 1:
                        setting = _c.sent();
                        hostList = (_b = (_a = setting === null || setting === void 0 ? void 0 : setting.settingItem) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : "";
                        allowedHosts = hostList.split(";").map(function (entry) { return entry.trim(); });
                        return [2 /*return*/, allowedHosts.some(function (host) { return url.startsWith(host); })];
                }
            });
        }); };
    }
    return SecuritySettingsService;
}());
export { SecuritySettingsService };
//# sourceMappingURL=securitySettings.js.map
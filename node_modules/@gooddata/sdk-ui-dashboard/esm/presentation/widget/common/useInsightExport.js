import { __assign, __read } from "tslib";
// (C) 2021 GoodData Corporation
import { useCallback, useState } from "react";
import invariant from "ts-invariant";
import { VisualizationTypes } from "@gooddata/sdk-ui";
import { insightVisualizationUrl } from "@gooddata/sdk-model";
import { v4 as uuid } from "uuid";
import { selectSettings, useDashboardSelector, selectIsExecutionResultExportableToCsvByRef, selectIsExecutionResultExportableToXlsxByRef, useDashboardDispatch, dispatchAndWaitFor, exportInsightWidget, } from "../../../model";
import { useExportHandler } from "./useExportHandler";
import { useExportDialogContext } from "../../dashboardContexts";
// TODO: FET-910 this should be handled by the pluggable visualizations, not hardcoded here
function canInsightBeExported(insight) {
    var insightVisUrl = insightVisualizationUrl(insight);
    // currently Headline and its derivatives have the export disabled globally
    var exportDisabledVisualizations = [VisualizationTypes.HEADLINE, VisualizationTypes.XIRR];
    return !exportDisabledVisualizations.some(function (disabled) { return insightVisUrl.includes(disabled); });
}
export var useInsightExport = function (config) {
    var title = config.title, widgetRef = config.widgetRef, insight = config.insight;
    var _a = __read(useState(false), 2), isExporting = _a[0], setIsExporting = _a[1];
    var dispatch = useDashboardDispatch();
    var exportFunction = useCallback(function (configToUse) {
        return dispatchAndWaitFor(dispatch, exportInsightWidget(widgetRef, __assign(__assign({}, configToUse), { format: configToUse.format === "xlsx" ? "xlsx" : "csv" }), uuid())).then(function (result) { return result.payload.resultUri; });
    }, [widgetRef]);
    var isInsightExportable = canInsightBeExported(insight);
    var isExportableToCsv = useDashboardSelector(selectIsExecutionResultExportableToCsvByRef(widgetRef));
    var isExportableToXlsx = useDashboardSelector(selectIsExecutionResultExportableToXlsxByRef(widgetRef));
    var settings = useDashboardSelector(selectSettings);
    var exportHandler = useExportHandler();
    var _b = useExportDialogContext(), openDialog = _b.openDialog, closeDialog = _b.closeDialog;
    var onExportCSV = useCallback(function () {
        setIsExporting(true);
        var exportConfig = {
            format: "csv",
            title: title,
        };
        // if this bombs there is an issue with the logic enabling the buttons
        invariant(exportFunction);
        exportHandler(exportFunction, exportConfig).then(function () { return setIsExporting(false); });
    }, [exportFunction, title]);
    var onExportXLSX = useCallback(function () {
        var _a, _b, _c;
        openDialog({
            onSubmit: function (_a) {
                var includeFilterContext = _a.includeFilterContext, mergeHeaders = _a.mergeHeaders;
                setIsExporting(true);
                // if this bombs there is an issue with the logic enabling the buttons
                invariant(exportFunction);
                closeDialog();
                exportHandler(exportFunction, {
                    format: "xlsx",
                    mergeHeaders: mergeHeaders,
                    includeFilterContext: includeFilterContext,
                    showFilters: includeFilterContext,
                    title: title,
                }).then(function () { return setIsExporting(false); });
            },
            includeFilterContext: Boolean((_a = settings === null || settings === void 0 ? void 0 : settings.activeFiltersByDefault) !== null && _a !== void 0 ? _a : true),
            mergeHeaders: Boolean((_b = settings === null || settings === void 0 ? void 0 : settings.cellMergedByDefault) !== null && _b !== void 0 ? _b : true),
            filterContextVisible: Boolean((_c = settings === null || settings === void 0 ? void 0 : settings.enableActiveFilterContext) !== null && _c !== void 0 ? _c : true),
        });
    }, [settings, title, exportFunction, closeDialog]);
    var exportCSVEnabled = !isExporting && isInsightExportable && isExportableToCsv;
    var exportXLSXEnabled = !isExporting && isInsightExportable && isExportableToXlsx;
    return {
        exportCSVEnabled: exportCSVEnabled,
        exportXLSXEnabled: exportXLSXEnabled,
        onExportCSV: onExportCSV,
        onExportXLSX: onExportXLSX,
    };
};
//# sourceMappingURL=useInsightExport.js.map
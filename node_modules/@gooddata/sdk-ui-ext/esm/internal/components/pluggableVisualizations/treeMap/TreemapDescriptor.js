import { __extends } from "tslib";
import { PluggableTreemap } from "./PluggableTreemap";
import { BigChartDescriptor } from "../BigChartDescriptor";
import { addIntersectionFiltersToInsight, modifyBucketsAttributesForDrillDown, reverseAndTrimIntersection, } from "../drillDownUtil";
var TreemapDescriptor = /** @class */ (function (_super) {
    __extends(TreemapDescriptor, _super);
    function TreemapDescriptor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TreemapDescriptor.prototype.getFactory = function () {
        return function (params) { return new PluggableTreemap(params); };
    };
    TreemapDescriptor.prototype.applyDrillDown = function (source, drillDownContext) {
        var withFilters = this.addFilters(source, drillDownContext.drillDefinition, drillDownContext.event);
        return modifyBucketsAttributesForDrillDown(withFilters, drillDownContext.drillDefinition);
    };
    TreemapDescriptor.prototype.addFilters = function (source, drillConfig, event) {
        var cutIntersection = reverseAndTrimIntersection(drillConfig, event.drillContext.intersection);
        return addIntersectionFiltersToInsight(source, cutIntersection);
    };
    return TreemapDescriptor;
}(BigChartDescriptor));
export { TreemapDescriptor };
//# sourceMappingURL=TreemapDescriptor.js.map
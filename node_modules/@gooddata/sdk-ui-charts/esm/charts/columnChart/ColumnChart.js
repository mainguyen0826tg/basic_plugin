import { __assign, __spreadArrays } from "tslib";
// (C) 2007-2019 GoodData Corporation
import React from "react";
import { applyRatioRule, newBucket, } from "@gooddata/sdk-model";
import { truncate } from "../_commons/truncate";
import { BucketNames, useResolveValuesWithPlaceholders, } from "@gooddata/sdk-ui";
import { stackedChartDimensions } from "../_commons/dimensions";
import { ViewByAttributesLimit } from "../../interfaces";
import { CoreColumnChart } from "./CoreColumnChart";
import { withChart } from "../_base/withChart";
import { sanitizeConfig } from "../_commons/sanitizeStacking";
//
// Internals
//
var columnChartDefinition = {
    chartName: "ColumnChart",
    bucketPropsKeys: ["measures", "viewBy", "stackBy", "filters", "sortBy"],
    bucketsFactory: function (props) {
        var measures = applyRatioRule(props.measures);
        var viewBy = truncate(props.viewBy, ViewByAttributesLimit); // could be one or two attributes
        return [
            newBucket.apply(void 0, __spreadArrays([BucketNames.MEASURES], measures)),
            newBucket.apply(void 0, __spreadArrays([BucketNames.VIEW], viewBy)),
            newBucket(BucketNames.STACK, props.stackBy),
        ];
    },
    executionFactory: function (props, buckets) {
        var _a;
        var backend = props.backend, workspace = props.workspace, execConfig = props.execConfig;
        return (_a = backend
            .withTelemetry("ColumnChart", props)
            .workspace(workspace)
            .execution()
            .forBuckets(buckets, props.filters))
            .withSorting.apply(_a, props.sortBy).withDimensions(stackedChartDimensions)
            .withExecConfig(execConfig);
    },
    propOverridesFactory: function (props, buckets) {
        return {
            config: sanitizeConfig(buckets, props.config),
        };
    },
};
var WrappedColumnChart = withChart(columnChartDefinition)(CoreColumnChart);
/**
 * [ColumnChart](http://sdk.gooddata.com/gooddata-ui/docs/column_chart_component.html)
 *
 * Column chart shows data in vertical columns. Column charts can display one or multiple measures side by side,
 * divided by either attribute values or by a single measure stacked by attribute values.
 *
 * @public
 */
export var ColumnChart = function (props) {
    var _a = useResolveValuesWithPlaceholders([props.measures, props.viewBy, props.stackBy, props.filters, props.sortBy], props.placeholdersResolutionContext), measures = _a[0], viewBy = _a[1], stackBy = _a[2], filters = _a[3], sortBy = _a[4];
    return (React.createElement(WrappedColumnChart, __assign({}, props, {
        measures: measures,
        viewBy: viewBy,
        stackBy: stackBy,
        filters: filters,
        sortBy: sortBy,
    })));
};
//# sourceMappingURL=ColumnChart.js.map
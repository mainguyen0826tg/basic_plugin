import { getMappingHeaderUri } from "@gooddata/sdk-ui";
import { invariant } from "ts-invariant";
/**
 * @deprecated this is linked to deprecated API
 */
function extractIdsFromAttributeElementUri(uri) {
    var _a = uri.match(/obj\/([^/]*)(\/elements\?id=)?(.*)?$/), attributeId = _a[1], _b = _a[3], attributeValueId = _b === void 0 ? null : _b;
    return [attributeId, attributeValueId];
}
/**
 * Given row in an ag-grid table and the table's descriptor, this function will create a drilled row. Drilled
 * row is an array with cols ordered in the same way as they appear in the table. The information about slice
 * columns appear first, followed by values of data columns.
 *
 * The the informationa bout slice column contains both
 *
 * @param row
 * @param tableDescriptor
 */
export function createDrilledRow(row, tableDescriptor) {
    var result = [];
    tableDescriptor.headers.sliceCols.forEach(function (col) {
        var mappingHeader = row.headerItemMap[col.id];
        // if there is no entry for slice column in the row's headerItemMap, then the construction of
        // row data is hosed or table code allowed to click on something that should not be drillable
        invariant(mappingHeader);
        var drillItemUri = getMappingHeaderUri(mappingHeader);
        // if there is no drill item uri, then it means that either headerItemMap does not contain valid item or
        // the pivot table allowed click&drill on something that should not be drillable
        invariant(drillItemUri);
        var maybeId = drillItemUri.startsWith("/gdc")
            ? extractIdsFromAttributeElementUri(drillItemUri)[1]
            : null;
        result.push({
            // Note: this is related to `id` deprecation. The whole `id` thing does not make sense. Code should
            // send the entire URI (== PK of the element) so that the code is backend-agnostic. Doing the check
            // here so that for bear, drill contains the `id` and for other backends code adds the entire uri (PK).
            // with this in place, we don't have to worry about how other backends represent the PK of the element.
            id: maybeId !== null && maybeId !== void 0 ? maybeId : drillItemUri,
            uri: drillItemUri,
            name: row[col.id],
        });
    });
    tableDescriptor.headers.leafDataCols.forEach(function (col) {
        result.push(row[col.id]);
    });
    return result;
}
//# sourceMappingURL=drilledRowFactory.js.map
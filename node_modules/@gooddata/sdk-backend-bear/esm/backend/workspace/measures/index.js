import { __assign, __awaiter, __generator, __spreadArrays } from "tslib";
// (C) 2019-2021 GoodData Corporation
import { GdcMetadata, GdcMetadataObject } from "@gooddata/api-model-bear";
import flow from "lodash/flow";
import map from "lodash/fp/map";
import replace from "lodash/fp/replace";
import uniq from "lodash/fp/uniq";
import { convertMetadataObject, } from "../../../convertors/fromBackend/MetaConverter";
import { convertListedMetric, convertMetricFromBackend, } from "../../../convertors/fromBackend/MetricConverter";
import { convertMetricToBackend } from "../../../convertors/toBackend/MetricConverter";
import { objRefToUri } from "../../../utils/api";
import { getTokenValuesOfType, tokenizeExpression } from "./measureExpressionTokens";
import { convertListedVisualization } from "../../../convertors/fromBackend/VisualizationConverter";
var BearWorkspaceMeasures = /** @class */ (function () {
    function BearWorkspaceMeasures(authCall, workspace) {
        this.authCall = authCall;
        this.workspace = workspace;
    }
    BearWorkspaceMeasures.prototype.getMeasureExpressionTokens = function (ref) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, metricMetadata, expressionTokens, expressionIdentifiers, expressionUris, expressionElementUris, expressionIdentifierUrisPairs, expressionIdentifierUris, allExpressionElementAttributeUris, allExpressionUris, allExpressionWrappedObjects, allExpressionObjects, allExpressionAttributeElements, objectsByUri, objectsByIdentifier, attributeElementsByUri;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(ref, this.workspace, this.authCall)];
                    case 1:
                        uri = _a.sent();
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.xhr.getParsed(uri);
                            })];
                    case 2:
                        metricMetadata = _a.sent();
                        if (!GdcMetadata.isWrappedMetric(metricMetadata)) {
                            throw new Error("To get measure expression tokens, provide the correct measure identifier. Did you provide a measure identifier?");
                        }
                        expressionTokens = tokenizeExpression(metricMetadata.metric.content.expression);
                        expressionIdentifiers = getTokenValuesOfType("identifier", expressionTokens);
                        expressionUris = getTokenValuesOfType("uri", expressionTokens);
                        expressionElementUris = getTokenValuesOfType("element_uri", expressionTokens);
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.getUrisFromIdentifiers(_this.workspace, expressionIdentifiers);
                            })];
                    case 3:
                        expressionIdentifierUrisPairs = _a.sent();
                        expressionIdentifierUris = expressionIdentifierUrisPairs.map(function (pair) { return pair.uri; });
                        allExpressionElementAttributeUris = flow(map(replace(/\/elements\?id=.*/, "")), uniq)(expressionElementUris);
                        allExpressionUris = uniq(__spreadArrays(expressionUris, expressionIdentifierUris, allExpressionElementAttributeUris));
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.getObjects(_this.workspace, allExpressionUris);
                            })];
                    case 4:
                        allExpressionWrappedObjects = _a.sent();
                        allExpressionObjects = allExpressionWrappedObjects.map(GdcMetadataObject.unwrapMetadataObject);
                        return [4 /*yield*/, Promise.all(expressionElementUris.map(function (elementUri) {
                                return _this.authCall(function (sdk) { return sdk.md.getAttributeElementDefaultDisplayFormValue(elementUri); });
                            }))];
                    case 5:
                        allExpressionAttributeElements = _a.sent();
                        objectsByUri = allExpressionObjects.reduce(function (acc, el) {
                            var _a;
                            return __assign(__assign({}, acc), (_a = {}, _a[el.meta.uri] = el, _a));
                        }, {});
                        objectsByIdentifier = allExpressionObjects.reduce(function (acc, el) {
                            var _a;
                            return __assign(__assign({}, acc), (_a = {}, _a[el.meta.identifier] = el, _a));
                        }, {});
                        attributeElementsByUri = allExpressionAttributeElements.reduce(function (acc, el) {
                            var _a;
                            if (!el) {
                                return acc;
                            }
                            return __assign(__assign({}, acc), (_a = {}, _a[el.uri] = el, _a));
                        }, {});
                        return [2 /*return*/, expressionTokens.map(function (token) {
                                if (token.type === "element_uri") {
                                    var element = attributeElementsByUri[token.value];
                                    return __assign({ type: "attributeElement" }, (element
                                        ? {
                                            value: element.title,
                                        }
                                        : {
                                            value: "",
                                            deleted: true,
                                        }));
                                }
                                else if (token.type === "uri" || token.type === "identifier") {
                                    var meta = token.type === "uri"
                                        ? convertMetadataObject(objectsByUri[token.value])
                                        : convertMetadataObject(objectsByIdentifier[token.value]);
                                    return {
                                        type: meta.type,
                                        value: meta.title,
                                        id: meta.id,
                                        ref: meta.ref,
                                    };
                                }
                                return {
                                    type: "text",
                                    value: token.value,
                                };
                            })];
                }
            });
        });
    };
    BearWorkspaceMeasures.prototype.createMeasure = function (measure) {
        return __awaiter(this, void 0, void 0, function () {
            var mdObject;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (sdk) {
                            return sdk.md.createObject(_this.workspace, { metric: convertMetricToBackend(measure) });
                        })];
                    case 1:
                        mdObject = _a.sent();
                        return [2 /*return*/, convertMetricFromBackend(mdObject.metric)];
                }
            });
        });
    };
    BearWorkspaceMeasures.prototype.deleteMeasure = function (ref) {
        return __awaiter(this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(ref, this.workspace, this.authCall)];
                    case 1:
                        uri = _a.sent();
                        return [4 /*yield*/, this.authCall(function (sdk) { return sdk.md.deleteObject(uri); })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BearWorkspaceMeasures.prototype.updateMeasure = function (measure) {
        return __awaiter(this, void 0, void 0, function () {
            var objectId;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        objectId = measure.uri.split("/").slice(-1)[0];
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.updateObject(_this.workspace, objectId, { metric: convertMetricToBackend(measure) });
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, measure];
                }
            });
        });
    };
    BearWorkspaceMeasures.prototype.getMeasureReferencingObjects = function (ref) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(ref, this.workspace, this.authCall)];
                    case 1:
                        uri = _a.sent();
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.getObjectUsedBy(_this.workspace, uri, {
                                    types: ["metric", "visualizationObject"],
                                    nearest: true,
                                });
                            })];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, Promise.resolve({
                                measures: data.filter(function (item) { return item.category === "metric"; }).map(convertListedMetric),
                                insights: data
                                    .filter(function (item) { return item.category === "visualizationObject"; })
                                    .map(convertListedVisualization),
                            })];
                }
            });
        });
    };
    return BearWorkspaceMeasures;
}());
export { BearWorkspaceMeasures };
//# sourceMappingURL=index.js.map
import { __assign, __spreadArrays } from "tslib";
// (C) 2007-2019 GoodData Corporation
import React from "react";
import { applyRatioRule, newBucket, } from "@gooddata/sdk-model";
import { truncate } from "../_commons/truncate";
import { ViewByAttributesLimit } from "../../interfaces";
import { BucketNames, useResolveValuesWithPlaceholders, } from "@gooddata/sdk-ui";
import { stackedChartDimensions } from "../_commons/dimensions";
import { CoreAreaChart } from "./CoreAreaChart";
import isNil from "lodash/isNil";
import { withChart } from "../_base/withChart";
import { sanitizeConfig } from "../_commons/sanitizeStacking";
//
// Internals
//
var areaChartDefinition = {
    chartName: "AreaChart",
    bucketPropsKeys: ["measures", "viewBy", "stackBy", "filters", "sortBy"],
    bucketsFactory: function (props) {
        var _a = getBucketsProps(props), measures = _a.measures, viewBy = _a.viewBy, stackBy = _a.stackBy;
        var sanitizedMeasures = applyRatioRule(measures);
        return [
            newBucket.apply(void 0, __spreadArrays([BucketNames.MEASURES], sanitizedMeasures)),
            newBucket.apply(void 0, __spreadArrays([BucketNames.VIEW], viewBy)),
            newBucket.apply(void 0, __spreadArrays([BucketNames.STACK], stackBy)),
        ];
    },
    executionFactory: function (props, buckets) {
        var _a;
        var backend = props.backend, workspace = props.workspace, execConfig = props.execConfig;
        return (_a = backend
            .withTelemetry("AreaChart", props)
            .workspace(workspace)
            .execution()
            .forBuckets(buckets, props.filters))
            .withSorting.apply(_a, props.sortBy).withDimensions(stackedChartDimensions)
            .withExecConfig(execConfig);
    },
    propOverridesFactory: function (props, buckets) {
        var config = getConfigProps(props);
        return {
            config: sanitizeConfig(buckets, config),
        };
    },
    onBeforePropsConversion: verifyBuckets,
};
function getStackConfiguration(config) {
    if (config === void 0) { config = {}; }
    var stackMeasures = config.stackMeasures, stackMeasuresToPercent = config.stackMeasuresToPercent;
    if (isNil(stackMeasures) && isNil(stackMeasuresToPercent)) {
        return config;
    }
    return __assign(__assign({}, config), { stacking: Boolean(stackMeasuresToPercent) || Boolean(stackMeasures) });
}
export function getBucketsProps(props) {
    var measures = props.measures, stackBy = props.stackBy;
    var viewBy = truncate(props.viewBy, ViewByAttributesLimit);
    if (viewBy.length <= 1) {
        return {
            measures: measures || [],
            viewBy: viewBy,
            stackBy: stackBy ? [stackBy] : [],
        };
    }
    // for case viewBy 2 attributes
    var firstMeasure = measures[0]; // only take first measure
    var firstAttribute = viewBy[0], secondAttribute = viewBy[1]; // only take first two attributes
    return {
        measures: [firstMeasure],
        viewBy: [firstAttribute],
        stackBy: [secondAttribute],
    };
}
export function getConfigProps(props) {
    var viewBy = truncate(props.viewBy, ViewByAttributesLimit);
    if (viewBy.length <= 1) {
        return getStackConfiguration(props.config);
    }
    return __assign(__assign({}, props.config), { stacking: false, stackMeasures: false, stackMeasuresToPercent: false });
}
/**
 * Show warning to SDK user in console log
 * @param props
 */
function verifyBuckets(props) {
    var viewBy = truncate(props.viewBy, ViewByAttributesLimit);
    if (viewBy.length <= 1) {
        return;
    }
    var _a = props.measures, measures = _a === void 0 ? [] : _a, stackBy = props.stackBy;
    if (measures.length > 1 || stackBy) {
        // eslint-disable-next-line no-console
        console.warn("When there are two attributes in viewBy, only first measure is taken and attribute in stackBy is ignored");
    }
}
var WrappedAreaChart = withChart(areaChartDefinition)(CoreAreaChart);
/**
 * [AreaChart](http://sdk.gooddata.com/gooddata-ui/docs/area_chart_component.html)
 *
 * Area chart shows data as an area under a line intersecting dots. It can display either:
 *
 * - multiple measures sliced by a single attribute, as different areas
 * - or a single measure split by one attribute into multiple areas with points intersecting attribute values
 *
 * Areas for multiple measures stack by default. Alternatively, the areas can overlap if `{ stackMeasures: false }`.
 *
 * @remarks See {@link IAreaChartProps} to learn how it is possible to configure the AreaChart
 * @public
 */
export var AreaChart = function (props) {
    var _a = useResolveValuesWithPlaceholders([props.measures, props.viewBy, props.stackBy, props.filters, props.sortBy], props.placeholdersResolutionContext), measures = _a[0], viewBy = _a[1], stackBy = _a[2], filters = _a[3], sortBy = _a[4];
    return (React.createElement(WrappedAreaChart, __assign({}, props, {
        measures: measures,
        viewBy: viewBy,
        stackBy: stackBy,
        filters: filters,
        sortBy: sortBy,
    })));
};
//# sourceMappingURL=AreaChart.js.map
import { DEFAULT_CENTER, DEFAULT_ZOOM, VIEWPORTS, DEFAULT_WORLD_BOUNDS } from "../../constants/geoChart";
export function getViewportOptions(data, config) {
    var _a, _b;
    var center = config === null || config === void 0 ? void 0 : config.center;
    var zoom = (_a = config === null || config === void 0 ? void 0 : config.zoom) !== null && _a !== void 0 ? _a : DEFAULT_ZOOM;
    var area = ((_b = config === null || config === void 0 ? void 0 : config.viewport) !== null && _b !== void 0 ? _b : {}).area;
    // use `center` config if it exists
    if (!center) {
        if (area && VIEWPORTS[area]) {
            return {
                bounds: VIEWPORTS[area]
            };
        }
        else {
            var lngLatBounds = getLngLatBounds(data);
            if (lngLatBounds) {
                return {
                    bounds: [lngLatBounds.northEast, lngLatBounds.southWest]
                };
            }
            return {
                center: DEFAULT_CENTER,
                zoom: zoom
            };
        }
    }
    return {
        center: center,
        zoom: zoom
    };
}
/*
 * @method getLngLatBounds: IGeoLngLatBounds
 * Represents a rectangular geographical area on a map.
 *
 * @example
 *
 * ```js
 * const corner1 = [40.712, -74.227],
 * const corner2 = [40.774, -74.125],
 * const bounds = getLngLatBounds([corner1, corner2]);
 *
 * bounds && map.fitBounds([bounds.northEast, bounds.southWest], { padding: 60 });
 * ```
 */
export function getLngLatBounds(lnglats) {
    if (!lnglats || !lnglats.length) {
        return;
    }
    return lnglats.reduce(extendLngLatBounds, undefined) || DEFAULT_WORLD_BOUNDS;
}
// @method extendLngLatBounds: IGeoLngLatBounds
// Extend the bounds to contain the given point
function extendLngLatBounds(bounds, lnglat) {
    if (!lnglat) {
        return bounds || DEFAULT_WORLD_BOUNDS;
    }
    if (!bounds) {
        return {
            northEast: lnglat,
            southWest: lnglat
        };
    }
    var northEast = bounds.northEast, southWest = bounds.southWest;
    return {
        northEast: {
            lat: Math.max(lnglat.lat, northEast.lat),
            lng: Math.max(lnglat.lng, northEast.lng)
        },
        southWest: {
            lat: Math.min(lnglat.lat, southWest.lat),
            lng: Math.min(lnglat.lng, southWest.lng)
        }
    };
}
//# sourceMappingURL=viewport.js.map
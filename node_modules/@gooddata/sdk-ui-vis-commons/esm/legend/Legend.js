import { __assign, __extends } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React from "react";
import Measure from "react-measure";
import cx from "classnames";
import isEmpty from "lodash/isEmpty";
import { FluidLegend } from "./FluidLegend";
import { StaticLegend } from "./StaticLegend";
import { HeatmapLegend } from "./HeatmapLegend";
import { IntlWrapper, IntlTranslationsProvider } from "@gooddata/sdk-ui";
import { PopUpLegend } from "./PopUpLegend/PopUpLegend";
import { TOP, BOTTOM } from "./PositionTypes";
var HEATMAP_LEGEND_WIDTH_BREAKPOINT = 460;
/**
 * @internal
 */
var Legend = /** @class */ (function (_super) {
    __extends(Legend, _super);
    function Legend() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onItemClick = function (item) {
            _this.props.onItemClick(item);
        };
        _this.getSeries = function () {
            var _a = _this.props, series = _a.series, _b = _a.legendItemsEnabled, legendItemsEnabled = _b === void 0 ? [] : _b, seriesMapper = _a.seriesMapper;
            var seriesWithVisibility = series.map(function (seriesItem) {
                var isVisible = legendItemsEnabled[seriesItem.legendIndex];
                return __assign(__assign({}, seriesItem), { isVisible: isVisible });
            });
            if (seriesMapper) {
                return seriesMapper(seriesWithVisibility);
            }
            return seriesWithVisibility;
        };
        _this.renderPopUpLegend = function () {
            var _a = _this.props, legendLabel = _a.legendLabel, maximumRows = _a.maximumRows, enableBorderRadius = _a.enableBorderRadius, _b = _a.containerId, containerId = _b === void 0 ? "" : _b;
            return (React.createElement(PopUpLegend, { containerId: containerId, series: _this.getSeries(), maxRows: maximumRows, name: legendLabel, enableBorderRadius: enableBorderRadius, onLegendItemClick: _this.onItemClick }));
        };
        _this.renderFluid = function () {
            var enableBorderRadius = _this.props.enableBorderRadius;
            return (React.createElement(Measure, { client: true }, function (_a) {
                var measureRef = _a.measureRef, contentRect = _a.contentRect;
                var usedWidth = contentRect.client && contentRect.client.width
                    ? Math.floor(contentRect.client.width)
                    : 0;
                return (React.createElement("div", { className: "viz-fluid-legend-wrap", ref: measureRef },
                    React.createElement(FluidLegend, { series: _this.getSeries(), enableBorderRadius: enableBorderRadius, onItemClick: _this.onItemClick, containerWidth: usedWidth })));
            }));
        };
        _this.renderStatic = function () {
            var _a = _this.props, position = _a.position, height = _a.height, enableBorderRadius = _a.enableBorderRadius, responsive = _a.responsive, label = _a.legendLabel;
            var classNames = cx("viz-static-legend-wrap", "position-" + position);
            var buttonOrientation = responsive === "autoPositionWithPopup" ? "leftRight" : "upDown";
            var props = {
                containerHeight: 0,
                series: _this.getSeries(),
                onItemClick: _this.onItemClick,
                position: position,
                enableBorderRadius: enableBorderRadius,
                buttonOrientation: buttonOrientation,
                label: label
            };
            return (React.createElement(Measure, { client: true }, function (_a) {
                var measureRef = _a.measureRef, contentRect = _a.contentRect;
                var measuredHeight = contentRect.client && contentRect.client.height
                    ? Math.floor(contentRect.client.height)
                    : 0;
                var usedHeight = height || measuredHeight;
                if (!isEmpty(contentRect.client)) {
                    _this.props.validateOverHeight(contentRect.client);
                }
                return (React.createElement("div", { className: classNames, ref: measureRef },
                    React.createElement(StaticLegend, __assign({}, props, { containerHeight: usedHeight }))));
            }));
        };
        _this.renderHeatmapLegend = function (contentDimensions) {
            var _a = _this.props, locale = _a.locale, format = _a.format, responsive = _a.responsive, position = _a.position, legendLabel = _a.legendLabel;
            var showFluidLegend = _this.props.showFluidLegend;
            var series = _this.getSeries();
            var isFluidResponsive = Boolean(responsive === true && showFluidLegend);
            var isPopupResponsive = (position === TOP || position === BOTTOM) &&
                responsive === "autoPositionWithPopup" &&
                contentDimensions.width &&
                contentDimensions.width < HEATMAP_LEGEND_WIDTH_BREAKPOINT;
            var size = "large";
            if (isFluidResponsive) {
                size = "medium";
            }
            if (isPopupResponsive) {
                size = "small";
            }
            return (React.createElement(IntlWrapper, { locale: locale },
                React.createElement(IntlTranslationsProvider, null, function (props) { return (React.createElement(HeatmapLegend, { title: legendLabel, series: series, format: format, size: size, numericSymbols: props.numericSymbols, position: position })); })));
        };
        return _this;
    }
    Legend.prototype.render = function () {
        var _a = this.props, contentDimensions = _a.contentDimensions, responsive = _a.responsive, heatmapLegend = _a.heatmapLegend, showFluidLegend = _a.showFluidLegend, maximumRows = _a.maximumRows;
        if (heatmapLegend) {
            return this.renderHeatmapLegend(contentDimensions);
        }
        if (responsive === "autoPositionWithPopup" && maximumRows) {
            return this.renderPopUpLegend();
        }
        var isFluidLegend = responsive === true && showFluidLegend;
        if (isFluidLegend) {
            return this.renderFluid();
        }
        return this.renderStatic();
    };
    Legend.defaultProps = {
        responsive: false,
        legendItemsEnabled: [],
        height: 0,
        showFluidLegend: false,
        isLegendOverHeight: false,
        enableBorderRadius: false
    };
    return Legend;
}(React.PureComponent));
export { Legend };
//# sourceMappingURL=Legend.js.map
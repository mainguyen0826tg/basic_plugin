import { __extends } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { Component } from "react";
import { injectIntl } from "react-intl";
import Measure from "react-measure";
import { isGoodDataSdkError, ErrorCodes } from "@gooddata/sdk-ui";
import { isLegacyKpiWithComparison } from "@gooddata/sdk-backend-spi";
import { isAbsoluteDateFilter, isAllTimeDateFilter, isDateFilter } from "@gooddata/sdk-model";
import KpiValue from "./KpiValue";
import KpiPop from "./KpiPop";
import { isDateFilterIrrelevant } from "../utils/filterUtils";
import { getKpiPopLabel } from "./utils/translations";
var KpiContent = /** @class */ (function (_super) {
    __extends(KpiContent, _super);
    function KpiContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KpiContent.prototype.renderPeriodOverPeriod = function (clientWidth, clientHeight) {
        var _a, _b;
        if (this.props.kpi.kpi.comparisonType === "none") {
            return false;
        }
        var _c = this.props, kpiResult = _c.kpiResult, enableCompactSize = _c.enableCompactSize;
        var isDateFilterNotRelevant = isDateFilterIrrelevant(this.props.kpi);
        var isDateFilterAbsolute = this.props.filters.some(isAbsoluteDateFilter);
        var isDateFilterAllTime = this.props.filters.every(function (f) { return !isDateFilter(f) || isAllTimeDateFilter(f); });
        var dateFilter = this.props.filters.find(isDateFilter); // for now we use the first date filter available for this
        var popLabel = getKpiPopLabel(dateFilter, this.props.kpi.kpi.comparisonType, this.props.intl);
        var popDisabled = isDateFilterAllTime || isDateFilterNotRelevant || isDateFilterAbsolute;
        var isSdkError = isGoodDataSdkError(this.props.error);
        var isNoData = isSdkError && this.props.error.message === ErrorCodes.NO_DATA;
        var comparisonMeaning = isLegacyKpiWithComparison(this.props.kpi.kpi)
            ? this.props.kpi.kpi.comparisonDirection
            : undefined;
        return (React.createElement(KpiPop, { disabled: popDisabled, isLoading: this.props.isLoading, currentPeriodValue: (_a = kpiResult === null || kpiResult === void 0 ? void 0 : kpiResult.measureResult) !== null && _a !== void 0 ? _a : null, previousPeriodValue: (_b = kpiResult === null || kpiResult === void 0 ? void 0 : kpiResult.measureForComparisonResult) !== null && _b !== void 0 ? _b : null, previousPeriodName: popLabel, format: kpiResult === null || kpiResult === void 0 ? void 0 : kpiResult.measureFormat, error: !isNoData ? this.props.error : undefined, separators: this.props.separators, meaning: comparisonMeaning, enableCompactSize: enableCompactSize, clientWidth: clientWidth, clientHeight: clientHeight }));
    };
    KpiContent.prototype.renderValue = function (clientHeight) {
        var _a;
        var _b = this.props, kpiResult = _b.kpiResult, isKpiValueClickDisabled = _b.isKpiValueClickDisabled, onKpiValueClick = _b.onKpiValueClick, enableCompactSize = _b.enableCompactSize, kpi = _b.kpi;
        var isSdkError = isGoodDataSdkError(this.props.error);
        var isNoData = isSdkError && this.props.error.message === ErrorCodes.NO_DATA;
        var hasComparison = kpi.kpi.comparisonType !== "none";
        var kpiValue = (React.createElement(KpiValue, { isLoading: this.props.isLoading, error: !isNoData ? this.props.error : undefined, errorHelp: this.props.errorHelp, value: (_a = kpiResult === null || kpiResult === void 0 ? void 0 : kpiResult.measureResult) !== null && _a !== void 0 ? _a : null, format: kpiResult === null || kpiResult === void 0 ? void 0 : kpiResult.measureFormat, separators: this.props.separators, disableKpiDrillUnderline: this.props.isKpiUnderlineHiddenWhenClickable, enableCompactSize: enableCompactSize, clientHeight: clientHeight, hasComparison: hasComparison }));
        if (onKpiValueClick) {
            if (isKpiValueClickDisabled) {
                return React.createElement("span", { className: "kpi-link s-kpi-link-nonclickable" }, kpiValue);
            }
            else {
                return (React.createElement("a", { className: "kpi-link s-kpi-link-clickable", onClick: this.props.onKpiValueClick }, kpiValue));
            }
        }
        return kpiValue;
    };
    KpiContent.prototype.render = function () {
        var _this = this;
        return (React.createElement("div", { className: "gd-kpi-widget-content" },
            React.createElement("div", { className: "visualization-content" },
                React.createElement(Measure, { client: true }, function (_a) {
                    var _b, _c, _d;
                    var measureRef = _a.measureRef, contentRect = _a.contentRect;
                    return (React.createElement("div", { className: "gd-visualization-content", ref: measureRef },
                        React.createElement("div", { className: "headline" },
                            _this.renderValue((_b = contentRect.client) === null || _b === void 0 ? void 0 : _b.height),
                            _this.renderPeriodOverPeriod((_c = contentRect.client) === null || _c === void 0 ? void 0 : _c.width, (_d = contentRect.client) === null || _d === void 0 ? void 0 : _d.height))));
                }))));
    };
    KpiContent.defaultProps = {
        isKpiValueClickDisabled: false,
        filters: [],
        isKpiUnderlineHiddenWhenClickable: false,
    };
    return KpiContent;
}(Component));
export default injectIntl(KpiContent);
//# sourceMappingURL=KpiContent.js.map
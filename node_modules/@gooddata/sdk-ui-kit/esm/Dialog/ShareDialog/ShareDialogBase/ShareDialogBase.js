import { __read, __spread } from "tslib";
// (C) 2021 GoodData Corporation
import React, { useCallback, useMemo, useState } from "react";
import { areObjRefsEqual, uriRef } from "@gooddata/sdk-model";
import { Overlay } from "../../../Overlay";
import { ShareGranteeBase } from "./ShareGranteeBase";
import { AddGranteeBase } from "./AddGranteeBase";
import { notInArrayFilter, GROUP_ALL_ID } from "./utils";
var alignPoints = [{ align: "cc cc" }];
var availableGranteesConst = [
    {
        id: uriRef(GROUP_ALL_ID),
        type: "groupAll",
    },
];
var useShareDialogBase = function (props) {
    var onSubmit = props.onSubmit, grantees = props.grantees;
    var _a = __read(useState("ShareGrantee"), 2), dialogMode = _a[0], setDialogMode = _a[1];
    var _b = __read(useState([]), 2), granteesToAdd = _b[0], setGranteesToAdd = _b[1];
    var _c = __read(useState([]), 2), granteesToDelete = _c[0], setGranteesToDelete = _c[1];
    var onAddGranteeButtonClick = useCallback(function () {
        setDialogMode("AddGrantee");
    }, [setDialogMode]);
    var onAddGranteeBackClick = useCallback(function () {
        setDialogMode("ShareGrantee");
        setGranteesToAdd([]);
    }, [setDialogMode, setGranteesToAdd]);
    var onSharedGranteeDelete = useCallback(function (grantee) {
        setGranteesToDelete(function (state) { return __spread(state, [grantee]); });
    }, [setGranteesToDelete]);
    var onAddedGranteeDelete = useCallback(function (grantee) {
        setGranteesToAdd(function (state) { return state.filter(function (g) { return !areObjRefsEqual(g.id, grantee.id); }); });
    }, [setGranteesToAdd]);
    var onGranteeAdd = useCallback(function (grantee) {
        setGranteesToAdd(function (state) { return __spread(state, [grantee]); });
    }, [setGranteesToAdd]);
    var isShareDialogDirty = useMemo(function () {
        return granteesToDelete.length !== 0;
    }, [granteesToDelete]);
    var isAddDialogDirty = useMemo(function () {
        return granteesToAdd.length !== 0;
    }, [granteesToDelete, granteesToAdd]);
    var onSubmitShareGrantee = useCallback(function () {
        if (!isShareDialogDirty) {
            return;
        }
        onSubmit(granteesToAdd, granteesToDelete);
    }, [granteesToAdd, granteesToDelete, isShareDialogDirty, onSubmit]);
    var onSubmitAddGrantee = useCallback(function () {
        if (!isAddDialogDirty) {
            return;
        }
        onSubmit(granteesToAdd, granteesToDelete);
    }, [granteesToAdd, granteesToDelete, isAddDialogDirty, onSubmit]);
    var filteredGrantees = useMemo(function () {
        return notInArrayFilter(grantees, granteesToDelete);
    }, [grantees, granteesToDelete]);
    var availableGrantees = useMemo(function () {
        return notInArrayFilter(availableGranteesConst, granteesToAdd).filter(function (grantee) {
            var isInGrantees = grantees.some(function (g) {
                return areObjRefsEqual(g.id, grantee.id);
            });
            if (isInGrantees) {
                return granteesToDelete.some(function (gd) { return areObjRefsEqual(gd.id, grantee.id); });
            }
            return true;
        });
    }, [grantees, granteesToDelete, granteesToAdd]);
    return {
        onAddedGranteeDelete: onAddedGranteeDelete,
        onSharedGranteeDelete: onSharedGranteeDelete,
        onAddGranteeBackClick: onAddGranteeBackClick,
        onAddGranteeButtonClick: onAddGranteeButtonClick,
        onGranteeAdd: onGranteeAdd,
        onSubmitShareGrantee: onSubmitShareGrantee,
        onSubmitAddGrantee: onSubmitAddGrantee,
        granteesToAdd: granteesToAdd,
        dialogMode: dialogMode,
        isShareDialogDirty: isShareDialogDirty,
        isAddDialogDirty: isAddDialogDirty,
        filteredGrantees: filteredGrantees,
        availableGrantees: availableGrantees,
    };
};
/**
 * @internal
 */
export var ShareDialogBase = function (props) {
    var onCancel = props.onCancel, owner = props.owner;
    var _a = useShareDialogBase(props), onAddedGranteeDelete = _a.onAddedGranteeDelete, onSharedGranteeDelete = _a.onSharedGranteeDelete, onAddGranteeBackClick = _a.onAddGranteeBackClick, onAddGranteeButtonClick = _a.onAddGranteeButtonClick, onGranteeAdd = _a.onGranteeAdd, onSubmitShareGrantee = _a.onSubmitShareGrantee, onSubmitAddGrantee = _a.onSubmitAddGrantee, granteesToAdd = _a.granteesToAdd, dialogMode = _a.dialogMode, isShareDialogDirty = _a.isShareDialogDirty, isAddDialogDirty = _a.isAddDialogDirty, filteredGrantees = _a.filteredGrantees, availableGrantees = _a.availableGrantees;
    return (React.createElement(Overlay, { alignPoints: alignPoints, isModal: true, positionType: "fixed", className: "gd-share-dialog-overlay" },
        React.createElement("div", { className: "s-gd-share-dialog" }, dialogMode === "ShareGrantee" ? (React.createElement(ShareGranteeBase, { isDirty: isShareDialogDirty, owner: owner, grantees: filteredGrantees, onCancel: onCancel, onSubmit: onSubmitShareGrantee, onAddGranteeButtonClick: onAddGranteeButtonClick, onGranteeDelete: onSharedGranteeDelete })) : (React.createElement(AddGranteeBase, { isDirty: isAddDialogDirty, availableGrantees: availableGrantees, addedGrantees: granteesToAdd, onAddUserOrGroups: onGranteeAdd, onDelete: onAddedGranteeDelete, onCancel: onCancel, onSubmit: onSubmitAddGrantee, onBackClick: onAddGranteeBackClick })))));
};
//# sourceMappingURL=ShareDialogBase.js.map
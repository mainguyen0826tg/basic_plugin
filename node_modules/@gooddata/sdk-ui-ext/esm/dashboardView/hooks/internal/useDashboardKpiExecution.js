// (C) 2020-2021 GoodData Corporation
import { UnexpectedError, } from "@gooddata/sdk-backend-spi";
import { useBackend, useWorkspace, useExecution, } from "@gooddata/sdk-ui";
import compact from "lodash/compact";
import { useKpiData } from "./useKpiData";
import { backendInvariant, workspaceInvariant } from "../utils";
/**
 * Hook allowing to get execution for particular kpi widget.
 * @param config - configuration of the hook
 * @internal
 */
export function useDashboardKpiExecution(config) {
    var backend = config.backend, workspace = config.workspace;
    var effectiveBackend = useBackend(backend);
    var effectiveWorkspace = useWorkspace(workspace);
    backendInvariant(effectiveBackend, "useDashboardKpiExecution");
    workspaceInvariant(effectiveWorkspace, "useDashboardKpiExecution");
    var _a = useKpiData(config), result = _a.result, status = _a.status, error = _a.error;
    var execution = useExecution({
        seriesBy: compact([result === null || result === void 0 ? void 0 : result.primaryMeasure, result === null || result === void 0 ? void 0 : result.secondaryMeasure]),
        filters: result === null || result === void 0 ? void 0 : result.effectiveFilters,
        backend: effectiveBackend,
        workspace: effectiveWorkspace,
    });
    switch (status) {
        case "pending":
        case "loading": {
            return { status: status, result: undefined, error: undefined };
        }
        case "error":
            return { status: status, result: undefined, error: error };
        case "success": {
            return { status: status, result: execution, error: undefined };
        }
        default: {
            var unhandledStatus = status;
            throw new UnexpectedError("Unhandled status: " + unhandledStatus);
        }
    }
}
//# sourceMappingURL=useDashboardKpiExecution.js.map
import { __extends } from "tslib";
// (C) 2007-2018 GoodData Corporation
import React from "react";
import cx from "classnames";
import { AVAILABLE_TOTALS, HEADER_LABEL_CLASS } from "../../base/constants";
import AggregationsMenu from "./AggregationsMenu";
export var ALIGN_LEFT = "left";
export var ALIGN_RIGHT = "right";
var HeaderCell = /** @class */ (function (_super) {
    __extends(HeaderCell, _super);
    function HeaderCell() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.resetSortDirection = function () {
            _this.setState({
                currentSortDirection: _this.props.sortDirection,
            });
        };
        _this.state = {
            isMenuOpen: false,
            isMenuButtonVisible: false,
            currentSortDirection: null,
        };
        _this.onMouseEnterHeaderCell = function () {
            _this.showMenuButton();
        };
        _this.onMouseLeaveHeaderCell = function () {
            _this.hideMenuButton();
        };
        _this.onMouseEnterHeaderCellText = function () {
            if (_this.props.enableSorting) {
                var sortDirection = _this.props.sortDirection;
                if (sortDirection === null) {
                    return _this.setState({
                        currentSortDirection: _this.props.defaultSortDirection,
                    });
                }
                else if (sortDirection === "asc") {
                    return _this.setState({
                        currentSortDirection: "desc",
                    });
                }
                else if (sortDirection === "desc") {
                    return _this.setState({
                        currentSortDirection: "asc",
                    });
                }
                else {
                    return _this.setState({
                        currentSortDirection: null,
                    });
                }
            }
        };
        _this.onMouseLeaveHeaderCellText = function () {
            _this.resetSortDirection();
        };
        _this.onTextClick = function () {
            var _a = _this.props, sortDirection = _a.sortDirection, onSortClick = _a.onSortClick, enableSorting = _a.enableSorting, defaultSortDirection = _a.defaultSortDirection;
            if (!enableSorting) {
                return;
            }
            if (sortDirection === null) {
                var nextSortDirection = defaultSortDirection;
                _this.setState({
                    currentSortDirection: nextSortDirection,
                });
                onSortClick(nextSortDirection);
                return;
            }
            var nextSort = sortDirection === "asc" ? "desc" : "asc";
            _this.setState({
                currentSortDirection: nextSort,
            });
            onSortClick(nextSort);
        };
        _this.showMenuButton = function () {
            if (_this.state.isMenuOpen) {
                return;
            }
            _this.setState({
                isMenuButtonVisible: true,
            });
        };
        _this.hideMenuButton = function () {
            if (_this.state.isMenuOpen) {
                return;
            }
            _this.setState({
                isMenuButtonVisible: false,
            });
        };
        _this.hideAndCloseMenu = function () {
            _this.setState({
                isMenuButtonVisible: false,
                isMenuOpen: false,
            });
        };
        _this.menuItemClick = function (menuAggregationClickConfig) {
            _this.hideAndCloseMenu();
            if (_this.props.onMenuAggregationClick) {
                _this.props.onMenuAggregationClick(menuAggregationClickConfig);
            }
        };
        _this.handleMenuOpenedChange = function (_a) {
            var opened = _a.opened, source = _a.source;
            _this.setState({
                isMenuOpen: opened,
            });
            // When source is 'TOGGLER_BUTTON_CLICK' we do not want to hide menu
            // button visibility. Because user is hovering over this button
            // so we do not want to hide it.
            if (source === "OUTSIDE_CLICK" || source === "SCROLL") {
                _this.setState({
                    isMenuButtonVisible: false,
                });
            }
        };
        return _this;
    }
    HeaderCell.prototype.componentDidMount = function () {
        this.resetSortDirection();
    };
    HeaderCell.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        if (nextProps.sortDirection !== this.props.sortDirection) {
            this.setState({
                currentSortDirection: this.props.sortDirection,
            });
        }
    };
    HeaderCell.prototype.render = function () {
        var _a = this.props, menuPosition = _a.menuPosition, className = _a.className;
        return (React.createElement("div", { className: cx("gd-pivot-table-header", {
                "gd-pivot-table-header--open": this.state.isMenuButtonVisible,
            }, className), onMouseEnter: this.onMouseEnterHeaderCell, onMouseLeave: this.onMouseLeaveHeaderCell },
            menuPosition === "left" && this.renderMenu(),
            this.renderText(),
            menuPosition === "right" && this.renderMenu()));
    };
    HeaderCell.prototype.renderMenu = function () {
        var _a, _b;
        var _c = this.props, intl = _c.intl, colId = _c.colId, menu = _c.menu, getTableDescriptor = _c.getTableDescriptor, getExecutionDefinition = _c.getExecutionDefinition, getColumnTotals = _c.getColumnTotals;
        var _d = this.state, isMenuOpen = _d.isMenuOpen, isMenuButtonVisible = _d.isMenuButtonVisible;
        if (!menu || !menu.aggregations) {
            return null;
        }
        return (React.createElement(AggregationsMenu, { intl: intl, colId: colId, isMenuOpened: isMenuOpen, isMenuButtonVisible: isMenuButtonVisible, showSubmenu: (_a = menu.aggregationsSubMenu) !== null && _a !== void 0 ? _a : false, availableTotalTypes: (_b = menu.aggregationTypes) !== null && _b !== void 0 ? _b : AVAILABLE_TOTALS, getTableDescriptor: getTableDescriptor, getExecutionDefinition: getExecutionDefinition, getTotals: getColumnTotals, onMenuOpenedChange: this.handleMenuOpenedChange, onAggregationSelect: this.menuItemClick }));
    };
    HeaderCell.prototype.renderText = function () {
        var _a = this.props, displayText = _a.displayText, textAlign = _a.textAlign, enableSorting = _a.enableSorting;
        var classes = cx(HEADER_LABEL_CLASS, "gd-pivot-table-header-label", {
            "gd-pivot-table-header-label--right": textAlign === "right",
            "gd-pivot-table-header-label--center": textAlign === "center",
            "gd-pivot-table-header-label--clickable": enableSorting,
        });
        return (React.createElement("div", { className: classes, onClick: this.onTextClick, onMouseEnter: this.onMouseEnterHeaderCellText, onMouseLeave: this.onMouseLeaveHeaderCellText },
            React.createElement("span", null, displayText ? displayText : ""),
            this.renderSorting()));
    };
    HeaderCell.prototype.renderSorting = function () {
        var enableSorting = this.props.enableSorting;
        var currentSortDirection = this.state.currentSortDirection;
        var sortClasses = cx("s-sort-direction-arrow", "s-sorted-" + currentSortDirection, {
            "gd-pivot-table-header-arrow-up": currentSortDirection === "asc",
            "gd-pivot-table-header-arrow-down": currentSortDirection === "desc",
        });
        return (currentSortDirection &&
            enableSorting && (React.createElement("span", { className: "gd-pivot-table-header-next-sort" },
            React.createElement("span", { className: sortClasses }))));
    };
    HeaderCell.defaultProps = {
        sortDirection: null,
        textAlign: ALIGN_LEFT,
        menuPosition: ALIGN_LEFT,
        defaultSortDirection: "desc",
        menu: null,
        enableSorting: false,
        onMenuAggregationClick: function () { return null; },
        onSortClick: function () { return null; },
    };
    return HeaderCell;
}(React.Component));
export default HeaderCell;
//# sourceMappingURL=HeaderCell.js.map
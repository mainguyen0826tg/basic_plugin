import { __generator } from "tslib";
// (C) 2021 GoodData Corporation
import { isDashboardAttributeFilter, } from "@gooddata/sdk-backend-spi";
import { call } from "redux-saga/effects";
import { resolveDisplayFormMetadata } from "./displayFormResolver";
import isEmpty from "lodash/isEmpty";
import { objRefToString } from "@gooddata/sdk-model";
import invariant from "ts-invariant";
/**
 * This generator function resolves display form metadata objects for all attribute filters in the provided `filters`
 * parameter. The resolver will first check in-memory `displayForms` mapping; if some used display forms are not
 * found, it will consult the backend.
 *
 * @param ctx - dashboard context where the resolution is being done
 * @param filters - list of dashboard filters; resolver will extract just the attribute filters from here
 * @param displayForms - in-memory mapping of known display forms to use during the initial lookup; if not specified, the
 *  code will obtain all catalog display forms; note: this parameter is really only useful during the dashboard initialization
 *  where the catalog is not yet set. once the dashboard is initialized, the parameter is not needed
 */
export function resolveFilterDisplayForms(ctx, filters, displayForms) {
    var displayFormRefs, resolvedDisplayForms;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                displayFormRefs = filters
                    .filter(isDashboardAttributeFilter)
                    .map(function (filter) { return filter.attributeFilter.displayForm; });
                return [4 /*yield*/, call(resolveDisplayFormMetadata, ctx, displayFormRefs, displayForms)];
            case 1:
                resolvedDisplayForms = _a.sent();
                // TODO: this is too strict; instead of exploding, the resolver should communicate that some filters are invalid so
                //  that the upstream code can remove the filter from the filter context
                invariant(isEmpty(resolvedDisplayForms.missing), "Unable to resolve display forms used in filter context filters: " + resolvedDisplayForms.missing
                    .map(function (m) { return objRefToString(m); })
                    .join(", ") + ".");
                return [2 /*return*/, Array.from(resolvedDisplayForms.resolved.values())];
        }
    });
}
//# sourceMappingURL=filterResolver.js.map
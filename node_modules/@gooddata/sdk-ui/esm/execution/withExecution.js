import { __awaiter, __generator } from "tslib";
// (C) 2019-2021 GoodData Corporation
import { isNoDataError } from "@gooddata/sdk-backend-spi";
import { withExecutionLoading, } from "./withExecutionLoading";
import { DataViewFacade } from "../base";
/**
 * A React HOC that for driving an execution to get data view that can be visualized.
 *
 * Note that if the resulting data is empty this will NOT throw a NoDataError.
 *
 * @internal
 */
export function withExecution(params) {
    var _this = this;
    var execution = params.execution, events = params.events, loadOnMount = params.loadOnMount, shouldRefetch = params.shouldRefetch, window = params.window, exportTitle = params.exportTitle;
    return function (WrappedComponent) {
        var withLoadingParams = {
            promiseFactory: function (props, window) { return __awaiter(_this, void 0, void 0, function () {
                var _execution, _a, executionResult, dataView, _b, err_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!(typeof execution === "function")) return [3 /*break*/, 2];
                            return [4 /*yield*/, execution(props)];
                        case 1:
                            _a = _c.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            _a = execution;
                            _c.label = 3;
                        case 3:
                            _execution = _a;
                            return [4 /*yield*/, _execution.execute()];
                        case 4:
                            executionResult = _c.sent();
                            _c.label = 5;
                        case 5:
                            _c.trys.push([5, 10, , 11]);
                            if (!!window) return [3 /*break*/, 7];
                            return [4 /*yield*/, executionResult.readAll()];
                        case 6:
                            _b = _c.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, executionResult.readWindow(window.offset, window.size)];
                        case 8:
                            _b = _c.sent();
                            _c.label = 9;
                        case 9:
                            dataView = _b;
                            return [2 /*return*/, DataViewFacade.for(dataView)];
                        case 10:
                            err_1 = _c.sent();
                            // do not treat no data as error here to give the user a chance to decide if no data is ok or not
                            if (isNoDataError(err_1) && err_1.dataView) {
                                return [2 /*return*/, DataViewFacade.for(err_1.dataView)];
                            }
                            throw err_1;
                        case 11: return [2 /*return*/];
                    }
                });
            }); },
            exportTitle: exportTitle,
            loadOnMount: loadOnMount,
            events: events,
            shouldRefetch: shouldRefetch,
            window: window,
        };
        return withExecutionLoading(withLoadingParams)(WrappedComponent);
    };
}
//# sourceMappingURL=withExecution.js.map
import { __assign, __awaiter, __generator, __spreadArrays } from "tslib";
// (C) 2021 GoodData Corporation
import compact from "lodash/compact";
import flatMap from "lodash/flatMap";
import zip from "lodash/zip";
import { isDashboardAttributeFilter, } from "@gooddata/sdk-backend-spi";
import { uriRef } from "@gooddata/sdk-model";
import invariant from "ts-invariant";
/**
 * Since bear backend does not support idRefs in filter context objects, we need to covert them to uriRefs if they are present.
 *
 * @param filterContext - filter context to sanitize
 * @param objRefsToUris - function converting ObjRefs to URIs
 * @returns filter context that uses uriRefs exclusively in its filters
 */
export function sanitizeFilterContext(filterContext, objRefsToUris) {
    return __awaiter(this, void 0, void 0, function () {
        var filters, refs, convertedRefs, refUriPairs, sanitizedFilters;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    filters = filterContext.filters;
                    if (!filters.length) {
                        return [2 /*return*/, filterContext];
                    }
                    refs = compact(flatMap(filters, function (filter) {
                        var _a;
                        var ref = getDashboardFilterRef(filter);
                        var overRefs = isDashboardAttributeFilter(filter)
                            ? flatMap((_a = filter.attributeFilter.filterElementsBy) !== null && _a !== void 0 ? _a : [], function (item) { return item.over.attributes; })
                            : [];
                        return __spreadArrays([ref], overRefs);
                    }));
                    return [4 /*yield*/, objRefsToUris(refs)];
                case 1:
                    convertedRefs = _a.sent();
                    refUriPairs = zip(refs, convertedRefs);
                    sanitizedFilters = filters.map(function (filter) {
                        var _a;
                        var originalRef = getDashboardFilterRef(filter);
                        if (!originalRef) {
                            return filter;
                        }
                        // we can use referential comparison here, the objects are the same
                        var refMatch = refUriPairs.find(function (_a) {
                            var ref = _a[0];
                            return ref === originalRef;
                        });
                        // this indicates a serious fault in the logic
                        invariant(refMatch);
                        var sanitizedRef = uriRef(refMatch[1]);
                        if (isDashboardAttributeFilter(filter)) {
                            var sanitizedFilterElementsBy = (_a = filter.attributeFilter.filterElementsBy) === null || _a === void 0 ? void 0 : _a.map(function (item) { return (__assign(__assign({}, item), { over: __assign(__assign({}, item.over), { attributes: item.over.attributes.map(function (attrRef) {
                                        // we can use referential comparison here, the objects are the same
                                        var attrMatch = refUriPairs.find(function (_a) {
                                            var ref = _a[0];
                                            return ref === attrRef;
                                        });
                                        // this indicates a serious fault in the logic
                                        invariant(attrMatch);
                                        return uriRef(attrMatch[1]);
                                    }) }) })); });
                            return {
                                attributeFilter: __assign(__assign({}, filter.attributeFilter), { displayForm: sanitizedRef, filterElementsBy: sanitizedFilterElementsBy }),
                            };
                        }
                        else {
                            return {
                                dateFilter: __assign(__assign({}, filter.dateFilter), { dataSet: sanitizedRef }),
                            };
                        }
                    });
                    return [2 /*return*/, __assign(__assign({}, filterContext), { filters: sanitizedFilters })];
            }
        });
    });
}
function getDashboardFilterRef(filter) {
    return isDashboardAttributeFilter(filter)
        ? filter.attributeFilter.displayForm
        : filter.dateFilter.dataSet;
}
//# sourceMappingURL=filterContexts.js.map
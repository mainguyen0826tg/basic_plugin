import { __generator, __read, __spread } from "tslib";
// (C) 2021 GoodData Corporation
import { call, put, select } from "redux-saga/effects";
import invariant from "ts-invariant";
import { invalidArgumentsProvided } from "../../../events/general";
import { attributeFilterParentChanged } from "../../../events/filters";
import { filterContextActions } from "../../../store/filterContext";
import { selectFilterContextAttributeFilterByLocalId, selectFilterContextAttributeFilters, } from "../../../store/filterContext/filterContextSelectors";
import { validateAttributeFilterParents } from "./validation/parentFiltersValidation";
import { dispatchFilterContextChanged } from "../common";
import { dispatchDashboardEvent } from "../../../store/_infra/eventDispatcher";
export function setAttributeFilterParentHandler(ctx, cmd) {
    var _a, filterLocalId, parentFilters, allFilters, affectedFilter, validationResult, message, changedFilter;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = cmd.payload, filterLocalId = _a.filterLocalId, parentFilters = _a.parentFilters;
                return [4 /*yield*/, select(selectFilterContextAttributeFilters)];
            case 1:
                allFilters = _b.sent();
                return [4 /*yield*/, select(selectFilterContextAttributeFilterByLocalId(filterLocalId))];
            case 2:
                affectedFilter = _b.sent();
                if (!affectedFilter) {
                    throw invalidArgumentsProvided(ctx, cmd, "Filter with localId " + filterLocalId + " was not found.");
                }
                return [4 /*yield*/, call(validateAttributeFilterParents, ctx, affectedFilter, __spread(parentFilters), allFilters)];
            case 3:
                validationResult = _b.sent();
                if (validationResult !== "VALID") {
                    message = validationResult === "EXTRANEOUS_PARENT"
                        ? "Some of the parents provided cannot be used because filters for those are not in the filters collection. " +
                            "Only existing filters can be used as parent filters."
                        : "Some of the parents provided cannot be used because the 'over' parameter is invalid for the target filter.";
                    throw invalidArgumentsProvided(ctx, cmd, message);
                }
                return [4 /*yield*/, put(filterContextActions.setAttributeFilterParents({
                        filterLocalId: filterLocalId,
                        parentFilters: parentFilters,
                    }))];
            case 4:
                _b.sent();
                return [4 /*yield*/, select(selectFilterContextAttributeFilterByLocalId(filterLocalId))];
            case 5:
                changedFilter = _b.sent();
                invariant(changedFilter, "Inconsistent state in attributeFilterSetParentCommandHandler");
                return [4 /*yield*/, dispatchDashboardEvent(attributeFilterParentChanged(ctx, changedFilter, cmd.correlationId))];
            case 6:
                _b.sent();
                return [4 /*yield*/, call(dispatchFilterContextChanged, ctx, cmd)];
            case 7:
                _b.sent();
                return [2 /*return*/];
        }
    });
}
//# sourceMappingURL=setAttributeFilterParentHandler.js.map
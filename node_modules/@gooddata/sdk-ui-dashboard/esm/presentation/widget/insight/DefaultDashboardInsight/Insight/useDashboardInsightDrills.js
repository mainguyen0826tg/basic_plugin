import { __assign } from "tslib";
// (C) 2020-2021 GoodData Corporation
import { useCallback } from "react";
import isEqual from "lodash/isEqual";
import { useDashboardSelector, useDashboardDispatch, selectDrillTargetsByWidgetRef, addDrillTargets, selectDrillableItemsByWidgetRef, selectConfiguredAndImplicitDrillsByWidgetRef, } from "../../../../../model";
import { DataViewFacade, isSomeHeaderPredicateMatched } from "@gooddata/sdk-ui";
/**
 * @internal
 */
export var useDashboardInsightDrills = function (_a) {
    var widget = _a.widget, insight = _a.insight, onDrillFn = _a.onDrill;
    var dispatch = useDashboardDispatch();
    var drillTargets = useDashboardSelector(selectDrillTargetsByWidgetRef(widget.ref));
    var onPushData = useCallback(function (data) {
        if ((data === null || data === void 0 ? void 0 : data.availableDrillTargets) &&
            !isEqual(drillTargets === null || drillTargets === void 0 ? void 0 : drillTargets.availableDrillTargets, data.availableDrillTargets)) {
            dispatch(addDrillTargets(widget.ref, data.availableDrillTargets));
        }
    }, [drillTargets]);
    var drillableItems = useDashboardSelector(selectDrillableItemsByWidgetRef(widget.ref));
    var implicitDrillDefinitions = useDashboardSelector(selectConfiguredAndImplicitDrillsByWidgetRef(widget.ref));
    var onDrill = onDrillFn
        ? function (event) {
            var facade = DataViewFacade.for(event.dataView);
            var matchingImplicitDrillDefinitions = implicitDrillDefinitions.filter(function (info) {
                var _a;
                return (_a = event.drillContext.intersection) === null || _a === void 0 ? void 0 : _a.some(function (intersection) {
                    return isSomeHeaderPredicateMatched(info.predicates, intersection.header, facade);
                });
            });
            var drillEvent = __assign(__assign({}, event), { widgetRef: widget.ref, drillDefinitions: matchingImplicitDrillDefinitions.map(function (info) { return info.drillDefinition; }) });
            return (typeof onDrillFn === "function" &&
                onDrillFn(drillEvent, {
                    insight: insight,
                    widget: widget,
                }));
        }
        : undefined;
    return {
        drillableItems: drillableItems,
        onPushData: onPushData,
        onDrill: onDrill,
    };
};
//# sourceMappingURL=useDashboardInsightDrills.js.map
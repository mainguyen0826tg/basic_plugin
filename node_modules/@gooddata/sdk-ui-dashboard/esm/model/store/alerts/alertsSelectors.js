// (C) 2021 GoodData Corporation
import { createSelector } from "@reduxjs/toolkit";
import { alertsAdapter } from "./alertsEntityAdapter";
import { newMapForObjectWithIdentity } from "../../../_staging/metadata/objRefMap";
import memoize from "lodash/memoize";
import { serializeObjRef } from "@gooddata/sdk-model";
import { selectWidgetsMap } from "../layout/layoutSelectors";
import invariant from "ts-invariant";
var selectSelf = createSelector(function (state) { return state; }, function (state) { return state.alerts; });
var adapterSelectors = alertsAdapter.getSelectors(selectSelf);
/**
 * Selects all alerts used on the dashboard.
 *
 * @alpha
 */
export var selectAlerts = adapterSelectors.selectAll;
/**
 * Selects all alerts and returns them in a mapping of widget obj ref to the alert object.
 *
 * @internal
 */
var selectAlertsMapByWidgetRefs = createSelector(selectAlerts, selectWidgetsMap, function (alerts, widgetsMap) {
    var mappedItems = alerts.map(function (alert) {
        var widget = widgetsMap.get(alert.widget);
        invariant(widget, "Alert widget is missing in state widgets");
        var result = {
            identifier: widget.identifier,
            uri: widget.uri,
            ref: widget.ref,
            alert: alert,
        };
        return result;
    });
    return newMapForObjectWithIdentity(mappedItems);
});
/**
 * Selects alert or undefined by widget ref
 *
 * @alpha
 */
export var selectAlertByWidgetRef = memoize(function (widgetRef) {
    return createSelector(selectAlertsMapByWidgetRefs, function (alerts) {
        var alert = alerts.get(widgetRef);
        if (alert) {
            return alert.alert;
        }
    });
}, serializeObjRef);
/**
 * Selects dashboard alerts in mapping an obj ref to widget map.
 *
 * @internal
 */
export var selectAlertsMap = createSelector(selectAlerts, function (alerts) {
    return newMapForObjectWithIdentity(alerts);
});
/**
 * Selects alert or undefined by alert ref
 *
 * @alpha
 */
export var selectAlertByRef = memoize(function (ref) {
    return createSelector(selectAlertsMap, function (alerts) {
        return alerts.get(ref);
    });
}, serializeObjRef);
//# sourceMappingURL=alertsSelectors.js.map
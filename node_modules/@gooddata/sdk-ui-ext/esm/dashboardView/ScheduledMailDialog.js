// (C) 2019-2020 GoodData Corporation
import React, { useEffect, useMemo, useState, useCallback } from "react";
import invariant from "ts-invariant";
import { uriRef } from "@gooddata/sdk-model";
import { LoadingComponent, ErrorComponent } from "@gooddata/sdk-ui";
import { Overlay } from "@gooddata/sdk-ui-kit";
import { useDashboard } from "./hooks";
import { useCurrentUser, useSaveScheduledMail, useUserWorkspacePermissions, useUserWorkspaceSettings, } from "./hooks/internal";
import { ScheduledMailDialogRenderer } from "../internal";
export var ScheduledMailDialog = function (props) {
    var _a, _b;
    var backend = props.backend, workspace = props.workspace, locale = props.locale, dashboardRef = props.dashboard, filters = props.filters, onSubmit = props.onSubmit, onSubmitSuccess = props.onSubmitSuccess, onSubmitError = props.onSubmitError, onCancel = props.onCancel, onError = props.onError, isVisible = props.isVisible;
    var _c = useCurrentUser({
        backend: backend,
    }), currentUser = _c.result, currentUserStatus = _c.status, currentUserError = _c.error;
    var _d = useDashboard({
        backend: backend,
        workspace: workspace,
        dashboard: dashboardRef,
    }), dashboard = _d.result, dashboardStatus = _d.status, dashboardError = _d.error;
    var _e = useUserWorkspacePermissions({ backend: backend, workspace: workspace }), permissions = _e.result, permissionsStatus = _e.status, permissionsError = _e.error;
    var _f = useUserWorkspaceSettings({ backend: backend, workspace: workspace }), featureFlags = _f.result, featureFlagsStatus = _f.status, featureFlagsError = _f.error;
    var _g = useState(), submittedScheduledMail = _g[0], setSubmittedScheduledMail = _g[1];
    var filterContextToSave = useMemo(function () {
        if (filters) {
            return {
                title: "filterContext",
                description: "",
                filters: filters,
            };
        }
        return undefined;
    }, [filters]);
    useSaveScheduledMail({
        scheduledMail: submittedScheduledMail,
        filterContext: filterContextToSave,
        onSuccess: onSubmitSuccess,
        onError: onSubmitError,
        backend: backend,
        workspace: workspace,
    });
    var error = (_b = (_a = currentUserError !== null && currentUserError !== void 0 ? currentUserError : dashboardError) !== null && _a !== void 0 ? _a : permissionsError) !== null && _b !== void 0 ? _b : featureFlagsError;
    var effectiveLocale = locale !== null && locale !== void 0 ? locale : featureFlags === null || featureFlags === void 0 ? void 0 : featureFlags.locale;
    var isLoading = [currentUserStatus, dashboardStatus, permissionsStatus, featureFlagsStatus].some(function (status) { return status === "loading" || status === "pending"; });
    useEffect(function () {
        if (error && onError) {
            onError(error);
        }
    }, [error]);
    var handleSubmit = useCallback(function (scheduledMail) {
        setSubmittedScheduledMail(scheduledMail);
        if (onSubmit) {
            onSubmit(scheduledMail);
        }
    }, [onSubmit]);
    // Bear model expects that all refs are sanitized to uriRefs.
    var dashboardUriRef = useMemo(function () { return (dashboard ? uriRef(dashboard.uri) : null); }, [dashboard]);
    // trigger the invariant only if the user tries to open the dialog
    if (featureFlags && isVisible) {
        invariant(featureFlags.enableKPIDashboardSchedule, "Feature flag enableKPIDashboardSchedule must be enabled to make ScheduledMailDialog work properly.");
    }
    if (!isVisible) {
        return null;
    }
    if (isLoading) {
        return (React.createElement(Overlay, { className: "gd-schedule-email-dialog-overlay", isModal: true, positionType: "fixed" },
            React.createElement(LoadingComponent, null)));
    }
    if (error) {
        return (React.createElement(Overlay, { className: "gd-schedule-email-dialog-overlay", isModal: true, positionType: "fixed" },
            React.createElement(ErrorComponent, { message: error.message })));
    }
    return currentUser ? (React.createElement(ScheduledMailDialogRenderer, { backend: backend, workspace: workspace, locale: effectiveLocale, canListUsersInProject: permissions === null || permissions === void 0 ? void 0 : permissions.canListUsersInProject, enableKPIDashboardScheduleRecipients: featureFlags === null || featureFlags === void 0 ? void 0 : featureFlags.enableKPIDashboardScheduleRecipients, dateFormat: featureFlags === null || featureFlags === void 0 ? void 0 : featureFlags.responsiveUiDateFormat, currentUser: currentUser, dashboard: dashboardUriRef, dashboardTitle: dashboard === null || dashboard === void 0 ? void 0 : dashboard.title, onSubmit: handleSubmit, onCancel: onCancel, onError: onError })) : null;
};
//# sourceMappingURL=ScheduledMailDialog.js.map
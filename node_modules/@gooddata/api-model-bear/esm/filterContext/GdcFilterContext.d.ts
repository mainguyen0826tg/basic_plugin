import { GdcExtendedDateFilters } from "../extendedDateFilters/GdcExtendedDateFilters";
import { GdcMetadata } from "../meta/GdcMetadata";
import { Uri, Timestamp, NumberAsString } from "../aliases";
/**
 * @public
 */
export declare namespace GdcFilterContext {
    type RelativeType = "relative";
    type AbsoluteType = "absolute";
    type DateFilterType = RelativeType | AbsoluteType;
    interface IFilterContext {
        meta: GdcMetadata.IObjectMeta;
        content: {
            filters: FilterContextItem[];
        };
    }
    interface IWrappedFilterContext {
        filterContext: IFilterContext;
    }
    /**
     * Temporary filter context stored during exports
     */
    interface ITempFilterContext {
        uri: Uri;
        created: Timestamp;
        filters: FilterContextItem[];
    }
    interface IWrappedTempFilterContext {
        tempFilterContext: ITempFilterContext;
    }
    interface IAttributeFilter {
        attributeFilter: {
            displayForm: string;
            negativeSelection: boolean;
            attributeElements: string[];
            localIdentifier?: string;
            filterElementsBy?: Array<{
                filterLocalIdentifier: string;
                over: {
                    attributes: Array<string>;
                };
            }>;
        };
    }
    interface IDateFilter {
        dateFilter: {
            type: DateFilterType;
            granularity: GdcExtendedDateFilters.DateFilterGranularity;
            from?: GdcExtendedDateFilters.DateString | NumberAsString;
            to?: GdcExtendedDateFilters.DateString | NumberAsString;
            dataSet?: string;
            attribute?: string;
        };
    }
    type FilterContextItem = IAttributeFilter | IDateFilter;
    function isDateFilter(filter: FilterContextItem): filter is IDateFilter;
    function isAttributeFilter(filter: FilterContextItem): filter is IAttributeFilter;
    function isFilterContext(obj: unknown): obj is IFilterContext;
    function isWrappedFilterContext(obj: unknown): obj is IWrappedFilterContext;
    function isTempFilterContext(obj: unknown): obj is ITempFilterContext;
    function isWrappedTempFilterContext(obj: unknown): obj is IWrappedTempFilterContext;
}
//# sourceMappingURL=GdcFilterContext.d.ts.map
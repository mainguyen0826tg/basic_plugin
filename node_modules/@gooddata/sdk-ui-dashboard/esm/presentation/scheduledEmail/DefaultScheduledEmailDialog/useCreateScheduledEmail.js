// (C) 2020-2021 GoodData Corporation
import { useCallback } from "react";
import { createScheduledEmail, useDashboardCommandProcessing } from "../../../model";
import { ensureAllTimeFilterForExport } from "../../../_staging/exportUtils/filterUtils";
export var useCreateScheduledEmail = function (_a) {
    var _b = _a === void 0 ? {} : _a, onBeforeRun = _b.onBeforeRun, onSuccess = _b.onSuccess, onError = _b.onError;
    var scheduledEmailCommandProcessing = useDashboardCommandProcessing({
        commandCreator: createScheduledEmail,
        errorEvent: "GDC.DASH/EVT.COMMAND.FAILED",
        successEvent: "GDC.DASH/EVT.SCHEDULED_EMAIL.CREATED",
        onError: function (event) {
            onError === null || onError === void 0 ? void 0 : onError(event.payload.error);
        },
        onSuccess: function (event) {
            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(event.payload.scheduledEmail);
        },
        onBeforeRun: function (cmd) {
            var _a;
            onBeforeRun === null || onBeforeRun === void 0 ? void 0 : onBeforeRun(cmd.payload.scheduledEmail, (_a = cmd.payload.filterContext) === null || _a === void 0 ? void 0 : _a.filters);
        },
    });
    var create = useCallback(function (scheduledEmailToCreate, filters) {
        var filterContext = filters && {
            title: "filterContext",
            description: "",
            filters: ensureAllTimeFilterForExport(filters),
        };
        scheduledEmailCommandProcessing.run(scheduledEmailToCreate, filterContext);
    }, []);
    return {
        create: create,
        creationStatus: scheduledEmailCommandProcessing.status,
    };
};
//# sourceMappingURL=useCreateScheduledEmail.js.map
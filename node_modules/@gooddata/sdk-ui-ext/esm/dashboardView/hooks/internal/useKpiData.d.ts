import { FilterContextItem, IAnalyticalBackend, IFilterContext, ITempFilterContext, IKpiWidget, IFilterContextDefinition } from "@gooddata/sdk-backend-spi";
import { IMeasure, IPoPMeasureDefinition, IPreviousPeriodMeasureDefinition } from "@gooddata/sdk-model";
import { GoodDataSdkError, OnError, UseCancelablePromiseState } from "@gooddata/sdk-ui";
import { IDashboardFilter } from "../../types";
interface IUseKpiDataConfig {
    kpiWidget?: IKpiWidget;
    filterContext?: IFilterContextDefinition | IFilterContext | ITempFilterContext;
    filters?: FilterContextItem[];
    backend?: IAnalyticalBackend;
    workspace?: string;
    onError?: OnError;
}
interface IUseKpiDataResult {
    primaryMeasure: IMeasure;
    secondaryMeasure?: IMeasure<IPoPMeasureDefinition> | IMeasure<IPreviousPeriodMeasureDefinition>;
    effectiveFilters?: IDashboardFilter[];
    allFilters?: IDashboardFilter[];
}
/**
 * @internal
 */
export declare function useKpiData({ kpiWidget, filters, filterContext, backend, workspace, }: IUseKpiDataConfig): UseCancelablePromiseState<IUseKpiDataResult, GoodDataSdkError>;
export {};
//# sourceMappingURL=useKpiData.d.ts.map
import { __awaiter, __generator } from "tslib";
import { GdcMetadataObject, GdcMetadata } from "@gooddata/api-model-bear";
import { isApiResponseError } from "../../../utils/errorHandling";
var SETTINGS_KEY;
(function (SETTINGS_KEY) {
    SETTINGS_KEY["SELECTED_UI_THEME"] = "selectedUiTheme";
    SETTINGS_KEY["ENABLED_THEMING_FEATURE_FLAG"] = "enableUiTheming";
    SETTINGS_KEY["PLATFORM_EDITION"] = "platformEdition";
})(SETTINGS_KEY || (SETTINGS_KEY = {}));
var PLATFORM_EDITION_VALUES;
(function (PLATFORM_EDITION_VALUES) {
    PLATFORM_EDITION_VALUES["GROWTH"] = "growth";
    PLATFORM_EDITION_VALUES["FREE"] = "free";
})(PLATFORM_EDITION_VALUES || (PLATFORM_EDITION_VALUES = {}));
var BearWorkspaceStyling = /** @class */ (function () {
    function BearWorkspaceStyling(authCall, workspace) {
        var _this = this;
        this.authCall = authCall;
        this.workspace = workspace;
        this.getColorPalette = function () { return __awaiter(_this, void 0, void 0, function () {
            var palette;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (sdk) { return sdk.project.getColorPaletteWithGuids(_this.workspace); })];
                    case 1:
                        palette = _a.sent();
                        return [2 /*return*/, palette || []];
                }
            });
        }); };
        this.getTheme = function () { return __awaiter(_this, void 0, void 0, function () {
            var config, identifier;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (sdk) { return sdk.project.getProjectFeatureFlags(_this.workspace); })];
                    case 1:
                        config = _a.sent();
                        identifier = config[SETTINGS_KEY.SELECTED_UI_THEME];
                        return [2 /*return*/, this.isThemable(config, identifier)
                                ? this.authCall(function (sdk) {
                                    return sdk.md
                                        .getObjectByIdentifier(_this.workspace, identifier)
                                        .then(function (object) {
                                        var unwrappedObject = GdcMetadataObject.unwrapMetadataObject(object);
                                        return (GdcMetadata.isTheme(unwrappedObject) && unwrappedObject.content) || {};
                                    })
                                        .catch(function (err) {
                                        if (isApiResponseError(err)) {
                                            return {};
                                        }
                                        throw err;
                                    });
                                })
                                : {}];
                }
            });
        }); };
    }
    /**
     * Checks if Theming needs to be loaded.
     * As Whitelabeling is part of Enterprise product ignore the `enableUiTheming` FF value
     * when `platformEdition` is Enterprise
     *
     * @returns boolean
     */
    BearWorkspaceStyling.prototype.isThemable = function (config, identifier) {
        var platformEdition = config[SETTINGS_KEY.PLATFORM_EDITION];
        var isPlatformEditionWithPaidWL = function () {
            return platformEdition === PLATFORM_EDITION_VALUES.GROWTH ||
                platformEdition === PLATFORM_EDITION_VALUES.FREE;
        };
        var enabledByFeatureFlag = config[SETTINGS_KEY.ENABLED_THEMING_FEATURE_FLAG];
        if (!enabledByFeatureFlag && isPlatformEditionWithPaidWL()) {
            return false;
        }
        if (!identifier) {
            return false;
        }
        return true;
    };
    return BearWorkspaceStyling;
}());
export { BearWorkspaceStyling };
//# sourceMappingURL=styling.js.map
import { isDashboardDateFilterReference, isInsightWidget, isKpiWidget, } from "@gooddata/sdk-backend-spi";
import { invariant } from "ts-invariant";
import { resetUndoReducer, undoReducer, withUndo } from "../_infra/undoEnhancer";
import { addArrayElements, moveArrayElement, removeArrayElement } from "../../utils/arrayOps";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import flatMap from "lodash/flatMap";
//
//
//
var setLayout = function (state, action) {
    state.layout = action.payload;
    resetUndoReducer(state);
};
//
//
//
function recurseLayoutAndUpdateWidgetIds(layout, mapping) {
    layout.sections.forEach(function (section) {
        section.items.forEach(function (item) {
            var _a;
            var widget = item.widget;
            if (!isInsightWidget(widget) && !isKpiWidget(widget)) {
                return;
            }
            var newIdentity = ((_a = mapping.get(widget.ref)) !== null && _a !== void 0 ? _a : {}).updated;
            if (!newIdentity) {
                return;
            }
            widget.ref = newIdentity.ref;
            widget.uri = newIdentity.uri;
            widget.identifier = newIdentity.identifier;
        });
    });
}
var updateWidgetIdentities = function (state, action) {
    invariant(state.layout);
    recurseLayoutAndUpdateWidgetIds(state.layout, action.payload);
};
var addSection = function (state, action) {
    invariant(state.layout);
    var _a = action.payload, index = _a.index, section = _a.section, usedStashes = _a.usedStashes;
    addArrayElements(state.layout.sections, index, [section]);
    usedStashes.forEach(function (stashIdentifier) {
        delete state.stash[stashIdentifier];
    });
};
var removeSection = function (state, action) {
    invariant(state.layout);
    var _a = action.payload, index = _a.index, stashIdentifier = _a.stashIdentifier;
    if (stashIdentifier) {
        var items = state.layout.sections[index].items;
        state.stash[stashIdentifier] = items;
    }
    removeArrayElement(state.layout.sections, index);
};
var changeSectionHeader = function (state, action) {
    invariant(state.layout);
    var _a = action.payload, index = _a.index, header = _a.header;
    state.layout.sections[index].header = header;
};
var moveSection = function (state, action) {
    invariant(state.layout);
    var _a = action.payload, sectionIndex = _a.sectionIndex, toIndex = _a.toIndex;
    moveArrayElement(state.layout.sections, sectionIndex, toIndex);
};
var addSectionItems = function (state, action) {
    invariant(state.layout);
    var _a = action.payload, sectionIndex = _a.sectionIndex, itemIndex = _a.itemIndex, items = _a.items, usedStashes = _a.usedStashes;
    var section = state.layout.sections[sectionIndex];
    invariant(section);
    addArrayElements(section.items, itemIndex, items);
    usedStashes.forEach(function (stashIdentifier) {
        delete state.stash[stashIdentifier];
    });
};
var moveSectionItem = function (state, action) {
    invariant(state.layout);
    var _a = action.payload, sectionIndex = _a.sectionIndex, itemIndex = _a.itemIndex, toSectionIndex = _a.toSectionIndex, toItemIndex = _a.toItemIndex;
    var fromSection = state.layout.sections[sectionIndex];
    var toSection = state.layout.sections[toSectionIndex];
    invariant(fromSection);
    invariant(toSection);
    var item = removeArrayElement(fromSection.items, itemIndex);
    invariant(item);
    addArrayElements(toSection.items, toItemIndex, [item]);
};
var removeSectionItem = function (state, action) {
    invariant(state.layout);
    var _a = action.payload, sectionIndex = _a.sectionIndex, itemIndex = _a.itemIndex, stashIdentifier = _a.stashIdentifier;
    var section = state.layout.sections[sectionIndex];
    invariant(section);
    var item = removeArrayElement(section.items, itemIndex);
    invariant(item);
    if (stashIdentifier) {
        state.stash[stashIdentifier] = [item];
    }
};
var replaceSectionItem = function (state, action) {
    invariant(state.layout);
    var _a = action.payload, sectionIndex = _a.sectionIndex, itemIndex = _a.itemIndex, newItems = _a.newItems, stashIdentifier = _a.stashIdentifier, usedStashes = _a.usedStashes;
    var section = state.layout.sections[sectionIndex];
    invariant(section);
    var item = removeArrayElement(section.items, itemIndex);
    invariant(item);
    if (stashIdentifier) {
        state.stash[stashIdentifier] = [item];
    }
    addArrayElements(section.items, itemIndex, newItems);
    usedStashes.forEach(function (usedStash) {
        /*
         * It is a valid case that the new item is taken from a stash and the replaced item is then
         * used to replace the same stash.
         */
        if (stashIdentifier !== undefined && usedStash === stashIdentifier) {
            return;
        }
        delete state.stash[usedStash];
    });
};
//
// Layout-widget specific reducers
//
var getWidgetByRef = function (state, widgetRef) {
    var _a;
    var allWidgets = flatMap((_a = state === null || state === void 0 ? void 0 : state.layout) === null || _a === void 0 ? void 0 : _a.sections, function (section) {
        return section.items.map(function (item) { return item.widget; });
    });
    var widget = allWidgets.find(function (w) {
        // defer type checks until the actual widget is found
        var ref = w && w.ref;
        return ref && areObjRefsEqual(ref, widgetRef);
    });
    return widget;
};
var replaceWidgetHeader = function (state, action) {
    var _a;
    invariant(state.layout);
    var _b = action.payload, header = _b.header, ref = _b.ref;
    var widget = getWidgetByRef(state, ref);
    // this means command handler did not correctly validate that the widget exists before dispatching the
    // reducer action
    invariant(widget && (isKpiWidget(widget) || isInsightWidget(widget)));
    widget.title = (_a = header.title) !== null && _a !== void 0 ? _a : "";
};
var replaceWidgetDrill = function (state, action) {
    invariant(state.layout);
    var _a = action.payload, drillDefinitions = _a.drillDefinitions, ref = _a.ref;
    var widget = getWidgetByRef(state, ref);
    // this means command handler did not correctly validate that the widget exists before dispatching the
    // reducer action
    invariant(widget && (isKpiWidget(widget) || isInsightWidget(widget)));
    widget.drills = drillDefinitions !== null && drillDefinitions !== void 0 ? drillDefinitions : [];
};
var replaceInsightWidgetVisProperties = function (state, action) {
    invariant(state.layout);
    var _a = action.payload, properties = _a.properties, ref = _a.ref;
    var widget = getWidgetByRef(state, ref);
    invariant(widget && isInsightWidget(widget));
    widget.properties = properties;
};
var replaceWidgetFilterSettings = function (state, action) {
    invariant(state.layout);
    var _a = action.payload, ignoreDashboardFilters = _a.ignoreDashboardFilters, dateDataSet = _a.dateDataSet, ref = _a.ref;
    var widget = getWidgetByRef(state, ref);
    invariant(widget && (isInsightWidget(widget) || isKpiWidget(widget)));
    widget.dateDataSet = dateDataSet;
    widget.ignoreDashboardFilters = ignoreDashboardFilters !== null && ignoreDashboardFilters !== void 0 ? ignoreDashboardFilters : [];
};
var removeIgnoredAttributeFilter = function (state, action) {
    invariant(state.layout);
    var displayFormRefs = action.payload.displayFormRefs;
    state.layout.sections.forEach(function (section) {
        section.items.forEach(function (item) {
            var widget = item.widget;
            if (isInsightWidget(widget) || isKpiWidget(widget)) {
                var updatedFilters = widget.ignoreDashboardFilters.filter(function (filter) {
                    if (isDashboardDateFilterReference(filter)) {
                        return true;
                    }
                    return (displayFormRefs.find(function (removed) { return areObjRefsEqual(removed, filter.displayForm); }) ===
                        undefined);
                });
                widget.ignoreDashboardFilters = updatedFilters;
            }
        });
    });
};
var replaceWidgetDateDataset = function (state, action) {
    invariant(state.layout);
    var _a = action.payload, dateDataSet = _a.dateDataSet, ref = _a.ref;
    var widget = getWidgetByRef(state, ref);
    invariant(widget && (isInsightWidget(widget) || isKpiWidget(widget)));
    widget.dateDataSet = dateDataSet;
};
var replaceKpiWidgetMeasure = function (state, action) {
    invariant(state.layout);
    var _a = action.payload, ref = _a.ref, measureRef = _a.measureRef;
    var widget = getWidgetByRef(state, ref);
    invariant(widget && isKpiWidget(widget));
    widget.kpi.metric = measureRef;
};
var replaceKpiWidgetComparison = function (state, action) {
    invariant(state.layout);
    var _a = action.payload, ref = _a.ref, comparisonType = _a.comparisonType, comparisonDirection = _a.comparisonDirection;
    var widget = getWidgetByRef(state, ref);
    invariant(widget && isKpiWidget(widget));
    widget.kpi.comparisonType = comparisonType;
    widget.kpi.comparisonDirection = comparisonDirection;
};
export var layoutReducers = {
    setLayout: setLayout,
    updateWidgetIdentities: updateWidgetIdentities,
    removeIgnoredAttributeFilter: removeIgnoredAttributeFilter,
    addSection: withUndo(addSection),
    removeSection: withUndo(removeSection),
    moveSection: withUndo(moveSection),
    changeSectionHeader: withUndo(changeSectionHeader),
    addSectionItems: withUndo(addSectionItems),
    moveSectionItem: withUndo(moveSectionItem),
    removeSectionItem: withUndo(removeSectionItem),
    replaceSectionItem: withUndo(replaceSectionItem),
    replaceWidgetHeader: withUndo(replaceWidgetHeader),
    replaceWidgetDrills: withUndo(replaceWidgetDrill),
    replaceInsightWidgetVisProperties: withUndo(replaceInsightWidgetVisProperties),
    replaceWidgetFilterSettings: withUndo(replaceWidgetFilterSettings),
    replaceWidgetDateDataset: withUndo(replaceWidgetDateDataset),
    replaceKpiWidgetMeasure: withUndo(replaceKpiWidgetMeasure),
    replaceKpiWidgetComparison: withUndo(replaceKpiWidgetComparison),
    undoLayout: undoReducer,
    clearLayoutHistory: resetUndoReducer,
};
//# sourceMappingURL=layoutReducers.js.map
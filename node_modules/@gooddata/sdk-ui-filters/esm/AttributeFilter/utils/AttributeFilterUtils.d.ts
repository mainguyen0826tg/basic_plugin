import { IAnalyticalBackend, IAttributeElement, IElementsQueryAttributeFilter } from "@gooddata/sdk-backend-spi";
import { IntlShape } from "react-intl";
import { AttributeListItem, IElementQueryResultWithEmptyItems } from "../AttributeDropdown/types";
import { IAttributeElements, IAttributeFilter, ObjRef } from "@gooddata/sdk-model";
export declare const getAllTitleIntl: (intl: IntlShape, isInverted: boolean, empty: boolean, equal: boolean) => string;
export declare const getAllTitle: (intl: IntlShape) => string;
export declare const getAllExceptTitle: (intl: IntlShape) => string;
export declare const getLoadingTitleIntl: (intl: IntlShape) => string;
export declare const getFilteringTitleIntl: (intl: IntlShape) => string;
export declare const getNoneTitleIntl: (intl: IntlShape) => string;
export declare const getItemsTitles: (selectedFilterOptions: IAttributeElement[], elementTitles: Map<string, IAttributeElement>) => string;
export declare const updateSelectedOptionsWithDataByMap: (selection: Array<Partial<IAttributeElement>>, validElements: Map<string, IAttributeElement>) => Array<IAttributeElement>;
export declare const updateSelectedOptionsWithData: (selection: Array<Partial<IAttributeElement>>, items: AttributeListItem[]) => Array<IAttributeElement>;
export declare const getElementTotalCount: (workspace: string, backend: IAnalyticalBackend, objRef: ObjRef, searchString: string, parentFilters: IElementsQueryAttributeFilter[]) => Promise<number>;
/**
 * @internal
 */
export interface ILoadElementsResult {
    validOptions: IElementQueryResultWithEmptyItems;
    totalCount: number;
}
export declare function needsLoading(validElements: IElementQueryResultWithEmptyItems, offset: number, limit: number): boolean;
export declare const getElements: (validElements: IElementQueryResultWithEmptyItems, offset: number, limit: number, loadElements: (offset: number, limit: number) => Promise<ILoadElementsResult>, force?: boolean) => Promise<ILoadElementsResult>;
export declare const getObjRef: (filter: IAttributeFilter, identifier: string) => ObjRef;
export declare const getValidElementsFilters: (parentFilters: IAttributeFilter[], overAttribute: import("@gooddata/sdk-model").UriRef | import("@gooddata/sdk-model").IdentifierRef | ((parentFilter: IAttributeFilter, index: number) => ObjRef)) => IElementsQueryAttributeFilter[];
export declare const isParentFiltersElementsByRef: (parentFilters: IAttributeFilter[]) => boolean;
export declare const isParentFilteringEnabled: (backend: IAnalyticalBackend) => boolean;
export declare function attributeElementsToAttributeElementArray(elements: IAttributeElements): Array<Partial<IAttributeElement>>;
export declare function getFilterAttributeTitle(backend: IAnalyticalBackend, workspace: string, filter: IAttributeFilter): Promise<string>;
export declare function showAllFilteredMessage(isElementsLoading: boolean, parentFilters: IAttributeFilter[], totalElementsCount: number): boolean;
export declare function showItemsFilteredMessage(isElementsLoading: boolean, parentFilters: IAttributeFilter[]): boolean;
export declare function getParentFilterTitles(filters: IAttributeFilter[], backend: IAnalyticalBackend, workspace: string): Promise<string[]>;
//# sourceMappingURL=AttributeFilterUtils.d.ts.map
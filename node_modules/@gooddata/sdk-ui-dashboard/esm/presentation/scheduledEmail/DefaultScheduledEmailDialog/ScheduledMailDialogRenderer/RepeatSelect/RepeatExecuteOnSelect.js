import { __extends } from "tslib";
// (C) 2019-2020 GoodData Corporation
import * as React from "react";
import { injectIntl } from "react-intl";
import { Dropdown, DropdownList, DropdownButton, SingleSelectListItem } from "@gooddata/sdk-ui-kit";
import invariant from "ts-invariant";
import { DEFAULT_DROPDOWN_ALIGN_POINTS, DEFAULT_DROPDOWN_ZINDEX, REPEAT_EXECUTE_ON } from "../../constants";
import { getDate, getDayName, getWeek } from "../../utils/datetime";
var DROPDOWN_WIDTH = 154;
var RenderRepeatExecuteOnSelect = /** @class */ (function (_super) {
    __extends(RenderRepeatExecuteOnSelect, _super);
    function RenderRepeatExecuteOnSelect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isRepeatExecuteOnItemSelected = function (item) {
            return item.id === _this.props.repeatExecuteOn;
        };
        _this.getRepeatExecuteOnItem = function (repeatExecuteOn) {
            var _a = _this.props, intl = _a.intl, startDate = _a.startDate;
            return {
                id: repeatExecuteOn,
                title: intl.formatMessage({
                    id: "dialogs.schedule.email.repeats.execute.on." + repeatExecuteOn,
                }, {
                    date: getDate(startDate),
                    day: getDayName(startDate),
                    week: getWeek(startDate),
                }),
            };
        };
        _this.getRepeatExecuteOnItems = function () {
            return [REPEAT_EXECUTE_ON.DAY_OF_MONTH, REPEAT_EXECUTE_ON.DAY_OF_WEEK].map(_this.getRepeatExecuteOnItem);
        };
        _this.onRepeatExecuteOnChange = function (item) {
            _this.props.onChange(item.id);
        };
        return _this;
    }
    RenderRepeatExecuteOnSelect.prototype.render = function () {
        var _this = this;
        var repeatExecuteOnItems = this.getRepeatExecuteOnItems();
        var repeatExecuteOnItem = repeatExecuteOnItems.find(this.isRepeatExecuteOnItemSelected);
        invariant(repeatExecuteOnItem, "Inconsistent state in RepeatExecuteOnSelect");
        return (React.createElement(Dropdown, { alignPoints: DEFAULT_DROPDOWN_ALIGN_POINTS, className: "gd-schedule-email-dialog-repeat-execute-on s-gd-schedule-email-dialog-repeat-execute-on", renderBody: function (_a) {
                var closeDropdown = _a.closeDropdown, isMobile = _a.isMobile;
                return (React.createElement(DropdownList, { width: DROPDOWN_WIDTH, items: repeatExecuteOnItems, isMobile: isMobile, renderItem: function (_a) {
                        var item = _a.item;
                        return (React.createElement(SingleSelectListItem, { title: item.title, onClick: function () {
                                _this.onRepeatExecuteOnChange(item);
                                closeDropdown();
                            }, isSelected: repeatExecuteOnItem.id === item.id }));
                    } }));
            }, renderButton: function (_a) {
                var toggleDropdown = _a.toggleDropdown;
                return (React.createElement(DropdownButton, { value: repeatExecuteOnItem.title, onClick: toggleDropdown }));
            }, overlayPositionType: "sameAsTarget", overlayZIndex: DEFAULT_DROPDOWN_ZINDEX }));
    };
    return RenderRepeatExecuteOnSelect;
}(React.PureComponent));
export var RepeatExecuteOnSelect = injectIntl(RenderRepeatExecuteOnSelect);
//# sourceMappingURL=RepeatExecuteOnSelect.js.map
// (C) 2021 GoodData Corporation
import { eventGuard } from "./util";
export function dashboardInitialized(ctx, dashboard, insights, config, permissions, correlationId) {
    return {
        type: "GDC.DASH/EVT.INITIALIZED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            dashboard: dashboard,
            insights: insights,
            config: config,
            permissions: permissions,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardInitialized}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardInitialized = eventGuard("GDC.DASH/EVT.INITIALIZED");
export function dashboardSaved(ctx, dashboard, newDashboard, correlationId) {
    return {
        type: "GDC.DASH/EVT.SAVED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            dashboard: dashboard,
            newDashboard: newDashboard,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardSaved}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardSaved = eventGuard("GDC.DASH/EVT.SAVED");
export function dashboardCopySaved(ctx, dashboard, correlationId) {
    return {
        type: "GDC.DASH/EVT.COPY_SAVED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            dashboard: dashboard,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardCopySaved}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardCopySaved = eventGuard("GDC.DASH/EVT.COPY_SAVED");
export function dashboardRenamed(ctx, newTitle, correlationId) {
    return {
        type: "GDC.DASH/EVT.RENAMED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            newTitle: newTitle,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardRenamed}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardRenamed = eventGuard("GDC.DASH/EVT.RENAMED");
export function dashboardWasReset(ctx, dashboard, correlationId) {
    return {
        type: "GDC.DASH/EVT.RESET",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            dashboard: dashboard,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardWasReset}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardWasReset = eventGuard("GDC.DASH/EVT.RESET");
export function dashboardDeleted(ctx, dashboard, correlationId) {
    return {
        type: "GDC.DASH/EVT.DELETED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            dashboard: dashboard,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardDeleted}
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardDeleted = eventGuard("GDC.DASH/EVT.DELETED");
export function dateFilterValidationFailed(ctx, result, correlationId) {
    return {
        type: "GDC.DASH/EVT.FILTER_CONTEXT.DATE_FILTER.VALIDATION.FAILED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            result: result,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DateFilterValidationFailed}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDateFilterValidationFailed = eventGuard("GDC.DASH/EVT.FILTER_CONTEXT.DATE_FILTER.VALIDATION.FAILED");
export function dashboardExportToPdfRequested(ctx, correlationId) {
    return {
        type: "GDC.DASH/EVT.EXPORT.PDF.REQUESTED",
        ctx: ctx,
        correlationId: correlationId,
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardExportToPdfRequested}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardExportToPdfRequested = eventGuard("GDC.DASH/EVT.EXPORT.PDF.REQUESTED");
export function dashboardExportToPdfResolved(ctx, resultUri, correlationId) {
    return {
        type: "GDC.DASH/EVT.EXPORT.PDF.RESOLVED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            resultUri: resultUri,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardExportToPdfResolved}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardExportToPdfResolved = eventGuard("GDC.DASH/EVT.EXPORT.PDF.RESOLVED");
export function dashboardSharingChanged(ctx, newShareProps, correlationId) {
    return {
        type: "GDC.DASH/EVT.SHARING.CHANGED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            newShareProps: newShareProps,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardSharingChanged}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardSharingChanged = eventGuard("GDC.DASH/EVT.SHARING.CHANGED");
//# sourceMappingURL=dashboard.js.map
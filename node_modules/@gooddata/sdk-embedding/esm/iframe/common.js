// (C) 2020-2021 GoodData Corporation
import isEmpty from "lodash/isEmpty";
import isObject from "lodash/isObject";
import { GdcExecuteAFM } from "@gooddata/api-model-bear";
/**
 * List of products using post events
 *
 * @public
 */
export var GdcProductName;
(function (GdcProductName) {
    /**
     * AD product name
     */
    GdcProductName["ANALYTICAL_DESIGNER"] = "analyticalDesigner";
    /**
     * KD product name
     */
    GdcProductName["KPI_DASHBOARD"] = "dashboard";
})(GdcProductName || (GdcProductName = {}));
/**
 * Common event types in application
 *
 * @public
 */
export var GdcEventType;
(function (GdcEventType) {
    /**
     * Event to notify outer application that the command is invalid or have errors while processing
     */
    GdcEventType["AppCommandFailed"] = "appCommandFailed";
})(GdcEventType || (GdcEventType = {}));
/**
 * Enumeration of possible types of error messages posted from the apps.
 *
 * @public
 */
export var GdcErrorType;
(function (GdcErrorType) {
    /**
     * The posted command is not recognized.
     */
    GdcErrorType["InvalidCommand"] = "error:invalidCommand";
    /**
     * Argument specified in the command body is invalid; it has failed the syntactical
     * or semantic validation.
     */
    GdcErrorType["InvalidArgument"] = "error:invalidArgument";
    /**
     * Command was posted when the app is not in a state to process the command. For instance:
     *
     * - trying to do save/save-as on new, empty insight
     * - trying to do save/save-as on insight that is in error
     * - trying to do undo when there is no step-back available
     * - trying to do redo when there is no step-forward available
     */
    GdcErrorType["InvalidState"] = "error:invalidState";
    /**
     * The Unexpected Happened.
     */
    GdcErrorType["RuntimeError"] = "error:runtime";
})(GdcErrorType || (GdcErrorType = {}));
/**
 * Type-guard checking whether an object is an instance of {@link CommandFailedData}
 *
 * @param obj - object to test
 * @public
 */
export function isCommandFailedData(obj) {
    return isObject(obj) && getEventType(obj) === GdcEventType.AppCommandFailed;
}
/**
 * Get event type of event from event data
 * @param obj - the event data object
 * @public
 */
export function getEventType(obj) {
    var _a = (obj || {}).gdc, _b = (_a === void 0 ? {} : _a).event, _c = (_b === void 0 ? {} : _b).name, name = _c === void 0 ? "" : _c;
    return name;
}
/**
 * @public
 */
export var EmbeddedGdc;
(function (EmbeddedGdc) {
    /*
     * Attribute filters were exposed in the 'old' format that did not match backend and used the
     * textFilter boolean indicator. We have to honor this for the public API.
     */
    function isDateFilter(filter) {
        return !isEmpty(filter) && (isRelativeDateFilter(filter) || isAbsoluteDateFilter(filter));
    }
    EmbeddedGdc.isDateFilter = isDateFilter;
    function isRelativeDateFilter(filter) {
        return !isEmpty(filter) && filter.relativeDateFilter !== undefined;
    }
    EmbeddedGdc.isRelativeDateFilter = isRelativeDateFilter;
    function isAbsoluteDateFilter(filter) {
        return !isEmpty(filter) && filter.absoluteDateFilter !== undefined;
    }
    EmbeddedGdc.isAbsoluteDateFilter = isAbsoluteDateFilter;
    function isAttributeFilter(filter) {
        return !isEmpty(filter) && (isPositiveAttributeFilter(filter) || isNegativeAttributeFilter(filter));
    }
    EmbeddedGdc.isAttributeFilter = isAttributeFilter;
    function isPositiveAttributeFilter(filter) {
        return !isEmpty(filter) && filter.positiveAttributeFilter !== undefined;
    }
    EmbeddedGdc.isPositiveAttributeFilter = isPositiveAttributeFilter;
    function isNegativeAttributeFilter(filter) {
        return !isEmpty(filter) && filter.negativeAttributeFilter !== undefined;
    }
    EmbeddedGdc.isNegativeAttributeFilter = isNegativeAttributeFilter;
    EmbeddedGdc.isObjIdentifierQualifier = GdcExecuteAFM.isObjIdentifierQualifier;
    EmbeddedGdc.isObjectUriQualifier = GdcExecuteAFM.isObjectUriQualifier;
    function isRankingFilter(filter) {
        return !isEmpty(filter) && filter.rankingFilter !== undefined;
    }
    EmbeddedGdc.isRankingFilter = isRankingFilter;
    function isRemoveDateFilter(filter) {
        return !isEmpty(filter) && filter.dataSet !== undefined;
    }
    EmbeddedGdc.isRemoveDateFilter = isRemoveDateFilter;
    function isRemoveAttributeFilter(filter) {
        return (!isEmpty(filter) && filter.displayForm !== undefined);
    }
    EmbeddedGdc.isRemoveAttributeFilter = isRemoveAttributeFilter;
    function isRemoveRankingFilter(filter) {
        return (!isEmpty(filter) &&
            filter.removeRankingFilter !== undefined);
    }
    EmbeddedGdc.isRemoveRankingFilter = isRemoveRankingFilter;
    function isDashboardDateFilter(filter) {
        return !isEmpty(filter) && filter.dateFilter !== undefined;
    }
    EmbeddedGdc.isDashboardDateFilter = isDashboardDateFilter;
    function isDashboardAllTimeDateFilter(filter) {
        var _a;
        return !isEmpty(filter) && ((_a = filter.dateFilter) === null || _a === void 0 ? void 0 : _a.type) === "allTime";
    }
    EmbeddedGdc.isDashboardAllTimeDateFilter = isDashboardAllTimeDateFilter;
    function isDashboardAbsoluteDateFilter(filter) {
        var _a;
        return !isEmpty(filter) && ((_a = filter.dateFilter) === null || _a === void 0 ? void 0 : _a.type) === "absolute";
    }
    EmbeddedGdc.isDashboardAbsoluteDateFilter = isDashboardAbsoluteDateFilter;
    function isDashboardRelativeDateFilter(filter) {
        var _a;
        return !isEmpty(filter) && ((_a = filter.dateFilter) === null || _a === void 0 ? void 0 : _a.type) === "relative";
    }
    EmbeddedGdc.isDashboardRelativeDateFilter = isDashboardRelativeDateFilter;
    function isDashboardAttributeFilter(filter) {
        return !isEmpty(filter) && filter.attributeFilter !== undefined;
    }
    EmbeddedGdc.isDashboardAttributeFilter = isDashboardAttributeFilter;
})(EmbeddedGdc || (EmbeddedGdc = {}));
//# sourceMappingURL=common.js.map
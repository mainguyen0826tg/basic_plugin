import { __assign } from "tslib";
// (C) 2007-2018 GoodData Corporation
import React from "react";
import { bucketAttribute, bucketsFind, newAttributeSort, newBucket, } from "@gooddata/sdk-model";
import { BucketNames, useResolveValuesWithPlaceholders, } from "@gooddata/sdk-ui";
import { heatmapDimensions } from "../_commons/dimensions";
import { CoreHeatmap } from "./CoreHeatmap";
import { withChart } from "../_base/withChart";
//
// Internals
//
var heatmapDefinition = {
    chartName: "Heatmap",
    bucketPropsKeys: ["measure", "rows", "columns", "filters", "sortBy"],
    bucketsFactory: function (props) {
        return [
            newBucket(BucketNames.MEASURES, props.measure),
            newBucket(BucketNames.VIEW, props.rows),
            newBucket(BucketNames.STACK, props.columns),
        ];
    },
    executionFactory: function (props, buckets) {
        var _a;
        var backend = props.backend, workspace = props.workspace, execConfig = props.execConfig;
        var sortBy = getDefaultHeatmapSort(buckets);
        return (_a = backend
            .withTelemetry("Heatmap", props)
            .workspace(workspace)
            .execution()
            .forBuckets(buckets, props.filters))
            .withSorting.apply(_a, sortBy).withDimensions(heatmapDimensions)
            .withExecConfig(execConfig);
    },
};
var WrappedHeatmap = withChart(heatmapDefinition)(CoreHeatmap);
/**
 * [Heatmap](https://sdk.gooddata.com/gooddata-ui/docs/heatmap_component.html)
 *
 * Heatmap represents data as a matrix where individual values are represented as colors.
 * Heatmaps can help you discover trends and understand complex datasets.
 *
 * @public
 */
export var Heatmap = function (props) {
    var _a = useResolveValuesWithPlaceholders([props.measure, props.rows, props.columns, props.filters, props.sortBy], props.placeholdersResolutionContext), measure = _a[0], rows = _a[1], columns = _a[2], filters = _a[3], sortBy = _a[4];
    return (React.createElement(WrappedHeatmap, __assign({}, props, {
        measure: measure,
        rows: rows,
        columns: columns,
        filters: filters,
        sortBy: sortBy,
    })));
};
function getDefaultHeatmapSort(buckets) {
    var viewBucket = bucketsFind(buckets, BucketNames.VIEW);
    var viewAttribute = viewBucket ? bucketAttribute(viewBucket) : undefined;
    if (viewAttribute) {
        return [newAttributeSort(viewAttribute, "desc")];
    }
    return [];
}
//# sourceMappingURL=Heatmap.js.map
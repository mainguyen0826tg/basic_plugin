import { __assign } from "tslib";
// (C) 2021 GoodData Corporation
import React, { useCallback, useEffect, useMemo, useRef } from "react";
import { useIntl } from "react-intl";
import Select, { components as ReactSelectComponents } from "react-select";
import { getGranteeItemTestId } from "./utils";
/**
 * @internal
 */
export var AddGranteeSelect = function (props) {
    var granteesOption = props.granteesOption, onSelectGrantee = props.onSelectGrantee;
    var intl = useIntl();
    var selectRef = useRef(null);
    useEffect(function () {
        selectRef.current.focus();
    }, []);
    var onSelect = useCallback(function (value) {
        var grantee = value.value;
        onSelectGrantee(grantee);
    }, [onSelectGrantee]);
    var onInputChange = useCallback(function () {
        selectRef.current.select.getNextFocusedOption = function () { return false; };
    }, []);
    var noOptionsMessage = useMemo(function () { return function () {
        return intl.formatMessage({
            id: "shareDialog.share.grantee.add.search.no.matching.items",
        });
    }; }, []);
    var DropdownIndicator = function () {
        return null;
    };
    var IndicatorSeparator = function () {
        return null;
    };
    var InputRendered = function (props) {
        return (React.createElement("div", { className: "gd-share-dialog-input s-gd-share-dialog-input" },
            React.createElement(ReactSelectComponents.Input, __assign({}, props))));
    };
    var Option = function (props) {
        var value = props.value;
        var idStyle = getGranteeItemTestId(value, "option");
        return (React.createElement("div", { className: idStyle },
            React.createElement(ReactSelectComponents.Option, __assign({}, props))));
    };
    return (React.createElement("div", { className: "gd-share-dialog-content-select" },
        React.createElement(Select, { ref: selectRef, onInputChange: onInputChange, defaultMenuIsOpen: true, classNamePrefix: "gd-share-dialog", components: { DropdownIndicator: DropdownIndicator, IndicatorSeparator: IndicatorSeparator, Input: InputRendered, Option: Option }, options: granteesOption, defaultValue: undefined, placeholder: intl.formatMessage({
                id: "shareDialog.share.grantee.add.search.placeholder",
            }), noOptionsMessage: noOptionsMessage, onChange: onSelect, value: null })));
};
//# sourceMappingURL=AddGranteeSelect.js.map
import { __assign } from "tslib";
// (C) 2020 GoodData Corporation
import React, { useMemo } from "react";
import { useDashboardComponentsContext } from "../../dashboardContexts";
import { extendedWidgetDebugStr } from "../../../model";
import { DefaultDashboardWidget } from "./DefaultDashboardWidget";
import { isDashboardWidget } from "@gooddata/sdk-backend-spi";
var BadWidgetType = function () {
    return React.createElement("div", null, "Missing renderer");
};
var MissingWidget = function () {
    return React.createElement("div", null, "Missing widget");
};
/**
 * @internal
 */
export var DashboardWidget = function (props) {
    var WidgetComponentProvider = useDashboardComponentsContext().WidgetComponentProvider;
    var widget = props.widget;
    var WidgetComponent = useMemo(function () {
        // TODO: we need to get rid of this; the widget being optional at this point is the problem; the parent
        //  components (or possibly the model) should deal with layout items that have no valid widgets associated
        //  and thus short-circuit.
        if (!widget) {
            return MissingWidget;
        }
        var Component = WidgetComponentProvider(widget);
        if (Component) {
            return Component;
        }
        if (isDashboardWidget(widget)) {
            return DefaultDashboardWidget;
        }
        else if (widget) {
            // eslint-disable-next-line no-console
            console.warn("Unable to render widget " + extendedWidgetDebugStr(widget));
            return BadWidgetType;
        }
        else {
            // TODO: same as the above note
            // eslint-disable-next-line no-console
            console.warn("Attempting render an undefined widget.");
            return MissingWidget;
        }
    }, [widget]);
    return React.createElement(WidgetComponent, __assign({}, props));
};
//# sourceMappingURL=DashboardWidget.js.map
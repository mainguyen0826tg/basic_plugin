import { __extends } from "tslib";
// (C) 2020 GoodData Corporation
import omit from "lodash/omit";
import { AttributeColorStrategy, ColorStrategy, isValidMappedColor, getColorFromMapping, } from "@gooddata/sdk-ui-vis-commons";
import { findGeoAttributesInDimension } from "../helpers/geoChart/data";
var GeoChartColorStrategy = /** @class */ (function (_super) {
    __extends(GeoChartColorStrategy, _super);
    function GeoChartColorStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GeoChartColorStrategy.prototype.createColorAssignment = function (colorPalette, colorMapping, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    locationAttribute, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    segmentByAttribute, dv) {
        // color follows SegmentBy
        if (segmentByAttribute) {
            return {
                fullColorAssignment: this.getColorStrategyForSegmentBy(colorPalette, colorMapping, segmentByAttribute, dv)
            };
        }
        // color follows Location
        return {
            fullColorAssignment: [
                this.getColorStrategyForLocation(colorPalette, colorMapping, locationAttribute, dv),
            ]
        };
    };
    GeoChartColorStrategy.prototype.getColorStrategyForSegmentBy = function (colorPalette, colorMapping, segmentByAttribute, dv) {
        var colorStrategy = new AttributeColorStrategy(colorPalette, colorMapping, null, segmentByAttribute, dv);
        return colorStrategy.getColorAssignment();
    };
    GeoChartColorStrategy.prototype.getColorStrategyForLocation = function (colorPalette, colorMapping, locationAttribute, dv) {
        var mappedColor = getColorFromMapping(locationAttribute, colorMapping, dv);
        var color = mappedColor !== undefined && isValidMappedColor(mappedColor, colorPalette)
            ? mappedColor
            : {
                type: "guid",
                value: colorPalette[0].guid
            };
        return {
            headerItem: locationAttribute,
            color: color
        };
    };
    return GeoChartColorStrategy;
}(ColorStrategy));
export function getColorStrategy(colorPalette, colorMapping, geoData, dv) {
    var _a = findGeoAttributesInDimension(dv, geoData), locationAttribute = _a.locationAttribute, segmentByAttribute = _a.segmentByAttribute;
    var locationAttributeHeader = {
        attributeHeader: omit(locationAttribute, "items")
    };
    return new GeoChartColorStrategy(colorPalette, colorMapping, locationAttributeHeader, segmentByAttribute, dv);
}
//# sourceMappingURL=geoChart.js.map
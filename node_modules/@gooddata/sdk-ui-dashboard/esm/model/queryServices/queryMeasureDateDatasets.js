import { __generator } from "tslib";
import { newBucket, newInsightDefinition, newMeasure, objRefToString, serializeObjRef, } from "@gooddata/sdk-model";
import { createCachedQueryService } from "../store/_infra/queryService";
import { call, select } from "redux-saga/effects";
import { loadDateDatasetsForInsight } from "./loadAvailableDateDatasets";
import fromPairs from "lodash/fromPairs";
import { sanitizeDateDatasetTitle, sortByRelevanceAndTitle, } from "../../_staging/catalog/dateDatasetOrdering";
import { selectAllCatalogMeasuresMap } from "../store/catalog/catalogSelectors";
import { invalidQueryArguments } from "../events/general";
export var QueryDateDatasetsForMeasureService = createCachedQueryService("GDC.DASH/QUERY.MEASURE.DATE.DATASETS", queryService, function (query) { return serializeObjRef(query.payload.measureRef); });
/**
 * Selector that will return date datasets for a measure. The input to the selector is the dashboard query that is used
 * to obtain and cache the data.
 *
 * This selector will return undefined if the query to obtain the data for a particular measure was not yet fired or
 * processed. Otherwise will return object containing `status` of the data retrieval; if the `status` is
 * `'success'` then the `result` prop will contain the data.
 *
 * @remarks see {@link QueryMeasureDateDatasets}
 * @internal
 */
export var selectDateDatasetsForMeasure = QueryDateDatasetsForMeasureService.cache.selectQueryResult;
//
// Query implementation
//
function queryService(ctx, query) {
    var measureRef, measures, measure, intermediateInsight, dateDatasets, dateDatasetDisplayNames;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                measureRef = query.payload.measureRef;
                return [4 /*yield*/, select(selectAllCatalogMeasuresMap)];
            case 1:
                measures = _a.sent();
                measure = measures.get(measureRef);
                if (!measure) {
                    throw invalidQueryArguments(ctx, "Measure " + objRefToString(measureRef) + " does not exist.", query.correlationId);
                }
                intermediateInsight = newInsightDefinition("local:headline", function (i) {
                    return i.buckets([
                        newBucket("measures", newMeasure(measure.measure.ref, function (m) { return m.localId("measure_date_datasets_availability"); })),
                    ]);
                });
                return [4 /*yield*/, call(loadDateDatasetsForInsight, ctx, intermediateInsight)];
            case 2:
                dateDatasets = _a.sent();
                dateDatasetDisplayNames = fromPairs(dateDatasets.map(function (d) { return [d.dataSet.title, sanitizeDateDatasetTitle(d)]; }));
                return [2 /*return*/, {
                        dateDatasets: dateDatasets,
                        dateDatasetsOrdered: sortByRelevanceAndTitle(dateDatasets, dateDatasetDisplayNames),
                        dateDatasetDisplayNames: dateDatasetDisplayNames,
                    }];
        }
    });
}
//# sourceMappingURL=queryMeasureDateDatasets.js.map
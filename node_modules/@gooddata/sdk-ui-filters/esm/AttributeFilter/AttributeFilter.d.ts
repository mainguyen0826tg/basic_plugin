import React from "react";
import { IAttributeFilter, ObjRef } from "@gooddata/sdk-model";
import { IAnalyticalBackend } from "@gooddata/sdk-backend-spi";
import { AttributeFiltersOrPlaceholders, IPlaceholder, OnError } from "@gooddata/sdk-ui";
/**
 * @public
 */
export interface IAttributeFilterProps {
    /**
     * Optionally specify an instance of analytical backend instance to work with.
     *
     * Note: if you do not have a BackendProvider above in the component tree, then you MUST specify the backend.
     */
    backend?: IAnalyticalBackend;
    /**
     * Optionally specify workspace to work with.
     *
     * Note: if you do not have a WorkspaceProvider above in the component tree, then you MUST specify the workspace.
     */
    workspace?: string;
    /**
     * Specify identifier of attribute, for which you want to construct the filter.
     *
     * Note: this is optional and deprecated. If you do not specify this, then you MUST specify the filter prop.
     *
     * @deprecated - use the filter prop instead
     */
    identifier?: string;
    /**
     * Specify an attribute filter that will be customized using this filter. The component will use content of the
     * filter and select the items that are already specified on the filter.
     */
    filter?: IAttributeFilter;
    /**
     * Specify a parent attribute filter that will be used to reduce options for available components options.
     *
     * Parent filters elements must contain their URIs due to current backend limitations.
     */
    parentFilters?: AttributeFiltersOrPlaceholders;
    /**
     * Specify {@link @gooddata/sdk-ui#IPlaceholder} to use to get and set the value of the attribute filter.
     *
     * Note: It's not possible to combine this property with "filter" property. Either - provide a value, or a placeholder.
     * There is no need to specify 'onApply' callback if 'connectToPlaceholder' property is used as the value of the filter
     * is set via this placeholder.
     */
    connectToPlaceholder?: IPlaceholder<IAttributeFilter>;
    /**
     * Specify the over attribute - an attribute the filter and its parent filter are connected through.
     *
     * You can either provide an {@link @gooddata/sdk-model#ObjRef} which will be used for all the parent filters,
     * or you can provide a function that will be called for each parent filter to determine the respective over attribute.
     */
    parentFilterOverAttribute?: ObjRef | ((parentFilter: IAttributeFilter, index: number) => ObjRef);
    /**
     * Specify function which will be called when user clicks 'Apply' button. The function will receive the current
     * specification of the filter, as it was updated by the user.
     *
     * @param filter - new value of the filter.
     */
    onApply?: (filter: IAttributeFilter) => void;
    /**
     * Optionally specify title for the attribute filter. By default, the attribute name will be used.
     */
    title?: string;
    /**
     * Optionally customize whether selected items should be summarized in the title of the filter - so that
     * they are visible even if the filter is closed.
     */
    titleWithSelection?: boolean;
    /**
     * Optionally customize, whether the filter should take the entire screen on mobile devices.
     */
    fullscreenOnMobile?: boolean;
    /**
     * Optionally customize locale to use for the different strings that appear on the filter component.
     */
    locale?: string;
    /**
     * Optionally customize attribute filter with a callback function to trigger when an error occurs while
     * loading attribute elements.
     */
    onError?: OnError;
    /**
     * Optionally customize attribute filter with a component to be rendered if attribute elements are loading
     */
    FilterLoading?: React.ComponentType;
    /**
     * Optionally customize attribute filter with a component to be rendered if attribute elements loading fails
     */
    FilterError?: React.ComponentType<{
        error?: any;
    }>;
}
/**
 * AttributeFilter is a component that renders a dropdown populated with attribute values
 * for specified attribute display form.
 *
 * @public
 */
export declare const AttributeFilter: React.ComponentType<IAttributeFilterProps>;
//# sourceMappingURL=AttributeFilter.d.ts.map
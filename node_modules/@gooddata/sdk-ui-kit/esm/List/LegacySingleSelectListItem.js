import { __extends } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { Component } from "react";
import cx from "classnames";
import { stringUtils } from "@gooddata/util";
import noop from "lodash/noop";
import { BubbleHoverTrigger } from "../Bubble/BubbleHoverTrigger";
import { Bubble } from "../Bubble/Bubble";
var BUBBLE_OFFSET_X = 16;
/**
 * @internal
 * @deprecated This component is deprecated use SingleSelectListItem instead
 */
var LegacySingleSelectListItem = /** @class */ (function (_super) {
    __extends(LegacySingleSelectListItem, _super);
    function LegacySingleSelectListItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { isOverflowed: false };
        _this.node = null;
        _this.handleSelect = function () {
            _this.props.onSelect(_this.props.source);
        };
        _this.handleMouseOver = function () {
            _this.props.onMouseOver(_this.props.source);
        };
        _this.handleMouseOut = function () {
            _this.props.onMouseOut(_this.props.source);
        };
        return _this;
    }
    LegacySingleSelectListItem.prototype.componentDidMount = function () {
        this.checkOverflow();
    };
    LegacySingleSelectListItem.prototype.componentDidUpdate = function () {
        this.checkOverflow();
    };
    LegacySingleSelectListItem.prototype.getClassNames = function () {
        var _a = this.props, source = _a.source, selected = _a.selected;
        var generatedSeleniumClass = "s-" + stringUtils.simplifyText(source.title);
        return cx("gd-list-item", generatedSeleniumClass, { "is-selected": selected });
    };
    LegacySingleSelectListItem.prototype.checkOverflow = function () {
        if (this.node) {
            // Checks if ellipsis has been applicated on title span
            var isOverflowed = this.node.offsetWidth < this.node.scrollWidth;
            if (isOverflowed !== this.state.isOverflowed) {
                // eslint-disable-next-line react/no-did-mount-set-state
                this.setState({
                    isOverflowed: isOverflowed,
                });
            }
        }
    };
    LegacySingleSelectListItem.prototype.renderTitle = function () {
        var _this = this;
        var title = this.props.source.title;
        var titleElement = (React.createElement("span", { ref: function (node) {
                _this.node = node;
            } }, title));
        if (this.state.isOverflowed) {
            return (React.createElement(BubbleHoverTrigger, null,
                titleElement,
                React.createElement(Bubble, { className: "bubble-primary", alignPoints: [{ align: "cr cl" }, { align: "cl cr" }], arrowOffsets: {
                        "cr cl": [BUBBLE_OFFSET_X, 0],
                        "cl cr": [-BUBBLE_OFFSET_X, 0],
                    } }, title)));
        }
        return titleElement;
    };
    LegacySingleSelectListItem.prototype.renderIcon = function (icon) {
        if (icon) {
            var iconClasses = cx("gd-list-icon", icon);
            return React.createElement("span", { className: iconClasses });
        }
        return null;
    };
    LegacySingleSelectListItem.prototype.render = function () {
        var _a;
        var icon = (_a = this.props.source) === null || _a === void 0 ? void 0 : _a.icon;
        return (React.createElement("div", { className: this.getClassNames(), onClick: this.handleSelect, onMouseOver: this.handleMouseOver, onMouseOut: this.handleMouseOut },
            this.renderIcon(icon),
            this.renderTitle()));
    };
    LegacySingleSelectListItem.defaultProps = {
        onMouseOver: noop,
        onMouseOut: noop,
    };
    return LegacySingleSelectListItem;
}(Component));
export { LegacySingleSelectListItem };
//# sourceMappingURL=LegacySingleSelectListItem.js.map
import { __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { FormattedMessage } from "react-intl";
import { Bubble, BubbleHoverTrigger } from "@gooddata/sdk-ui-kit";
import ConfigSection from "../configurationControls/ConfigSection";
import CheckboxControl from "../configurationControls/CheckboxControl";
import DataLabelsControl from "../configurationControls/DataLabelsControl";
import DataPointsControl from "../configurationControls/DataPointsControl";
import { SHOW_DELAY_DEFAULT, HIDE_DELAY_DEFAULT, BUBBLE_ARROW_OFFSET_X, BUBBLE_ARROW_OFFSET_Y, } from "../../constants/bubble";
import BaseChartConfigurationPanel from "./BaseChartConfigurationPanel";
var LineChartBasedConfigurationPanel = /** @class */ (function (_super) {
    __extends(LineChartBasedConfigurationPanel, _super);
    function LineChartBasedConfigurationPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LineChartBasedConfigurationPanel.prototype.renderConfigurationPanel = function () {
        var _a = this.getControlProperties(), gridEnabled = _a.gridEnabled, axes = _a.axes;
        var _b = this.props, featureFlags = _b.featureFlags, properties = _b.properties, propertiesMeta = _b.propertiesMeta, pushData = _b.pushData, panelConfig = _b.panelConfig, _c = _b.dataLabelDefaultValue, dataLabelDefaultValue = _c === void 0 ? false : _c;
        var isDataPointsControlDisabled = panelConfig.isDataPointsControlDisabled;
        var controlsDisabled = this.isControlDisabled();
        return (React.createElement(BubbleHoverTrigger, { showDelay: SHOW_DELAY_DEFAULT, hideDelay: HIDE_DELAY_DEFAULT },
            React.createElement("div", null,
                this.renderColorSection(),
                this.getBaseChartAxisSection(axes),
                this.renderLegendSection(),
                React.createElement(ConfigSection, { id: "canvas_section", className: "gd-canvas-section", title: "properties.canvas.title", propertiesMeta: propertiesMeta, properties: properties, pushData: pushData },
                    React.createElement(DataLabelsControl, { pushData: pushData, properties: properties, isDisabled: controlsDisabled, defaultValue: dataLabelDefaultValue }),
                    featureFlags["enableHidingOfDataPoints"] && (React.createElement(DataPointsControl, { pushData: pushData, properties: properties, isDisabled: controlsDisabled || isDataPointsControlDisabled, showDisabledMessage: isDataPointsControlDisabled })),
                    React.createElement(CheckboxControl, { valuePath: "grid.enabled", labelText: "properties.canvas.gridline", properties: properties, checked: gridEnabled, disabled: controlsDisabled, pushData: pushData }))),
            React.createElement(Bubble, { className: this.getBubbleClassNames(), arrowOffsets: { "tc bc": [BUBBLE_ARROW_OFFSET_X, BUBBLE_ARROW_OFFSET_Y] }, alignPoints: [{ align: "tc bc" }] },
                React.createElement(FormattedMessage, { id: "properties.config.not_applicable" }))));
    };
    return LineChartBasedConfigurationPanel;
}(BaseChartConfigurationPanel));
export default LineChartBasedConfigurationPanel;
//# sourceMappingURL=LineChartBasedConfigurationPanel.js.map
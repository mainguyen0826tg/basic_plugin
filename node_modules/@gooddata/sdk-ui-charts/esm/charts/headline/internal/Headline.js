import { __assign, __extends, __spreadArrays } from "tslib";
// (C) 2007-2018 GoodData Corporation
import React, { createRef } from "react";
import Measure from "react-measure";
import { ResponsiveText } from "@gooddata/sdk-ui-kit";
import cx from "classnames";
import { formatItemValue, formatPercentageValue } from "./utils/HeadlineDataItemUtils";
import noop from "lodash/noop";
import { HeadlinePagination, calculateHeadlineHeightFontSize, shouldRenderPagination, getHeadlineResponsiveClassName, } from "@gooddata/sdk-ui-vis-commons";
/**
 * The React component that renders the Headline visualisation.
 */
var Headline = /** @class */ (function (_super) {
    __extends(Headline, _super);
    function Headline() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.secondaryItemTitleWrapperRef = createRef();
        _this.handleClickOnPrimaryItem = function (event) {
            var primaryItem = _this.props.data.primaryItem;
            _this.fireDrillEvent(primaryItem, "primaryValue", event.target);
        };
        _this.handleClickOnSecondaryItem = function (event) {
            var secondaryItem = _this.props.data.secondaryItem;
            _this.fireDrillEvent(secondaryItem, "secondaryValue", event.target);
        };
        _this.renderTertiaryItem = function () {
            var tertiaryItem = _this.props.data.tertiaryItem;
            var formattedItem = formatPercentageValue(tertiaryItem);
            return (React.createElement("div", { className: "gd-flex-item headline-compare-section-item headline-tertiary-item s-headline-tertiary-item" },
                React.createElement("div", { className: _this.getValueWrapperClasses(formattedItem) }, formattedItem.value),
                React.createElement("div", { className: "headline-title-wrapper s-headline-title-wrapper", title: tertiaryItem.title }, tertiaryItem.title)));
        };
        _this.renderSecondaryItem = function () {
            var _a = _this.props, secondaryItem = _a.data.secondaryItem, config = _a.config;
            var formattedItem = formatItemValue(secondaryItem, config);
            var valueClickCallback = secondaryItem.isDrillable ? _this.handleClickOnSecondaryItem : null;
            var secondaryValue = secondaryItem.isDrillable
                ? _this.renderHeadlineItemAsLink(formattedItem)
                : _this.renderHeadlineItemAsValue(formattedItem);
            return (React.createElement("div", { className: _this.getSecondaryItemClasses(secondaryItem), onClick: valueClickCallback },
                React.createElement("div", { className: "headline-value-wrapper s-headline-value-wrapper", style: formattedItem.cssStyle },
                    React.createElement(ResponsiveText, null, secondaryValue)),
                React.createElement("div", { className: "headline-title-wrapper s-headline-title-wrapper", title: secondaryItem.title, ref: _this.secondaryItemTitleWrapperRef }, secondaryItem.title)));
        };
        return _this;
    }
    Headline.prototype.componentDidMount = function () {
        this.props.onAfterRender();
    };
    Headline.prototype.componentDidUpdate = function () {
        this.props.onAfterRender();
    };
    Headline.prototype.render = function () {
        var _this = this;
        return (React.createElement(Measure, { client: true }, function (_a) {
            var _b, _c, _d;
            var measureRef = _a.measureRef, contentRect = _a.contentRect;
            return (React.createElement("div", { className: "headline", ref: measureRef },
                _this.renderPrimaryItem((_b = contentRect.client) === null || _b === void 0 ? void 0 : _b.height),
                _this.renderCompareItems((_c = contentRect.client) === null || _c === void 0 ? void 0 : _c.width, (_d = contentRect.client) === null || _d === void 0 ? void 0 : _d.height)));
        }));
    };
    Headline.prototype.getDrillableClasses = function (isDrillable) {
        return isDrillable ? ["is-drillable", "s-is-drillable"] : [];
    };
    Headline.prototype.getPrimaryItemClasses = function (primaryItem) {
        return cx(__spreadArrays([
            "headline-primary-item",
            "s-headline-primary-item"
        ], this.getDrillableClasses(primaryItem.isDrillable)));
    };
    Headline.prototype.getSecondaryItemClasses = function (secondaryItem) {
        return cx(__spreadArrays([
            "gd-flex-item",
            "headline-compare-section-item",
            "headline-secondary-item",
            "s-headline-secondary-item"
        ], this.getDrillableClasses(secondaryItem.isDrillable)));
    };
    Headline.prototype.getValueWrapperClasses = function (formattedItem) {
        return cx(["headline-value-wrapper", "s-headline-value-wrapper"], {
            "headline-value--empty": formattedItem.isValueEmpty,
            "s-headline-value--empty": formattedItem.isValueEmpty,
        });
    };
    Headline.prototype.fireDrillEvent = function (item, elementType, elementTarget) {
        var onDrill = this.props.onDrill;
        if (onDrill) {
            var itemContext = {
                localIdentifier: item.localIdentifier,
                value: item.value,
                element: elementType,
            };
            onDrill(itemContext, elementTarget);
        }
    };
    Headline.prototype.renderCompareItems = function (clientWidth, clientHeight) {
        var _a = this.props, secondaryItem = _a.data.secondaryItem, config = _a.config;
        if (!secondaryItem) {
            return null;
        }
        var pagination = shouldRenderPagination(config.enableCompactSize, clientWidth, clientHeight);
        if (pagination) {
            return (React.createElement("div", { className: "gd-flex-container headline-compare-section headline-paginated-compare-section" },
                React.createElement(HeadlinePagination, { renderSecondaryItem: this.renderSecondaryItem, renderTertiaryItem: this.renderTertiaryItem })));
        }
        return (React.createElement("div", { className: this.getCompareSectionClasses(clientWidth) },
            this.renderTertiaryItem(),
            this.renderSecondaryItem()));
    };
    Headline.prototype.renderHeadlineItem = function (item, formattedItem) {
        return item.isDrillable
            ? this.renderHeadlineItemAsLink(formattedItem)
            : this.renderHeadlineItemAsValue(formattedItem);
    };
    Headline.prototype.renderHeadlineItemAsValue = function (formattedItem) {
        var valueClassNames = cx(["headline-value", "s-headline-value"], {
            "headline-value--empty": formattedItem.isValueEmpty,
            "s-headline-value--empty": formattedItem.isValueEmpty,
            "headline-link-style-underline": !this.props.disableDrillUnderline,
        });
        return React.createElement("div", { className: valueClassNames }, formattedItem.value);
    };
    Headline.prototype.renderHeadlineItemAsLink = function (formattedItem) {
        return (React.createElement("div", { className: "headline-item-link s-headline-item-link" }, this.renderHeadlineItemAsValue(formattedItem)));
    };
    Headline.prototype.renderPrimaryItem = function (clientHeight) {
        var _a = this.props, _b = _a.data, primaryItem = _b.primaryItem, secondaryItem = _b.secondaryItem, config = _a.config;
        var formattedItem = formatItemValue(primaryItem, config);
        var valueClickCallback = primaryItem.isDrillable ? this.handleClickOnPrimaryItem : null;
        if (config.enableCompactSize) {
            if (!clientHeight) {
                return null;
            }
            var _c = calculateHeadlineHeightFontSize(!!secondaryItem, clientHeight), height = _c.height, fontSize = _c.fontSize;
            var heightStyles = { height: height + "px", lineHeight: height + "px" };
            return (React.createElement("div", { className: this.getPrimaryItemClasses(primaryItem), style: __assign(__assign({}, formattedItem.cssStyle), heightStyles) },
                React.createElement("div", { style: { fontSize: fontSize + "px" } },
                    React.createElement(ResponsiveText, null,
                        React.createElement("div", { className: "headline-value-wrapper", onClick: valueClickCallback }, this.renderHeadlineItem(primaryItem, formattedItem))))));
        }
        return (React.createElement("div", { className: this.getPrimaryItemClasses(primaryItem), style: formattedItem.cssStyle },
            React.createElement(ResponsiveText, null,
                React.createElement("div", { className: "headline-value-wrapper", onClick: valueClickCallback }, this.renderHeadlineItem(primaryItem, formattedItem)))));
    };
    Headline.prototype.getCompareSectionClasses = function (clientWidth) {
        var responsiveClassName = getHeadlineResponsiveClassName(clientWidth, this.isShortenedLabel());
        return cx("gd-flex-container", "headline-compare-section", responsiveClassName);
    };
    Headline.prototype.isShortenedLabel = function () {
        if (!this.secondaryItemTitleWrapperRef.current) {
            return false;
        }
        var height = this.secondaryItemTitleWrapperRef.current.getBoundingClientRect().height;
        var lineHeight = window.getComputedStyle(this.secondaryItemTitleWrapperRef.current).lineHeight;
        return height > parseFloat(lineHeight) * 2;
    };
    Headline.defaultProps = {
        onDrill: function () { return true; },
        onAfterRender: noop,
        config: {},
        disableDrillUnderline: false,
    };
    return Headline;
}(React.Component));
export default Headline;
//# sourceMappingURL=Headline.js.map
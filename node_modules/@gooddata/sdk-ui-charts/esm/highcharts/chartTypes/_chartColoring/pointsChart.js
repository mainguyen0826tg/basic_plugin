import { __extends } from "tslib";
// (C) 2020 GoodData Corporation
import { isColorFromPalette } from "@gooddata/sdk-model";
import { findMeasureGroupInDimensions } from "../_util/executionResultHelper";
import { isValidMappedColor, getColorByGuid, getColorFromMapping, getRgbStringFromRGB, AttributeColorStrategy, } from "@gooddata/sdk-ui-vis-commons";
var PointsChartColorStrategy = /** @class */ (function (_super) {
    __extends(PointsChartColorStrategy, _super);
    function PointsChartColorStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PointsChartColorStrategy.prototype.singleMeasureColorMapping = function (colorPalette, colorMapping, dv) {
        var measureGroup = findMeasureGroupInDimensions(dv.meta().dimensions());
        var measureHeaderItem = measureGroup.items[0];
        var measureColorMapping = getColorFromMapping(measureHeaderItem, colorMapping, dv);
        var color = isValidMappedColor(measureColorMapping, colorPalette)
            ? measureColorMapping
            : { type: "guid", value: colorPalette[0].guid };
        return [
            {
                headerItem: measureHeaderItem,
                color: color,
            },
        ];
    };
    PointsChartColorStrategy.prototype.createSingleColorPalette = function (colorPalette, colorAssignment, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    viewByAttribute) {
        var length = viewByAttribute ? viewByAttribute.items.length : 1;
        var color = isColorFromPalette(colorAssignment[0].color)
            ? getColorByGuid(colorPalette, colorAssignment[0].color.value, 0)
            : colorAssignment[0].color.value;
        var colorString = getRgbStringFromRGB(color);
        return Array(length).fill(colorString);
    };
    return PointsChartColorStrategy;
}(AttributeColorStrategy));
export { PointsChartColorStrategy };
//# sourceMappingURL=pointsChart.js.map
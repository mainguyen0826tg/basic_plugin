import { __assign } from "tslib";
// (C) 2019-2021 GoodData Corporation
import isEmpty from "lodash/isEmpty";
import { isUiRelativeDateFilterForm, } from "../interfaces";
import { isRelativeDateFilterPreset, } from "@gooddata/sdk-backend-spi";
export function getDateFilterOptionGranularity(dateFilterOption) {
    return isUiRelativeDateFilterForm(dateFilterOption) || isRelativeDateFilterPreset(dateFilterOption)
        ? dateFilterOption.granularity
        : undefined;
}
function isDateFilterOptionVisible(option) {
    return option && option.visible;
}
function pickDateFilterOptionIfVisible(option) {
    return isDateFilterOptionVisible(option) ? option : undefined;
}
function filterVisibleRelativePresets(relativePreset) {
    return Object.keys(relativePreset).reduce(function (filtered, granularity) {
        var presetsOfGranularity = relativePreset[granularity];
        var visiblePresetsOfGranularity = presetsOfGranularity.filter(isDateFilterOptionVisible);
        if (visiblePresetsOfGranularity.length) {
            filtered[granularity] = visiblePresetsOfGranularity;
        }
        return filtered;
    }, {});
}
function removeEmptyKeysFromDateFilterOptions(dateFilterOptions) {
    var absoluteForm = dateFilterOptions.absoluteForm, absolutePreset = dateFilterOptions.absolutePreset, allTime = dateFilterOptions.allTime, relativeForm = dateFilterOptions.relativeForm, relativePreset = dateFilterOptions.relativePreset;
    return __assign(__assign(__assign(__assign(__assign({}, (allTime && { allTime: allTime })), (absoluteForm && { absoluteForm: absoluteForm })), (!isEmpty(absolutePreset) && { absolutePreset: absolutePreset })), (relativeForm && { relativeForm: relativeForm })), (!isEmpty(relativePreset) && { relativePreset: relativePreset }));
}
/**
 * Returns dateFilterOptions with only items that have visible set to true.
 *
 * @param dateFilterOptions - options to filter
 * @public
 */
export function filterVisibleDateFilterOptions(dateFilterOptions) {
    var _a;
    var allTime = pickDateFilterOptionIfVisible(dateFilterOptions.allTime);
    var absoluteForm = pickDateFilterOptionIfVisible(dateFilterOptions.absoluteForm);
    var relativeForm = pickDateFilterOptionIfVisible(dateFilterOptions.relativeForm);
    var absolutePreset = (_a = dateFilterOptions.absolutePreset) === null || _a === void 0 ? void 0 : _a.filter(isDateFilterOptionVisible);
    var relativePreset = dateFilterOptions.relativePreset && filterVisibleRelativePresets(dateFilterOptions.relativePreset);
    return removeEmptyKeysFromDateFilterOptions({
        allTime: allTime,
        absoluteForm: absoluteForm,
        absolutePreset: absolutePreset,
        relativeForm: relativeForm,
        relativePreset: relativePreset,
    });
}
function sanitizePreset(option) {
    if (option.from > option.to) {
        return __assign(__assign({}, option), { from: option.to, to: option.from });
    }
    return option;
}
function sanitizeRelativePresets(relativePreset) {
    return Object.keys(relativePreset).reduce(function (filtered, granularity) {
        var presetsOfGranularity = relativePreset[granularity];
        filtered[granularity] = presetsOfGranularity.map(sanitizePreset);
        return filtered;
    }, {});
}
/**
 * Returns dateFilterOptions with all the presets sanitized, i.e. having from <= to.
 * @param dateFilterOptions - options to sanitize
 */
export function sanitizePresetIntervals(dateFilterOptions) {
    var _a;
    var absolutePreset = (_a = dateFilterOptions.absolutePreset) === null || _a === void 0 ? void 0 : _a.map(sanitizePreset);
    var relativePreset = dateFilterOptions.relativePreset && sanitizeRelativePresets(dateFilterOptions.relativePreset);
    return removeEmptyKeysFromDateFilterOptions(__assign(__assign({}, dateFilterOptions), { absolutePreset: absolutePreset,
        relativePreset: relativePreset }));
}
//# sourceMappingURL=OptionUtils.js.map
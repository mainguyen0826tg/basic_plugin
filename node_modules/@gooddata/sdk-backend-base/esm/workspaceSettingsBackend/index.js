import { __assign, __awaiter, __extends, __generator } from "tslib";
// (C) 2021 GoodData Corporation
import identity from "lodash/identity";
import { decoratedBackend } from "../decoratedBackend";
import { DecoratedWorkspaceSettingsService } from "../decoratedBackend/workspaceSettings";
var WithModifiedWorkspaceSettingsService = /** @class */ (function (_super) {
    __extends(WithModifiedWorkspaceSettingsService, _super);
    function WithModifiedWorkspaceSettingsService(decorated, settingsWrapper, currentUserSettingsWrapper, commonSettingsSetter) {
        var _this = _super.call(this, decorated) || this;
        _this.settingsWrapper = settingsWrapper;
        _this.currentUserSettingsWrapper = currentUserSettingsWrapper;
        _this.commonSettingsSetter = commonSettingsSetter;
        return _this;
    }
    WithModifiedWorkspaceSettingsService.prototype.getSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var settings;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.decorated.getSettings()];
                    case 1:
                        settings = _a.sent();
                        return [2 /*return*/, this.settingsWrapper(__assign(__assign({}, settings), this.commonSettingsSetter(settings)))];
                }
            });
        });
    };
    WithModifiedWorkspaceSettingsService.prototype.getSettingsForCurrentUser = function () {
        return __awaiter(this, void 0, void 0, function () {
            var currentUserSettings;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.decorated.getSettingsForCurrentUser()];
                    case 1:
                        currentUserSettings = _a.sent();
                        return [2 /*return*/, this.currentUserSettingsWrapper(__assign(__assign({}, currentUserSettings), this.commonSettingsSetter(currentUserSettings)))];
                }
            });
        });
    };
    return WithModifiedWorkspaceSettingsService;
}(DecoratedWorkspaceSettingsService));
function customWorkspaceSettings(config) {
    var emptySettingsSetter = function () { return ({}); };
    return function (original) {
        return new WithModifiedWorkspaceSettingsService(original, config.settingsWrapper || identity, config.currentUserSettingsWrapper || identity, config.commonSettingsWrapper || emptySettingsSetter);
    };
}
/**
 * Adjusts workspace configs and current user configs from the real backend.
 *
 * @remarks see {@link WorkspaceSettingsConfiguration} properties for more information.
 * @param realBackend - real backend to decorate with custom workspace settings
 * @param config - workspace configs configuration
 * @beta
 */
export function withCustomWorkspaceSettings(realBackend, config) {
    var workspaceSettings = customWorkspaceSettings(config);
    return decoratedBackend(realBackend, { workspaceSettings: workspaceSettings });
}
//# sourceMappingURL=index.js.map
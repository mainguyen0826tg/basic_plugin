import { __assign } from "tslib";
// (C) 2020 GoodData Corporation
import React, { useCallback, useMemo } from "react";
import { isWidget, widgetId, widgetUri, isInsightWidget, } from "@gooddata/sdk-backend-spi";
import { insightId, insightUri, objRefToString } from "@gooddata/sdk-model";
import { selectSettings, useDashboardSelector, selectIsExport, selectIsLayoutEmpty, selectLayout, selectInsightsMap, } from "../../model";
import { useDashboardComponentsContext } from "../dashboardContexts";
import { DashboardLayoutWidget } from "./DashboardLayoutWidget";
import { EmptyDashboardError } from "./EmptyDashboardError";
import { DashboardLayout, DashboardLayoutBuilder, validateDashboardLayoutWidgetSize, } from "./DefaultDashboardLayoutRenderer";
/**
 * Get dashboard layout for exports.
 *  - Create new extra rows if current row has width of widgets greater than 12
 *
 * @internal
 * @param layout - dashboard layout to modify
 * @returns transformed layout
 */
function getDashboardLayoutForExport(layout) {
    var dashLayout = DashboardLayoutBuilder.for(layout);
    var layoutFacade = dashLayout.facade();
    var sections = layoutFacade.sections();
    var screenSplitSections = sections.map(function (section) { return ({
        items: section.items().asGridRows("xl"),
        header: section.header(),
    }); });
    dashLayout.removeSections();
    screenSplitSections.forEach(function (wrappedSection) {
        wrappedSection.items.forEach(function (rowSection, index) {
            dashLayout.createSection(function (section) {
                rowSection.forEach(function (item) {
                    if (index === 0) {
                        section.header(wrappedSection.header);
                    }
                    section.createItem(item.size().xl, function (i) { return i.widget(item.widget()); });
                });
                return section;
            });
        });
    });
    return dashLayout.build();
}
function selectAllItemsWithInsights(items) {
    return items.filter(function (item) { return item.isInsightWidgetItem(); });
}
var itemKeyGetter = function (keyGetterProps) {
    var widget = keyGetterProps.item.widget();
    if (isWidget(widget)) {
        return objRefToString(widget.ref);
    }
    return keyGetterProps.item.index().toString();
};
/**
 * @alpha
 */
export var DefaultDashboardLayout = function (props) {
    var onFiltersChange = props.onFiltersChange, onDrill = props.onDrill, onError = props.onError, CustomError = props.ErrorComponent;
    var layout = useDashboardSelector(selectLayout);
    var isLayoutEmpty = useDashboardSelector(selectIsLayoutEmpty);
    var settings = useDashboardSelector(selectSettings);
    var insights = useDashboardSelector(selectInsightsMap);
    var ErrorComponent = useDashboardComponentsContext({ ErrorComponent: CustomError }).ErrorComponent;
    var isExport = useDashboardSelector(selectIsExport);
    var getInsightByRef = function (insightRef) {
        return insights.get(insightRef);
    };
    var transformedLayout = useMemo(function () {
        var layoutWithRefs = DashboardLayoutBuilder.for(layout)
            .modifySections(function (section) {
            return section
                .modifyItems(polluteWidgetRefsWithBothIdAndUri(getInsightByRef))
                .modifyItems(validateItemsSize(getInsightByRef, settings.enableKDWidgetCustomHeight), selectAllItemsWithInsights);
        })
            .build();
        return isExport ? getDashboardLayoutForExport(layout) : layoutWithRefs;
    }, [layout, isExport]);
    var widgetRenderer = useCallback(function (renderProps) {
        return (React.createElement(DashboardLayoutWidget, __assign({ onError: onError, onDrill: onDrill, onFiltersChange: onFiltersChange }, renderProps)));
    }, [onError, onDrill, onFiltersChange]);
    var sectionHeaderRenderer = useMemo(function () {
        // When section headers are enabled, use default DashboardLayout sectionHeaderRenderer.
        // When turned off, render nothing.
        return settings.enableSectionHeaders ? undefined : function () { return React.createElement(React.Fragment, null); };
    }, [settings.enableSectionHeaders]);
    return isLayoutEmpty ? (React.createElement(EmptyDashboardError, { ErrorComponent: ErrorComponent })) : (React.createElement(DashboardLayout, { className: isExport ? "export-mode" : "", layout: transformedLayout, itemKeyGetter: itemKeyGetter, widgetRenderer: widgetRenderer, sectionHeaderRenderer: sectionHeaderRenderer, enableCustomHeight: settings.enableKDWidgetCustomHeight }));
};
/**
 * Ensure that areObjRefsEqual() and other predicates will be working with uncontrolled user ref inputs in custom layout transformation and/or custom widget/item renderers
 */
function polluteWidgetRefsWithBothIdAndUri(getInsightByRef) {
    return function (item) {
        return item.widget(function (c) {
            var updatedContent = c;
            if (isWidget(updatedContent)) {
                updatedContent = __assign(__assign({}, updatedContent), { ref: __assign(__assign({}, updatedContent.ref), { uri: widgetUri(updatedContent), identifier: widgetId(updatedContent) }) });
            }
            if (isInsightWidget(updatedContent)) {
                var insight = getInsightByRef(updatedContent.insight);
                updatedContent = __assign(__assign({}, updatedContent), { insight: __assign(__assign({}, updatedContent.insight), { uri: insightUri(insight), identifier: insightId(insight) }) });
            }
            return updatedContent;
        });
    };
}
function validateItemsSize(getInsightByRef, enableKDWidgetCustomHeight) {
    return function (item) {
        var widget = item.facade().widget();
        if (isInsightWidget(widget)) {
            var insight = getInsightByRef(widget.insight);
            var currentWidth = item.facade().size().xl.gridWidth;
            var currentHeight = item.facade().size().xl.gridHeight;
            var _a = validateDashboardLayoutWidgetSize(currentWidth, currentHeight, "insight", insight, { enableKDWidgetCustomHeight: enableKDWidgetCustomHeight }), validWidth = _a.validWidth, validHeight = _a.validHeight;
            var validatedItem = item;
            if (currentWidth !== validWidth) {
                validatedItem = validatedItem.size({
                    xl: __assign(__assign({}, validatedItem.facade().size().xl), { gridWidth: validWidth }),
                });
            }
            if (currentHeight !== validHeight) {
                validatedItem = validatedItem.size({
                    xl: __assign(__assign({}, validatedItem.facade().size().xl), { gridHeight: validHeight }),
                });
            }
            return validatedItem;
        }
        return item;
    };
}
//# sourceMappingURL=DefaultDashboardLayout.js.map
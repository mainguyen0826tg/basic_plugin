import { __awaiter, __generator } from "tslib";
import { isIdentifierRef } from "@gooddata/sdk-model";
import { jsonApiHeaders } from "@gooddata/api-client-tiger";
import { invariant } from "ts-invariant";
import { convertDatasetWithLinks } from "../../../convertors/fromBackend/MetadataConverter";
var TigerWorkspaceFacts = /** @class */ (function () {
    function TigerWorkspaceFacts(authCall, workspace) {
        this.authCall = authCall;
        this.workspace = workspace;
    }
    TigerWorkspaceFacts.prototype.getFactDatasetMeta = function (ref) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authCall(function (client) {
                        return loadFactDataset(client, _this.workspace, ref);
                    })];
            });
        });
    };
    return TigerWorkspaceFacts;
}());
export { TigerWorkspaceFacts };
function loadFactDataset(client, workspace, ref) {
    invariant(isIdentifierRef(ref), "tiger backend only supports referencing by identifier");
    return client.workspaceObjects
        .getEntityFacts({
        workspaceId: workspace,
        objectId: ref.identifier,
    }, {
        headers: jsonApiHeaders,
        params: {
            include: "datasets",
        },
    })
        .then(function (res) {
        // if this happens then its either bad query parameterization or the backend is hosed badly
        invariant(res.data.included && res.data.included.length > 0, "server returned that fact does not belong to any dataset");
        return convertDatasetWithLinks(res.data.included[0]);
    });
}
//# sourceMappingURL=index.js.map
// (C) 2019-2021 GoodData Corporation
/**
 * This package provides definitions of the Service Provider Interface (SPI) for the Analytical Backend.
 *
 * @remarks
 * The interface defines functionality to be implemented for a particular backend to be used in GoodData.UI.
 * The Analytical Backend SPI for the GoodData platform (codename `bear` in `@gooddata/sdk-backend-bear`) is fully implemented.
 * The Analytical Backend SPI for GoodData.CN (codename `tiger` in `@gooddata/sdk-backend-tiger`) is almost fully implemented.
 *
 * @packageDocumentation
 */
export { prepareExecution, } from "./backend";
export { userFullName } from "./user";
export { isAttributeDescriptor, isMeasureGroupDescriptor, isTotalDescriptor, isMeasureDescriptor, isResultAttributeHeader, isResultMeasureHeader, isResultTotalHeader, resultHeaderName, attributeDescriptorLocalId, attributeDescriptorName, } from "./workspace/execution/results";
export { AnalyticalBackendError, NoDataError, DataTooLargeError, ProtectedDataError, UnexpectedResponseError, UnexpectedError, NotSupported, NotImplemented, NotAuthenticated, isAnalyticalBackendError, isNoDataError, isDataTooLargeError, isProtectedDataError, isUnexpectedResponseError, isUnexpectedError, isNotSupported, isNotImplemented, isNotAuthenticated, AnalyticalBackendErrorTypes, } from "./errors";
export { isDrillToDashboard, isDrillToInsight, isDrillToLegacyDashboard, isDrillToAttributeUrl, isDrillToCustomUrl, isDrillFromAttribute, isDrillFromMeasure, } from "./workspace/dashboards/drills";
export { isDashboard, isDashboardDefinition, } from "./workspace/dashboards/dashboard";
export { isFilterContext, isFilterContextDefinition, isTempFilterContext, isDashboardAttributeFilter, isDashboardDateFilter, isDashboardAttributeFilterReference, isDashboardDateFilterReference, dashboardFilterReferenceObjRef, isAllTimeDashboardDateFilter, newAbsoluteDashboardDateFilter, newAllTimeDashboardDateFilter, newRelativeDashboardDateFilter, } from "./workspace/dashboards/filterContext";
export { isDashboardLayout, isDashboardLayoutSection, isDashboardLayoutItem, isDashboardWidget, } from "./workspace/dashboards/layout";
export { isDashboardLayoutEmpty, layoutWidgets, layoutWidgetsWithPaths, walkLayout, } from "./workspace/dashboards/utils";
export { BuiltInWidgetTypes, } from "./workspace/dashboards/baseWidget";
export { isWidget, isWidgetDefinition, widgetUri, widgetId, widgetRef, widgetTitle, widgetType, isKpiWidgetDefinition, isKpiWidget, isInsightWidgetDefinition, isInsightWidget, } from "./workspace/dashboards/widget";
export { isLegacyKpiWithComparison, isLegacyKpiWithoutComparison, isLegacyKpi, } from "./workspace/dashboards/kpi";
export { isWidgetAlert, isWidgetAlertDefinition, } from "./workspace/dashboards/alert";
export { isAbsoluteDateFilterForm, isAbsoluteDateFilterPreset, isAllTimeDateFilterOption, isRelativeDateFilterForm, isRelativeDateFilterPreset, isDateFilterGranularity, } from "./workspace/dateFilterConfigs/types";
export { isCatalogAttribute, isCatalogFact, isCatalogMeasure, isCatalogDateDataset, catalogItemMetadataObject, } from "./workspace/fromModel/ldm/catalog";
export { isAttributeDisplayFormMetadataObject, isAttributeMetadataObject, isDataSetMetadataObject, isVariableMetadataObject, isFactMetadataObject, isMeasureMetadataObject, isMeasureMetadataObjectDefinition, isMetadataObject, metadataObjectId, isDashboardMetadataObject, } from "./workspace/fromModel/ldm/metadata";
//# sourceMappingURL=index.js.map
// (C) 2019-2021 GoodData Corporation
import flatMap from "lodash/flatMap";
import { isAttributeDescriptor, isMeasureGroupDescriptor, isResultAttributeHeader, } from "@gooddata/sdk-backend-spi";
import { attributeLocatorElement, attributeLocatorIdentifier, idMatchMeasure, isAttributeLocator, isAttributeSort, isPoPMeasure, isPreviousPeriodMeasure, sortMeasureLocators, } from "@gooddata/sdk-model";
import findIndex from "lodash/findIndex";
function findMeasureGroupHeader(dataView) {
    for (var dimIdx = 0; dimIdx < dataView.result.dimensions.length; dimIdx++) {
        var dim = dataView.result.dimensions[dimIdx];
        var measureGroup = dim.headers.find(isMeasureGroupDescriptor);
        if (measureGroup) {
            return {
                dimIdx: dimIdx,
                measureGroup: measureGroup,
            };
        }
    }
    return {};
}
function buildMeasureHeaderIndex(measureGroup) {
    var _a, _b;
    var items = (_b = (_a = measureGroup === null || measureGroup === void 0 ? void 0 : measureGroup.measureGroupHeader) === null || _a === void 0 ? void 0 : _a.items) !== null && _b !== void 0 ? _b : [];
    return items.reduce(function (acc, val) {
        var id = val.measureHeaderItem.localIdentifier;
        acc[id] = val;
        return acc;
    }, {});
}
var ResultMetaMethods = /** @class */ (function () {
    function ResultMetaMethods(dataView) {
        var _this = this;
        this.dataView = dataView;
        /**
         * Matches attribute locator against the descriptors and headers in the data view. The attribute is expected
         * to be located in the same dimension as the measure group. The element specified in the locator must be
         * found within the respective attribute's headers.
         *
         * @param locator - locator to match
         */
        this.matchAttributeLocator = function (locator) {
            if (_this._measureGroupHeaderIdx === undefined) {
                return false;
            }
            var attributeId = attributeLocatorIdentifier(locator);
            var attributeIdx = findIndex(_this.dimensionItemDescriptors(_this._measureGroupHeaderIdx), function (descriptor) {
                return (isAttributeDescriptor(descriptor) &&
                    descriptor.attributeHeader.localIdentifier === attributeId);
            });
            if (attributeIdx === -1) {
                return false;
            }
            var headers = _this.allHeaders()[_this._measureGroupHeaderIdx][attributeIdx];
            var attributeElement = attributeLocatorElement(locator);
            return (headers.find(function (header) {
                return isResultAttributeHeader(header) && header.attributeHeaderItem.uri === attributeElement;
            }) !== undefined);
        };
        this.matchMeasureSortItem = function (sortItem) {
            if (!_this._measureGroupHeader) {
                /*
                 * Measure sort exists but there are no measures in the result. This is unlike as
                 * at latest the backend would bomb that the sort references invalid measure.
                 */
                return false;
            }
            return sortMeasureLocators(sortItem).every(function (locator) {
                if (isAttributeLocator(locator)) {
                    return _this.matchAttributeLocator(locator);
                }
                else {
                    return _this._measureDescriptorByLocalId[locator.measureLocatorItem.measureIdentifier];
                }
            });
        };
        this.matchSortItem = function (sortItem) {
            if (isAttributeSort(sortItem)) {
                return true;
            }
            return _this.matchMeasureSortItem(sortItem);
        };
        var _a = findMeasureGroupHeader(dataView), dimIdx = _a.dimIdx, measureGroup = _a.measureGroup;
        this._measureGroupHeaderIdx = dimIdx;
        this._measureGroupHeader = measureGroup;
        this._measureDescriptorByLocalId = buildMeasureHeaderIndex(this._measureGroupHeader);
    }
    ResultMetaMethods.prototype.dimensions = function () {
        return this.dataView.result.dimensions;
    };
    ResultMetaMethods.prototype.dimensionItemDescriptors = function (dimIdx) {
        var dim = this.dataView.result.dimensions[dimIdx];
        return dim && dim.headers ? dim.headers : [];
    };
    ResultMetaMethods.prototype.attributeDescriptors = function () {
        return flatMap(this.dataView.result.dimensions, function (dim) {
            return dim.headers.filter(isAttributeDescriptor);
        });
    };
    ResultMetaMethods.prototype.attributeDescriptorsForDim = function (dim) {
        var _a, _b;
        return ((_b = (_a = this.dataView.result.dimensions[dim]) === null || _a === void 0 ? void 0 : _a.headers) !== null && _b !== void 0 ? _b : []).filter(isAttributeDescriptor);
    };
    ResultMetaMethods.prototype.measureGroupDescriptor = function () {
        return this._measureGroupHeader;
    };
    ResultMetaMethods.prototype.measureDescriptors = function () {
        var header = this.measureGroupDescriptor();
        return header ? header.measureGroupHeader.items : [];
    };
    ResultMetaMethods.prototype.measureDescriptor = function (localId) {
        return this._measureDescriptorByLocalId[localId];
    };
    ResultMetaMethods.prototype.hasNoHeadersInDim = function (dim) {
        return this.dataView.headerItems[dim] && this.dataView.headerItems[dim].length === 0;
    };
    ResultMetaMethods.prototype.allHeaders = function () {
        return this.dataView.headerItems;
    };
    ResultMetaMethods.prototype.attributeHeaders = function () {
        return this.dataView.headerItems.map(function (dimension) {
            return dimension.filter(function (headerList) {
                return isResultAttributeHeader(headerList[0]);
            });
        });
    };
    ResultMetaMethods.prototype.attributeHeadersForDim = function (dim) {
        if (this.hasNoHeadersInDim(dim)) {
            return [];
        }
        return this.dataView.headerItems[dim].filter(function (headerList) {
            return isResultAttributeHeader(headerList[0]);
        });
    };
    ResultMetaMethods.prototype.isDerivedMeasure = function (measureDescriptor) {
        var measureIdMatch = idMatchMeasure(measureDescriptor.measureHeaderItem.localIdentifier);
        return this.dataView.definition.measures.some(function (measure) {
            if (!measureIdMatch(measure)) {
                return false;
            }
            return isPoPMeasure(measure) || isPreviousPeriodMeasure(measure);
        });
    };
    ResultMetaMethods.prototype.effectiveSortItems = function () {
        return this.dataView.definition.sortBy.filter(this.matchSortItem);
    };
    return ResultMetaMethods;
}());
export function newResultMetaMethods(dataView) {
    return new ResultMetaMethods(dataView);
}
//# sourceMappingURL=resultMetaMethods.js.map
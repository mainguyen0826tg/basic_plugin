import { __extends } from "tslib";
// (C) 2019-2021 GoodData Corporation
import identity from "lodash/identity";
import { isAttributeDisplayFormMetadataObject, isAttributeMetadataObject, isDataSetMetadataObject, } from "@gooddata/sdk-backend-spi";
import { Builder, builderFactory } from "../builder";
import { newAttributeMetadataObject } from "../metadata/attributeFactory";
import { newAttributeDisplayFormMetadataObject, } from "../metadata/displayFormFactory";
import { newDataSetMetadataObject } from "../metadata/dataSetFactory";
/**
 * Catalog date attribute builder
 * See {@link Builder}
 *
 * @beta
 */
var CatalogDateAttributeBuilder = /** @class */ (function (_super) {
    __extends(CatalogDateAttributeBuilder, _super);
    function CatalogDateAttributeBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CatalogDateAttributeBuilder.prototype.granularity = function (granularity) {
        this.item.granularity = granularity;
        return this;
    };
    CatalogDateAttributeBuilder.prototype.attribute = function (attributeOrRef, modifications) {
        if (!isAttributeMetadataObject(attributeOrRef)) {
            this.item.attribute = newAttributeMetadataObject(attributeOrRef, modifications);
        }
        else {
            this.item.attribute = attributeOrRef;
        }
        return this;
    };
    CatalogDateAttributeBuilder.prototype.defaultDisplayForm = function (displayFormOrRef, modifications) {
        if (!isAttributeDisplayFormMetadataObject(displayFormOrRef)) {
            this.item.defaultDisplayForm = newAttributeDisplayFormMetadataObject(displayFormOrRef, modifications);
        }
        else {
            this.item.defaultDisplayForm = displayFormOrRef;
        }
        return this;
    };
    return CatalogDateAttributeBuilder;
}(Builder));
export { CatalogDateAttributeBuilder };
/**
 * Catalog date attribute factory
 *
 * @param modifications - catalog date attribute builder modifications to perform
 * @returns created catalog date attribute
 * @beta
 */
export var newCatalogDateAttribute = function (modifications) {
    if (modifications === void 0) { modifications = identity; }
    return builderFactory(CatalogDateAttributeBuilder, {}, modifications);
};
/**
 * Catalog date dataset builder
 * See {@link Builder}
 *
 * @beta
 */
var CatalogDateDatasetBuilder = /** @class */ (function (_super) {
    __extends(CatalogDateDatasetBuilder, _super);
    function CatalogDateDatasetBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CatalogDateDatasetBuilder.prototype.relevance = function (relevance) {
        this.item.relevance = relevance;
        return this;
    };
    CatalogDateDatasetBuilder.prototype.dateAttributes = function (dateAttributes) {
        this.item.dateAttributes = dateAttributes;
        return this;
    };
    CatalogDateDatasetBuilder.prototype.dataSet = function (dataSetOrRef, modifications) {
        if (!isDataSetMetadataObject(dataSetOrRef)) {
            this.item.dataSet = newDataSetMetadataObject(dataSetOrRef, modifications);
        }
        else {
            this.item.dataSet = dataSetOrRef;
        }
        return this;
    };
    return CatalogDateDatasetBuilder;
}(Builder));
export { CatalogDateDatasetBuilder };
/**
 * Catalog date dataset factory
 *
 * @param modifications - catalog date dataset builder modifications to perform
 * @returns created catalog date dataset
 * @beta
 */
export var newCatalogDateDataset = function (modifications) {
    if (modifications === void 0) { modifications = identity; }
    return builderFactory(CatalogDateDatasetBuilder, { type: "dateDataset" }, modifications);
};
//# sourceMappingURL=dateDatasetFactory.js.map
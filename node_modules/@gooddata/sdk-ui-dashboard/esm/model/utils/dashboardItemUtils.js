import { __assign } from "tslib";
// (C) 2021 GoodData Corporation
import { isCustomWidgetDefinition, } from "../types/layoutTypes";
import { idRef } from "@gooddata/sdk-model";
import { isDashboardLayoutItem, isInsightWidget, isInsightWidgetDefinition, isKpiWidgetDefinition, } from "@gooddata/sdk-backend-spi";
import { v4 as uuidv4 } from "uuid";
export function extractInsightRefsFromItems(items) {
    var result = [];
    items.forEach(function (item) {
        if (isInsightWidget(item.widget)) {
            result.push(item.widget.insight);
        }
    });
    return result;
}
var TemporaryIdentityPrefix = "@@GDC.DASH.TEMP";
function generateTemporaryIdentityForWidget() {
    var id = TemporaryIdentityPrefix + "-" + uuidv4();
    return {
        ref: idRef(id),
        identifier: id,
        uri: id,
    };
}
/**
 * Tests whether the provided object is/has a temporary identity. A temporary identity is used for those
 * objects which are not yet persisted however need to be reference-able from the dashboard itself.
 *
 * @param obj - object to test
 * @internal
 */
export function isTemporaryIdentity(obj) {
    return obj.identifier.startsWith(TemporaryIdentityPrefix);
}
/**
 * Adds temporary identity to all insight and KPI widget definitions found within the provided dashboard item
 * definitions.
 *
 * Having an identity for each widget is important for the dashboard; many places both internal and through
 * public API for different use-cases rely on identification of widget by reference.
 *
 * This function will map the input items so that the result never contains bare insight widget definitions
 * or kpi widget definitions (which do not have the identity).
 *
 * The identity assigned to those widgets is temporary one. It is a specially formatted identifier combined
 * with UUID. You can use {@link isTemporaryIdentity} function to test whether object has temporary
 * identity. When the dashboard gets saved, this temporary identity will change to permanent one that
 * will be assigned by the backend.
 *
 * @param items - items to map, will not be modified
 * @returns new array with the necessary items mapped to widgets with temporary identity.
 * @internal
 */
export function addTemporaryIdentityToWidgets(items) {
    return items.map(function (item) {
        if (!isDashboardLayoutItem(item)) {
            return item;
        }
        if (isInsightWidgetDefinition(item.widget) ||
            isKpiWidgetDefinition(item.widget) ||
            isCustomWidgetDefinition(item.widget)) {
            var temporaryIdentity = generateTemporaryIdentityForWidget();
            return __assign(__assign({}, item), { widget: __assign(__assign({}, item.widget), temporaryIdentity) });
        }
        return item;
    });
}
//# sourceMappingURL=dashboardItemUtils.js.map
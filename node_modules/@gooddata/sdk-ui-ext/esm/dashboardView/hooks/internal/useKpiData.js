import { __awaiter, __generator } from "tslib";
import { isAllTimeDateFilter, isDateFilter, isUriRef, newMeasure, newPopMeasure, newPreviousPeriodMeasure, } from "@gooddata/sdk-model";
import { useBackend, useCancelablePromise, useWorkspace, } from "@gooddata/sdk-ui";
import invariant from "ts-invariant";
import { filterContextItemsToFiltersForWidget, filterContextToFiltersForWidget } from "../../converters";
import { backendInvariant, workspaceInvariant } from "../utils";
/**
 * @internal
 */
export function useKpiData(_a) {
    var _this = this;
    var kpiWidget = _a.kpiWidget, filters = _a.filters, filterContext = _a.filterContext, backend = _a.backend, workspace = _a.workspace;
    var effectiveBackend = useBackend(backend);
    var effectiveWorkspace = useWorkspace(workspace);
    backendInvariant(effectiveBackend, "useKpiData");
    workspaceInvariant(effectiveWorkspace, "useKpiData");
    var promise = kpiWidget
        ? function () { return __awaiter(_this, void 0, void 0, function () {
            var allFilters, effectiveFilters, primaryMeasure, comparison, isAllTime, secondaryMeasure, secondaryMeasure;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        invariant(kpiWidget.kpi, "The provided widget is not a KPI widget.");
                        allFilters = filters
                            ? filterContextItemsToFiltersForWidget(filters, kpiWidget)
                            : filterContextToFiltersForWidget(filterContext, kpiWidget);
                        return [4 /*yield*/, effectiveBackend
                                .workspace(effectiveWorkspace)
                                .dashboards()
                                .getResolvedFiltersForWidget(kpiWidget, allFilters)];
                    case 1:
                        effectiveFilters = (_a.sent());
                        primaryMeasure = newMeasure(kpiWidget.kpi.metric);
                        comparison = kpiWidget.kpi.comparisonType;
                        isAllTime = !effectiveFilters ||
                            !effectiveFilters.some(function (filter) { return isDateFilter(filter) && !isAllTimeDateFilter(filter); });
                        if (comparison === "none" || isAllTime) {
                            return [2 /*return*/, { primaryMeasure: primaryMeasure, effectiveFilters: effectiveFilters, allFilters: allFilters }];
                        }
                        if (comparison === "previousPeriod") {
                            secondaryMeasure = newPreviousPeriodMeasure(primaryMeasure, [
                                { dataSet: kpiWidget.dateDataSet, periodsAgo: 1 },
                            ]);
                            return [2 /*return*/, { primaryMeasure: primaryMeasure, secondaryMeasure: secondaryMeasure, effectiveFilters: effectiveFilters, allFilters: allFilters }];
                        }
                        if (!(comparison === "lastYear")) return [3 /*break*/, 3];
                        return [4 /*yield*/, getLastYearComparisonMeasure(effectiveBackend, effectiveWorkspace, primaryMeasure, kpiWidget.dateDataSet)];
                    case 2:
                        secondaryMeasure = _a.sent();
                        return [2 /*return*/, { primaryMeasure: primaryMeasure, secondaryMeasure: secondaryMeasure, effectiveFilters: effectiveFilters, allFilters: allFilters }];
                    case 3:
                        invariant(false, "Unknown comparison " + comparison);
                        return [2 /*return*/];
                }
            });
        }); }
        : null;
    return useCancelablePromise({ promise: promise }, [
        effectiveBackend,
        effectiveWorkspace,
        filters,
        filterContext,
        kpiWidget,
    ]);
}
function getLastYearComparisonMeasure(backend, workspace, primaryMeasure, targetDateDataset) {
    return __awaiter(this, void 0, void 0, function () {
        var catalog, dateDatasets, relevantDateDataset, yearAttribute;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, backend.workspace(workspace).catalog().forTypes(["dateDataset"]).load()];
                case 1:
                    catalog = _a.sent();
                    dateDatasets = catalog.dateDatasets();
                    relevantDateDataset = dateDatasets.find(function (dateDataset) {
                        if (isUriRef(targetDateDataset)) {
                            return dateDataset.dataSet.uri === targetDateDataset.uri;
                        }
                        else {
                            return dateDataset.dataSet.id === targetDateDataset.identifier;
                        }
                    });
                    yearAttribute = relevantDateDataset.dateAttributes.find(function (dateAttribute) { return dateAttribute.granularity === "GDC.time.year"; });
                    return [2 /*return*/, newPopMeasure(primaryMeasure, yearAttribute.attribute.ref)];
            }
        });
    });
}
//# sourceMappingURL=useKpiData.js.map
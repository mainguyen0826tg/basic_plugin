import { __read } from "tslib";
// (C) 2020 GoodData Corporation
import React, { useCallback, useMemo, useState } from "react";
import { createSelector } from "@reduxjs/toolkit";
import { insightFilters, insightSetFilters, insightVisualizationUrl } from "@gooddata/sdk-model";
import { useBackendStrict, useWorkspaceStrict, } from "@gooddata/sdk-ui";
import { InsightRenderer } from "@gooddata/sdk-ui-ext";
import { useDashboardComponentsContext } from "../../../../dashboardContexts";
import { useDashboardSelector, selectColorPalette, selectLocale, selectMapboxToken, selectSeparators, selectSettings, selectIsExport, selectDrillableItems, } from "../../../../../model";
import { useWidgetFilters } from "../../../common";
import { useResolveDashboardInsightProperties } from "../useResolveDashboardInsightProperties";
import { useDrillDialogInsightDrills } from "./useDrillDialogInsightDrills";
import { CustomError } from "../CustomError/CustomError";
import { ThemedLoadingEqualizer } from "../../../../presentationComponents";
import { IntlWrapper } from "../../../../localization";
var insightStyle = { width: "100%", height: "100%", position: "relative", flex: "1 1 auto" };
var selectCommonDashboardInsightProps = createSelector([selectLocale, selectSettings, selectColorPalette], function (locale, settings, colorPalette) { return ({
    locale: locale,
    settings: settings,
    colorPalette: colorPalette,
}); });
var selectChartConfig = createSelector([selectMapboxToken, selectSeparators, selectDrillableItems, selectIsExport], function (mapboxToken, separators, drillableItems, isExport) { return ({
    mapboxToken: mapboxToken,
    separators: separators,
    forceDisableDrillOnAxes: !(drillableItems === null || drillableItems === void 0 ? void 0 : drillableItems.length),
    isExportMode: isExport,
}); });
/**
 * @internal
 */
export var DrillDialogInsight = function (props) {
    var insight = props.insight, widget = props.widget, backend = props.backend, workspace = props.workspace, onError = props.onError, onDrillFn = props.onDrill, onExportReady = props.onExportReady, onLoadingChanged = props.onLoadingChanged, pushData = props.pushData, CustomErrorComponent = props.ErrorComponent, CustomLoadingComponent = props.LoadingComponent;
    // Custom components
    var _a = useDashboardComponentsContext({
        ErrorComponent: CustomErrorComponent,
        /**
         * There is a need to use Loading spinner instead of "Running three dots" loader while drill is loading.
         * If no custom loading component is provided, LoadingComponent defaults to Loading spinner.
         */
        LoadingComponent: CustomLoadingComponent !== null && CustomLoadingComponent !== void 0 ? CustomLoadingComponent : ThemedLoadingEqualizer,
    }), ErrorComponent = _a.ErrorComponent, LoadingComponent = _a.LoadingComponent;
    // Context
    var effectiveBackend = useBackendStrict(backend);
    var effectiveWorkspace = useWorkspaceStrict(workspace);
    // State props
    var _b = useDashboardSelector(selectCommonDashboardInsightProps), locale = _b.locale, settings = _b.settings, colorPalette = _b.colorPalette;
    var chartConfig = useDashboardSelector(selectChartConfig);
    // Loading and rendering
    var _c = __read(useState(false), 2), isVisualizationLoading = _c[0], setIsVisualizationLoading = _c[1];
    var _d = __read(useState(), 2), visualizationError = _d[0], setVisualizationError = _d[1];
    var handleLoadingChanged = useCallback(function (_a) {
        var isLoading = _a.isLoading;
        setIsVisualizationLoading(isLoading);
        onLoadingChanged === null || onLoadingChanged === void 0 ? void 0 : onLoadingChanged({ isLoading: isLoading });
    }, []);
    /// Filtering
    var _e = useWidgetFilters(widget, insight && insightFilters(insight)), filtersForInsight = _e.result, filtersStatus = _e.status, filtersError = _e.error;
    var insightWithAddedFilters = useMemo(function () { return insightSetFilters(insight, filtersForInsight); }, [insight, filtersForInsight]);
    var insightWithAddedWidgetProperties = useResolveDashboardInsightProperties({
        insight: insightWithAddedFilters !== null && insightWithAddedFilters !== void 0 ? insightWithAddedFilters : insight,
        widget: widget,
    });
    var _f = useDrillDialogInsightDrills({
        widget: widget,
        insight: insightWithAddedFilters !== null && insightWithAddedFilters !== void 0 ? insightWithAddedFilters : insight,
        onDrill: onDrillFn,
    }), drillableItems = _f.drillableItems, onDrill = _f.onDrill, onPushData = _f.onPushData;
    var handlePushData = useCallback(function (data) {
        onPushData(data);
        pushData === null || pushData === void 0 ? void 0 : pushData(data);
    }, [onPushData, pushData]);
    // CSS
    var insightPositionStyle = useMemo(function () {
        return {
            width: "100%",
            height: "100%",
            position: 
            // Headline violates the layout contract.
            // It should fit parent height and adapt to it as other visualizations.
            // Now, it works differently for the Headline - parent container adapts to Headline size.
            insight && insightVisualizationUrl(insight).includes("headline") ? "relative" : "absolute",
        };
    }, [insight]);
    // Error handling
    var handleError = useCallback(function (error) {
        setVisualizationError(error);
        onError === null || onError === void 0 ? void 0 : onError(error);
    }, [onError]);
    var error = filtersError !== null && filtersError !== void 0 ? filtersError : visualizationError;
    return (React.createElement("div", { style: insightStyle },
        React.createElement("div", { style: insightPositionStyle },
            React.createElement(IntlWrapper, { locale: locale },
                (filtersStatus === "running" || isVisualizationLoading) && React.createElement(LoadingComponent, null),
                error && (React.createElement(CustomError, { error: error, 
                    // drill dialog does not measure its size but is always large enough to fit the full content
                    forceFullContent: true })),
                filtersStatus === "success" && (React.createElement("div", { className: "insight-view-visualization", style: isVisualizationLoading || error ? { height: 0 } : undefined },
                    React.createElement(InsightRenderer, { insight: insightWithAddedWidgetProperties, backend: effectiveBackend, workspace: effectiveWorkspace, drillableItems: drillableItems, onDrill: onDrill, config: chartConfig, onLoadingChanged: handleLoadingChanged, locale: locale, settings: settings, colorPalette: colorPalette, onError: handleError, onExportReady: onExportReady, pushData: handlePushData, ErrorComponent: ErrorComponent, LoadingComponent: LoadingComponent })))))));
};
//# sourceMappingURL=DrillDialogInsight.js.map
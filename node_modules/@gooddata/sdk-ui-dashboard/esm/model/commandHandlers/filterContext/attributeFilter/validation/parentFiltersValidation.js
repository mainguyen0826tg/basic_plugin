import { __awaiter, __generator, __read } from "tslib";
// (C) 2021 GoodData Corporation
import differenceBy from "lodash/differenceBy";
import zip from "lodash/zip";
import { areObjRefsEqual, objRefToString } from "@gooddata/sdk-model";
export function validateAttributeFilterParents(ctx, dashboardFilter, parents, allFilters) {
    return __awaiter(this, void 0, void 0, function () {
        var allExceptValidated, allExceptValidatedLocalIds, hasExtraneousParent, parentValidationData, commonAttributeResults, validationPairs, areAllConnectionsValid;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    allExceptValidated = allFilters.filter(function (item) {
                        return !areObjRefsEqual(item.attributeFilter.displayForm, dashboardFilter.attributeFilter.displayForm);
                    });
                    allExceptValidatedLocalIds = allExceptValidated.map(function (item) { return item.attributeFilter.localIdentifier; });
                    hasExtraneousParent = parents.some(function (parent) { return !allExceptValidatedLocalIds.includes(parent.filterLocalIdentifier); });
                    if (hasExtraneousParent) {
                        return [2 /*return*/, "EXTRANEOUS_PARENT"];
                    }
                    parentValidationData = parents.map(function (parent) {
                        var parentFilter = allExceptValidated.find(function (item) { return item.attributeFilter.localIdentifier === parent.filterLocalIdentifier; }); // the ! is cool here, we validated that the parents are available in the code above
                        return {
                            parentOverAttributes: parent.over.attributes,
                            displayFormsToGetAncestorsFor: [
                                dashboardFilter.attributeFilter.displayForm,
                                parentFilter.attributeFilter.displayForm,
                            ],
                        };
                    });
                    return [4 /*yield*/, ctx.backend
                            .workspace(ctx.workspace)
                            .attributes()
                            .getCommonAttributesBatch(parentValidationData.map(function (item) { return item.displayFormsToGetAncestorsFor; }))];
                case 1:
                    commonAttributeResults = _a.sent();
                    validationPairs = zip(parentValidationData.map(function (item) { return item.parentOverAttributes; }), commonAttributeResults);
                    areAllConnectionsValid = validationPairs.every(function (_a) {
                        var _b = __read(_a, 2), parentOverAttributes = _b[0], connectingAttrs = _b[1];
                        return differenceBy(parentOverAttributes, connectingAttrs, objRefToString).length === 0;
                    });
                    return [2 /*return*/, areAllConnectionsValid ? "VALID" : "INVALID_CONNECTION"];
            }
        });
    });
}
//# sourceMappingURL=parentFiltersValidation.js.map
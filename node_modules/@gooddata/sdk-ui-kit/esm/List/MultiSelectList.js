import { __extends } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { Component } from "react";
import { injectIntl } from "react-intl";
import cx from "classnames";
import { List } from "./List";
import { Button } from "../Button";
import { FlexDimensions } from "../FlexDimensions";
var MultiSelectListCore = /** @class */ (function (_super) {
    __extends(MultiSelectListCore, _super);
    function MultiSelectListCore() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onActionCheckboxChange = function () {
            var _a = _this.props, onSelectAll = _a.onSelectAll, onSelectNone = _a.onSelectNone, isInverted = _a.isInverted, isSearching = _a.isSearching;
            if (_this.isAllSelected() ||
                (!isInverted && isSearching && _this.isIndefiniteSelection && !_this.isEmpty())) {
                return onSelectNone();
            }
            return onSelectAll();
        };
        _this.getSelectionString = function (selection) {
            var intl = _this.props.intl;
            if (!selection.length) {
                return "";
            }
            return selection
                .map(function (item) {
                if (Object.prototype.hasOwnProperty.call(item, "available") && !item.available) {
                    return intl.formatMessage({ id: "gs.list.notAvailableAbbreviation" });
                }
                return item.title || "(" + intl.formatMessage({ id: "empty_value" }) + ")";
            })
                .join(", ");
        };
        _this.isEmpty = function () {
            var _a = _this.props, selectedItems = _a.selectedItems, itemsCount = _a.itemsCount, isInverted = _a.isInverted, isSearching = _a.isSearching, items = _a.items, isSelected = _a.isSelected;
            if (selectedItems.length === 0) {
                return !isInverted;
            }
            if (isSearching) {
                return items.every(function (item) { return !isSelected(item); });
            }
            return ((selectedItems.length === 0 && !isInverted) || (selectedItems.length === itemsCount && isInverted));
        };
        _this.isIndefiniteSelection = function () {
            var _a = _this.props, selectedItems = _a.selectedItems, isSearching = _a.isSearching, items = _a.items, isSelected = _a.isSelected, filteredItemsCount = _a.filteredItemsCount;
            if (selectedItems.length === 0) {
                return false;
            }
            if (isSearching) {
                var selectedItems_1 = items.filter(function (item) { return isSelected(item); });
                var selectedItemsCount = selectedItems_1.length;
                return selectedItemsCount !== 0 && selectedItemsCount !== filteredItemsCount;
            }
            return true;
        };
        _this.isAllSelected = function () {
            var _a = _this.props, itemsCount = _a.itemsCount, isInverted = _a.isInverted, isSearching = _a.isSearching, items = _a.items, isSelected = _a.isSelected, selectedItems = _a.selectedItems;
            if (isSearching) {
                var selectedItemsCount = items.filter(function (item) { return isSelected(item); }).length;
                var totalItemsCount = items.filter(function (item) { return item !== null; }).length;
                return selectedItemsCount === totalItemsCount;
            }
            return isInverted ? selectedItems.length === 0 : selectedItems.length === itemsCount;
        };
        _this.renderSearchResultsLength = function () {
            var _a = _this.props, itemsCount = _a.itemsCount, isSearching = _a.isSearching, intl = _a.intl;
            if (isSearching && itemsCount > 0) {
                return (React.createElement("span", { className: "gd-list-actions-selection-size s-list-search-selection-size" },
                    intl.formatMessage({ id: "gs.list.searchResults" }),
                    " (",
                    itemsCount,
                    ")"));
            }
            return null;
        };
        _this.renderActions = function () {
            var _a = _this.props, selectAllCheckbox = _a.selectAllCheckbox, intl = _a.intl;
            if (selectAllCheckbox) {
                var checkboxClasses = cx("input-checkbox", "gd-checkbox-selection", {
                    "checkbox-indefinite": _this.isIndefiniteSelection(),
                });
                var labelClasses = cx("input-checkbox-label", "s-select-all-checkbox");
                var checkbox = (React.createElement("label", { className: labelClasses },
                    React.createElement("input", { readOnly: true, type: "checkbox", className: checkboxClasses, checked: !_this.isEmpty(), onChange: _this.onActionCheckboxChange }),
                    React.createElement("span", { className: "input-label-text" }, intl.formatMessage({ id: "gs.list.all" }))));
                return (React.createElement("div", { className: "gd-list-actions gd-list-actions-invertable" },
                    checkbox,
                    _this.renderSearchResultsLength()));
            }
            return (React.createElement("div", { className: "gd-list-actions" },
                React.createElement(Button, { className: "gd-button-link", tagName: "a", onClick: _this.props.onSelectAll, value: intl.formatMessage({ id: "gs.list.selectAll" }) }),
                React.createElement(Button, { className: "gd-button-link", tagName: "a", onClick: _this.props.onSelectNone, value: intl.formatMessage({ id: "gs.list.clear" }) })));
        };
        _this.renderStatusBar = function () {
            var _a = _this.props, selectAllCheckbox = _a.selectAllCheckbox, selectedItems = _a.selectedItems, isInverted = _a.isInverted, tagName = _a.tagName, intl = _a.intl;
            if (!selectAllCheckbox) {
                return null;
            }
            var attributeName = (React.createElement("span", { className: "gd-shortened-text gd-attribute-name s-dropdown-attribute-filter-name", title: tagName }, tagName));
            var selectionItemsStr = _this.getSelectionString(selectedItems);
            var isSelectionEmpty = selectedItems.length === 0;
            var invertedInfo = !isSelectionEmpty && isInverted ? (React.createElement("span", null,
                React.createElement("b", null, intl.formatMessage({ id: "gs.list.all" })),
                "\u00A0",
                intl.formatMessage({ id: "gs.list.except" }),
                "\u00A0")) : null;
            var selectionList = !isSelectionEmpty ? (React.createElement("span", { className: "gd-shortened-text gd-selection-list s-dropdown-attribute-selection-list", title: selectionItemsStr }, "" + selectionItemsStr)) : null;
            var selectionLengthInfo = selectedItems.length > 1 ? "\u00A0(" + selectedItems.length + ")" : null;
            var is = React.createElement("span", null,
                "\u00A0",
                intl.formatMessage({ id: "gs.list.is" }),
                "\u00A0");
            var allOrNone = isSelectionEmpty &&
                (!isInverted ? ("(" + intl.formatMessage({ id: "gs.filterLabel.none" }) + ")") : (React.createElement("b", null, intl.formatMessage({ id: "gs.list.all" }))));
            return (React.createElement("div", { className: "gd-list-status-bar s-list-status-bar" },
                attributeName,
                is,
                allOrNone,
                invertedInfo,
                selectionList,
                selectionLengthInfo));
        };
        return _this;
    }
    MultiSelectListCore.prototype.render = function () {
        var _a = this.props, isMobile = _a.isMobile, width = _a.width, height = _a.height, items = _a.items, itemHeight = _a.itemHeight, itemsCount = _a.itemsCount, onScrollEnd = _a.onScrollEnd, renderItem = _a.renderItem, selectedItems = _a.selectedItems;
        return (React.createElement("div", { className: "gd-flex-item-stretch-mobile gd-flex-row-container-mobile" },
            this.renderActions(),
            React.createElement(FlexDimensions, { measureHeight: isMobile, measureWidth: isMobile || !width, className: "gd-flex-item-stretch-mobile" },
                React.createElement(List, { className: "is-multiselect", width: width, height: height, items: items, itemHeight: itemHeight, itemsCount: itemsCount, renderItem: function (_a) {
                        var item = _a.item;
                        return renderItem({
                            item: item,
                            isSelected: selectedItems.some(function (_item) { return _item === item; }),
                        });
                    }, onScrollEnd: onScrollEnd, compensateBorder: !isMobile })),
            this.renderStatusBar()));
    };
    return MultiSelectListCore;
}(Component));
/**
 * @internal
 */
export var MultiSelectList = injectIntl(MultiSelectListCore);
//# sourceMappingURL=MultiSelectList.js.map
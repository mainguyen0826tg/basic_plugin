import { __generator } from "tslib";
import { invalidArgumentsProvided } from "../../events/general";
import { selectLayout } from "../../store/layout/layoutSelectors";
import { put, select } from "redux-saga/effects";
import { validateItemExists, validateItemPlacement, validateSectionExists, validateSectionPlacement, } from "./validation/layoutValidation";
import { layoutActions } from "../../store/layout";
import { layoutSectionItemMoved } from "../../events/layout";
import { resolveIndexOfNewItem, resolveRelativeIndex } from "../../utils/arrayOps";
function validateAndResolve(commandCtx) {
    var ctx = commandCtx.ctx, layout = commandCtx.layout, _a = commandCtx.cmd.payload, sectionIndex = _a.sectionIndex, toSectionIndex = _a.toSectionIndex, itemIndex = _a.itemIndex, toItemIndex = _a.toItemIndex;
    if (!validateSectionExists(layout, sectionIndex)) {
        throw invalidArgumentsProvided(ctx, commandCtx.cmd, "Attempting to move item from non-existent section at " + sectionIndex + ". There are only " + layout.sections.length + " sections.");
    }
    var fromSection = layout.sections[sectionIndex];
    if (!validateItemExists(fromSection, itemIndex)) {
        throw invalidArgumentsProvided(ctx, commandCtx.cmd, "Attempting to move non-existent item from index " + itemIndex + ". There are only " + fromSection.items.length + " items.");
    }
    var itemToMove = fromSection.items[itemIndex];
    if (!validateSectionPlacement(layout, toSectionIndex)) {
        throw invalidArgumentsProvided(ctx, commandCtx.cmd, "Attempting to move item to a wrong section at index " + toSectionIndex + ". There are currently " + layout.sections.length + " sections.");
    }
    var targetSectionIndex = resolveRelativeIndex(layout.sections, toSectionIndex);
    var targetSection = layout.sections[targetSectionIndex];
    if (!validateItemPlacement(targetSection, toItemIndex)) {
        throw invalidArgumentsProvided(ctx, commandCtx.cmd, "Attempting to move item to a wrong location at index " + toItemIndex + ". Target section has " + targetSection.items.length + " items.");
    }
    var targetItemIndex = 0;
    if (sectionIndex === targetSectionIndex) {
        targetItemIndex = resolveRelativeIndex(targetSection.items, toItemIndex);
        if (itemIndex === targetItemIndex) {
            throw invalidArgumentsProvided(ctx, commandCtx.cmd, "Attempting to move item to a same place where it already resides " + toItemIndex + ".");
        }
    }
    else {
        targetItemIndex = resolveIndexOfNewItem(targetSection.items, toItemIndex);
    }
    return {
        targetSectionIndex: targetSectionIndex,
        targetItemIndex: targetItemIndex,
        itemToMove: itemToMove,
    };
}
export function moveSectionItemHandler(ctx, cmd) {
    var commandCtx, _a, _b, targetSectionIndex, targetItemIndex, itemToMove, _c, itemIndex, sectionIndex;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = {
                    ctx: ctx,
                    cmd: cmd
                };
                return [4 /*yield*/, select(selectLayout)];
            case 1:
                commandCtx = (_a.layout = _d.sent(),
                    _a);
                _b = validateAndResolve(commandCtx), targetSectionIndex = _b.targetSectionIndex, targetItemIndex = _b.targetItemIndex, itemToMove = _b.itemToMove;
                _c = cmd.payload, itemIndex = _c.itemIndex, sectionIndex = _c.sectionIndex;
                return [4 /*yield*/, put(layoutActions.moveSectionItem({
                        sectionIndex: sectionIndex,
                        itemIndex: itemIndex,
                        toSectionIndex: targetSectionIndex,
                        toItemIndex: targetItemIndex,
                        undo: {
                            cmd: cmd,
                        },
                    }))];
            case 2:
                _d.sent();
                return [2 /*return*/, layoutSectionItemMoved(ctx, itemToMove, sectionIndex, targetSectionIndex, itemIndex, targetItemIndex, cmd.correlationId)];
        }
    });
}
//# sourceMappingURL=moveSectionItemHandler.js.map
import { __assign, __awaiter, __generator, __spreadArrays } from "tslib";
// (C) 2020-2021 GoodData Corporation
import { MetadataModule } from "./metadata";
import { UserModule } from "./user";
import cloneDeepWith from "lodash/cloneDeepWith";
import compact from "lodash/compact";
import omit from "lodash/omit";
export function createTranslator(kpiMap, visWidgetMap) {
    return function (oldUri) {
        var kpiMatch = kpiMap.get(oldUri);
        var visWidgetMatch = visWidgetMap.get(oldUri);
        if (kpiMatch) {
            return kpiMatch;
        }
        else if (visWidgetMatch) {
            return visWidgetMatch;
        }
        else {
            return oldUri;
        }
    };
}
/**
 * Remove fields that we do not want to send (either because the server will generate them anyway, or because of options)
 * @param originalMeta - the meta to start with
 * @param options - the options relevant to this particular run
 */
function getSanitizedMeta(originalMeta, options) {
    return omit(originalMeta, compact([
        "identifier",
        "uri",
        "author",
        "created",
        "updated",
        "contributor",
        options && options.clearLockedFlag && "locked",
    ]));
}
/**
 * Updates content of the dashboard
 *
 * @param {string} dashboardUri uri of dashboard
 * @param {UriTranslator} uriTranslator gets updated widgets and kpis uri
 * @param {string} filterContext updated filter context uri
 * @experimental
 */
export function updateContent(analyticalDashboard, uriTranslator, filterContext) {
    return cloneDeepWith(__assign(__assign({}, analyticalDashboard.content), { filterContext: filterContext, widgets: analyticalDashboard.content.widgets.map(function (uri) {
            return uriTranslator(uri);
        }) }), function (value) {
        var uri = value.uri;
        if (!uri) {
            return;
        }
        return __assign(__assign({}, value), { uri: uriTranslator(uri) });
    });
}
var MetadataModuleExt = /** @class */ (function () {
    function MetadataModuleExt(xhr) {
        this.xhr = xhr;
        this.metadataModule = new MetadataModule(xhr);
        this.userModule = new UserModule(xhr);
    }
    /**
     * @param {string} projectId id of the project
     * @param {string} dashboardUri uri of the dashboard
     * @param {ICopyDashboardOptions} options object with options:
     *          - default {} dashboard is cloned with new kpi reference and visualization widget is cloned with new
     *              visualization object reference
     *          - copyKpi {boolean} choose whether dashboard is cloned with new Kpi reference
     *          - copyVisObj {boolean} choose whether visualization widget is cloned with new visualization object reference
     *          - name {string} optional - choose name, default value is "Copy of (old title of the dashboard)"
     *          - summary {string} - choose summary, default is the summary of the original dashboard
     *          - tags {string} - choose tags, default is the tags of the original dashboard
     *          - clearLockedFlag {boolean} - if true, the isLocked flag will be cleared for the newly created dashboard, defaults to false
     * @returns {string} uri of cloned dashboard
     * @experimental
     */
    MetadataModuleExt.prototype.saveDashboardAs = function (projectId, dashboardUri, options) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var objectsFromDashboard, dashboardDetails, analyticalDashboard, allCreatedObjUris, visWidgetUris, filterContext, kpiMap, visWidgetMap, translator, updatedContent, duplicateDashboard, err_1;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.getObjectsFromDashboard(projectId, dashboardUri)];
                    case 1:
                        objectsFromDashboard = _e.sent();
                        return [4 /*yield*/, this.metadataModule.getObjectDetails(dashboardUri)];
                    case 2:
                        dashboardDetails = _e.sent();
                        analyticalDashboard = dashboardDetails.analyticalDashboard;
                        allCreatedObjUris = [];
                        visWidgetUris = [];
                        _e.label = 3;
                    case 3:
                        _e.trys.push([3, 8, , 14]);
                        return [4 /*yield*/, this.duplicateFilterContext(projectId, objectsFromDashboard, options)];
                    case 4:
                        filterContext = _e.sent();
                        allCreatedObjUris.push(filterContext);
                        return [4 /*yield*/, this.duplicateOrKeepKpis(projectId, objectsFromDashboard, options)];
                    case 5:
                        kpiMap = _e.sent();
                        if (this.shouldCopyKpi(options)) {
                            allCreatedObjUris.push.apply(allCreatedObjUris, Array.from(kpiMap.values()));
                        }
                        return [4 /*yield*/, this.duplicateWidgets(projectId, objectsFromDashboard, options)];
                    case 6:
                        visWidgetMap = _e.sent();
                        visWidgetUris.push.apply(visWidgetUris, Array.from(visWidgetMap.values()));
                        translator = createTranslator(kpiMap, visWidgetMap);
                        updatedContent = updateContent(analyticalDashboard, translator, filterContext);
                        duplicateDashboard = {
                            analyticalDashboard: __assign(__assign({}, dashboardDetails.analyticalDashboard), { content: {
                                    filterContext: filterContext,
                                    layout: __assign({}, updatedContent.layout),
                                    widgets: __spreadArrays(updatedContent.widgets),
                                }, meta: __assign(__assign({}, getSanitizedMeta(dashboardDetails.analyticalDashboard.meta, options)), { title: (_a = options.name) !== null && _a !== void 0 ? _a : "Copy of " + analyticalDashboard.meta.title, summary: (_c = (_b = options.summary) !== null && _b !== void 0 ? _b : analyticalDashboard.meta.summary) !== null && _c !== void 0 ? _c : "", tags: (_d = options.tags) !== null && _d !== void 0 ? _d : analyticalDashboard.meta.tags }) }),
                        };
                        return [4 /*yield*/, this.metadataModule.createObject(projectId, duplicateDashboard)];
                    case 7: return [2 /*return*/, (_e.sent()).analyticalDashboard
                            .meta.uri];
                    case 8:
                        err_1 = _e.sent();
                        if (!this.shouldCopyVisObj(options)) return [3 /*break*/, 10];
                        return [4 /*yield*/, Promise.all(visWidgetUris.map(function (uri) { return _this.cascadingDelete(projectId, uri); }))];
                    case 9:
                        _e.sent();
                        return [3 /*break*/, 12];
                    case 10: return [4 /*yield*/, Promise.all(visWidgetUris.map(function (uri) { return _this.metadataModule.deleteObject(uri); }))];
                    case 11:
                        _e.sent();
                        _e.label = 12;
                    case 12: return [4 /*yield*/, Promise.all(allCreatedObjUris.map(function (uri) { return _this.cascadingDelete(projectId, uri); }))];
                    case 13:
                        _e.sent();
                        return [2 /*return*/, dashboardUri];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deletes dashboard and its objects
     * (only the author of the dashboard can delete the dashboard and its objects)
     *
     * @method deleteAllObjects
     * @param {string} projectId Project identifier
     * @param {string} dashboardUri Uri of a dashboard to be deleted
     * @experimental
     */
    MetadataModuleExt.prototype.cascadingDelete = function (projectID, dashboardUri) {
        return __awaiter(this, void 0, void 0, function () {
            var objects, currentUser, objectsToBeDeleted;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.metadataModule.getObjectUsing(projectID, dashboardUri)];
                    case 1:
                        objects = _a.sent();
                        return [4 /*yield*/, this.userModule.getAccountInfo()];
                    case 2:
                        currentUser = (_a.sent()).profileUri;
                        objectsToBeDeleted = objects
                            .filter(function (object) { return object.author === currentUser; })
                            .map(function (object) {
                            return object.link;
                        });
                        return [2 /*return*/, this.xhr.post("/gdc/md/" + projectID + "/objects/delete", {
                                body: {
                                    delete: {
                                        items: [dashboardUri].concat(objectsToBeDeleted),
                                        mode: "cascade",
                                    },
                                },
                            })];
                }
            });
        });
    };
    MetadataModuleExt.prototype.duplicateOrKeepKpis = function (projectId, objsFromDashboard, options) {
        return __awaiter(this, void 0, void 0, function () {
            var uriMap;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uriMap = new Map();
                        if (!this.shouldCopyKpi(options)) return [3 /*break*/, 2];
                        return [4 /*yield*/, Promise.all(objsFromDashboard
                                .filter(function (obj) { return _this.unwrapObj(obj).meta.category === "kpi"; })
                                .map(function (kpiWidget) { return __awaiter(_this, void 0, void 0, function () {
                                var kpi, toSave, newUriKpiObj;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            kpi = kpiWidget.kpi;
                                            toSave = {
                                                kpi: {
                                                    meta: getSanitizedMeta(kpi.meta, options),
                                                    content: __assign({}, kpi.content),
                                                },
                                            };
                                            return [4 /*yield*/, this.metadataModule.createObject(projectId, toSave)];
                                        case 1:
                                            newUriKpiObj = (_a.sent()).kpi.meta.uri;
                                            uriMap.set(kpi.meta.uri, newUriKpiObj);
                                            return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, uriMap];
                }
            });
        });
    };
    MetadataModuleExt.prototype.duplicateWidgets = function (projectId, objsFromDashboard, options) {
        return __awaiter(this, void 0, void 0, function () {
            var uriMap;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uriMap = new Map();
                        return [4 /*yield*/, Promise.all(objsFromDashboard
                                .filter(function (obj) { return _this.unwrapObj(obj).meta.category === "visualizationWidget"; })
                                .map(function (visWidget) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    return [2 /*return*/, this.createAndUpdateWidgets(projectId, visWidget, options, uriMap)];
                                });
                            }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, uriMap];
                }
            });
        });
    };
    MetadataModuleExt.prototype.createAndUpdateWidgets = function (projectId, visWidget, options, uriMap) {
        return __awaiter(this, void 0, void 0, function () {
            var visualizationWidget, visObj, toSave, newUriVisObj, updatedVisWidget, visUri, updatedVisWidget, visualizationWidget_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        visualizationWidget = visWidget.visualizationWidget;
                        if (!this.shouldCopyVisObj(options)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.metadataModule.getObjectDetails(visualizationWidget.content.visualization)];
                    case 1:
                        visObj = _a.sent();
                        toSave = {
                            visualizationObject: {
                                meta: getSanitizedMeta(visObj.visualizationObject.meta, options),
                                content: __assign({}, visObj.visualizationObject.content),
                            },
                        };
                        return [4 /*yield*/, this.metadataModule.createObject(projectId, toSave)];
                    case 2:
                        newUriVisObj = (_a.sent())
                            .visualizationObject.meta.uri;
                        updatedVisWidget = {
                            visualizationWidget: {
                                meta: getSanitizedMeta(visWidget.visualizationWidget.meta, options),
                                content: __assign(__assign({}, visWidget.visualizationWidget.content), { visualization: newUriVisObj }),
                            },
                        };
                        return [4 /*yield*/, this.metadataModule.createObject(projectId, updatedVisWidget)];
                    case 3:
                        visUri = (_a.sent())
                            .visualizationWidget.meta.uri;
                        uriMap.set(visualizationWidget.meta.uri, visUri);
                        return [3 /*break*/, 6];
                    case 4:
                        updatedVisWidget = {
                            visualizationWidget: {
                                meta: getSanitizedMeta(visWidget.visualizationWidget.meta, options),
                                content: __assign({}, visWidget.visualizationWidget.content),
                            },
                        };
                        return [4 /*yield*/, this.metadataModule.createObject(projectId, updatedVisWidget)];
                    case 5:
                        visualizationWidget_1 = (_a.sent()).visualizationWidget;
                        uriMap.set(visWidget.visualizationWidget.meta.uri, visualizationWidget_1.meta.uri);
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    MetadataModuleExt.prototype.duplicateFilterContext = function (projectId, objsFromDashboard, options) {
        return __awaiter(this, void 0, void 0, function () {
            var originalFilterContext, toSave, filterContext;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        originalFilterContext = objsFromDashboard.filter(function (obj) { return _this.unwrapObj(obj).meta.category === "filterContext"; })[0];
                        toSave = {
                            filterContext: {
                                meta: getSanitizedMeta(originalFilterContext.filterContext.meta, options),
                                content: __assign({}, originalFilterContext.filterContext.content),
                            },
                        };
                        return [4 /*yield*/, this.metadataModule.createObject(projectId, toSave)];
                    case 1:
                        filterContext = (_a.sent()).filterContext;
                        return [2 /*return*/, filterContext.meta.uri];
                }
            });
        });
    };
    MetadataModuleExt.prototype.getObjectsFromDashboard = function (projectId, dashboardUri) {
        return __awaiter(this, void 0, void 0, function () {
            var uris;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getObjectsUrisInDashboard(projectId, dashboardUri)];
                    case 1:
                        uris = _a.sent();
                        return [2 /*return*/, this.metadataModule.getObjects(projectId, uris)]; // TODO improve types
                }
            });
        });
    };
    MetadataModuleExt.prototype.getObjectsUrisInDashboard = function (projectId, dashboardUri) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.metadataModule.getObjectUsing(projectId, dashboardUri, {
                            types: ["kpi", "visualizationWidget", "filterContext"],
                        })];
                    case 1: return [2 /*return*/, (_a.sent()).map(function (obj) {
                            return obj.link;
                        })];
                }
            });
        });
    };
    MetadataModuleExt.prototype.unwrapObj = function (obj) {
        return obj[Object.keys(obj)[0]];
    };
    MetadataModuleExt.prototype.shouldCopyVisObj = function (options) {
        return !!(options.copyVisObj || typeof options.copyVisObj === "undefined");
    };
    MetadataModuleExt.prototype.shouldCopyKpi = function (options) {
        return !!(options.copyKpi || typeof options.copyKpi === "undefined");
    };
    return MetadataModuleExt;
}());
export { MetadataModuleExt };
//# sourceMappingURL=metadataExt.js.map
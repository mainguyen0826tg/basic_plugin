// (C) 2021 GoodData Corporation
import { __assign, __values } from "tslib";
import { Dashboard } from "../presentation";
import { DashboardCustomizationBuilder } from "./customizationApis/customizationBuilder";
import { DefaultDashboardEventHandling } from "./customizationApis/dashboardEventHandling";
import { pluginDebugStr } from "./customizationApis/pluginUtils";
import { LIB_VERSION } from "../__version";
/**
 * A factory function to obtain an instance of {@link IDashboardEngine}. This is the main, well-known entry
 * point to the Dashboard Engine that is used during both static and dynamic loading of the dashboard engine
 * instances by the DashboardLoader.
 *
 * @public
 */
export function newDashboardEngine() {
    return {
        version: LIB_VERSION,
        initializePlugins: function (ctx, plugins) {
            var e_1, _a;
            var customizationBuilder = new DashboardCustomizationBuilder();
            var eventRegistration = new DefaultDashboardEventHandling();
            // eslint-disable-next-line no-console
            console.log("DashboardEngine " + this.version + " initializing with plugins: " + plugins
                .map(pluginDebugStr)
                .join(", "));
            try {
                for (var plugins_1 = __values(plugins), plugins_1_1 = plugins_1.next(); !plugins_1_1.done; plugins_1_1 = plugins_1.next()) {
                    var plugin = plugins_1_1.value;
                    customizationBuilder.onBeforePluginRegister(plugin);
                    try {
                        plugin.register(ctx, customizationBuilder, eventRegistration);
                        customizationBuilder.onAfterPluginRegister();
                    }
                    catch (e) {
                        customizationBuilder.onPluginRegisterError(e);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (plugins_1_1 && !plugins_1_1.done && (_a = plugins_1.return)) _a.call(plugins_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            var extensionProps = customizationBuilder.build();
            var eventingProps = eventRegistration.getDashboardEventing();
            return __assign(__assign({}, extensionProps), eventingProps);
        },
        getDashboardComponent: function () {
            return Dashboard;
        },
    };
}
//# sourceMappingURL=engine.js.map
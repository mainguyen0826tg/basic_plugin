import { DashboardState } from "../types";
/**
 * Returns dashboard's config. It is expected that the selector is called only after the config state
 * is correctly initialized. Invocations before initialization lead to invariant errors.
 *
 * @public
 */
export declare const selectConfig: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("../..").ResolvedDashboardConfig, (res: import("./configState").ConfigState) => import("../..").ResolvedDashboardConfig>;
/**
 * Returns workspace-level configuration for the of the date filter options and presets.
 *
 * Note: this configuration SHOULD be further augmented by the dashboard-level overrides to obtain
 * the effective date filter configuration.
 *
 * @public
 */
export declare const selectDateFilterConfig: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("@gooddata/sdk-backend-spi").IDateFilterConfig, (res: import("../..").ResolvedDashboardConfig) => import("@gooddata/sdk-backend-spi").IDateFilterConfig>;
/**
 * Returns settings that are in effect for the current dashboard.
 *
 * @public
 */
export declare const selectSettings: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("@gooddata/sdk-backend-spi").ISettings, (res: import("../..").ResolvedDashboardConfig) => import("@gooddata/sdk-backend-spi").ISettings>;
/**
 * Returns locale to use for internationalization of the dashboard.
 *
 * @public
 */
export declare const selectLocale: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("@gooddata/sdk-ui").ILocale, (res: import("../..").ResolvedDashboardConfig) => import("@gooddata/sdk-ui").ILocale>;
/**
 * Returns number separators to use when rendering numeric values on charts or KPIs.
 *
 * @public
 */
export declare const selectSeparators: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("@gooddata/sdk-backend-spi").ISeparators, (res: import("../..").ResolvedDashboardConfig) => import("@gooddata/sdk-backend-spi").ISeparators>;
/**
 * Returns the color palette for dashboard charts.
 *
 * @public
 */
export declare const selectColorPalette: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("@gooddata/sdk-model").IColorPalette, (res: import("../..").ResolvedDashboardConfig) => import("@gooddata/sdk-model").IColorPalette>;
/**
 * Returns the object availability configuration for this dashboard. Only objects that match the availability
 * criteria can appear in selections where user has pick an object to use for some purpose (for instance metric for
 * KPI or date dataset to filter by).
 *
 * @public
 */
export declare const selectObjectAvailabilityConfig: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("../..").ObjectAvailabilityConfig, (res: import("../..").ResolvedDashboardConfig) => import("../..").ObjectAvailabilityConfig>;
/**
 * Returns Mapbox token.
 *
 * @internal
 */
export declare const selectMapboxToken: import("@reduxjs/toolkit").OutputSelector<DashboardState, string | undefined, (res: import("../..").ResolvedDashboardConfig) => string | undefined>;
/**
 * Returns whether the Dashboard is executed in read-only mode.
 * Read-only mode disables any interactions that can alter the backend data.
 *
 * @public
 */
export declare const selectIsReadOnly: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("../..").ResolvedDashboardConfig) => boolean>;
/**
 * Returns whether the Dashboard is executed in embedded context.
 * In embedded mode, some interactions may be disabled.
 *
 * @public
 */
export declare const selectIsEmbedded: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("../..").ResolvedDashboardConfig) => boolean>;
/**
 * Returns whether the Dashboard is rendered in the export mode.
 * In export mode, some components can be hidden, or rendered differently.
 *
 * @internal
 */
export declare const selectIsExport: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("../..").ResolvedDashboardConfig) => boolean>;
/**
 * Returns whether the default drills configured on the widgets or implicit drills (eg. drill down) are disabled.
 * This option does not affect drilling enabled by drillableItems.
 *
 * @public
 */
export declare const selectDisableDefaultDrills: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("../..").ResolvedDashboardConfig) => boolean>;
/**
 * Returns whether filter values in drill events should be resolved.
 *
 * @public
 */
export declare const selectEnableFilterValuesResolutionInDrillEvents: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("../..").ResolvedDashboardConfig) => boolean>;
/**
 * Returns date format.
 *
 * @public
 */
export declare const selectDateFormat: import("@reduxjs/toolkit").OutputSelector<DashboardState, string | undefined, (res: import("../..").ResolvedDashboardConfig) => string | undefined>;
/**
 * Returns whether the current user can schedule emails.
 *
 * @public
 */
export declare const selectEnableKPIDashboardSchedule: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean | undefined, (res: import("../..").ResolvedDashboardConfig) => boolean | undefined>;
/**
 * Returns whether the current user can share scheduled email to other recipients.
 *
 * @public
 */
export declare const selectEnableKPIDashboardScheduleRecipients: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean | undefined, (res: import("../..").ResolvedDashboardConfig) => boolean | undefined>;
/**
 * Returns current platform edition.
 *
 * @public
 */
export declare const selectPlatformEdition: import("@reduxjs/toolkit").OutputSelector<DashboardState, import("@gooddata/sdk-backend-spi").PlatformEdition, (res: import("../..").ResolvedDashboardConfig) => import("@gooddata/sdk-backend-spi").PlatformEdition>;
/**
 * Returns whether company logo should be visible in embedded dashboard.
 *
 * @public
 */
export declare const selectEnableCompanyLogoInEmbeddedUI: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("../..").ResolvedDashboardConfig) => boolean>;
/**
 * Returns whether the export to pdf is enabled.
 *
 * @public
 */
export declare const selectEnableKPIDashboardExportPDF: import("@reduxjs/toolkit").OutputSelector<DashboardState, string | number | boolean | object, (res: import("../..").ResolvedDashboardConfig) => string | number | boolean | object>;
/**
 * Returns whether the drill to dashboard is enabled.
 *
 * @public
 */
export declare const selectEnableKPIDashboardDrillToDashboard: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("../..").ResolvedDashboardConfig) => boolean>;
/**
 * Returns whether the save as new dashboard functionality is enabled.
 *
 * @public
 */
export declare const selectEnableKPIDashboardSaveAsNew: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("../..").ResolvedDashboardConfig) => boolean>;
/**
 * Returns whether implicit drill to attributes url enabled
 *
 * @public
 */
export declare const selectEnableClickableAttributeURL: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("../..").ResolvedDashboardConfig) => boolean>;
/**
 * Returns whether drill to url is enabled
 *
 * @public
 */
export declare const selectEnableKPIDashboardDrillToURL: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("../..").ResolvedDashboardConfig) => boolean>;
/**
 * Returns whether drill to insight is enabled
 *
 * @public
 */
export declare const selectEnableKPIDashboardDrillToInsight: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("../..").ResolvedDashboardConfig) => boolean>;
/**
 * Returns whether implicit drill to attributes url enabled
 *
 * @public
 */
export declare const selectEnableKPIDashboardImplicitDrillDown: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("../..").ResolvedDashboardConfig) => boolean>;
/**
 * Returns whether Kpi drills in embedded mode are disabled.
 *
 * @public
 */
export declare const selectHideKpiDrillInEmbedded: import("@reduxjs/toolkit").OutputSelector<DashboardState, boolean, (res: import("../..").ResolvedDashboardConfig) => boolean>;
//# sourceMappingURL=configSelectors.d.ts.map
import { __assign, __read, __spread } from "tslib";
// (C) 2019-2021 GoodData Corporation
import { isDashboardLayout, } from "@gooddata/sdk-backend-spi";
import invariant from "ts-invariant";
import difference from "lodash/difference";
import isArray from "lodash/isArray";
import identity from "lodash/identity";
import { DashboardLayoutFacade } from "../facade/layout";
import { DashboardLayoutSectionBuilder } from "./section";
import { resolveValueOrUpdateCallback } from "@gooddata/sdk-backend-base";
/**
 * @alpha
 */
var DashboardLayoutBuilder = /** @class */ (function () {
    function DashboardLayoutBuilder(layoutFacade, layoutFacadeConstructor) {
        this.layoutFacade = layoutFacade;
        this.layoutFacadeConstructor = layoutFacadeConstructor;
    }
    /**
     * Creates an instance of DashboardLayoutBuilder for particular layout.
     *
     * @param layout - layout to modify
     */
    DashboardLayoutBuilder.for = function (layout) {
        invariant(isDashboardLayout(layout), "Provided data must be IDashboardLayout.");
        var dashboardLayoutBuilder = new DashboardLayoutBuilder(DashboardLayoutFacade.for(layout), DashboardLayoutFacade.for);
        return dashboardLayoutBuilder;
    };
    /**
     * Creates an instance of DashboardLayoutBuilder with empty layout.
     */
    DashboardLayoutBuilder.forNewLayout = function () {
        var emptyLayout = {
            type: "IDashboardLayout",
            sections: [],
        };
        return DashboardLayoutBuilder.for(emptyLayout);
    };
    DashboardLayoutBuilder.prototype.size = function (valueOrUpdateCallback) {
        var _this = this;
        return this.setLayout(function (layout) { return (__assign(__assign({}, layout), { size: resolveValueOrUpdateCallback(valueOrUpdateCallback, _this.facade().size()) })); });
    };
    DashboardLayoutBuilder.prototype.createSection = function (create, index) {
        if (create === void 0) { create = identity; }
        if (index === void 0) { index = this.facade().sections().count(); }
        var emptySection = {
            type: "IDashboardLayoutSection",
            items: [],
        };
        this.setLayout(function (layout) {
            var updatedRows = __spread(layout.sections);
            updatedRows.splice(index, 0, emptySection);
            return __assign(__assign({}, layout), { sections: updatedRows });
        });
        DashboardLayoutSectionBuilder.for(this, index).modify(create);
        return this;
    };
    DashboardLayoutBuilder.prototype.addSection = function (section, index) {
        if (index === void 0) { index = this.facade().sections().count(); }
        this.setLayout(function (layout) {
            var updatedRows = __spread(layout.sections);
            updatedRows.splice(index, 0, section);
            return __assign(__assign({}, layout), { sections: updatedRows });
        });
        return this;
    };
    DashboardLayoutBuilder.prototype.modifySection = function (index, modify) {
        var sectionFacade = this.facade().sections().section(index);
        invariant(sectionFacade, "Cannot modify the section - section at index " + index + " does not exist.");
        DashboardLayoutSectionBuilder.for(this, index).modify(modify);
        return this;
    };
    DashboardLayoutBuilder.prototype.removeSection = function (index) {
        var sectionFacade = this.facade().sections().section(index);
        invariant(sectionFacade, "Cannot remove the section - section at index " + index + " does not exist.");
        return this.setLayout(function (layout) {
            var updatedRows = __spread(layout.sections);
            updatedRows.splice(index, 1);
            return __assign(__assign({}, layout), { sections: updatedRows });
        });
    };
    DashboardLayoutBuilder.prototype.moveSection = function (fromIndex, toIndex) {
        var _a;
        var section = (_a = this.facade().sections().section(fromIndex)) === null || _a === void 0 ? void 0 : _a.raw();
        invariant(section, "Cannot move the section - section at index " + fromIndex + " does not exist.");
        var maxToIndex = Math.min(toIndex, this.facade().sections().count() - 1);
        this.removeSection(fromIndex);
        this.createSection(function (r) {
            return r.setSection(section);
        }, maxToIndex);
        return this;
    };
    DashboardLayoutBuilder.prototype.removeSections = function (selector) {
        if (selector === void 0) { selector = function (sections) { return sections.all(); }; }
        var sectionsToRemove = selector(this.facade().sections());
        if (isArray(sectionsToRemove)) {
            this.setLayout(function (layout) {
                var updatedRows = difference(layout.sections, sectionsToRemove.map(function (r) { return r.raw(); }));
                return __assign(__assign({}, layout), { sections: updatedRows });
            });
        }
        else if (sectionsToRemove) {
            this.removeSection(sectionsToRemove.index());
        }
        return this;
    };
    DashboardLayoutBuilder.prototype.removeEmptySections = function () {
        return this.removeSections(function (sections) { return sections.filter(function (section) { return section.isEmpty(); }); });
    };
    DashboardLayoutBuilder.prototype.modifySections = function (modify, selector) {
        var _this = this;
        if (selector === void 0) { selector = function (sections) { return sections.all(); }; }
        var sectionsToModify = selector(this.facade().sections());
        if (isArray(sectionsToModify)) {
            sectionsToModify.forEach(function (section) {
                _this.modifySection(section.index(), modify);
            });
        }
        else if (sectionsToModify) {
            this.modifySection(sectionsToModify.index(), modify);
        }
        return this;
    };
    DashboardLayoutBuilder.prototype.setLayout = function (valueOrUpdateCallback) {
        var updatedLayout = resolveValueOrUpdateCallback(valueOrUpdateCallback, this.build());
        this.layoutFacade = this.layoutFacadeConstructor(updatedLayout);
        return this;
    };
    DashboardLayoutBuilder.prototype.facade = function () {
        return this.layoutFacade;
    };
    DashboardLayoutBuilder.prototype.modify = function (modifications) {
        modifications(this, this.facade());
        return this;
    };
    DashboardLayoutBuilder.prototype.build = function () {
        return this.layoutFacade.raw();
    };
    return DashboardLayoutBuilder;
}());
export { DashboardLayoutBuilder };
//# sourceMappingURL=layout.js.map
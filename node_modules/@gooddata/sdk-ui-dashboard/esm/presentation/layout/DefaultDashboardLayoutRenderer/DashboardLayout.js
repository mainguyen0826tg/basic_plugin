import { __assign } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { useMemo } from "react";
import { Container, ScreenClassProvider, ScreenClassRender, setConfiguration } from "react-grid-system";
import { DashboardLayoutSection } from "./DashboardLayoutSection";
import cx from "classnames";
import { DashboardLayoutFacade } from "../../../_staging/dashboard/fluidLayout/facade/layout";
import { getResizedItemPositions, unifyDashboardLayoutItemHeights, getLayoutWithoutGridHeights, } from "./utils/sizing";
import isEqual from "lodash/isEqual";
import { DASHBOARD_LAYOUT_GRID_CONFIGURATION } from "../../constants";
setConfiguration(DASHBOARD_LAYOUT_GRID_CONFIGURATION);
/**
 * DashboardLayout is customizable component for rendering {@link IDashboardLayout}.
 *
 * @alpha
 */
export function DashboardLayout(props) {
    var layout = props.layout, _a = props.sectionKeyGetter, sectionKeyGetter = _a === void 0 ? function (_a) {
        var section = _a.section;
        return section.index();
    } : _a, sectionRenderer = props.sectionRenderer, sectionHeaderRenderer = props.sectionHeaderRenderer, itemKeyGetter = props.itemKeyGetter, itemRenderer = props.itemRenderer, widgetRenderer = props.widgetRenderer, gridRowRenderer = props.gridRowRenderer, className = props.className, debug = props.debug, onMouseLeave = props.onMouseLeave, enableCustomHeight = props.enableCustomHeight;
    var removeHeights = function (layout, enableCustomHeight) {
        if (enableCustomHeight) {
            return layout;
        }
        return getLayoutWithoutGridHeights(layout);
    };
    var _b = useMemo(function () {
        var updatedLayout = removeHeights(layout, !!enableCustomHeight);
        var layoutFacade = DashboardLayoutFacade.for(unifyDashboardLayoutItemHeights(updatedLayout));
        var resizedItemPositions = getResizedItemPositions(layout, layoutFacade.raw());
        return { layoutFacade: layoutFacade, resizedItemPositions: resizedItemPositions };
    }, [layout, enableCustomHeight]), layoutFacade = _b.layoutFacade, resizedItemPositions = _b.resizedItemPositions;
    return (React.createElement("div", { className: cx("gd-fluidlayout-container", "s-fluid-layout-container", "gd-dashboards", className), onMouseLeave: onMouseLeave },
        React.createElement(ScreenClassProvider, { useOwnWidth: false },
            React.createElement(ScreenClassRender, { render: function (screen) {
                    return screen ? (React.createElement(Container, { fluid: true, className: "gd-fluidlayout-layout s-fluid-layout" }, layoutFacade.sections().map(function (section) {
                        return (React.createElement(DashboardLayoutSection, { key: sectionKeyGetter({
                                section: section,
                                screen: screen,
                            }), section: section, sectionRenderer: function (renderProps) {
                                return sectionRenderer ? (sectionRenderer(__assign(__assign({}, renderProps), { debug: debug }))) : (React.createElement(renderProps.DefaultSectionRenderer, __assign({}, renderProps, { debug: debug })));
                            }, sectionHeaderRenderer: sectionHeaderRenderer, itemKeyGetter: itemKeyGetter, itemRenderer: itemRenderer, gridRowRenderer: gridRowRenderer, widgetRenderer: function (renderProps) {
                                var isResizedByLayoutSizingStrategy = resizedItemPositions.some(function (position) {
                                    return isEqual(position, [
                                        renderProps.item.section().index(),
                                        renderProps.item.index(),
                                    ]);
                                });
                                return widgetRenderer ? (widgetRenderer(__assign(__assign({}, renderProps), { isResizedByLayoutSizingStrategy: isResizedByLayoutSizingStrategy,
                                    debug: debug }))) : (React.createElement(renderProps.DefaultWidgetRenderer, __assign({}, renderProps, { debug: debug, isResizedByLayoutSizingStrategy: isResizedByLayoutSizingStrategy })));
                            }, screen: screen }));
                    }))) : null;
                } }))));
}
//# sourceMappingURL=DashboardLayout.js.map
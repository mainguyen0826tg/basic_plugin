// (C) 2021 GoodData Corporation
import { isCustomWidget } from "../../model";
var WidgetCustomizerState = /** @class */ (function () {
    function WidgetCustomizerState(logger) {
        var _this = this;
        this.logger = logger;
        this.customWidgetMap = new Map();
        this.addDefinition = function (definition) {
            if (_this.customWidgetMap.has(definition.widgetType)) {
                _this.logger.warn("Redefining custom widget type " + definition.widgetType + ". Previous definition will be discarded.");
            }
            _this.customWidgetMap.set(definition.widgetType, definition);
        };
        this.getCustomWidgetMap = function () {
            return _this.customWidgetMap;
        };
    }
    return WidgetCustomizerState;
}());
var SealedCustomizerState = /** @class */ (function () {
    function SealedCustomizerState(state, logger) {
        var _this = this;
        this.state = state;
        this.logger = logger;
        this.addDefinition = function (_definition) {
            _this.logger.warn("Attempting to add custom widgets outside of plugin registration. Ignoring.");
        };
        this.getCustomWidgetMap = function () {
            return _this.state.getCustomWidgetMap();
        };
    }
    return SealedCustomizerState;
}());
var DefaultWidgetCustomizer = /** @class */ (function () {
    function DefaultWidgetCustomizer(logger) {
        var _this = this;
        this.logger = logger;
        this.state = new WidgetCustomizerState(this.logger);
        this.addCustomWidget = function (widgetType, Component) {
            _this.state.addDefinition({
                widgetType: widgetType,
                DefaultComponent: Component,
            });
            return _this;
        };
        this.sealCustomizer = function () {
            _this.state = new SealedCustomizerState(_this.state, _this.logger);
            return _this;
        };
        this.getWidgetComponentProvider = function () {
            var customWidgetMap = _this.state.getCustomWidgetMap();
            return function (widget) {
                if (!isCustomWidget(widget)) {
                    return undefined;
                }
                var definition = customWidgetMap.get(widget.customType);
                if (!definition) {
                    return undefined;
                }
                return definition.DefaultComponent;
            };
        };
    }
    return DefaultWidgetCustomizer;
}());
export { DefaultWidgetCustomizer };
//# sourceMappingURL=widgetCustomizer.js.map
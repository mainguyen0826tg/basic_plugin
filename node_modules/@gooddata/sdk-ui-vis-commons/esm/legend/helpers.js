// (C) 2007-2021 GoodData Corporation
import range from "lodash/range";
import head from "lodash/head";
import last from "lodash/last";
import inRange from "lodash/inRange";
import isEqual from "lodash/isEqual";
import { numberFormat } from "@gooddata/numberjs";
import { LEFT, RIGHT } from "./PositionTypes";
import { parseRGBString } from "../coloring/color";
export var RESPONSIVE_ITEM_MIN_WIDTH = 200;
export var RESPONSIVE_VISIBLE_ROWS = 2;
export var FLUID_PAGING_WIDTH = 30;
export var LEGEND_PADDING = 12;
export var ITEM_HEIGHT = 20;
export var SKIPPED_LABEL_TEXT = "...";
export var UTF_NON_BREAKING_SPACE = "\u00A0";
export var STATIC_PAGING_HEIGHT = 44;
function getEmptyBlock(style, index) {
    return {
        key: "empty-" + index,
        label: UTF_NON_BREAKING_SPACE,
        style: style
    };
}
function getLabelStyle(width, textAlign) {
    return { width: width, textAlign: textAlign };
}
var ALEFT = "left";
var ARIGHT = "right";
var ACENTER = "center";
var DOTS_WIDTH = 10;
function getSkippedLabelBlock(index) {
    return {
        key: "dots-" + index,
        label: SKIPPED_LABEL_TEXT,
        style: getLabelStyle(DOTS_WIDTH, ACENTER)
    };
}
var verticalHeatmapMiddleLabelStyle = { height: 30, textAlign: ALEFT, lineHeight: "30px" };
export var verticalHeatmapConfig = [
    { type: "label", labelIndex: 0, style: { height: 15, textAlign: ALEFT, lineHeight: "11px" } },
    { type: "label", labelIndex: 1, style: verticalHeatmapMiddleLabelStyle },
    { type: "label", labelIndex: 2, style: verticalHeatmapMiddleLabelStyle },
    { type: "label", labelIndex: 3, style: verticalHeatmapMiddleLabelStyle },
    { type: "label", labelIndex: 4, style: verticalHeatmapMiddleLabelStyle },
    { type: "label", labelIndex: 5, style: verticalHeatmapMiddleLabelStyle },
    { type: "label", labelIndex: 6, style: verticalHeatmapMiddleLabelStyle },
    { type: "label", labelIndex: 7, style: { height: 15, textAlign: ALEFT, lineHeight: "20px" } },
];
var defaultHeatmapLegendLabelStyle = { width: 40, textAlign: ACENTER };
export var heatmapLegendConfigMatrix = [
    [
        { type: "label", labelIndex: 0, style: { width: 175, textAlign: ALEFT } },
        { type: "label", labelIndex: 7, style: { width: 175, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 145, textAlign: ALEFT } },
        { type: "dots" },
        { type: "space", style: { width: 40 } },
        { type: "dots" },
        { type: "label", labelIndex: 7, style: { width: 145, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 95, textAlign: ALEFT } },
        { type: "dots" },
        { type: "space", style: { width: 40 } },
        { type: "dots" },
        { type: "space", style: { width: 40 } },
        { type: "dots" },
        { type: "space", style: { width: 40 } },
        { type: "dots" },
        { type: "label", labelIndex: 7, style: { width: 95, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 55, textAlign: ALEFT } },
        { type: "label", labelIndex: 2, style: { width: 90, textAlign: ACENTER } },
        { type: "dots" },
        { type: "space", style: { width: 40 } },
        { type: "dots" },
        { type: "label", labelIndex: 5, style: { width: 90, textAlign: ACENTER } },
        { type: "label", labelIndex: 7, style: { width: 55, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 45, textAlign: ALEFT } },
        { type: "dots" },
        { type: "label", labelIndex: 2, style: { width: 90, textAlign: ACENTER } },
        { type: "dots" },
        { type: "space", style: { width: 40 } },
        { type: "dots" },
        { type: "label", labelIndex: 5, style: { width: 90, textAlign: ACENTER } },
        { type: "dots" },
        { type: "label", labelIndex: 7, style: { width: 45, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 30, textAlign: ALEFT } },
        { type: "label", labelIndex: 1, style: defaultHeatmapLegendLabelStyle },
        { type: "space", style: { width: 10 } },
        { type: "label", labelIndex: 2, style: defaultHeatmapLegendLabelStyle },
        { type: "space", style: { width: 10 } },
        { type: "label", labelIndex: 3, style: defaultHeatmapLegendLabelStyle },
        { type: "space", style: { width: 10 } },
        { type: "label", labelIndex: 4, style: defaultHeatmapLegendLabelStyle },
        { type: "space", style: { width: 10 } },
        { type: "label", labelIndex: 5, style: defaultHeatmapLegendLabelStyle },
        { type: "space", style: { width: 10 } },
        { type: "label", labelIndex: 6, style: defaultHeatmapLegendLabelStyle },
        { type: "label", labelIndex: 7, style: { width: 30, textAlign: ARIGHT } },
    ],
];
var colorLegendConfigMatrix = [
    [
        { type: "label", labelIndex: 0, style: { width: 175, textAlign: ALEFT } },
        { type: "label", labelIndex: 6, style: { width: 175, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 145, textAlign: ALEFT } },
        { type: "dots" },
        { type: "space", style: { width: 40 } },
        { type: "dots" },
        { type: "label", labelIndex: 6, style: { width: 145, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 95, textAlign: ALEFT } },
        { type: "dots" },
        { type: "space", style: { width: 40 } },
        { type: "dots" },
        { type: "space", style: { width: 40 } },
        { type: "dots" },
        { type: "space", style: { width: 40 } },
        { type: "dots" },
        { type: "label", labelIndex: 6, style: { width: 95, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 55, textAlign: ALEFT } },
        { type: "label", labelIndex: 2, style: { width: 90, textAlign: ACENTER } },
        { type: "dots" },
        { type: "space", style: { width: 40 } },
        { type: "dots" },
        { type: "label", labelIndex: 4, style: { width: 90, textAlign: ACENTER } },
        { type: "label", labelIndex: 6, style: { width: 55, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 45, textAlign: ALEFT } },
        { type: "dots" },
        { type: "label", labelIndex: 2, style: { width: 90, textAlign: ACENTER } },
        { type: "dots" },
        { type: "space", style: { width: 40 } },
        { type: "dots" },
        { type: "label", labelIndex: 4, style: { width: 90, textAlign: ACENTER } },
        { type: "dots" },
        { type: "label", labelIndex: 6, style: { width: 45, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 30, textAlign: ALEFT } },
        { type: "label", labelIndex: 1, style: defaultHeatmapLegendLabelStyle },
        { type: "space", style: { width: 10 } },
        { type: "label", labelIndex: 2, style: defaultHeatmapLegendLabelStyle },
        { type: "space", style: { width: 10 } },
        { type: "label", labelIndex: 3, style: defaultHeatmapLegendLabelStyle },
        { type: "space", style: { width: 10 } },
        { type: "label", labelIndex: 4, style: defaultHeatmapLegendLabelStyle },
        { type: "space", style: { width: 10 } },
        { type: "label", labelIndex: 5, style: defaultHeatmapLegendLabelStyle },
        { type: "label", labelIndex: 6, style: { width: 30, textAlign: ARIGHT } },
    ],
];
var defaultHeatmapSmallLegendStyle = { width: 40, textAlign: ACENTER };
export var heatmapSmallLegendConfigMatrix = [
    [
        { type: "label", labelIndex: 0, style: { width: 63, textAlign: ALEFT } },
        { type: "label", labelIndex: 7, style: { width: 63, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 63, textAlign: ALEFT } },
        { type: "label", labelIndex: 7, style: { width: 63, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 63, textAlign: ALEFT } },
        { type: "label", labelIndex: 7, style: { width: 63, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 63, textAlign: ALEFT } },
        { type: "label", labelIndex: 7, style: { width: 63, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 33, textAlign: ALEFT } },
        { type: "label", labelIndex: 3, style: { width: 42, textAlign: ACENTER } },
        { type: "label", labelIndex: 7, style: { width: 51, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 33, textAlign: ALEFT } },
        { type: "label", labelIndex: 3, style: { width: 42, textAlign: ACENTER } },
        { type: "label", labelIndex: 7, style: { width: 51, textAlign: ARIGHT } },
    ],
];
export var colorSmallLegendConfigMatrix = [
    [
        { type: "label", labelIndex: 0, style: { width: 54, textAlign: ALEFT } },
        { type: "label", labelIndex: 6, style: { width: 54, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 54, textAlign: ALEFT } },
        { type: "label", labelIndex: 6, style: { width: 54, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 54, textAlign: ALEFT } },
        { type: "label", labelIndex: 6, style: { width: 54, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 54, textAlign: ALEFT } },
        { type: "label", labelIndex: 6, style: { width: 54, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 24, textAlign: ALEFT } },
        { type: "label", labelIndex: 4, style: { width: 32, textAlign: ACENTER } },
        { type: "label", labelIndex: 6, style: { width: 52, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 24, textAlign: ALEFT } },
        { type: "label", labelIndex: 4, style: { width: 32, textAlign: ACENTER } },
        { type: "label", labelIndex: 6, style: { width: 52, textAlign: ARIGHT } },
    ],
];
export var heatmapMediumLegendConfigMatrix = [
    [
        { type: "label", labelIndex: 0, style: { width: 138, textAlign: ALEFT } },
        { type: "label", labelIndex: 7, style: { width: 138, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 115, textAlign: ALEFT } },
        { type: "dots" },
        { type: "space", style: { width: 26 } },
        { type: "dots" },
        { type: "label", labelIndex: 7, style: { width: 115, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 75, textAlign: ALEFT } },
        { type: "dots" },
        { type: "space", style: { width: 30 } },
        { type: "dots" },
        { type: "space", style: { width: 26 } },
        { type: "dots" },
        { type: "space", style: { width: 30 } },
        { type: "dots" },
        { type: "label", labelIndex: 7, style: { width: 75, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 45, textAlign: ALEFT } },
        { type: "label", labelIndex: 2, style: { width: 70, textAlign: ACENTER } },
        { type: "dots" },
        { type: "space", style: { width: 26 } },
        { type: "dots" },
        { type: "label", labelIndex: 5, style: { width: 70, textAlign: ACENTER } },
        { type: "label", labelIndex: 7, style: { width: 45, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 35, textAlign: ALEFT } },
        { type: "dots" },
        { type: "label", labelIndex: 2, style: { width: 70, textAlign: ACENTER } },
        { type: "dots" },
        { type: "space", style: { width: 26 } },
        { type: "dots" },
        { type: "label", labelIndex: 5, style: { width: 70, textAlign: ACENTER } },
        { type: "dots" },
        { type: "label", labelIndex: 7, style: { width: 35, textAlign: ARIGHT } },
    ],
    [
        { type: "label", labelIndex: 0, style: { width: 20, textAlign: ALEFT } },
        { type: "label", labelIndex: 1, style: defaultHeatmapSmallLegendStyle },
        { type: "label", labelIndex: 2, style: defaultHeatmapSmallLegendStyle },
        { type: "label", labelIndex: 3, style: { width: 38, textAlign: ACENTER } },
        { type: "label", labelIndex: 4, style: { width: 38, textAlign: ACENTER } },
        { type: "label", labelIndex: 5, style: defaultHeatmapSmallLegendStyle },
        { type: "label", labelIndex: 6, style: defaultHeatmapSmallLegendStyle },
        { type: "label", labelIndex: 7, style: { width: 20, textAlign: ARIGHT } },
    ],
];
export function buildColorLabelsConfig(labels, config) {
    return config
        .map(function (element, index) {
        switch (element.type) {
            case "label":
                return {
                    label: labels[element.labelIndex],
                    style: element.style,
                    key: element.type + "-" + index
                };
            case "space":
                return getEmptyBlock(element.style, index);
            case "dots":
                return getSkippedLabelBlock(index);
            default:
                return null;
        }
    })
        .filter(function (value) { return value !== null; });
}
var LABEL_THRESHOLDS = {
    large: [5, 8, 10, 15, 18],
    medium: [4, 7, 9, 13, 15],
    small: [2, 5, 8, 10, 12]
};
function getColorLegendLabelsConfiguration(legendLabels, size, isVertical) {
    var _a, _b, _c, _d;
    var numberOfLabels = legendLabels.length;
    var firstLabelLength = (_b = (_a = head(legendLabels)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
    var lastLabelLength = (_d = (_c = last(legendLabels)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0;
    var maxLabelLength = firstLabelLength > lastLabelLength ? firstLabelLength : lastLabelLength;
    var labelLengths = LABEL_THRESHOLDS[size];
    var shorteningConfig = isVertical
        ? verticalHeatmapConfig
        : getHorizontalShorteningLabelConfig(labelLengths, maxLabelLength, size, numberOfLabels);
    return buildColorLabelsConfig(legendLabels, shorteningConfig);
}
function getHorizontalShorteningLabelConfig(labelLengths, maxLabelLength, size, numberOfLabels) {
    var shorteningLevel = getColorLabelShorteningLevel(labelLengths, maxLabelLength);
    if (size === "small") {
        /**
         * Geo chart color legend has only 7 labels
         */
        if (numberOfLabels == 7) {
            return colorSmallLegendConfigMatrix[shorteningLevel];
        }
        return heatmapSmallLegendConfigMatrix[shorteningLevel];
    }
    if (size === "medium") {
        return heatmapMediumLegendConfigMatrix[shorteningLevel];
    }
    if (numberOfLabels === 8) {
        return heatmapLegendConfigMatrix[shorteningLevel];
    }
    return colorLegendConfigMatrix[shorteningLevel];
}
function getColorLabelShorteningLevel(labelLengths, maxLabelLength) {
    var shorteningLevel;
    if (inRange(maxLabelLength, 0, labelLengths[0])) {
        shorteningLevel = 5;
    }
    else if (inRange(maxLabelLength, labelLengths[0], labelLengths[1])) {
        shorteningLevel = 4;
    }
    else if (inRange(maxLabelLength, labelLengths[1], labelLengths[2])) {
        shorteningLevel = 3;
    }
    else if (inRange(maxLabelLength, labelLengths[2], labelLengths[3])) {
        shorteningLevel = 2;
    }
    else if (inRange(maxLabelLength, labelLengths[3], labelLengths[4])) {
        shorteningLevel = 1;
    }
    else {
        shorteningLevel = 0;
    }
    return shorteningLevel;
}
export function calculateFluidLegend(seriesCount, containerWidth) {
    // -1 because flex dimensions provide rounded number and the real width can be float
    var realWidth = containerWidth - 2 * LEGEND_PADDING - 1;
    if (seriesCount <= 2) {
        return {
            hasPaging: false,
            itemWidth: realWidth / seriesCount,
            visibleItemsCount: seriesCount
        };
    }
    var columnsCount = Math.floor(realWidth / RESPONSIVE_ITEM_MIN_WIDTH);
    var itemWidth = realWidth / columnsCount;
    var hasPaging = false;
    var rowsCount = Math.ceil(seriesCount / columnsCount);
    // Recalculate with paging
    if (rowsCount > RESPONSIVE_VISIBLE_ROWS) {
        var legendWidthWithPaging = realWidth - FLUID_PAGING_WIDTH;
        columnsCount = Math.floor(legendWidthWithPaging / RESPONSIVE_ITEM_MIN_WIDTH);
        itemWidth = legendWidthWithPaging / columnsCount;
        hasPaging = true;
    }
    var visibleItemsCount = columnsCount * RESPONSIVE_VISIBLE_ROWS;
    return {
        itemWidth: itemWidth,
        hasPaging: hasPaging,
        visibleItemsCount: visibleItemsCount
    };
}
function getStaticVisibleItemsCount(containerHeight, columnsNumber, withPaging, paginationHeight) {
    var pagingHeight = withPaging ? paginationHeight : 0;
    var height = containerHeight - pagingHeight;
    return Math.floor(height / ITEM_HEIGHT) * columnsNumber;
}
export function calculateStaticLegend(seriesCount, containerHeight, columnsNumber, paginationHeight) {
    if (columnsNumber === void 0) { columnsNumber = 1; }
    if (paginationHeight === void 0) { paginationHeight = STATIC_PAGING_HEIGHT; }
    if (containerHeight < ITEM_HEIGHT) {
        return {
            hasPaging: false,
            visibleItemsCount: 0
        };
    }
    var visibleItemsCount = getStaticVisibleItemsCount(containerHeight, columnsNumber, false, paginationHeight);
    if (visibleItemsCount >= seriesCount) {
        return {
            hasPaging: false,
            visibleItemsCount: visibleItemsCount
        };
    }
    return {
        hasPaging: true,
        visibleItemsCount: getStaticVisibleItemsCount(containerHeight, columnsNumber, true, paginationHeight)
    };
}
function getColorLegendLabels(series, format, numericSymbols) {
    var _a, _b, _c, _d, _e, _f;
    var min = (_c = (_b = (_a = head(series)) === null || _a === void 0 ? void 0 : _a.range) === null || _b === void 0 ? void 0 : _b.from) !== null && _c !== void 0 ? _c : 0;
    var max = (_f = (_e = (_d = last(series)) === null || _d === void 0 ? void 0 : _d.range) === null || _e === void 0 ? void 0 : _e.to) !== null && _f !== void 0 ? _f : 0;
    var diff = max - min;
    return range(series.length + 1).map(function (index) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var value;
        if (index === 0) {
            value = (_c = (_b = (_a = series[0]) === null || _a === void 0 ? void 0 : _a.range) === null || _b === void 0 ? void 0 : _b.from) !== null && _c !== void 0 ? _c : 0;
        }
        else if (index === series.length) {
            value = (_f = (_e = (_d = series[index - 1]) === null || _d === void 0 ? void 0 : _d.range) === null || _e === void 0 ? void 0 : _e.to) !== null && _f !== void 0 ? _f : 0;
        }
        else {
            value = (_j = (_h = (_g = series[index]) === null || _g === void 0 ? void 0 : _g.range) === null || _h === void 0 ? void 0 : _h.from) !== null && _j !== void 0 ? _j : 0;
        }
        return formatLegendLabel(value, format, diff, numericSymbols);
    });
}
var MIDDLE_LEGEND_BOX_INDEX = 3;
function getColorBoxes(series, theme) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    var backgroundColor = (_e = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.chart) === null || _a === void 0 ? void 0 : _a.backgroundColor) !== null && _b !== void 0 ? _b : (_d = (_c = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _c === void 0 ? void 0 : _c.complementary) === null || _d === void 0 ? void 0 : _d.c0) !== null && _e !== void 0 ? _e : "#fff";
    var borderColor = (_h = (_g = (_f = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _f === void 0 ? void 0 : _f.complementary) === null || _g === void 0 ? void 0 : _g.c4) !== null && _h !== void 0 ? _h : "#ccc";
    var getBoxStyle = function (item) { return ({
        backgroundColor: item.color,
        border: isEqual(parseRGBString(item.color), parseRGBString(backgroundColor))
            ? "1px solid " + borderColor
            : "none"
    }); };
    return series.map(function (item, index) {
        var style = getBoxStyle(item);
        var middle = index === MIDDLE_LEGEND_BOX_INDEX ? "middle" : null;
        return {
            "class": middle,
            key: "item-" + index,
            style: style
        };
    });
}
export function getColorLegendConfiguration(series, format, numericSymbols, size, position, theme) {
    var legendLabels = getColorLegendLabels(series, format, numericSymbols);
    var classes = ["viz-legend", "color-legend", "position-" + position, size];
    var isVertical = position === LEFT || position === RIGHT;
    var finalLabels = getColorLegendLabelsConfiguration(legendLabels, size, isVertical);
    var boxes = getColorBoxes(series, theme);
    return {
        classes: classes,
        labels: finalLabels,
        boxes: boxes,
        position: position
    };
}
export var LEGEND_AXIS_INDICATOR = "legendAxisIndicator";
export var LEGEND_SEPARATOR = "legendSeparator";
/**
 * @internal
 */
export function formatLegendLabel(value, format, diff, numericSymbols) {
    if (format && format.includes("%")) {
        return numberFormat(value, "#,#0%");
    }
    var sign = Math.sign(value) === -1 ? "-" : "";
    var positiveValue = Math.abs(value);
    var formattingString = "";
    if (diff < 10) {
        formattingString += "[<1]0.00;[<10]#.#;[<100]#.#;";
    }
    var k = diff < 10000
        ? "[<999500]0;"
        : "[<1000]0;[<10000]#.#," + numericSymbols[0] + ";[<999500]#," + numericSymbols[0] + ";";
    var m = "[<10000000]#.#,," + numericSymbols[1] + ";[<999500000]#,," + numericSymbols[1] + ";";
    var b = "[<10000000000]#.#,,," + numericSymbols[2] + ";[<999500000000]#,,," + numericSymbols[2] + ";";
    var t = "[<10000000000000]#.#,,," + numericSymbols[3] + ";[>=10000000000000]#,,," + numericSymbols[3];
    formattingString += k + m + b + t;
    return sign + numberFormat(positiveValue, formattingString);
}
/**
 * @internal
 */
export var FLUID_LEGEND_THRESHOLD = 768;
/**
 * @internal
 */
export function shouldShowFluid(documentObj) {
    if (!documentObj) {
        return false;
    }
    return documentObj.documentElement.clientWidth < FLUID_LEGEND_THRESHOLD;
}
//# sourceMappingURL=helpers.js.map
import { __awaiter, __generator, __read } from "tslib";
import React, { useEffect, useState } from "react";
import { useBackend } from "../../react/BackendContext";
import { useWorkspace } from "../../react/WorkspaceContext";
import { TranslationsCustomizationContextProvider } from "./Context";
import { getWorkspaceSettingsLoader } from "./workspaceSettingsLoader";
import { pickCorrectInsightWording } from "./utils";
var defaultTranslationsParam = {};
/**
 * This provider is here because of the need for customization of translations.
 * If you need to change translations based on some setting flag,
 * use this provider at the top of you your react tree.
 *
 * You can see that the provider accepts render function and customize function as parameters.
 * Using these two function you can customize your translations.
 *
 * @beta
 */
export var TranslationsCustomizationProvider = function (_a) {
    var render = _a.render, _b = _a.customize, customize = _b === void 0 ? pickCorrectInsightWording : _b, _c = _a.translations, translationsParam = _c === void 0 ? defaultTranslationsParam : _c, backendParam = _a.backend, workspaceParam = _a.workspace;
    var backend = useBackend(backendParam);
    var workspace = useWorkspace(workspaceParam);
    var _d = __read(useState(function () { return customize(translationsParam); }), 2), translations = _d[0], setTranslations = _d[1];
    var _e = __read(useState(false), 2), isLoading = _e[0], setIsLoading = _e[1];
    useEffect(function () {
        var fetchSettings = function () { return __awaiter(void 0, void 0, void 0, function () {
            var loader, settings;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!backend || !workspace) {
                            return [2 /*return*/];
                        }
                        setIsLoading(true);
                        loader = getWorkspaceSettingsLoader();
                        return [4 /*yield*/, loader.load(backend, workspace)];
                    case 1:
                        settings = _a.sent();
                        /**
                         * Because of issues described in the ticket FET-855, we decided to use this workaround.
                         * After the issues that are described in the ticket are solved or at least reduced,
                         * this workaround can be removed.
                         */
                        window.gdSettings = settings;
                        setTranslations(customize(translationsParam, settings));
                        setIsLoading(false);
                        return [2 /*return*/];
                }
            });
        }); };
        fetchSettings();
    }, [backend, workspace, translationsParam]);
    return (React.createElement(TranslationsCustomizationContextProvider, { translationsCustomizationIsLoading: isLoading, translations: translations }, render(translations)));
};
//# sourceMappingURL=TranslationsCustomizationProvider.js.map
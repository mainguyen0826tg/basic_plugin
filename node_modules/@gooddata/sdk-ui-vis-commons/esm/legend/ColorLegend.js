// (C) 2020 GoodData Corporation
import React from "react";
import cx from "classnames";
import { getColorLegendConfiguration, } from "./helpers";
import { TOP, BOTTOM } from "./PositionTypes";
import { withTheme } from "@gooddata/sdk-ui-theme-provider";
export function ColorLabels(colorLabelProps) {
    var labels = colorLabelProps.labels;
    return (React.createElement("div", { className: "labels" }, labels.map(function (item) {
        var key = item.key, label = item.label, style = item.style;
        return (React.createElement("span", { key: key, style: style }, label));
    })));
}
export function ColorBoxes(colorBoxProps) {
    var boxes = colorBoxProps.boxes;
    return (React.createElement("div", { className: "boxes" }, boxes.map(function (box) {
        var classes = cx("box", box["class"]);
        var key = box.key, style = box.style;
        return React.createElement("span", { className: classes, key: key, style: style });
    })));
}
function LegendBoxes(_a) {
    var renderLabelsFirst = _a.renderLabelsFirst, boxes = _a.boxes, labels = _a.labels;
    return (React.createElement(React.Fragment, null,
        renderLabelsFirst && React.createElement(ColorLabels, { labels: labels }),
        React.createElement(ColorBoxes, { boxes: boxes }),
        !renderLabelsFirst && React.createElement(ColorLabels, { labels: labels })));
}
function LegendWithTitle(props) {
    var title = props.title, position = props.position, children = props.children;
    var isHorizontal = position === TOP || position === BOTTOM;
    var classes = cx("heatmap-legend-with-title", { horizontal: isHorizontal });
    return (React.createElement("div", { className: classes },
        React.createElement("div", { className: "heatmap-legend-title" }, title + ":"),
        React.createElement("div", { className: "heatmap-legend-boxes" }, children)));
}
/**
 * @internal
 */
export var ColorLegend = withTheme(function (colorLegendProps) {
    var title = colorLegendProps.title, data = colorLegendProps.data, format = colorLegendProps.format, numericSymbols = colorLegendProps.numericSymbols, _a = colorLegendProps.size, size = _a === void 0 ? "large" : _a, position = colorLegendProps.position, theme = colorLegendProps.theme;
    if (!data.length) {
        return null;
    }
    var config = getColorLegendConfiguration(data, format, numericSymbols, size, position, theme);
    var classes = cx.apply(void 0, config.classes);
    var renderLabelsFirst = config.position === TOP;
    var boxes = config.boxes, labels = config.labels;
    return (React.createElement("div", { className: classes }, title ? (React.createElement(LegendWithTitle, { title: title, position: position },
        React.createElement(LegendBoxes, { renderLabelsFirst: renderLabelsFirst, boxes: boxes, labels: labels }))) : (React.createElement(LegendBoxes, { renderLabelsFirst: renderLabelsFirst, boxes: boxes, labels: labels }))));
});
//# sourceMappingURL=ColorLegend.js.map
import { __generator } from "tslib";
import { call, select, put } from "redux-saga/effects";
import { objRefToString } from "@gooddata/sdk-model";
import { alertsRemoved } from "../../events/alerts";
import { alertsActions } from "../../store/alerts";
import { selectAlertsMap } from "../../store/alerts/alertsSelectors";
import { validateExistingAlerts } from "./validation/alertsValidation";
function removeAlerts(ctx, alertRefs) {
    var backend = ctx.backend, workspace = ctx.workspace;
    return backend.workspace(workspace).dashboards().deleteWidgetAlerts(alertRefs);
}
export function removeAlertsHandler(ctx, cmd) {
    var alertsMap, alerts, refs, ids;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, select(selectAlertsMap)];
            case 1:
                alertsMap = _a.sent();
                alerts = validateExistingAlerts(alertsMap, cmd, ctx);
                refs = alerts.map(function (alert) { return alert.ref; });
                return [4 /*yield*/, call(removeAlerts, ctx, refs)];
            case 2:
                _a.sent();
                ids = alerts.map(function (alert) { return objRefToString(alert.ref); });
                return [4 /*yield*/, put(alertsActions.removeAlerts(ids))];
            case 3:
                _a.sent();
                return [2 /*return*/, alertsRemoved(ctx, alerts, cmd.correlationId)];
        }
    });
}
//# sourceMappingURL=removeAlertsHandler.js.map
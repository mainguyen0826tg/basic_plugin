import { headerClassFactory } from "./colDefHeaderClass";
import { AVAILABLE_TOTALS } from "../base/constants";
import { getMeasureCellFormattedValue, getMeasureCellStyle } from "../cell/cellUtils";
import cx from "classnames";
import { invariant } from "ts-invariant";
import { isSeriesCol } from "./tableDescriptorTypes";
import { cellClassFactory } from "../cell/cellClass";
import { createCellRenderer } from "../cell/cellRenderer";
export function rowAttributeTemplate(table, props) {
    var cellRenderer = createCellRenderer();
    return {
        cellClass: cellClassFactory(table, props, "gd-row-attribute-column"),
        headerClass: headerClassFactory(table, props, "gd-row-attribute-column-header"),
        colSpan: function (params) {
            if (
            // params.data is undefined when rows are in loading state
            params.data &&
                params.data.colSpan &&
                AVAILABLE_TOTALS.find(function (item) { return item === params.data[params.data.colSpan.headerKey]; })) {
                return params.data.colSpan.count;
            }
            return 1;
        },
        valueFormatter: function (params) {
            return params.value === undefined ? null : params.value;
        },
        cellRenderer: cellRenderer,
    };
}
export function columnAttributeTemplate(table, props) {
    return {
        cellClass: cellClassFactory(table, props, "gd-column-attribute-column"),
        headerClass: headerClassFactory(table, props, "gd-column-attribute-column-header"),
    };
}
var AG_NUMERIC_CELL_CLASSNAME = "ag-numeric-cell";
var AG_NUMERIC_HEADER_CLASSNAME = "ag-numeric-header";
export function measureColumnTemplate(table, props) {
    var _a;
    var cellRenderer = createCellRenderer();
    var separators = (_a = props.config) === null || _a === void 0 ? void 0 : _a.separators;
    return {
        cellClass: cellClassFactory(table, props, cx(AG_NUMERIC_CELL_CLASSNAME, "gd-measure-column")),
        headerClass: headerClassFactory(table, props, cx(AG_NUMERIC_HEADER_CLASSNAME, "gd-measure-column-header")),
        // wrong params type from ag-grid, we need any
        valueFormatter: function (params) {
            var colDesc = table.tableDescriptor.getCol(params.colDef);
            invariant(isSeriesCol(colDesc));
            return params.value !== undefined
                ? getMeasureCellFormattedValue(params.value, colDesc.seriesDescriptor.measureFormat(), separators)
                : null;
        },
        cellStyle: function (params) {
            var colDesc = table.tableDescriptor.getCol(params.colDef);
            invariant(isSeriesCol(colDesc));
            return params.value !== undefined
                ? getMeasureCellStyle(params.value, colDesc.seriesDescriptor.measureFormat(), separators, true)
                : null;
        },
        cellRenderer: cellRenderer,
    };
}
//# sourceMappingURL=colDefTemplates.js.map
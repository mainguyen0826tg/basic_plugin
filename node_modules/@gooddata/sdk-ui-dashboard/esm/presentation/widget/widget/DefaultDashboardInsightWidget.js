// (C) 2020 GoodData Corporation
import React, { useMemo } from "react";
import cx from "classnames";
import { injectIntl } from "react-intl";
import { insightVisualizationUrl } from "@gooddata/sdk-model";
import { widgetTitle } from "@gooddata/sdk-backend-spi";
import { useDashboardSelector, selectInsightsMap } from "../../../model";
import { DashboardItem, DashboardItemHeadline, DashboardItemVisualization, getVisTypeCssClass, } from "../../presentationComponents";
import { DashboardInsight } from "../insight/DashboardInsight";
import { useInsightExport } from "../common/useInsightExport";
import { useDashboardComponentsContext } from "../../dashboardContexts";
import { useInsightMenu } from "./useInsightMenu";
/**
 * @internal
 */
var DefaultDashboardInsightWidgetCore = function (_a) {
    var widget = _a.widget, screen = _a.screen, onError = _a.onError, onExportReady = _a.onExportReady, onLoadingChanged = _a.onLoadingChanged, intl = _a.intl;
    var insights = useDashboardSelector(selectInsightsMap);
    var insight = insights.get(widget.insight);
    var visType = insightVisualizationUrl(insight).split(":")[1];
    var _b = useInsightExport({
        widgetRef: widget.ref,
        title: widgetTitle(widget) || intl.formatMessage({ id: "export.defaultTitle" }),
        insight: insight,
    }), exportCSVEnabled = _b.exportCSVEnabled, exportXLSXEnabled = _b.exportXLSXEnabled, onExportCSV = _b.onExportCSV, onExportXLSX = _b.onExportXLSX;
    var _c = useInsightMenu({
        insight: insight,
        widget: widget,
        exportCSVEnabled: exportCSVEnabled,
        exportXLSXEnabled: exportXLSXEnabled,
        onExportCSV: onExportCSV,
        onExportXLSX: onExportXLSX,
    }), closeMenu = _c.closeMenu, isMenuOpen = _c.isMenuOpen, menuItems = _c.menuItems, openMenu = _c.openMenu;
    var _d = useDashboardComponentsContext(), InsightMenuButtonComponentProvider = _d.InsightMenuButtonComponentProvider, InsightMenuComponentProvider = _d.InsightMenuComponentProvider;
    var InsightMenuButtonComponent = useMemo(function () { return InsightMenuButtonComponentProvider(insight, widget); }, [InsightMenuButtonComponentProvider, insight, widget]);
    var InsightMenuComponent = useMemo(function () { return InsightMenuComponentProvider(insight, widget); }, [InsightMenuComponentProvider, insight, widget]);
    return (React.createElement(DashboardItem, { className: cx("type-visualization", "gd-dashboard-view-widget", getVisTypeCssClass(widget.type, visType)), screen: screen },
        React.createElement(DashboardItemVisualization, { renderHeadline: function (clientHeight) { return (React.createElement(DashboardItemHeadline, { title: widget.title, clientHeight: clientHeight })); }, renderBeforeVisualization: function () { return (React.createElement(InsightMenuButtonComponent, { insight: insight, widget: widget, isOpen: isMenuOpen, onClick: openMenu, items: menuItems })); }, renderAfterContent: function () {
                if (!isMenuOpen) {
                    return null;
                }
                return (React.createElement(InsightMenuComponent, { insight: insight, widget: widget, isOpen: isMenuOpen, onClose: closeMenu, items: menuItems }));
            } }, function (_a) {
            var clientHeight = _a.clientHeight, clientWidth = _a.clientWidth;
            return (React.createElement(DashboardInsight, { clientHeight: clientHeight, clientWidth: clientWidth, insight: insight, widget: widget, onExportReady: onExportReady, onLoadingChanged: onLoadingChanged, onError: onError }));
        })));
};
export var DefaultDashboardInsightWidget = injectIntl(DefaultDashboardInsightWidgetCore);
//# sourceMappingURL=DefaultDashboardInsightWidget.js.map
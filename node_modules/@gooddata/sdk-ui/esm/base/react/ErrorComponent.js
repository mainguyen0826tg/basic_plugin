import { __assign, __extends } from "tslib";
// (C) 2007-2018 GoodData Corporation
import React from "react";
/**
 * With custom size layouting enable it needs to be aware of the widget size to update
 * its content accordingly.
 */
var SMALL_CLIENT_HEIGHT = 140;
var MEDIUM_CLIENT_HEIGHT = 160;
var NORMAL_CLIENT_HEIGHT = 180;
var LARGE_CLIENT_HEIGHT = 200;
var LARGEST_CLIENT_HEIGHT = 220;
var SMALL_CUSTOM_HEIGHT = 44;
var NORMAL_CUSTOM_HEIGHT = 64;
var getCustomHeight = function (clientHeight) {
    if (clientHeight) {
        if (clientHeight <= SMALL_CLIENT_HEIGHT) {
            return SMALL_CUSTOM_HEIGHT;
        }
        else if (clientHeight < NORMAL_CLIENT_HEIGHT) {
            return NORMAL_CUSTOM_HEIGHT;
        }
        else {
            return undefined;
        }
    }
    return undefined;
};
/**
 * {@link http://sdk.gooddata.com/gooddata-ui/docs/error_component.html | ErrorComponent}
 * is a component that renders a default error message.
 *
 * @public
 */
var ErrorComponent = /** @class */ (function (_super) {
    __extends(ErrorComponent, _super);
    function ErrorComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ErrorComponent.prototype.render = function () {
        var _a = this.props, className = _a.className, style = _a.style, width = _a.width, height = _a.height, message = _a.message, description = _a.description, icon = _a.icon, clientHeight = _a.clientHeight;
        var customHeight = getCustomHeight(clientHeight);
        var wrapperStyle = __assign(__assign({}, style), { width: width,
            height: height });
        return (React.createElement("div", { className: className, style: wrapperStyle },
            React.createElement("div", { className: "info-label", style: {
                    fontSize: "14px",
                    fontWeight: 400,
                    lineHeight: "normal",
                    color: "var(--gd-palette-complementary-6, #94a1ad)",
                    textAlign: "center",
                    height: customHeight,
                    width: "100%",
                    overflow: "hidden",
                } },
                icon ? (React.createElement("div", { className: "info-label-icon " + icon, style: clientHeight && clientHeight < LARGEST_CLIENT_HEIGHT
                        ? undefined
                        : { fontSize: "40px" } })) : null,
                React.createElement("div", { style: {
                        fontWeight: 400,
                        fontSize: clientHeight && clientHeight < MEDIUM_CLIENT_HEIGHT ? undefined : "20px",
                        textTransform: "uppercase",
                    } }, message),
                React.createElement("div", { style: {
                        margin: "3px 0",
                        textOverflow: "ellipsis",
                        overflow: "hidden",
                        whiteSpace: clientHeight && clientHeight < LARGE_CLIENT_HEIGHT ? "nowrap" : undefined,
                    } }, description))));
    };
    ErrorComponent.defaultProps = {
        icon: "gd-icon-warning",
        className: "Error s-error",
        width: undefined,
        height: "100%",
        style: {
            display: "flex",
            flex: "1 0 auto",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            whiteSpace: "normal",
            lineHeight: "normal",
            fontFamily: "gdcustomfont, avenir, Helvetica Neue, arial, sans-serif",
        },
    };
    return ErrorComponent;
}(React.Component));
export { ErrorComponent };
//# sourceMappingURL=ErrorComponent.js.map
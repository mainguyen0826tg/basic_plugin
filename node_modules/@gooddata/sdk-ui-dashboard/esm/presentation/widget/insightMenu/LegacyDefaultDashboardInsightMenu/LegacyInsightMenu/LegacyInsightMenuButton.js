// (C) 2019-2021 GoodData Corporation
import React, { useCallback } from "react";
import { insightVisualizationUrl, objRefToString } from "@gooddata/sdk-model";
import { stringUtils } from "@gooddata/util";
import cx from "classnames";
import { injectIntl } from "react-intl";
import { Bubble, BubbleHoverTrigger } from "@gooddata/sdk-ui-kit";
import { widgetRef } from "@gooddata/sdk-backend-spi";
import { selectPermissions, selectSettings, useDashboardSelector } from "../../../../../model";
var nonExportableVisTypes = ["headline", "xirr"];
function isExportableVisualization(visType) {
    return !nonExportableVisTypes.includes(visType);
}
var bubbleAlignPoints = [{ align: "tc bc" }, { align: "tc br" }];
var LegacyInsightMenuButtonCore = function (_a) {
    var onClick = _a.onClick, widget = _a.widget, insight = _a.insight, intl = _a.intl, isOpen = _a.isOpen;
    var onOptionsMenuClick = useCallback(function (e) {
        e.stopPropagation();
        onClick();
    }, [onClick]);
    var settings = useDashboardSelector(selectSettings);
    var permissions = useDashboardSelector(selectPermissions);
    var areExportsEnabled = settings.enableKPIDashboardExport;
    var hasExportReportPermissions = permissions.canExportReport;
    var visType = insightVisualizationUrl(insight).split(":")[1];
    var isExportableVisType = isExportableVisualization(visType);
    var canExportWidget = areExportsEnabled && hasExportReportPermissions && isExportableVisType;
    if (!canExportWidget) {
        return null;
    }
    var widgetRefValue = widgetRef(widget);
    var objRefAsString = widgetRefValue ? objRefToString(widgetRefValue) : "";
    var optionsIconClasses = cx("dash-item-action-options", "s-dash-item-action-options", "dash-item-action-options-" + stringUtils.simplifyText(objRefAsString), "s-dash-item-action-options-" + stringUtils.simplifyText(objRefAsString), "gd-icon-download", {
        "dash-item-action-options-active": isOpen,
    });
    return (React.createElement("div", { className: "dash-item-action-placeholder s-dash-item-action-placeholder", onClick: onOptionsMenuClick },
        React.createElement(BubbleHoverTrigger, { className: optionsIconClasses, showDelay: 500, hideDelay: 0, tagName: "div" },
            React.createElement(Bubble, { className: "bubble-primary", alignPoints: bubbleAlignPoints },
                React.createElement("span", null, intl.formatMessage({ id: "options.button.bubble" }))))));
};
export var LegacyInsightMenuButton = injectIntl(LegacyInsightMenuButtonCore);
//# sourceMappingURL=LegacyInsightMenuButton.js.map
import { __assign } from "tslib";
// (C) 2020-2021 GoodData Corporation
import { parseValue, unwrap } from "../_util/common";
import { MAX_POINT_WIDTH } from "../_chartCreators/commonConfiguration";
import { bucketIsEmpty } from "@gooddata/sdk-model";
import { BucketNames } from "@gooddata/sdk-ui";
import isEmpty from "lodash/isEmpty";
var SUPPORTED_MEASURE_BUCKETS = [
    BucketNames.MEASURES,
    BucketNames.SECONDARY_MEASURES,
    BucketNames.TERTIARY_MEASURES,
];
var PRIMARY_VS_COMPARATIVE_MEASURE_HEIGHT_RATIO = 0.75;
var isComparativeMeasurePresent = function (bucketLocalIdentifiers) {
    return bucketLocalIdentifiers.includes(BucketNames.TERTIARY_MEASURES);
};
var isTargetMeasurePresent = function (bucketLocalIdentifiers) {
    return bucketLocalIdentifiers.includes(BucketNames.SECONDARY_MEASURES);
};
var getValue = function (value, isTarget) {
    return isTarget
        ? {
            target: value === null ? 0 : value,
            y: 0,
        }
        : {
            y: value,
        };
};
var getSeriesItemData = function (seriesItem, measureGroup, seriesIndex, measureBucketsLocalIdentifiers) {
    return seriesItem.map(function (pointValue) {
        var value = parseValue(pointValue);
        var isTarget = isTargetSeries(seriesIndex, measureBucketsLocalIdentifiers);
        var nullValueProps = isTarget && value === null ? { isNullTarget: true, className: "hidden-empty-series" } : {};
        return __assign(__assign(__assign({}, nullValueProps), getValue(value, isTarget)), { format: unwrap(measureGroup.items[seriesIndex]).format, marker: {
                enabled: pointValue !== null,
            }, name: unwrap(measureGroup.items[seriesIndex]).name });
    });
};
var getPrimarySeriesMaxPointWidth = function (onlyPrimaryMeasure) {
    if (!onlyPrimaryMeasure) {
        return MAX_POINT_WIDTH * PRIMARY_VS_COMPARATIVE_MEASURE_HEIGHT_RATIO;
    }
    return MAX_POINT_WIDTH;
};
var getPrimarySeries = function (seriesItemConfig, onlyPrimaryMeasure) { return (__assign(__assign({}, seriesItemConfig), { pointPadding: onlyPrimaryMeasure ? 0.1 : 0.2, maxPointWidth: getPrimarySeriesMaxPointWidth(onlyPrimaryMeasure), zIndex: 1, bulletChartMeasureType: "primary" })); };
var getTargetSeries = function (seriesItemConfig) { return (__assign(__assign({}, seriesItemConfig), { type: "bullet", pointPadding: 0, targetOptions: {
        width: "100%",
    }, zIndex: 2, bulletChartMeasureType: "target" })); };
var getComparativeSeries = function (seriesItemConfig) { return (__assign(__assign({}, seriesItemConfig), { pointPadding: 0, zIndex: 0, bulletChartMeasureType: "comparative" })); };
export var isPrimarySeries = function (seriesIndex, bucketsLocalIdentifiers) {
    return seriesIndex === bucketsLocalIdentifiers.indexOf(BucketNames.MEASURES);
};
export var isTargetSeries = function (seriesIndex, bucketsLocalIdentifiers) {
    return seriesIndex === bucketsLocalIdentifiers.indexOf(BucketNames.SECONDARY_MEASURES);
};
export var isComparativeSeries = function (seriesIndex, bucketsLocalIdentifiers) {
    return seriesIndex === bucketsLocalIdentifiers.indexOf(BucketNames.TERTIARY_MEASURES);
};
var getSeries = function (seriesIndex, seriesItemConfig, measureBucketsLocalIdentifiers) {
    if (isTargetSeries(seriesIndex, measureBucketsLocalIdentifiers)) {
        return getTargetSeries(seriesItemConfig);
    }
    else if (isComparativeSeries(seriesIndex, measureBucketsLocalIdentifiers)) {
        return getComparativeSeries(seriesItemConfig);
    }
    var onlyPrimaryMeasure = !isComparativeMeasurePresent(measureBucketsLocalIdentifiers) &&
        !isTargetMeasurePresent(measureBucketsLocalIdentifiers);
    return getPrimarySeries(seriesItemConfig, onlyPrimaryMeasure);
};
export function getBulletChartSeries(dv, measureGroup, colorStrategy) {
    var occupiedMeasureBucketsLocalIdentifiers = getOccupiedMeasureBucketsLocalIdentifiers(dv);
    var executionResultData = dv.rawData().twoDimData();
    return executionResultData.map(function (seriesItem, seriesIndex) {
        var seriesItemData = getSeriesItemData(seriesItem, measureGroup, seriesIndex, occupiedMeasureBucketsLocalIdentifiers);
        var seriesItemConfig = {
            legendIndex: seriesIndex,
            data: seriesItemData,
            name: measureGroup.items[seriesIndex].measureHeaderItem.name,
            color: colorStrategy.getColorByIndex(seriesIndex),
            seriesIndex: seriesIndex,
        };
        return getSeries(seriesIndex, seriesItemConfig, occupiedMeasureBucketsLocalIdentifiers);
    });
}
export function getOccupiedMeasureBucketsLocalIdentifiers(dv) {
    var buckets = dv.def().buckets();
    var executionResultData = dv.rawData().twoDimData();
    var availableMeasureBucketsLocalIdentifiers = SUPPORTED_MEASURE_BUCKETS;
    var notEmptyMeasureBucketsLocalIdentifiers = buckets
        .filter(function (b) {
        return !bucketIsEmpty(b) && availableMeasureBucketsLocalIdentifiers.indexOf(b.localIdentifier) >= 0;
    })
        .map(function (b) { return b.localIdentifier; });
    return !isEmpty(notEmptyMeasureBucketsLocalIdentifiers)
        ? notEmptyMeasureBucketsLocalIdentifiers
        : availableMeasureBucketsLocalIdentifiers.slice(0, executionResultData.length);
}
//# sourceMappingURL=bulletChartSeries.js.map
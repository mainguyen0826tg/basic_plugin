// (C) 2021 GoodData Corporation
/**
 * Creates a new string-based comparator.
 *
 * @internal
 */
export var stringComparatorFactory = function (valueAccessor) {
    return function (direction) {
        return function (a, b) {
            var aValue = valueAccessor(a);
            var bValue = valueAccessor(b);
            if (aValue === bValue) {
                return 0;
            }
            // undefined must be sorted at the "high" end of the collection
            if (aValue === undefined) {
                return direction === "asc" ? 1 : -1;
            }
            if (bValue === undefined) {
                return direction === "asc" ? -1 : 1;
            }
            var result = aValue === null || aValue === void 0 ? void 0 : aValue.localeCompare(bValue);
            return direction === "asc" ? result : -result;
        };
    };
};
/**
 * Creates a new date-string-based comparator.
 *
 * @internal
 */
export var dateStringComparatorFactory = function (valueAccessor) {
    return function (direction) {
        return function (a, b) {
            var aRawValue = valueAccessor(a);
            var bRawValue = valueAccessor(b);
            var aValue = aRawValue ? +new Date(aRawValue) : undefined;
            var bValue = bRawValue ? +new Date(bRawValue) : undefined;
            if (aValue === bValue) {
                return 0;
            }
            // undefined must be sorted at the "high" end of the collection
            if (aValue === undefined) {
                return direction === "asc" ? 1 : -1;
            }
            if (bValue === undefined) {
                return direction === "asc" ? -1 : 1;
            }
            var result = aValue - bValue;
            return direction === "asc" ? result : -result;
        };
    };
};
//# sourceMappingURL=comparators.js.map
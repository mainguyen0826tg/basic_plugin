import { __assign } from "tslib";
// (C) 2007-2021 GoodData Corporation
import { isAttributeDescriptor, isMeasureDescriptor, isResultAttributeHeader, isTotalDescriptor, } from "@gooddata/sdk-backend-spi";
import CustomEventPolyfill from "custom-event";
import findIndex from "lodash/findIndex";
import { identifierMatch, uriMatch } from "../headerMatching/HeaderPredicateFactory";
import { isDrillableItemIdentifier, isDrillableItemUri, isDrillIntersectionAttributeItem, } from "./DrillEvents";
/**
 * @internal
 */
export function isSomeHeaderPredicateMatched(drillablePredicates, header, dv) {
    return drillablePredicates.some(function (drillablePredicate) {
        return drillablePredicate(header, { dv: dv });
    });
}
/**
 * @internal
 */
export function convertDrillableItemsToPredicates(drillableItems) {
    return drillableItems.map(function (drillableItem) {
        if (isDrillableItemUri(drillableItem)) {
            return uriMatch(drillableItem.uri);
        }
        else if (isDrillableItemIdentifier(drillableItem)) {
            return identifierMatch(drillableItem.identifier);
        }
        else {
            return drillableItem;
        }
    });
}
/**
 * @internal
 */
export function getIntersectionPartAfter(intersection, localIdentifier) {
    var index = findIndex(intersection, function (item) {
        return isDrillIntersectionAttributeItem(item.header) &&
            item.header.attributeHeader.localIdentifier === localIdentifier;
    });
    return intersection.slice(index);
}
/**
 * @internal
 */
export function getDrillIntersection(drillItems) {
    return drillItems.reduce(function (drillIntersection, drillItem, index, drillItems) {
        if (isAttributeDescriptor(drillItem)) {
            var attributeItem = drillItems[index - 1]; // attribute item is always before attribute
            if (attributeItem && isResultAttributeHeader(attributeItem)) {
                drillIntersection.push({
                    header: __assign(__assign({}, attributeItem), drillItem),
                });
            }
            else {
                // no attr. item before attribute -> use only attribute header
                drillIntersection.push({
                    header: drillItem,
                });
            }
        }
        else if (isMeasureDescriptor(drillItem) || isTotalDescriptor(drillItem)) {
            drillIntersection.push({
                header: drillItem,
            });
        }
        return drillIntersection;
    }, []);
}
/**
 * Fire a new drill event built from the provided data to the target that have a 'dispatchEvent' method.
 *
 * @param drillEventFunction - custom drill event function which could process and prevent default post message event.
 * @param drillEventData - The event data in `{ executionContext, drillContext }` format.
 * @param target - The target where the built event must be dispatched.
 * @internal
 */
export function fireDrillEvent(drillEventFunction, drillEventData, target) {
    var shouldDispatchPostMessage = drillEventFunction && drillEventFunction(drillEventData);
    if (shouldDispatchPostMessage !== false) {
        target.dispatchEvent(new CustomEventPolyfill("drill", {
            detail: drillEventData,
            bubbles: true,
        }));
    }
}
//# sourceMappingURL=drilling.js.map
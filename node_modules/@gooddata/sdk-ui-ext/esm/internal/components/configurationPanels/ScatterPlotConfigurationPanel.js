import { __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { FormattedMessage } from "react-intl";
import { Bubble, BubbleHoverTrigger } from "@gooddata/sdk-ui-kit";
import cx from "classnames";
import ConfigurationPanelContent from "./ConfigurationPanelContent";
import LabelSubsection from "../configurationControls/axis/LabelSubsection";
import MinMaxControl from "../configurationControls//MinMaxControl";
import ConfigSection from "../configurationControls/ConfigSection";
import DataLabelsControl from "../configurationControls/DataLabelsControl";
import CheckboxControl from "../configurationControls/CheckboxControl";
import { getMeasuresFromMdObject } from "../../utils/bucketHelper";
import { BUBBLE_ARROW_OFFSET_X, BUBBLE_ARROW_OFFSET_Y, HIDE_DELAY_DEFAULT, SHOW_DELAY_DEFAULT, } from "../../constants/bubble";
import { insightHasAttributes } from "@gooddata/sdk-model";
import NameSubsection from "../configurationControls/axis/NameSubsection";
import { countItemsOnAxes } from "../pluggableVisualizations/baseChart/insightIntrospection";
var ScatterPlotConfigurationPanel = /** @class */ (function (_super) {
    __extends(ScatterPlotConfigurationPanel, _super);
    function ScatterPlotConfigurationPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScatterPlotConfigurationPanel.prototype.isControlDisabled = function () {
        var _a = this.props, insight = _a.insight, isError = _a.isError, isLoading = _a.isLoading;
        var measures = getMeasuresFromMdObject(insight);
        return !measures || measures.length < 1 || isError || isLoading;
    };
    ScatterPlotConfigurationPanel.prototype.renderConfigurationPanel = function () {
        var _a = this.getControlProperties(), xAxisVisible = _a.xAxisVisible, gridEnabled = _a.gridEnabled, yAxisVisible = _a.yAxisVisible;
        var _b = this.props, featureFlags = _b.featureFlags, propertiesMeta = _b.propertiesMeta, properties = _b.properties, pushData = _b.pushData, insight = _b.insight, type = _b.type;
        var controls = properties && properties.controls;
        var controlsDisabled = this.isControlDisabled();
        var _c = countItemsOnAxes(type, controls, insight), itemsOnXAxis = _c.xaxis, itemsOnYAxis = _c.yaxis;
        var xAxisNameSectionDisabled = controlsDisabled || itemsOnXAxis !== 1;
        var yAxisNameSectionDisabled = controlsDisabled || itemsOnYAxis !== 1;
        var isNameSubsectionVisible = featureFlags.enableAxisNameConfiguration;
        var isAxisLabelsFormatEnabled = featureFlags.enableAxisLabelFormat;
        return (React.createElement(BubbleHoverTrigger, { showDelay: SHOW_DELAY_DEFAULT, hideDelay: HIDE_DELAY_DEFAULT },
            React.createElement("div", null,
                this.renderColorSection(),
                React.createElement(ConfigSection, { id: "xaxis_section", title: "properties.xaxis.title", valuePath: "xaxis.visible", canBeToggled: true, toggledOn: xAxisVisible, toggleDisabled: controlsDisabled, propertiesMeta: propertiesMeta, properties: properties, pushData: pushData },
                    isNameSubsectionVisible && (React.createElement(NameSubsection, { disabled: xAxisNameSectionDisabled, configPanelDisabled: controlsDisabled, axis: "xaxis", properties: properties, pushData: pushData })),
                    React.createElement(LabelSubsection, { disabled: controlsDisabled, configPanelDisabled: controlsDisabled, axis: "xaxis", properties: properties, pushData: pushData, showFormat: isAxisLabelsFormatEnabled }),
                    this.renderMinMax("xaxis")),
                React.createElement(ConfigSection, { id: "yaxis_section", title: "properties.yaxis.title", valuePath: "yaxis.visible", canBeToggled: true, toggledOn: yAxisVisible, toggleDisabled: controlsDisabled, propertiesMeta: propertiesMeta, properties: properties, pushData: pushData },
                    isNameSubsectionVisible && (React.createElement(NameSubsection, { disabled: yAxisNameSectionDisabled, configPanelDisabled: controlsDisabled, axis: "yaxis", properties: properties, pushData: pushData })),
                    React.createElement(LabelSubsection, { disabled: controlsDisabled, configPanelDisabled: controlsDisabled, axis: "yaxis", properties: properties, pushData: pushData, showFormat: isAxisLabelsFormatEnabled }),
                    this.renderMinMax("yaxis")),
                React.createElement(ConfigSection, { id: "canvas_section", title: "properties.canvas.title", propertiesMeta: propertiesMeta, properties: properties, pushData: pushData },
                    React.createElement(DataLabelsControl, { pushData: pushData, properties: properties, isDisabled: this.areDataLabelsDisabled(), defaultValue: false, showDisabledMessage: this.isDataLabelsWarningShown() }),
                    React.createElement(CheckboxControl, { valuePath: "grid.enabled", labelText: "properties.canvas.gridline", properties: properties, checked: gridEnabled, disabled: controlsDisabled, pushData: pushData }))),
            React.createElement(Bubble, { className: this.getBubbleClassNames(), arrowOffsets: { "tc bc": [BUBBLE_ARROW_OFFSET_X, BUBBLE_ARROW_OFFSET_Y] }, alignPoints: [{ align: "tc bc" }] },
                React.createElement(FormattedMessage, { id: "properties.config.not_applicable" }))));
    };
    ScatterPlotConfigurationPanel.prototype.renderMinMax = function (basePath) {
        var _a = this.props, pushData = _a.pushData, properties = _a.properties, propertiesMeta = _a.propertiesMeta;
        return (React.createElement(MinMaxControl, { isDisabled: this.isControlDisabled(), basePath: basePath, pushData: pushData, properties: properties, propertiesMeta: propertiesMeta }));
    };
    ScatterPlotConfigurationPanel.prototype.areDataLabelsDisabled = function () {
        var isDisabled = _super.prototype.isControlDisabled.call(this);
        return isDisabled || !insightHasAttributes(this.props.insight);
    };
    ScatterPlotConfigurationPanel.prototype.isDataLabelsWarningShown = function () {
        var isDisabled = _super.prototype.isControlDisabled.call(this);
        return !isDisabled && !insightHasAttributes(this.props.insight);
    };
    ScatterPlotConfigurationPanel.prototype.getBubbleClassNames = function () {
        return cx("bubble-primary", {
            invisible: !this.isControlDisabled(),
        });
    };
    ScatterPlotConfigurationPanel.prototype.getControlProperties = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var propertiesControls = (_a = this.props.properties) === null || _a === void 0 ? void 0 : _a.controls;
        var xAxisVisible = (_c = (_b = propertiesControls === null || propertiesControls === void 0 ? void 0 : propertiesControls.xaxis) === null || _b === void 0 ? void 0 : _b.visible) !== null && _c !== void 0 ? _c : true;
        var yAxisVisible = (_e = (_d = propertiesControls === null || propertiesControls === void 0 ? void 0 : propertiesControls.yaxis) === null || _d === void 0 ? void 0 : _d.visible) !== null && _e !== void 0 ? _e : true;
        var gridEnabled = (_g = (_f = propertiesControls === null || propertiesControls === void 0 ? void 0 : propertiesControls.grid) === null || _f === void 0 ? void 0 : _f.enabled) !== null && _g !== void 0 ? _g : true;
        return {
            xAxisVisible: xAxisVisible,
            yAxisVisible: yAxisVisible,
            gridEnabled: gridEnabled,
        };
    };
    return ScatterPlotConfigurationPanel;
}(ConfigurationPanelContent));
export default ScatterPlotConfigurationPanel;
//# sourceMappingURL=ScatterPlotConfigurationPanel.js.map
import { useBackend, useCancelablePromise, useWorkspace, } from "@gooddata/sdk-ui";
import { dashboardFilterToFilterContextItem } from "../../../internal";
import { backendInvariant, workspaceInvariant } from "../utils";
/**
 * Hook allowing to export a dashboard to a PDF
 * @param config - configuration of the hook
 * @internal
 */
export function useExportDashboardToPdf(_a) {
    var dashboard = _a.dashboard, filters = _a.filters, backend = _a.backend, workspace = _a.workspace, onCancel = _a.onCancel, onError = _a.onError, onLoading = _a.onLoading, onPending = _a.onPending, onSuccess = _a.onSuccess;
    var effectiveBackend = useBackend(backend);
    var effectiveWorkspace = useWorkspace(workspace);
    backendInvariant(effectiveBackend, "useExportDashboardToPdf");
    workspaceInvariant(effectiveWorkspace, "useExportDashboardToPdf");
    var promise = dashboard
        ? function () {
            var _a;
            return effectiveBackend
                .workspace(effectiveWorkspace)
                .dashboards()
                .exportDashboardToPdf(dashboard, (_a = filters === null || filters === void 0 ? void 0 : filters.map(dashboardFilterToFilterContextItem)) !== null && _a !== void 0 ? _a : undefined);
        }
        : null;
    return useCancelablePromise({ promise: promise, onCancel: onCancel, onError: onError, onLoading: onLoading, onPending: onPending, onSuccess: onSuccess }, [
        effectiveBackend,
        effectiveWorkspace,
        dashboard,
        filters,
    ]);
}
//# sourceMappingURL=useExportDashboardToPdf.js.map
var _a;
// (C) 2007-2021 GoodData Corporation
import set from "lodash/set";
import cloneDeep from "lodash/cloneDeep";
import { isMeasure, measureLocalId } from "@gooddata/sdk-model";
import { BucketNames, VisualizationTypes } from "@gooddata/sdk-ui";
import { isLineChart } from "../_util/common";
export var CHART_ORDER = (_a = {},
    _a[VisualizationTypes.AREA] = 1,
    _a[VisualizationTypes.COLUMN] = 2,
    _a[VisualizationTypes.LINE] = 3,
    _a);
/**
 * @internal
 */
export var COMBO_SUPPORTED_CHARTS = [
    VisualizationTypes.COLUMN,
    VisualizationTypes.LINE,
    VisualizationTypes.AREA,
];
var DEFAULT_COMBO_CHART_TYPES = [VisualizationTypes.COLUMN, VisualizationTypes.LINE];
function getMeasureIndices(bucketItems, measureGroupIdentifiers) {
    return bucketItems.reduce(function (result, item) {
        var localIdentifier = isMeasure(item) ? measureLocalId(item) : "";
        if (localIdentifier) {
            var metricIndex = measureGroupIdentifiers.indexOf(localIdentifier);
            result.push(metricIndex);
        }
        return result;
    }, []);
}
export function getComboChartSeries(config, measureGroup, series, dv) {
    var updatedSeries = cloneDeep(series);
    var measureBuckets = {};
    var types = [config.primaryChartType, config.secondaryChartType];
    var measureGroupIdentifiers = measureGroup.items.map(function (item) { var _a, _b; return (_b = (_a = item === null || item === void 0 ? void 0 : item.measureHeaderItem) === null || _a === void 0 ? void 0 : _a.localIdentifier) !== null && _b !== void 0 ? _b : ""; });
    dv.def()
        .buckets()
        .forEach(function (bucket) {
        var bucketItems = bucket.items || [];
        measureBuckets[bucket.localIdentifier] = getMeasureIndices(bucketItems, measureGroupIdentifiers);
    });
    [BucketNames.MEASURES, BucketNames.SECONDARY_MEASURES].forEach(function (name, index) {
        (measureBuckets[name] || []).forEach(function (measureIndex) {
            var chartType = CHART_ORDER[types[index]]
                ? types[index]
                : DEFAULT_COMBO_CHART_TYPES[index];
            set(updatedSeries, [measureIndex, "type"], chartType);
            set(updatedSeries, [measureIndex, "zIndex"], CHART_ORDER[chartType]);
        });
    });
    return updatedSeries;
}
function isAllSeriesOnLeftAxis(series) {
    if (series === void 0) { series = []; }
    return series.every(function (item) { return item.yAxis === 0; });
}
function isSomeSeriesWithLineChart(series) {
    if (series === void 0) { series = []; }
    return series.some(function (item) { return isLineChart(item.type); });
}
export function canComboChartBeStackedInPercent(series) {
    var isAllSeriesOnLeft = isAllSeriesOnLeftAxis(series);
    var hasLineChartType = isSomeSeriesWithLineChart(series);
    return !(isAllSeriesOnLeft && hasLineChartType);
}
export function getComboChartStackingConfig(config, series, defaultStacking) {
    var stackMeasures = config.stackMeasures;
    var canStackInPercent = canComboChartBeStackedInPercent(series);
    if (canStackInPercent) {
        return defaultStacking;
    }
    return stackMeasures ? "normal" : null;
}
//# sourceMappingURL=comboChartOptions.js.map
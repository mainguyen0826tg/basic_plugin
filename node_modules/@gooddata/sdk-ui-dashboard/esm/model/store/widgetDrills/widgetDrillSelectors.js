import { __read, __spread } from "tslib";
// (C) 2020-2021 GoodData Corporation
import { createSelector } from "@reduxjs/toolkit";
import compact from "lodash/compact";
import { isDrillFromAttribute, isDrillFromMeasure, UnexpectedError, } from "@gooddata/sdk-backend-spi";
import { isLocalIdRef, isIdentifierRef, isUriRef, areObjRefsEqual, localIdRef, } from "@gooddata/sdk-model";
import { HeaderPredicates, } from "@gooddata/sdk-ui";
import { createMemoizedSelector } from "../_infra/selectors";
import { selectWidgetDrills } from "../layout/layoutSelectors";
import { selectDrillTargetsByWidgetRef } from "../drillTargets/drillTargetsSelectors";
import { selectAttributesWithDisplayFormLink, selectAttributesWithDrillDown, } from "../catalog/catalogSelectors";
import { selectDrillableItems } from "../drill/drillSelectors";
import { selectDisableDefaultDrills, selectEnableClickableAttributeURL, selectEnableKPIDashboardDrillToURL, selectEnableKPIDashboardDrillToInsight, selectEnableKPIDashboardDrillToDashboard, selectEnableKPIDashboardImplicitDrillDown, selectHideKpiDrillInEmbedded, selectIsEmbedded, } from "../config/configSelectors";
import flatMap from "lodash/flatMap";
import { selectAllCatalogDisplayFormsMap } from "../catalog/catalogSelectors";
import { selectListedDashboardsMap } from "../listedDashboards/listedDashboardsSelectors";
import { selectInsightsMap } from "../insights/insightsSelectors";
function drillDefinitionToPredicates(drill) {
    var origin;
    if (isDrillFromMeasure(drill.origin)) {
        origin = drill.origin.measure;
    }
    else if (isDrillFromAttribute(drill.origin)) {
        origin = drill.origin.attribute;
    }
    else {
        throw new UnexpectedError("Unknown drill origin!");
    }
    // add drillable items for all three types of objRefs that the origin measure can be
    return compact([
        isLocalIdRef(origin) && HeaderPredicates.localIdentifierMatch(origin.localIdentifier),
        isIdentifierRef(origin) && HeaderPredicates.identifierMatch(origin.identifier),
        isUriRef(origin) && HeaderPredicates.uriMatch(origin.uri),
    ]);
}
function getDrillDownDefinitionsWithPredicates(availableDrillAttributes, attributesWithDrillDown) {
    var matchingAvailableDrillAttributes = availableDrillAttributes.filter(function (candidate) {
        return attributesWithDrillDown.some(function (attr) {
            return areObjRefsEqual(attr.attribute.ref, candidate.attribute.attributeHeader.formOf.ref);
        });
    });
    return matchingAvailableDrillAttributes.map(function (drill) {
        var matchingCatalogAttribute = attributesWithDrillDown.find(function (attr) {
            return areObjRefsEqual(attr.attribute.ref, drill.attribute.attributeHeader.formOf.ref);
        });
        return {
            drillDefinition: {
                type: "drillDown",
                origin: localIdRef(drill.attribute.attributeHeader.localIdentifier),
                target: matchingCatalogAttribute.attribute.drillDownStep,
            },
            predicates: [
                HeaderPredicates.localIdentifierMatch(drill.attribute.attributeHeader.localIdentifier),
            ],
        };
    });
}
function getDrillToUrlDefinitionsWithPredicates(availableDrillAttributes, attributesWithDisplayFormLink) {
    var matchingAvailableDrillAttributes = availableDrillAttributes.filter(function (candidate) {
        return attributesWithDisplayFormLink.some(function (attr) {
            return areObjRefsEqual(attr.attribute.ref, candidate.attribute.attributeHeader.formOf.ref);
        });
    });
    return matchingAvailableDrillAttributes.map(function (targetAttribute) {
        var matchingCatalogAttribute = attributesWithDisplayFormLink.find(function (attr) {
            return areObjRefsEqual(attr.attribute.ref, targetAttribute.attribute.attributeHeader.formOf.ref);
        });
        var drillDefinition = {
            type: "drillToAttributeUrl",
            transition: "new-window",
            origin: {
                type: "drillFromAttribute",
                attribute: localIdRef(targetAttribute.attribute.attributeHeader.localIdentifier),
            },
            target: {
                displayForm: targetAttribute.attribute.attributeHeader.ref,
                hyperlinkDisplayForm: matchingCatalogAttribute.attribute.drillToAttributeLink,
            },
        };
        return {
            drillDefinition: drillDefinition,
            predicates: [
                // add drillable items for both types of objRefs that the header can be
                HeaderPredicates.identifierMatch(targetAttribute.attribute.attributeHeader.identifier),
                HeaderPredicates.uriMatch(targetAttribute.attribute.attributeHeader.uri),
            ],
        };
    });
}
function getDrillDefinitionsWithPredicates(insightWidgetDrills) {
    return insightWidgetDrills.map(function (drill) {
        return {
            drillDefinition: drill,
            predicates: drillDefinitionToPredicates(drill),
        };
    });
}
//
// Following selectors are for the 1st level insight widget (insight widget on the dashboard)
//
/**
 * @internal
 */
export var selectImplicitDrillsDownByWidgetRef = createMemoizedSelector(function (ref) {
    return createSelector(selectDrillTargetsByWidgetRef(ref), selectAttributesWithDrillDown, selectEnableKPIDashboardImplicitDrillDown, function (availableDrillTargets, attributesWithDrillDown, isKPIDashboardImplicitDrillDown) {
        var _a, _b;
        if (isKPIDashboardImplicitDrillDown) {
            var availableDrillAttributes = (_b = (_a = availableDrillTargets === null || availableDrillTargets === void 0 ? void 0 : availableDrillTargets.availableDrillTargets) === null || _a === void 0 ? void 0 : _a.attributes) !== null && _b !== void 0 ? _b : [];
            return getDrillDownDefinitionsWithPredicates(availableDrillAttributes, attributesWithDrillDown);
        }
        return [];
    });
});
/**
 * @internal
 */
export var selectImplicitDrillsToUrlByWidgetRef = createMemoizedSelector(function (ref) {
    return createSelector(selectDrillTargetsByWidgetRef(ref), selectAttributesWithDisplayFormLink, selectEnableClickableAttributeURL, function (availableDrillTargets, attributesWithLink, isClickableAttributeURLEnabled) {
        var _a, _b;
        if (isClickableAttributeURLEnabled) {
            var availableDrillAttributes = (_b = (_a = availableDrillTargets === null || availableDrillTargets === void 0 ? void 0 : availableDrillTargets.availableDrillTargets) === null || _a === void 0 ? void 0 : _a.attributes) !== null && _b !== void 0 ? _b : [];
            return getDrillToUrlDefinitionsWithPredicates(availableDrillAttributes, attributesWithLink);
        }
        return [];
    });
});
/**
 * @internal
 */
export var selectConfiguredDrillsByWidgetRef = createMemoizedSelector(function (ref) {
    return createSelector(selectWidgetDrills(ref), selectDisableDefaultDrills, selectEnableClickableAttributeURL, selectEnableKPIDashboardDrillToURL, selectEnableKPIDashboardDrillToInsight, selectEnableKPIDashboardDrillToDashboard, selectHideKpiDrillInEmbedded, selectIsEmbedded, function (drills, disableDefaultDrills, enableClickableAttributeURL, enableKPIDashboardDrillToURL, enableKPIDashboardDrillToInsight, enableKPIDashboardDrillToDashboard, hideKpiDrillInEmbedded, isEmbedded) {
        if (drills === void 0) { drills = []; }
        if (disableDefaultDrills) {
            return [];
        }
        var filteredDrills = __spread(drills).filter(function (drill) {
            var drillType = drill.type;
            switch (drillType) {
                case "drillToAttributeUrl": {
                    return enableClickableAttributeURL;
                }
                case "drillToCustomUrl": {
                    return enableKPIDashboardDrillToURL;
                }
                case "drillToDashboard": {
                    return enableKPIDashboardDrillToDashboard;
                }
                case "drillToInsight": {
                    return enableKPIDashboardDrillToInsight;
                }
                case "drillToLegacyDashboard": {
                    return !(isEmbedded && hideKpiDrillInEmbedded);
                }
                default: {
                    var unhandledType = drillType;
                    throw new UnexpectedError("Unhandled widget drill type: " + unhandledType);
                }
            }
        });
        return getDrillDefinitionsWithPredicates(filteredDrills);
    });
});
/**
 * @internal
 */
export var selectValidConfiguredDrillsByWidgetRef = createMemoizedSelector(function (ref) {
    return createSelector(selectConfiguredDrillsByWidgetRef(ref), selectAllCatalogDisplayFormsMap, selectListedDashboardsMap, selectInsightsMap, function (drills, displayFormsMap, listedDashboardsMap, insightsMap) {
        if (drills === void 0) { drills = []; }
        var filteredDrills = drills.filter(function (drill) {
            switch (drill.drillDefinition.type) {
                case "drillToAttributeUrl": {
                    return displayFormsMap.get(drill.drillDefinition.target.hyperlinkDisplayForm);
                }
                case "drillToCustomUrl": {
                    return true;
                }
                case "drillToDashboard": {
                    // No drill target equals drill to the same dashboard
                    return (!drill.drillDefinition.target ||
                        listedDashboardsMap.get(drill.drillDefinition.target));
                }
                case "drillToInsight": {
                    return insightsMap.get(drill.drillDefinition.target);
                }
                case "drillToLegacyDashboard": {
                    return true;
                }
                case "drillDown": {
                    return true;
                }
                default: {
                    var unhandledType = drill.drillDefinition;
                    throw new UnexpectedError("Unhandled widget drill type: " + unhandledType);
                }
            }
        });
        return filteredDrills;
    });
});
var selectImplicitDrillToUrlPredicates = createMemoizedSelector(function (ref) {
    return createSelector(selectImplicitDrillsToUrlByWidgetRef(ref), function (drillToUrlDrills) {
        return flatMap(drillToUrlDrills, function (drill) { return drill.predicates; });
    });
});
var selectImplicitDrillDownPredicates = createMemoizedSelector(function (ref) {
    return createSelector(selectImplicitDrillsDownByWidgetRef(ref), function (drillDownDrills) {
        return flatMap(drillDownDrills, function (drill) { return drill.predicates; });
    });
});
var selectConfiguredDrillPredicates = createMemoizedSelector(function (ref) {
    return createSelector(selectValidConfiguredDrillsByWidgetRef(ref), function (configuredDrills) {
        if (configuredDrills === void 0) { configuredDrills = []; }
        return flatMap(configuredDrills, function (drill) { return drill.predicates; });
    });
});
/**
 * @internal
 */
export var selectConfiguredAndImplicitDrillsByWidgetRef = createMemoizedSelector(function (ref) {
    return createSelector(selectValidConfiguredDrillsByWidgetRef(ref), selectImplicitDrillsDownByWidgetRef(ref), selectImplicitDrillsToUrlByWidgetRef(ref), function (configuredDrills, implicitDrillDownDrills, implicitDrillToUrlDrills) {
        return __spread(configuredDrills, implicitDrillDownDrills, implicitDrillToUrlDrills);
    });
});
/**
 * @internal
 */
export var selectDrillableItemsByWidgetRef = createMemoizedSelector(function (ref) {
    return createSelector(selectDisableDefaultDrills, selectDrillableItems, selectConfiguredDrillPredicates(ref), selectImplicitDrillDownPredicates(ref), selectImplicitDrillToUrlPredicates(ref), function (disableDefaultDrills, drillableItems, configuredDrills, implicitDrillDownDrills, implicitDrillToUrlDrills) {
        var resolvedDrillableItems = __spread(drillableItems);
        if (!disableDefaultDrills) {
            resolvedDrillableItems.push.apply(resolvedDrillableItems, __spread(configuredDrills, implicitDrillDownDrills, implicitDrillToUrlDrills));
        }
        return resolvedDrillableItems;
    });
});
//
// Following selectors are for insight widget in drill dialog
//
/**
 * @internal
 */
export var selectImplicitDrillsByAvailableDrillTargets = createMemoizedSelector(function (availableDrillTargets) {
    return createSelector(selectAttributesWithDrillDown, selectAttributesWithDisplayFormLink, function (attributesWithDrillDown, attributesWithLink) {
        var _a;
        var availableDrillAttributes = (_a = availableDrillTargets === null || availableDrillTargets === void 0 ? void 0 : availableDrillTargets.attributes) !== null && _a !== void 0 ? _a : [];
        var drillDownDrills = getDrillDownDefinitionsWithPredicates(availableDrillAttributes, attributesWithDrillDown);
        var drillToUrlDrills = getDrillToUrlDefinitionsWithPredicates(availableDrillAttributes, attributesWithLink);
        return __spread(drillDownDrills, drillToUrlDrills);
    });
});
/**
 * @internal
 */
export var selectDrillableItemsByAvailableDrillTargets = createMemoizedSelector(function (availableDrillTargets) {
    return createSelector(selectImplicitDrillsByAvailableDrillTargets(availableDrillTargets), function (implicitDrillDowns) {
        var drillableItems = flatMap(implicitDrillDowns, function (implicitDrill) { return implicitDrill.predicates; });
        return drillableItems;
    });
});
//# sourceMappingURL=widgetDrillSelectors.js.map
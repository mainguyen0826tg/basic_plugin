import { __assign, __extends } from "tslib";
// (C) 2019-2021 GoodData Corporation
import invariant from "ts-invariant";
import { isKpiWidgetDefinition, isKpiWidget, } from "@gooddata/sdk-backend-spi";
import { WidgetBaseBuilder } from "./widgetFactory";
import { resolveValueOrUpdateCallback } from "../builder";
/**
 * @alpha
 */
var KpiWidgetBuilder = /** @class */ (function (_super) {
    __extends(KpiWidgetBuilder, _super);
    function KpiWidgetBuilder(item, validator) {
        var _this = _super.call(this, item, validator) || this;
        _this.item = item;
        _this.validator = validator;
        // TODO: un-nest legacy kpi
        _this.setKpiWidgetProp = function (prop, valueOrUpdateCallback) {
            _this.setWidget(function (w) {
                var _a;
                return (__assign(__assign({}, w), { kpi: __assign(__assign({}, w.kpi), (_a = {}, _a[prop] = resolveValueOrUpdateCallback(valueOrUpdateCallback, w.kpi[prop]), _a)) }));
            });
            return _this;
        };
        _this.drills = function (valueOrUpdateCallback) {
            return _this.setWidgetProp("drills", valueOrUpdateCallback);
        };
        _this.measure = function (valueOrUpdateCallback) {
            return _this.setKpiWidgetProp("metric", valueOrUpdateCallback);
        };
        _this.comparisonType = function (valueOrUpdateCallback) { return _this.setKpiWidgetProp("comparisonType", valueOrUpdateCallback); };
        _this.comparisonDirection = function (valueOrUpdateCallback) { return _this.setKpiWidgetProp("comparisonDirection", valueOrUpdateCallback); };
        return _this;
    }
    KpiWidgetBuilder.for = function (kpiWidget) {
        invariant(isKpiWidgetDefinition(kpiWidget) || isKpiWidget(kpiWidget), "Provided data must be IKpiWidget or IKpiWidgetDefinition!");
        return new KpiWidgetBuilder(kpiWidget);
    };
    KpiWidgetBuilder.forNew = function (measure) {
        var emptyKpiWidget = {
            description: "",
            drills: [],
            ignoreDashboardFilters: [],
            title: "",
            type: "kpi",
            kpi: {
                metric: measure,
                comparisonType: "none",
            },
        };
        return KpiWidgetBuilder.for(emptyKpiWidget);
    };
    return KpiWidgetBuilder;
}(WidgetBaseBuilder));
export { KpiWidgetBuilder };
/**
 * @alpha
 */
export var newKpiWidget = function (measure, modifications) {
    return KpiWidgetBuilder.forNew(measure).modify(modifications).build();
};
//# sourceMappingURL=kpiWidgetFactory.js.map
import { __assign, __awaiter, __generator } from "tslib";
// (C) 2019-2021 GoodData Corporation
import { ElementsRequestSortOrderEnum } from "@gooddata/api-client-tiger";
import { enhanceWithAll, InMemoryPaging } from "@gooddata/sdk-backend-base";
import { UnexpectedError, NotSupported, } from "@gooddata/sdk-backend-spi";
import { isIdentifierRef, isAttributeFilter, filterAttributeElements, isAttributeElementsByRef, } from "@gooddata/sdk-model";
import invariant from "ts-invariant";
import { getRelativeDateFilterShiftedValues } from "./date";
var TigerWorkspaceElements = /** @class */ (function () {
    function TigerWorkspaceElements(authCall, workspace) {
        this.authCall = authCall;
        this.workspace = workspace;
    }
    TigerWorkspaceElements.prototype.forDisplayForm = function (ref) {
        return new TigerWorkspaceElementsQuery(this.authCall, ref, this.workspace);
    };
    TigerWorkspaceElements.prototype.forFilter = function (filter) {
        return new TigerWorkspaceFilterElementsQuery(this.authCall, filter);
    };
    return TigerWorkspaceElements;
}());
export { TigerWorkspaceElements };
var TigerWorkspaceElementsQuery = /** @class */ (function () {
    function TigerWorkspaceElementsQuery(authCall, ref, workspace) {
        this.authCall = authCall;
        this.ref = ref;
        this.workspace = workspace;
        this.limit = 100;
        this.offset = 0;
    }
    TigerWorkspaceElementsQuery.prototype.withLimit = function (limit) {
        invariant(limit > 0, "limit must be a positive number, got: " + limit);
        this.limit = limit;
        return this;
    };
    TigerWorkspaceElementsQuery.prototype.withOffset = function (offset) {
        this.offset = offset;
        return this;
    };
    TigerWorkspaceElementsQuery.prototype.withAttributeFilters = function () {
        throw new NotSupported("not supported");
    };
    TigerWorkspaceElementsQuery.prototype.withDateFilters = function () {
        throw new NotSupported("not supported");
    };
    TigerWorkspaceElementsQuery.prototype.withMeasures = function () {
        throw new NotSupported("not supported");
    };
    TigerWorkspaceElementsQuery.prototype.withOptions = function (options) {
        this.options = options;
        return this;
    };
    TigerWorkspaceElementsQuery.prototype.query = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.queryWorker(this.offset, this.limit, this.options)];
            });
        });
    };
    TigerWorkspaceElementsQuery.prototype.queryWorker = function (offset, limit, options) {
        return __awaiter(this, void 0, void 0, function () {
            var ref, response, _a, paging, elements, count, total, serverOffset, hasNextPage, goTo, emptyResult;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        ref = this.ref;
                        if (!isIdentifierRef(ref)) {
                            throw new UnexpectedError("Tiger backend does not allow referencing objects by URI");
                        }
                        return [4 /*yield*/, this.authCall(function (client) {
                                var elementsRequest = __assign(__assign(__assign(__assign({ label: ref.identifier }, ((options === null || options === void 0 ? void 0 : options.complement) && { complementFilter: options.complement })), ((options === null || options === void 0 ? void 0 : options.filter) && { patternFilter: options.filter })), ((options === null || options === void 0 ? void 0 : options.uris) && { exactFilter: options.uris })), ((options === null || options === void 0 ? void 0 : options.order) && {
                                    sortOrder: options.order === "asc"
                                        ? ElementsRequestSortOrderEnum.ASC
                                        : ElementsRequestSortOrderEnum.DESC,
                                }));
                                var elementsRequestWrapped = {
                                    limit: limit,
                                    offset: offset,
                                    elementsRequest: elementsRequest,
                                    workspaceId: _this.workspace,
                                };
                                return client.labelElements.computeLabelElementsPost(elementsRequestWrapped);
                            })];
                    case 1:
                        response = _b.sent();
                        _a = response.data, paging = _a.paging, elements = _a.elements;
                        count = paging.count, total = paging.total, serverOffset = paging.offset;
                        hasNextPage = serverOffset + count < total;
                        goTo = function (pageIndex) {
                            var hasRequestedPage = pageIndex * count < total;
                            return hasRequestedPage
                                ? _this.queryWorker(pageIndex * count, limit, options)
                                : Promise.resolve(emptyResult);
                        };
                        emptyResult = enhanceWithAll({
                            items: [],
                            limit: limit,
                            offset: offset,
                            totalCount: 0,
                            next: function () { return Promise.resolve(emptyResult); },
                            goTo: goTo,
                        });
                        return [2 /*return*/, enhanceWithAll({
                                items: elements.map(function (element) { return ({
                                    title: element.title,
                                    uri: element.primaryTitle,
                                }); }),
                                limit: count,
                                offset: serverOffset,
                                totalCount: total,
                                next: hasNextPage
                                    ? function () { return _this.queryWorker(offset + count, limit, options); }
                                    : function () { return Promise.resolve(emptyResult); },
                                goTo: goTo,
                            })];
                }
            });
        });
    };
    return TigerWorkspaceElementsQuery;
}());
var TigerWorkspaceFilterElementsQuery = /** @class */ (function () {
    function TigerWorkspaceFilterElementsQuery(_authCall, filter) {
        this.filter = filter;
        this.limit = 100;
        this.offset = 0;
    }
    // eslint-disable-next-line sonarjs/no-identical-functions
    TigerWorkspaceFilterElementsQuery.prototype.withLimit = function (limit) {
        invariant(limit > 0, "limit must be a positive number, got: " + limit);
        this.limit = limit;
        return this;
    };
    TigerWorkspaceFilterElementsQuery.prototype.withOffset = function (offset) {
        this.offset = offset;
        return this;
    };
    TigerWorkspaceFilterElementsQuery.prototype.query = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (isAttributeFilter(this.filter)) {
                    return [2 /*return*/, this.queryAttributeFilterElements()];
                }
                else {
                    return [2 /*return*/, this.queryDateFilterElements()];
                }
                return [2 /*return*/];
            });
        });
    };
    TigerWorkspaceFilterElementsQuery.prototype.queryAttributeFilterElements = function () {
        return __awaiter(this, void 0, void 0, function () {
            var selectedElements, values, elements;
            return __generator(this, function (_a) {
                selectedElements = filterAttributeElements(this.filter) || { values: [] };
                values = isAttributeElementsByRef(selectedElements)
                    ? selectedElements.uris
                    : selectedElements.values;
                elements = values.map(function (element) { return ({
                    title: element,
                    uri: element,
                }); });
                return [2 /*return*/, Promise.resolve(new InMemoryPaging(elements, this.limit, this.offset))];
            });
        });
    };
    TigerWorkspaceFilterElementsQuery.prototype.queryDateFilterElements = function () {
        return __awaiter(this, void 0, void 0, function () {
            var relativeDateFilters, items;
            return __generator(this, function (_a) {
                relativeDateFilters = getRelativeDateFilterShiftedValues(new Date(), this.filter);
                items = relativeDateFilters.map(function (relativeDateFilter) { return ({
                    title: relativeDateFilter,
                    uri: relativeDateFilter,
                }); });
                return [2 /*return*/, Promise.resolve(new InMemoryPaging(items, this.limit, this.offset))];
            });
        });
    };
    return TigerWorkspaceFilterElementsQuery;
}());
//# sourceMappingURL=index.js.map
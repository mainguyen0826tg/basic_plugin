import { GdcExecuteAFM } from "@gooddata/api-model-bear";
/**
 * List of products using post events
 *
 * @public
 */
export declare enum GdcProductName {
    /**
     * AD product name
     */
    ANALYTICAL_DESIGNER = "analyticalDesigner",
    /**
     * KD product name
     */
    KPI_DASHBOARD = "dashboard"
}
/**
 * Common event types in application
 *
 * @public
 */
export declare enum GdcEventType {
    /**
     * Event to notify outer application that the command is invalid or have errors while processing
     */
    AppCommandFailed = "appCommandFailed"
}
/**
 * Base type for event content
 *
 * @public
 */
export interface IGdcMessage<Product, T, TBody> {
    readonly product: Product;
    readonly event: {
        readonly name: T;
        readonly data?: TBody;
        readonly contextId?: string;
    };
}
/**
 * Base type for gdc event data
 *
 * @public
 */
export interface IGdcMessageEnvelope<Product, T, TBody> {
    readonly gdc: IGdcMessage<Product, T, TBody>;
}
/**
 * Base type for events
 *
 * @public
 */
export interface IGdcMessageEvent<Product, T, TBody> extends MessageEvent {
    readonly data: IGdcMessageEnvelope<Product, T, TBody>;
}
/**
 * Type for event listener
 *
 * @public
 */
export declare type GdcMessageEventListener = (event: IGdcMessageEvent<string, string, any>) => boolean;
/**
 * Config type use to setup the message event listeners
 *
 * @public
 */
export interface IGdcMessageEventListenerConfig {
    /**
     * The product name where the post messages are sent/received
     */
    product: string;
    /**
     * The list of events is allowed for processing
     */
    validReceivedPostEvents: string[];
}
/**
 * Enumeration of possible types of error messages posted from the apps.
 *
 * @public
 */
export declare enum GdcErrorType {
    /**
     * The posted command is not recognized.
     */
    InvalidCommand = "error:invalidCommand",
    /**
     * Argument specified in the command body is invalid; it has failed the syntactical
     * or semantic validation.
     */
    InvalidArgument = "error:invalidArgument",
    /**
     * Command was posted when the app is not in a state to process the command. For instance:
     *
     * - trying to do save/save-as on new, empty insight
     * - trying to do save/save-as on insight that is in error
     * - trying to do undo when there is no step-back available
     * - trying to do redo when there is no step-forward available
     */
    InvalidState = "error:invalidState",
    /**
     * The Unexpected Happened.
     */
    RuntimeError = "error:runtime"
}
/**
 * @public
 */
export interface ICommandFailedBody {
    /**
     * Error code indicates category of error that has occurred.
     * The possible types vary between applications.
     */
    errorCode: GdcErrorType;
    /**
     * Error message includes descriptive information about the error.
     * E.g. "Insight title must not contain newline character"
     */
    errorMessage: string;
}
/**
 * Base type for error events sent by application in case command processing comes to an expected
 * or unexpected halt.
 *
 * @public
 */
export declare type CommandFailed<Product> = IGdcMessageEvent<Product, GdcEventType.AppCommandFailed, ICommandFailedBody>;
/**
 * Base type for the data of error events sent by application
 * in case command processing comes to an expected or unexpected halt.
 *
 * @public
 */
export declare type CommandFailedData<Product> = IGdcMessageEnvelope<Product, GdcEventType.AppCommandFailed, ICommandFailedBody>;
/**
 * Type-guard checking whether an object is an instance of {@link CommandFailedData}
 *
 * @param obj - object to test
 * @public
 */
export declare function isCommandFailedData<Product>(obj: unknown): obj is CommandFailedData<Product>;
/**
 * Minimal meta-information about an object.
 *
 * @public
 */
export interface IObjectMeta {
    /**
     * Unique, user-assignable identifier of the insight. This identifier does not change during LCM operations.
     */
    identifier: string;
    /**
     * URI of the Insight. In context of GoodData platform, the URI is a link to the visualization object
     * where the insight is persisted.
     *
     * NOTE: URI is workspace scoped; same insight distributed across multiple workspaces using LCM will have
     * different URI.
     */
    uri: string;
    /**
     * Insight title - this is what users see in AD top bar (if visible)
     */
    title: string;
}
/**
 * Additional information for action payload. Use for internal reducers, sagas
 *
 * @public
 */
export interface IPostMessageContextPayload {
    postMessageContext?: {
        contextId: string;
    };
}
/**
 * Get event type of event from event data
 * @param obj - the event data object
 * @public
 */
export declare function getEventType(obj: Record<string, any>): string;
/**
 * Base type of drillable items command body
 *
 * @public
 */
export interface ISimpleDrillableItemsCommandBody {
    /**
     * The array of uris of attributes or measures
     */
    uris?: string[];
    /**
     * The array of identifiers of attributes or measures
     */
    identifiers?: string[];
}
/**
 * The main data type of drillable items command
 *
 * @public
 */
export interface IDrillableItemsCommandBody extends ISimpleDrillableItemsCommandBody {
    /**
     * Master measures items - In-case, a derived measure is composed from a master measure.
     */
    composedFrom?: ISimpleDrillableItemsCommandBody;
}
/**
 * @public
 */
export declare namespace EmbeddedGdc {
    interface IPositiveAttributeFilter {
        positiveAttributeFilter: {
            displayForm: ObjQualifier;
            in: string[];
            textFilter?: boolean;
        };
    }
    interface INegativeAttributeFilter {
        negativeAttributeFilter: {
            displayForm: ObjQualifier;
            notIn: string[];
            textFilter?: boolean;
        };
    }
    interface IAbsoluteDateFilter {
        absoluteDateFilter: {
            dataSet?: ObjQualifier;
            from: string;
            to: string;
        };
    }
    interface IRelativeDateFilter {
        relativeDateFilter: {
            dataSet?: ObjQualifier;
            granularity: string;
            from: number;
            to: number;
        };
    }
    type RankingFilterOperator = "TOP" | "BOTTOM";
    interface IRankingFilter {
        rankingFilter: {
            measure: ILocalIdentifierQualifier;
            attributes?: ILocalIdentifierQualifier[];
            operator: RankingFilterOperator;
            value: number;
        };
    }
    type AttributeFilterItem = IPositiveAttributeFilter | INegativeAttributeFilter;
    type DateFilterItem = IAbsoluteDateFilter | IRelativeDateFilter;
    type FilterItem = DateFilterItem | AttributeFilterItem | IRankingFilter;
    type ILocalIdentifierQualifier = GdcExecuteAFM.ILocalIdentifierQualifier;
    type ObjQualifier = GdcExecuteAFM.ObjQualifier;
    interface IRemoveDateFilterItem {
        dataSet: ObjQualifier;
    }
    interface IRemoveAttributeFilterItem {
        displayForm: ObjQualifier;
    }
    interface IRemoveRankingFilterItem {
        removeRankingFilter: unknown;
    }
    type RemoveFilterItem = IRemoveDateFilterItem | IRemoveAttributeFilterItem | IRemoveRankingFilterItem;
    function isDateFilter(filter: unknown): filter is DateFilterItem;
    function isRelativeDateFilter(filter: unknown): filter is IRelativeDateFilter;
    function isAbsoluteDateFilter(filter: unknown): filter is IAbsoluteDateFilter;
    function isAttributeFilter(filter: unknown): filter is AttributeFilterItem;
    function isPositiveAttributeFilter(filter: unknown): filter is IPositiveAttributeFilter;
    function isNegativeAttributeFilter(filter: unknown): filter is INegativeAttributeFilter;
    const isObjIdentifierQualifier: typeof GdcExecuteAFM.isObjIdentifierQualifier;
    const isObjectUriQualifier: typeof GdcExecuteAFM.isObjectUriQualifier;
    function isRankingFilter(filter: unknown): filter is IRankingFilter;
    /**
     * The filter context content that is used to exchange the filter context
     * between AD, KD embedded page and parent application
     */
    interface IFilterContextContent {
        filters: FilterItem[];
    }
    /**
     * The remove filter context content that is used to exchange the filter context
     * between AD, KD embedded page and parent application
     */
    interface IRemoveFilterContextContent {
        filters: RemoveFilterItem[];
    }
    function isRemoveDateFilter(filter: unknown): filter is EmbeddedGdc.IRemoveDateFilterItem;
    function isRemoveAttributeFilter(filter: unknown): filter is EmbeddedGdc.IRemoveAttributeFilterItem;
    function isRemoveRankingFilter(filter: unknown): filter is EmbeddedGdc.IRemoveRankingFilterItem;
    type AllTimeType = "allTime";
    type AbsoluteType = "absolute";
    type RelativeType = "relative";
    type DateString = string;
    type DateFilterGranularity = "GDC.time.date" | "GDC.time.week_us" | "GDC.time.month" | "GDC.time.quarter" | "GDC.time.year";
    interface IDashboardAllTimeDateFilter {
        dateFilter: {
            type: AllTimeType;
        };
    }
    interface IDashboardAbsoluteDateFilter {
        dateFilter: {
            type: AbsoluteType;
            granularity: DateFilterGranularity;
            from: DateString;
            to: DateString;
        };
    }
    interface IDashboardRelativeDateFilter {
        dateFilter: {
            type: RelativeType;
            granularity: DateFilterGranularity;
            from: number;
            to: number;
        };
    }
    type DashboardDateFilter = IDashboardAllTimeDateFilter | IDashboardAbsoluteDateFilter | IDashboardRelativeDateFilter;
    function isDashboardDateFilter(filter: unknown): filter is DashboardDateFilter;
    function isDashboardAllTimeDateFilter(filter: unknown): filter is IDashboardAllTimeDateFilter;
    function isDashboardAbsoluteDateFilter(filter: unknown): filter is IDashboardAbsoluteDateFilter;
    function isDashboardRelativeDateFilter(filter: unknown): filter is IDashboardRelativeDateFilter;
    interface IDashboardAttributeFilter {
        attributeFilter: {
            displayForm: string;
            negativeSelection: boolean;
            attributeElements: string[];
        };
    }
    function isDashboardAttributeFilter(filter: unknown): filter is IDashboardAttributeFilter;
    interface IResolvedAttributeFilterValues {
        [elementRef: string]: string | undefined;
    }
    interface IResolvedDateFilterValue {
        from: string;
        to: string;
    }
    type ResolvedDateFilterValues = IResolvedDateFilterValue[];
    /**
     * Resolved values for all resolvable filters
     */
    interface IResolvedFilterValues {
        dateFilters: ResolvedDateFilterValues;
        attributeFilters: {
            [filterStringRef: string]: IResolvedAttributeFilterValues;
        };
    }
}

import { __assign, __read, __spread } from "tslib";
import { useBackendStrict, useWorkspaceStrict, useResolveValuesWithPlaceholders, } from "../base";
import { useDataView } from "./useDataView";
import isEmpty from "lodash/isEmpty";
import { createExecution } from "./createExecution";
/**
 * @internal
 */
function isExecutionConfiguration(obj) {
    var _a;
    return !isEmpty(obj) && !!((_a = obj) === null || _a === void 0 ? void 0 : _a.seriesBy);
}
/**
 * React hook to get data for a specific execution.
 *
 * @beta
 */
export function useExecutionDataView(config, deps) {
    var _a;
    var execution = config.execution, window = config.window;
    var backend = useBackendStrict(config.backend, "useExecutionDataView");
    var workspace = useWorkspaceStrict(config.workspace, "useExecutionDataView");
    var effectiveDeps = deps !== null && deps !== void 0 ? deps : [];
    var propsToResolve = getExecutionConfigurationProps(config.execution);
    var _b = __read(useResolveValuesWithPlaceholders([
        propsToResolve.seriesBy,
        propsToResolve.slicesBy,
        propsToResolve.totals,
        propsToResolve.filters,
        propsToResolve.sortBy,
    ], propsToResolve.placeholdersResolutionContext), 5), seriesBy = _b[0], slicesBy = _b[1], totals = _b[2], filters = _b[3], sortBy = _b[4];
    var preparedExecution = isExecutionConfiguration(execution)
        ? createExecution(__assign(__assign({}, execution), { seriesBy: seriesBy, slicesBy: slicesBy,
            totals: totals,
            filters: filters,
            sortBy: sortBy,
            backend: backend,
            workspace: workspace }))
        : execution;
    return useDataView({ execution: preparedExecution, window: window }, __spread([
        backend,
        workspace,
        (_a = preparedExecution === null || preparedExecution === void 0 ? void 0 : preparedExecution.fingerprint()) !== null && _a !== void 0 ? _a : "__executionFingerprint__"
    ], effectiveDeps));
}
/**
 * @internal
 */
function getExecutionConfigurationProps(execution) {
    if (isExecutionConfiguration(execution)) {
        return execution;
    }
    return {};
}
//# sourceMappingURL=useExecutionDataView.js.map
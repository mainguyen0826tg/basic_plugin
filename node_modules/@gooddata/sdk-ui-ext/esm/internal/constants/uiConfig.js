var _a, _b;
import { __assign } from "tslib";
import { METRIC, FACT, ATTRIBUTE, DATE, GEO_ATTRIBUTE } from "./bucket";
import { BucketNames, OverTimeComparisonTypes, VisualizationTypes } from "@gooddata/sdk-ui";
export var MAX_METRICS_COUNT = 20;
export var DEFAULT_PIE_METRICS_COUNT = 1;
export var DEFAULT_TREEMAP_MEASURES_COUNT = 1;
export var MAX_FILTERS_COUNT = 20;
export var MAX_CATEGORIES_COUNT = 1;
export var MAX_TABLE_CATEGORIES_COUNT = 20;
export var MAX_STACKS_COUNT = 1;
export var MAX_VIEW_COUNT = 2;
export var DEFAULT_HEADLINE_METRICS_COUNT = 1;
export var DEFAULT_XIRR_METRICS_COUNT = 1;
export var DEFAULT_XIRR_ATTRIBUTES_COUNT = 1;
var DEFAULT_GEO_ATTRIBUTES_COUNT = 1;
var DEFAULT_PUSHPIN_METRICS_COUNT = 1;
export var UICONFIG = "uiConfig";
export var RECOMMENDATIONS = "recommendations";
export var SUPPORTED_COMPARISON_TYPES = "supportedOverTimeComparisonTypes";
export var OPEN_AS_REPORT = "openAsReport";
export var SUPPORTED = "supported";
export var UICONFIG_AXIS = "uiConfig.axis";
export var measuresBase = {
    accepts: [METRIC, FACT, ATTRIBUTE],
    allowsDuplicateItems: true,
    enabled: true,
    allowsReordering: true,
    allowsSwapping: true,
    itemsLimit: MAX_METRICS_COUNT,
    isShowInPercentEnabled: false,
    isShowInPercentVisible: true,
};
export var viewBase = {
    accepts: [ATTRIBUTE, DATE],
    itemsLimit: MAX_CATEGORIES_COUNT,
    itemsLimitByType: {
        date: 1,
    },
    allowsSwapping: true,
    allowsReordering: false,
    enabled: true,
    isShowInPercentEnabled: false,
};
var stackBase = {
    accepts: [ATTRIBUTE],
    itemsLimit: MAX_STACKS_COUNT,
    allowsSwapping: true,
    allowsReordering: false,
    enabled: true,
    isShowInPercentEnabled: false,
};
var stackBaseWithDate = __assign(__assign({}, stackBase), { accepts: [ATTRIBUTE, DATE] });
export var defaultFilters = {
    filters: {
        accepts: [ATTRIBUTE, DATE],
        itemsLimit: MAX_FILTERS_COUNT,
        itemsLimitByType: {
            date: 1,
        },
        allowsReordering: false,
        enabled: true,
        isShowInPercentEnabled: false,
    },
};
var disabledExportConfig = {
    exportConfig: { supported: false },
};
var enabledExportConfig = {
    exportConfig: { supported: true },
};
var enabledNoMetricConfig = {
    noMetricAccepted: { supported: true },
};
export var disabledOpenAsReportConfig = {
    openAsReport: { supported: false },
};
var enabledOpenAsReportConfig = {
    openAsReport: { supported: true },
};
export var defaultRootUiConfigProperties = __assign(__assign({ recommendations: {}, supportedOverTimeComparisonTypes: [] }, disabledOpenAsReportConfig), enabledExportConfig);
export var DEFAULT_SCATTERPLOT_UICONFIG = __assign({ buckets: __assign({ measures: __assign(__assign({}, measuresBase), { isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), secondary_measures: __assign(__assign({}, measuresBase), { isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), attribute: __assign(__assign({}, viewBase), { allowsReordering: false, allowsSwapping: false, canAddItems: true, itemsLimit: MAX_STACKS_COUNT }) }, defaultFilters) }, defaultRootUiConfigProperties);
export var DEFAULT_BUBBLE_CHART_CONFIG = __assign({ buckets: __assign({ measures: __assign(__assign({}, measuresBase), { isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), secondary_measures: __assign(__assign({}, measuresBase), { isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), tertiary_measures: __assign(__assign({}, measuresBase), { isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), view: __assign(__assign({}, viewBase), { allowsReordering: false, allowsSwapping: false, canAddItems: true, itemsLimit: 1 }) }, defaultFilters) }, defaultRootUiConfigProperties);
export var DEFAULT_BASE_CHART_UICONFIG = __assign(__assign({ buckets: __assign({ measures: __assign({}, measuresBase), view: __assign({}, viewBase), stack: __assign({}, stackBase) }, defaultFilters) }, defaultRootUiConfigProperties), enabledOpenAsReportConfig);
export var COLUMN_BAR_CHART_UICONFIG = __assign(__assign(__assign({ buckets: __assign({ measures: __assign(__assign({}, measuresBase), { isShowOnSecondaryAxisVisible: true }), view: __assign(__assign({}, viewBase), { allowsReordering: true, itemsLimit: MAX_VIEW_COUNT }), stack: __assign({}, stackBase) }, defaultFilters) }, defaultRootUiConfigProperties), enabledOpenAsReportConfig), { supportedOverTimeComparisonTypes: [
        OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ], optionalStacking: {
        supported: true,
        stackMeasures: false,
    } });
export var COLUMN_BAR_CHART_UICONFIG_WITH_MULTIPLE_DATES = __assign(__assign({}, COLUMN_BAR_CHART_UICONFIG), { buckets: __assign(__assign({}, COLUMN_BAR_CHART_UICONFIG.buckets), { view: __assign(__assign({}, COLUMN_BAR_CHART_UICONFIG.buckets.view), { itemsLimitByType: {
                date: 2,
            }, allowsDuplicateDates: true, preferSynchronizedDates: true }), stack: __assign(__assign({}, stackBaseWithDate), { itemsLimitByType: {
                date: 1,
            }, allowsDuplicateDates: true }) }) });
export var DEFAULT_LINE_UICONFIG = __assign(__assign(__assign({ buckets: __assign({ measures: __assign(__assign({}, measuresBase), { isShowOnSecondaryAxisVisible: true }), trend: __assign({}, viewBase), segment: __assign({}, stackBase) }, defaultFilters) }, defaultRootUiConfigProperties), enabledOpenAsReportConfig), { supportedOverTimeComparisonTypes: [
        OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ] });
export var LINE_UICONFIG_WITH_MULTIPLE_DATES = __assign(__assign(__assign({ buckets: __assign({ measures: __assign(__assign({}, measuresBase), { isShowOnSecondaryAxisVisible: true }), trend: __assign(__assign({}, viewBase), { allowsDuplicateDates: true }), segment: __assign(__assign({}, stackBaseWithDate), { itemsLimitByType: {
                date: 1,
            }, allowsDuplicateDates: true }) }, defaultFilters) }, defaultRootUiConfigProperties), enabledOpenAsReportConfig), { supportedOverTimeComparisonTypes: [
        OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ] });
export var DEFAULT_AREA_UICONFIG = __assign(__assign(__assign({ buckets: __assign({ measures: __assign({}, measuresBase), view: __assign(__assign({}, viewBase), { allowsReordering: true, itemsLimit: MAX_VIEW_COUNT }), stack: __assign({}, stackBase) }, defaultFilters) }, defaultRootUiConfigProperties), enabledOpenAsReportConfig), { optionalStacking: {
        supported: true,
        stackMeasures: true,
    } });
export var AREA_UICONFIG_WITH_MULTIPLE_DATES = __assign(__assign(__assign({ buckets: __assign({ measures: __assign({}, measuresBase), view: __assign(__assign({}, viewBase), { itemsLimitByType: {
                date: 2,
            }, allowsReordering: true, itemsLimit: MAX_VIEW_COUNT, allowsDuplicateDates: true }), stack: __assign(__assign({}, stackBaseWithDate), { itemsLimitByType: {
                date: 1,
            }, allowsDuplicateDates: true }) }, defaultFilters) }, defaultRootUiConfigProperties), enabledOpenAsReportConfig), { optionalStacking: {
        supported: true,
        stackMeasures: true,
    } });
export var DEFAULT_PIE_UICONFIG = __assign(__assign({ buckets: __assign({ measures: __assign(__assign({}, measuresBase), { itemsLimit: DEFAULT_PIE_METRICS_COUNT, allowsReordering: false }), view: __assign({}, viewBase) }, defaultFilters) }, defaultRootUiConfigProperties), enabledOpenAsReportConfig);
export var PIE_UICONFIG_WITH_MULTIPLE_METRICS = __assign(__assign({ buckets: __assign({ measures: __assign({}, measuresBase), view: __assign(__assign({}, viewBase), { itemsLimit: 0 }) }, defaultFilters) }, defaultRootUiConfigProperties), enabledOpenAsReportConfig);
export var PIE_UICONFIG_WITH_ONE_METRIC = __assign(__assign({ buckets: __assign({ measures: __assign({}, measuresBase), view: __assign({}, viewBase) }, defaultFilters) }, defaultRootUiConfigProperties), enabledOpenAsReportConfig);
export var DEFAULT_TREEMAP_UICONFIG = __assign({ buckets: __assign({ measures: __assign({}, measuresBase), view: __assign({}, viewBase), segment: __assign({}, stackBase) }, defaultFilters) }, defaultRootUiConfigProperties);
export var DEFAULT_TABLE_UICONFIG = __assign(__assign(__assign({ buckets: __assign({ measures: __assign({}, measuresBase), attribute: __assign(__assign({}, viewBase), { allowsSwapping: false, allowsReordering: true, itemsLimit: MAX_TABLE_CATEGORIES_COUNT }) }, defaultFilters) }, defaultRootUiConfigProperties), enabledOpenAsReportConfig), { supportedOverTimeComparisonTypes: [
        OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ] });
export var DEFAULT_HEADLINE_UICONFIG = __assign(__assign(__assign({ buckets: __assign({ measures: __assign(__assign({}, measuresBase), { itemsLimit: DEFAULT_HEADLINE_METRICS_COUNT, isShowInPercentVisible: false, allowsReordering: false }), secondary_measures: __assign(__assign({}, measuresBase), { itemsLimit: DEFAULT_HEADLINE_METRICS_COUNT, isShowInPercentVisible: false, allowsReordering: false }) }, defaultFilters) }, defaultRootUiConfigProperties), disabledExportConfig), { supportedOverTimeComparisonTypes: [
        OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ] });
export var DEFAULT_HEATMAP_UICONFIG = __assign({ buckets: __assign({ measures: {
            accepts: [METRIC, FACT, ATTRIBUTE],
            enabled: true,
            allowsReordering: false,
            allowsSwapping: true,
            itemsLimit: 1,
            isShowInPercentEnabled: false,
            isShowInPercentVisible: false,
            icon: "",
            canAddItems: true,
            allowsDuplicateItems: true,
        }, view: {
            accepts: [ATTRIBUTE, DATE],
            itemsLimit: 1,
            allowsSwapping: true,
            allowsReordering: false,
            enabled: true,
            isShowInPercentEnabled: false,
            icon: "",
            canAddItems: true,
        }, stack: {
            accepts: [ATTRIBUTE, DATE],
            itemsLimit: 1,
            allowsSwapping: true,
            allowsReordering: false,
            enabled: true,
            isShowInPercentEnabled: false,
            icon: "",
            canAddItems: true,
        } }, defaultFilters) }, defaultRootUiConfigProperties);
export var COMBO_CHART_UICONFIG_DEPRECATED = {
    buckets: __assign({ measures: __assign({}, measuresBase), secondary_measures: __assign({}, measuresBase), view: __assign(__assign({}, viewBase), { itemsLimit: 1 }) }, defaultFilters),
    recommendations: {},
    supportedOverTimeComparisonTypes: [],
};
export var COMBO_CHART_UICONFIG = __assign(__assign({ buckets: __assign({ measures: __assign(__assign({}, measuresBase), { canAddItems: true, allowSelectChartType: true, allowOptionalStacking: true }), secondary_measures: __assign(__assign({}, measuresBase), { canAddItems: true, allowSelectChartType: true, allowShowOnSecondaryAxis: true }), view: __assign(__assign({}, viewBase), { canAddItems: true, itemsLimit: 1 }) }, defaultFilters) }, defaultRootUiConfigProperties), { supportedOverTimeComparisonTypes: [
        OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ], supportedChartTypes: [VisualizationTypes.COLUMN, VisualizationTypes.LINE, VisualizationTypes.AREA], optionalStacking: {
        supported: true,
        disabled: false,
        stackMeasures: false,
    } });
export var DEFAULT_XIRR_UICONFIG = __assign(__assign({ buckets: __assign({ measures: __assign(__assign({}, measuresBase), { accepts: [METRIC, FACT], itemsLimit: DEFAULT_XIRR_METRICS_COUNT, isShowInPercentVisible: false }), attribute: __assign(__assign({}, viewBase), { accepts: [DATE], itemsLimit: DEFAULT_XIRR_ATTRIBUTES_COUNT }) }, defaultFilters) }, defaultRootUiConfigProperties), disabledExportConfig);
export var DEFAULT_BULLET_CHART_CONFIG = __assign(__assign({ buckets: __assign((_a = {}, _a[BucketNames.MEASURES] = __assign(__assign({}, measuresBase), { isShowOnSecondaryAxisVisible: false, isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), _a[BucketNames.SECONDARY_MEASURES] = __assign(__assign({}, measuresBase), { isShowOnSecondaryAxisVisible: false, isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), _a[BucketNames.TERTIARY_MEASURES] = __assign(__assign({}, measuresBase), { isShowOnSecondaryAxisVisible: false, isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), _a[BucketNames.VIEW] = __assign(__assign({}, viewBase), { allowsReordering: true, allowsSwapping: true, canAddItems: true, itemsLimit: 2 }), _a), defaultFilters) }, defaultRootUiConfigProperties), { supportedOverTimeComparisonTypes: [
        OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ] });
export var BULLET_CHART_CONFIG_MULTIPLE_DATES = __assign(__assign({}, defaultRootUiConfigProperties), { buckets: __assign((_b = {}, _b[BucketNames.MEASURES] = __assign({}, DEFAULT_BULLET_CHART_CONFIG.buckets[BucketNames.MEASURES]), _b[BucketNames.SECONDARY_MEASURES] = __assign({}, DEFAULT_BULLET_CHART_CONFIG.buckets[BucketNames.SECONDARY_MEASURES]), _b[BucketNames.TERTIARY_MEASURES] = __assign({}, DEFAULT_BULLET_CHART_CONFIG.buckets[BucketNames.TERTIARY_MEASURES]), _b[BucketNames.VIEW] = __assign(__assign({}, viewBase), { allowsReordering: true, allowsSwapping: true, canAddItems: true, itemsLimit: 2, itemsLimitByType: {
            date: 2,
        }, allowsDuplicateDates: true, preferSynchronizedDates: true }), _b), defaultFilters), supportedOverTimeComparisonTypes: [
        OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ] });
var geoMeasuresBase = __assign(__assign({}, measuresBase), { allowsReordering: false, itemsLimit: DEFAULT_PUSHPIN_METRICS_COUNT, isShowInPercentVisible: false, canAddItems: true });
var geoAttributesBase = __assign(__assign({}, viewBase), { accepts: [ATTRIBUTE], canAddItems: true, itemsLimit: DEFAULT_GEO_ATTRIBUTES_COUNT });
export var GEO_PUSHPIN_CHART_UICONFIG = __assign(__assign({ buckets: __assign({ location: __assign(__assign({}, geoAttributesBase), { accepts: [ATTRIBUTE, GEO_ATTRIBUTE] }), size: __assign({}, geoMeasuresBase), color: __assign({}, geoMeasuresBase), segment: __assign({}, geoAttributesBase) }, defaultFilters), supportedLocationIcon: { supported: true } }, defaultRootUiConfigProperties), enabledNoMetricConfig);
export function getTreemapUiConfig(allowsMultipleDates, hasNonStackAttributes, hasMultipleMeasures) {
    var measuresConfig = hasNonStackAttributes
        ? {
            itemsLimit: DEFAULT_TREEMAP_MEASURES_COUNT,
            allowsReordering: false,
            canAddItems: false,
            isShowInPercentEnabled: true,
        }
        : {};
    var viewsConfig = !hasNonStackAttributes && hasMultipleMeasures
        ? {
            itemsLimit: 0,
        }
        : {};
    var multipleDatesConfig = allowsMultipleDates
        ? {
            itemsLimitByType: {
                date: 1,
            },
            allowsDuplicateDates: true,
        }
        : {};
    var segmentBase = allowsMultipleDates ? stackBaseWithDate : stackBase;
    return __assign({ buckets: __assign({ measures: __assign(__assign({}, measuresBase), measuresConfig), view: __assign(__assign(__assign({}, viewBase), viewsConfig), multipleDatesConfig), segment: __assign(__assign({}, segmentBase), multipleDatesConfig) }, defaultFilters) }, defaultRootUiConfigProperties);
}
//# sourceMappingURL=uiConfig.js.map
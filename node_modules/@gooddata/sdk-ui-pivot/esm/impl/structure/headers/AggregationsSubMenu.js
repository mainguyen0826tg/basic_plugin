import { __assign, __extends } from "tslib";
// (C) 2007-2018 GoodData Corporation
import { Header, Icon, Item, ItemsWrapper, SubMenu } from "@gooddata/sdk-ui-kit";
import { attributeDescriptorLocalId, attributeDescriptorName, } from "@gooddata/sdk-backend-spi";
import { useTheme } from "@gooddata/sdk-ui-theme-provider";
import cx from "classnames";
import React from "react";
import menuHelper from "./aggregationsMenuHelper";
var MENU_HEADER_OFFSET = -36;
var HeaderIcon = function () {
    var _a, _b, _c, _d;
    var theme = useTheme();
    return (React.createElement("div", { className: "gd-aggregation-submenu-header-icon" },
        React.createElement(Icon.Rows, { width: 12, height: 11, colorPalette: {
                even: (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _a === void 0 ? void 0 : _a.complementary) === null || _b === void 0 ? void 0 : _b.c7,
                odd: (_d = (_c = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _c === void 0 ? void 0 : _c.complementary) === null || _d === void 0 ? void 0 : _d.c4,
            } })));
};
var AggregationsSubMenu = /** @class */ (function (_super) {
    __extends(AggregationsSubMenu, _super);
    function AggregationsSubMenu() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AggregationsSubMenu.prototype.render = function () {
        var _a = this.props, toggler = _a.toggler, isMenuOpened = _a.isMenuOpened, intl = _a.intl;
        var menuOpenedProp = isMenuOpened ? { opened: true } : {};
        return (React.createElement(SubMenu, __assign({ toggler: toggler, offset: MENU_HEADER_OFFSET }, menuOpenedProp),
            React.createElement(ItemsWrapper, null,
                React.createElement("div", { className: "gd-aggregation-submenu s-table-header-submenu-content" },
                    React.createElement(Header, null,
                        React.createElement(HeaderIcon, null),
                        React.createElement("span", null, intl.formatMessage({ id: "visualizations.menu.aggregations.rows" }))),
                    this.renderSubMenuItems()))));
    };
    AggregationsSubMenu.prototype.getPreviousAttributeName = function (rowAttributeDescriptors, attributeHeaderIndex) {
        return attributeDescriptorName(rowAttributeDescriptors[attributeHeaderIndex - 1]);
    };
    AggregationsSubMenu.prototype.getAttributeName = function (rowAttributeDescriptors, afmAttributeHeaderIndex) {
        var intl = this.props.intl;
        if (afmAttributeHeaderIndex === 0) {
            return intl.formatMessage({ id: "visualizations.menu.aggregations.all-rows" });
        }
        var attributeName = this.getPreviousAttributeName(rowAttributeDescriptors, afmAttributeHeaderIndex);
        return intl.formatMessage({ id: "visualizations.menu.aggregations.within-attribute" }, { attributeName: attributeName });
    };
    AggregationsSubMenu.prototype.getSubtotalNameTestClass = function (attributeLocalIdentifier) {
        var attributeClass = attributeLocalIdentifier.replace(/\./g, "-");
        return "s-aggregation-item-" + attributeClass;
    };
    AggregationsSubMenu.prototype.renderSubMenuItems = function () {
        var _this = this;
        var _a = this.props, totalType = _a.totalType, rowAttributeDescriptors = _a.rowAttributeDescriptors, measureLocalIdentifiers = _a.measureLocalIdentifiers, columnTotals = _a.columnTotals;
        return rowAttributeDescriptors.map(function (_attributeDescriptor, headerIndex) {
            var attributeLocalIdentifier = attributeDescriptorLocalId(rowAttributeDescriptors[headerIndex]);
            var isSelected = menuHelper.isTotalEnabledForAttribute(attributeLocalIdentifier, totalType, columnTotals);
            var onClick = function () {
                return _this.props.onAggregationSelect({
                    type: totalType,
                    measureIdentifiers: measureLocalIdentifiers,
                    include: !isSelected,
                    attributeIdentifier: attributeLocalIdentifier,
                });
            };
            var attributeName = _this.getAttributeName(rowAttributeDescriptors, headerIndex);
            return (React.createElement(Item, { checked: isSelected, key: attributeLocalIdentifier },
                React.createElement("div", { onClick: onClick, className: cx("gd-aggregation-menu-item-inner", "s-menu-aggregation-inner", _this.getSubtotalNameTestClass(attributeLocalIdentifier), {
                        "s-menu-aggregation-inner-selected": isSelected,
                    }) }, attributeName)));
        });
    };
    AggregationsSubMenu.defaultProps = {
        isMenuOpened: false,
    };
    return AggregationsSubMenu;
}(React.Component));
export default AggregationsSubMenu;
//# sourceMappingURL=AggregationsSubMenu.js.map
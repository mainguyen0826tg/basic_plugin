import { GdcMetadata, GdcMetadataObject } from "@gooddata/api-model-bear";
import { ObjectType } from "@gooddata/sdk-model";
import { MetadataObject, IMetadataObject } from "@gooddata/sdk-backend-spi";
export declare type SupportedWrappedMetadataObject = GdcMetadata.IWrappedAttribute | GdcMetadata.IWrappedAttributeDisplayForm | GdcMetadata.IWrappedMetric | GdcMetadata.IWrappedFact | GdcMetadata.IWrappedDataSet | GdcMetadata.IWrappedPrompt | GdcMetadata.IWrappedTheme;
export declare type SupportedMetadataObject = GdcMetadata.IAttribute | GdcMetadata.IAttributeDisplayForm | GdcMetadata.IMetric | GdcMetadata.IFact | GdcMetadata.IDataSet | GdcMetadata.IPrompt | GdcMetadata.ITheme;
export declare const convertMetadataObject: (obj: GdcMetadataObject.IObject) => MetadataObject;
/**
 * Converts xref entry (result of using/usedBy) into IMetadataObject. There's one gotcha: the production indicator
 * is not available in xref entry. Instead of calling out to the backend, this function will hammer in 'true' - which
 * will be right guess in vast majority of cases (hunt me down when this starts causing bugs :)).
 *
 * @param type - specify object type of the xref entry (code ignores the xref category)
 * @param entry - xref entry
 */
export declare const convertMetadataObjectXrefEntry: (type: ObjectType, entry: GdcMetadata.IObjectXrefEntry) => IMetadataObject;
//# sourceMappingURL=MetaConverter.d.ts.map
import { __generator } from "tslib";
import { call, put, select } from "redux-saga/effects";
import { newAbsoluteDashboardDateFilter, newAllTimeDashboardDateFilter, newRelativeDashboardDateFilter, } from "@gooddata/sdk-backend-spi";
import toNumber from "lodash/toNumber";
import { dateFilterChanged } from "../../../events/filters";
import { filterContextActions } from "../../../store/filterContext";
import { selectFilterContextDateFilter } from "../../../store/filterContext/filterContextSelectors";
import { canApplyDateFilter, dispatchFilterContextChanged } from "../common";
import { dispatchDashboardEvent } from "../../../store/_infra/eventDispatcher";
import { invalidArgumentsProvided } from "../../../events/general";
export function changeDateFilterSelectionHandler(ctx, cmd) {
    var isAllTime, canApply, affectedFilter;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                isAllTime = cmd.payload.type === "relative" &&
                    cmd.payload.granularity === "GDC.time.date" &&
                    cmd.payload.from === undefined &&
                    cmd.payload.to === undefined;
                return [4 /*yield*/, call(canApplyDateFilter, dateFilterSelectionToDateFilter(cmd.payload))];
            case 1:
                canApply = _a.sent();
                if (!canApply) {
                    throw invalidArgumentsProvided(ctx, cmd, "Cannot apply a date filter that is invalid by the current dateFilterConfig.");
                }
                return [4 /*yield*/, put(filterContextActions.upsertDateFilter(isAllTime
                        ? { type: "allTime" }
                        : {
                            type: cmd.payload.type,
                            granularity: cmd.payload.granularity,
                            from: cmd.payload.from,
                            to: cmd.payload.to,
                        }))];
            case 2:
                _a.sent();
                return [4 /*yield*/, select(selectFilterContextDateFilter)];
            case 3:
                affectedFilter = _a.sent();
                return [4 /*yield*/, dispatchDashboardEvent(dateFilterChanged(ctx, affectedFilter, cmd.payload.dateFilterOptionLocalId, cmd.correlationId))];
            case 4:
                _a.sent();
                return [4 /*yield*/, call(dispatchFilterContextChanged, ctx, cmd)];
            case 5:
                _a.sent();
                return [2 /*return*/];
        }
    });
}
function dateFilterSelectionToDateFilter(dateFilterSelection) {
    if (dateFilterSelection.type === "absolute" && dateFilterSelection.from && dateFilterSelection.to) {
        return newAbsoluteDashboardDateFilter(dateFilterSelection.from.toString(), dateFilterSelection.to.toString());
    }
    else if (dateFilterSelection.type === "relative" &&
        dateFilterSelection.granularity === "GDC.time.date" &&
        dateFilterSelection.from === undefined &&
        dateFilterSelection.to === undefined) {
        return newAllTimeDashboardDateFilter();
    }
    else {
        return newRelativeDashboardDateFilter(dateFilterSelection.granularity, toNumber(dateFilterSelection.from), toNumber(dateFilterSelection.to));
    }
}
//# sourceMappingURL=changeDateFilterSelectionHandler.js.map
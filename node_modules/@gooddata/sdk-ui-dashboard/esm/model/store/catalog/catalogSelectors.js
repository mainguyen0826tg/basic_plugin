import { __read, __spread } from "tslib";
// (C) 2021 GoodData Corporation
import { createSelector } from "@reduxjs/toolkit";
import flatMap from "lodash/flatMap";
import { newCatalogDateAttributeWithDatasetMap, } from "../../../_staging/catalog/dateAttributeWithDatasetMap";
import { newCatalogAttributeMap, newCatalogDateDatasetMap, newCatalogMeasureMap, } from "../../../_staging/metadata/objRefMap";
import { selectBackendCapabilities } from "../backendCapabilities/backendCapabilitiesSelectors";
import { createDisplayFormMap } from "../../../_staging/catalog/displayFormMap";
var selectSelf = createSelector(function (state) { return state; }, function (state) { return state.catalog; });
/**
 * @public
 */
export var selectCatalogAttributes = createSelector(selectSelf, function (state) {
    var _a;
    return (_a = state.attributes) !== null && _a !== void 0 ? _a : [];
});
/**
 * @public
 */
export var selectCatalogAttributeDisplayForms = createSelector(selectCatalogAttributes, function (attributes) {
    return flatMap(attributes, function (attribute) { return __spread(attribute.displayForms, attribute.geoPinDisplayForms); });
});
/**
 * @public
 */
export var selectCatalogMeasures = createSelector(selectSelf, function (state) {
    var _a;
    return (_a = state.measures) !== null && _a !== void 0 ? _a : [];
});
/**
 * @public
 */
export var selectCatalogFacts = createSelector(selectSelf, function (state) {
    var _a;
    return (_a = state.facts) !== null && _a !== void 0 ? _a : [];
});
/**
 * @public
 */
export var selectCatalogDateDatasets = createSelector(selectSelf, function (state) {
    var _a;
    return (_a = state.dateDatasets) !== null && _a !== void 0 ? _a : [];
});
/**
 * @public
 */
export var selectCatalogDateAttributes = createSelector(selectCatalogDateDatasets, function (dateDatasets) {
    return flatMap(dateDatasets, function (dd) { return dd.dateAttributes; });
});
/**
 * @alpha
 */
export var selectAttributesWithDrillDown = createSelector([selectCatalogAttributes, selectCatalogDateAttributes], function (attributes, dateAttributes) {
    if (attributes === void 0) { attributes = []; }
    if (dateAttributes === void 0) { dateAttributes = []; }
    return __spread(attributes, dateAttributes).filter(function (attr) { return attr.attribute.drillDownStep; });
});
/**
 * @internal
 */
export var selectAttributesWithDisplayFormLink = createSelector([selectCatalogAttributes], function (attributes) {
    if (attributes === void 0) { attributes = []; }
    return attributes.filter(function (attr) { return attr.attribute.drillToAttributeLink; });
});
/**
 * Selects all date datasets in the catalog as a mapping of obj ref to date dataset.
 *
 * @alpha
 */
export var selectAllCatalogDateDatasetsMap = createSelector([selectCatalogDateDatasets, selectBackendCapabilities], function (dateDatasets, capabilities) {
    return newCatalogDateDatasetMap(dateDatasets, capabilities.hasTypeScopedIdentifiers);
});
/**
 * Selects all display forms in the catalog as a mapping of obj ref to display form
 *
 * @alpha
 */
export var selectAllCatalogDisplayFormsMap = createSelector([selectCatalogAttributes, selectCatalogDateDatasets, selectBackendCapabilities], function (attributes, dateDatasets, capabilities) {
    return createDisplayFormMap(attributes, dateDatasets, capabilities.hasTypeScopedIdentifiers);
});
/**
 * Selects all attributes in the catalog as a mapping of ref to catalog's attribute object. The mapping
 * will include both 'normal' attributes and attributes from date datasets.
 *
 * @remarks see `isCatalogAttribute` guard; this can be used to determine type of attribute
 * @alpha
 */
export var selectAllCatalogAttributesMap = createSelector([selectCatalogAttributes, selectCatalogDateDatasets, selectBackendCapabilities], function (attributes, dateDatasets, capabilities) {
    var dateAttributes = flatMap(dateDatasets, function (d) { return d.dateAttributes; });
    return newCatalogAttributeMap(__spread(attributes, dateAttributes), capabilities.hasTypeScopedIdentifiers);
});
/**
 * Selects all measures in the catalog as a mapping of ref to catalog's measure object.
 *
 * @alpha
 */
export var selectAllCatalogMeasuresMap = createSelector([selectCatalogMeasures, selectBackendCapabilities], function (measures, capabilities) {
    return newCatalogMeasureMap(measures, capabilities.hasTypeScopedIdentifiers);
});
/**
 * Selects lookup mapping between date dataset attributes and date datasets. The entry in lookup contains both the date dataset attribute
 * and the date dataset to which it belongs. The lookup is indexed by the date dataset attribute and entries can be obtained using
 * attribute refs.
 *
 * @alpha
 */
export var selectCatalogDateAttributeToDataset = createSelector([selectCatalogDateDatasets, selectBackendCapabilities], function (dateDatasets, capabilities) {
    var attributesWithDatasets = flatMap(dateDatasets, function (dataset) {
        return dataset.dateAttributes.map(function (attribute) {
            return {
                attribute: attribute,
                dataset: dataset,
            };
        });
    });
    return newCatalogDateAttributeWithDatasetMap(attributesWithDatasets, capabilities.hasTypeScopedIdentifiers);
});
//# sourceMappingURL=catalogSelectors.js.map
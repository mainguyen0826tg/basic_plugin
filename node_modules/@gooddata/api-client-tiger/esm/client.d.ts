import { tigerExecutionClientFactory } from "./execution";
import { tigerExecutionResultClientFactory } from "./executionResult";
import { LabelElementsConfiguration, LabelElementsConfigurationParameters, LabelElementsBaseApi, LabelElementsRequestArgs, tigerLabelElementsClientFactory } from "./labelElements";
import { MetadataConfiguration, MetadataConfigurationParameters, MetadataBaseApi, MetadataRequestArgs, tigerWorkspaceObjectsClientFactory } from "./workspaceObjects";
import { tigerValidObjectsClientFactory } from "./validObjects";
import { tigerOrganizationObjectsClientFactory } from "./organizationObjects";
import { AxiosInstance } from "axios";
import { tigerLayoutClientFactory } from "./layout";
import { tigerAfmExplainClientFactory } from "./explain";
export { tigerWorkspaceObjectsClientFactory, tigerExecutionClientFactory, tigerExecutionResultClientFactory, tigerLabelElementsClientFactory, tigerValidObjectsClientFactory, tigerOrganizationObjectsClientFactory, tigerLayoutClientFactory, tigerAfmExplainClientFactory, MetadataConfiguration, MetadataConfigurationParameters, MetadataBaseApi, MetadataRequestArgs, LabelElementsConfiguration, LabelElementsConfigurationParameters, LabelElementsBaseApi, LabelElementsRequestArgs, };
export interface ITigerClient {
    axios: AxiosInstance;
    workspaceObjects: ReturnType<typeof tigerWorkspaceObjectsClientFactory>;
    execution: ReturnType<typeof tigerExecutionClientFactory>;
    executionResult: ReturnType<typeof tigerExecutionResultClientFactory>;
    labelElements: ReturnType<typeof tigerLabelElementsClientFactory>;
    validObjects: ReturnType<typeof tigerValidObjectsClientFactory>;
    organizationObjects: ReturnType<typeof tigerOrganizationObjectsClientFactory>;
    explain: ReturnType<typeof tigerAfmExplainClientFactory>;
    declarativeLayout: ReturnType<typeof tigerLayoutClientFactory>;
    /**
     * Updates tiger client to send the provided API TOKEN in `Authorization` header of all
     * requests.
     *
     * @remarks This is a convenience method that ultimately calls {@link setAxiosAuthorizationToken}.
     * @param token - token to set, if undefined, it will reset
     */
    setApiToken: (token: string | undefined) => void;
}
/**
 * Tiger execution client
 *
 */
export declare const tigerClientFactory: (axios: AxiosInstance) => ITigerClient;
//# sourceMappingURL=client.d.ts.map
import { __extends } from "tslib";
// (C) 2019-2020 GoodData Corporation
import React from "react";
import { FormattedMessage } from "react-intl";
import { Bubble, BubbleHoverTrigger } from "@gooddata/sdk-ui-kit";
import cx from "classnames";
import ConfigurationPanelContent from "./ConfigurationPanelContent";
import LabelSubsection from "../configurationControls/axis/LabelSubsection";
import NameSubsection from "../configurationControls/axis/NameSubsection";
import ConfigSection from "../configurationControls/ConfigSection";
import CheckboxControl from "../configurationControls/CheckboxControl";
import MinMaxControl from "../configurationControls//MinMaxControl";
import { SHOW_DELAY_DEFAULT, HIDE_DELAY_DEFAULT, BUBBLE_ARROW_OFFSET_X, BUBBLE_ARROW_OFFSET_Y, } from "../../constants/bubble";
import { countItemsOnAxes } from "../pluggableVisualizations/baseChart/insightIntrospection";
var BulletChartConfigurationPanel = /** @class */ (function (_super) {
    __extends(BulletChartConfigurationPanel, _super);
    function BulletChartConfigurationPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BulletChartConfigurationPanel.prototype.renderConfigurationPanel = function () {
        var _a = this.props, featureFlags = _a.featureFlags, propertiesMeta = _a.propertiesMeta, properties = _a.properties, pushData = _a.pushData, type = _a.type, insight = _a.insight;
        var controls = (properties && properties.controls) || {};
        var xaxis = controls.xaxis, yaxis = controls.yaxis, grid = controls.grid;
        var xAxisVisible = xaxis && typeof xaxis.visible !== "undefined" ? xaxis.visible : true;
        var yAxisVisible = yaxis && typeof yaxis.visible !== "undefined" ? yaxis.visible : true;
        var gridEnabled = grid && typeof grid.enabled !== "undefined" ? grid.enabled : true;
        var controlsDisabled = this.isControlDisabled();
        var _b = countItemsOnAxes(type, controls, insight), itemsOnXAxis = _b.xaxis, itemsOnYAxis = _b.yaxis;
        var xAxisNameSectionDisabled = controlsDisabled || itemsOnXAxis !== 1;
        var isNameSubsectionVisible = featureFlags.enableAxisNameConfiguration;
        var isAxisLabelsFormatEnabled = featureFlags.enableAxisLabelFormat;
        return (React.createElement(BubbleHoverTrigger, { showDelay: SHOW_DELAY_DEFAULT, hideDelay: HIDE_DELAY_DEFAULT },
            React.createElement("div", null,
                this.renderColorSection(),
                React.createElement(ConfigSection, { id: "xaxis_section", title: "properties.xaxis.title", valuePath: "xaxis.visible", canBeToggled: true, toggledOn: xAxisVisible, toggleDisabled: controlsDisabled, propertiesMeta: propertiesMeta, properties: properties, pushData: pushData },
                    isNameSubsectionVisible && (React.createElement(NameSubsection, { disabled: xAxisNameSectionDisabled, configPanelDisabled: controlsDisabled, axis: "xaxis", properties: properties, pushData: pushData })),
                    React.createElement(LabelSubsection, { disabled: controlsDisabled, configPanelDisabled: controlsDisabled, axis: "xaxis", properties: properties, pushData: pushData, showFormat: isAxisLabelsFormatEnabled }),
                    this.renderMinMax("xaxis")),
                React.createElement(ConfigSection, { id: "yaxis_section", title: "properties.yaxis.title", valuePath: "yaxis.visible", canBeToggled: true, toggledOn: yAxisVisible, toggleDisabled: controlsDisabled, propertiesMeta: propertiesMeta, properties: properties, pushData: pushData },
                    isNameSubsectionVisible && (React.createElement(NameSubsection, { disabled: controlsDisabled || itemsOnYAxis !== 1, configPanelDisabled: controlsDisabled, axis: "yaxis", properties: properties, pushData: pushData })),
                    React.createElement(LabelSubsection, { disabled: controlsDisabled || itemsOnYAxis === 0, configPanelDisabled: controlsDisabled, axis: "yaxis", properties: properties, pushData: pushData })),
                this.renderLegendSection(),
                React.createElement(ConfigSection, { id: "canvas_section", title: "properties.canvas.title", propertiesMeta: propertiesMeta, properties: properties, pushData: pushData },
                    React.createElement(CheckboxControl, { valuePath: "grid.enabled", labelText: "properties.canvas.gridline", properties: properties, checked: gridEnabled, disabled: controlsDisabled, pushData: pushData }))),
            React.createElement(Bubble, { className: this.getBubbleClassNames(), arrowOffsets: { "tc bc": [BUBBLE_ARROW_OFFSET_X, BUBBLE_ARROW_OFFSET_Y] }, alignPoints: [{ align: "tc bc" }] },
                React.createElement(FormattedMessage, { id: "properties.config.not_applicable" }))));
    };
    BulletChartConfigurationPanel.prototype.renderMinMax = function (basePath) {
        var _a = this.props, pushData = _a.pushData, properties = _a.properties, propertiesMeta = _a.propertiesMeta;
        return (React.createElement(MinMaxControl, { isDisabled: this.isControlDisabled(), basePath: basePath, pushData: pushData, properties: properties, propertiesMeta: propertiesMeta }));
    };
    BulletChartConfigurationPanel.prototype.getBubbleClassNames = function () {
        return cx("bubble-primary", {
            invisible: !this.isControlDisabled(),
        });
    };
    return BulletChartConfigurationPanel;
}(ConfigurationPanelContent));
export default BulletChartConfigurationPanel;
//# sourceMappingURL=BulletChartConfigurationPanel.js.map
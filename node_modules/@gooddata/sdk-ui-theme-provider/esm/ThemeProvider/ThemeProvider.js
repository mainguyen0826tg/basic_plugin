import { __awaiter, __generator } from "tslib";
// (C) 2020 GoodData Corporation
import React, { useEffect, useState, useRef } from "react";
import { getLuminance } from "polished";
import identity from "lodash/identity";
import { useBackend, useWorkspace } from "@gooddata/sdk-ui";
import { clearCssProperties, setCssProperties } from "../cssProperties";
import { ThemeContextProvider } from "./Context";
import { prepareTheme } from "./prepareTheme";
/**
 * @internal
 */
export var isDarkTheme = function (theme) {
    var _a, _b, _c, _d;
    var firstColor = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _a === void 0 ? void 0 : _a.complementary) === null || _b === void 0 ? void 0 : _b.c0;
    var lastColor = (_d = (_c = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _c === void 0 ? void 0 : _c.complementary) === null || _d === void 0 ? void 0 : _d.c9;
    if (!firstColor || !lastColor) {
        return false;
    }
    return getLuminance(firstColor) < getLuminance(lastColor);
};
/**
 * Fetches the theme object from the backend upon mounting and passes both theme object and isThemeLoading flag
 * to the context via ThemeContextProvider
 *
 * Converts properties from theme object into CSS variables and injects them into <body> via setCssProperties
 *
 * Both backend and workspace can be passed as an arguments, otherwise the component tries to get these from the context
 *
 * @public
 */
export var ThemeProvider = function (_a) {
    var children = _a.children, themeParam = _a.theme, backendParam = _a.backend, workspaceParam = _a.workspace, _b = _a.modifier, modifier = _b === void 0 ? identity : _b, _c = _a.enableComplementaryPalette, enableComplementaryPalette = _c === void 0 ? true : _c;
    var backend = useBackend(backendParam);
    var workspace = useWorkspace(workspaceParam);
    var _d = useState(themeParam !== null && themeParam !== void 0 ? themeParam : {}), theme = _d[0], setTheme = _d[1];
    var _e = useState(false), isLoading = _e[0], setIsLoading = _e[1];
    var lastWorkspace = useRef();
    lastWorkspace.current = workspace;
    useEffect(function () {
        clearCssProperties();
        // no need to load anything if the themeParam is present
        if (themeParam) {
            var preparedTheme = prepareTheme(themeParam, enableComplementaryPalette);
            setTheme(preparedTheme);
            setCssProperties(preparedTheme, isDarkTheme(preparedTheme));
            return;
        }
        var fetchData = function () { return __awaiter(void 0, void 0, void 0, function () {
            var selectedTheme, modifiedTheme, preparedTheme;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!backend || !workspace) {
                            return [2 /*return*/];
                        }
                        setIsLoading(true);
                        return [4 /*yield*/, backend.workspace(workspace).styling().getTheme()];
                    case 1:
                        selectedTheme = _a.sent();
                        if (lastWorkspace.current === workspace) {
                            modifiedTheme = modifier(selectedTheme);
                            preparedTheme = prepareTheme(modifiedTheme, enableComplementaryPalette);
                            setTheme(preparedTheme);
                            setIsLoading(false);
                            setCssProperties(preparedTheme, isDarkTheme(preparedTheme));
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        fetchData();
    }, [themeParam, workspace, backend]);
    useEffect(function () {
        return function () {
            clearCssProperties();
        };
    }, []);
    return (React.createElement(ThemeContextProvider, { theme: theme, themeIsLoading: isLoading }, children));
};
//# sourceMappingURL=ThemeProvider.js.map
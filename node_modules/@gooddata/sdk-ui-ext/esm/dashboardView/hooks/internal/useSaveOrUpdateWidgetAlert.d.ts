import { IAnalyticalBackend, IWidgetAlert, IWidgetAlertDefinition } from "@gooddata/sdk-backend-spi";
import { GoodDataSdkError, UseCancelablePromiseCallbacks, UseCancelablePromiseState } from "@gooddata/sdk-ui";
interface IUseSaveOrUpdateWidgetAlertConfig extends UseCancelablePromiseCallbacks<IWidgetAlert, GoodDataSdkError> {
    /**
     * Widget alert to save or update.
     */
    widgetAlert?: IWidgetAlertDefinition | IWidgetAlert;
    /**
     * Backend to work with.
     *
     * Note: the backend must come either from this property or from BackendContext. If you do not specify
     * backend here, then the hook MUST be called within an existing BackendContext.
     */
    backend?: IAnalyticalBackend;
    /**
     * Workspace to work with.
     *
     * Note: the workspace must come either from this property or from WorkspaceContext. If you do not specify
     * workspace here, then the hook MUST be called within an existing WorkspaceContext.
     */
    workspace?: string;
}
/**
 * Hook allowing to save a widget alert
 * @param config - configuration of the hook
 * @internal
 */
export declare function useSaveOrUpdateWidgetAlert({ widgetAlert, backend, workspace, onCancel, onError, onLoading, onPending, onSuccess, }: IUseSaveOrUpdateWidgetAlertConfig): UseCancelablePromiseState<IWidgetAlert, any>;
export {};
//# sourceMappingURL=useSaveOrUpdateWidgetAlert.d.ts.map
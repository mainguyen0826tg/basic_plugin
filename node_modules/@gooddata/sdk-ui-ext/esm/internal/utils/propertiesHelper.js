import { __assign } from "tslib";
// (C) 2019-2020 GoodData Corporation
// eslint-disable-next-line no-restricted-imports -- unfortunately, the get syntax is used heavily here for the supported properties
import get from "lodash/get";
import has from "lodash/has";
import set from "lodash/set";
import keys from "lodash/keys";
import isEmpty from "lodash/isEmpty";
import cloneDeep from "lodash/cloneDeep";
import { BucketNames } from "@gooddata/sdk-ui";
import { AXIS } from "../constants/axis";
import { getItemsCount, getItemsLocalIdentifiers, getMeasureItems, getAllMeasuresShowOnSecondaryAxis, } from "./bucketHelper";
import { PROPERTY_CONTROLS } from "../constants/properties";
import { UICONFIG_AXIS } from "../constants/uiConfig";
import { OPTIONAL_STACKING_PROPERTIES } from "../constants/supportedProperties";
export function getSupportedPropertiesControls(visualizationControlsProperties, supportedPropertiesList) {
    var clonedControls = cloneDeep(visualizationControlsProperties);
    if (supportedPropertiesList) {
        return supportedPropertiesList.reduce(function (props, current) {
            return has(clonedControls, current) ? set(props, current, get(clonedControls, current)) : props;
        }, {});
    }
    return {};
}
export function hasColorMapping(properties) {
    var _a;
    return !!((_a = properties === null || properties === void 0 ? void 0 : properties.controls) === null || _a === void 0 ? void 0 : _a.colorMapping);
}
export function setSecondaryMeasures(referencePoint, axisName) {
    var _a;
    var _b, _c, _d;
    if (!axisName) {
        return referencePoint;
    }
    var newReferencePoint = cloneDeep(referencePoint);
    var path = PROPERTY_CONTROLS + "." + axisName;
    var secondaryAxisProperties = (_c = (_b = newReferencePoint === null || newReferencePoint === void 0 ? void 0 : newReferencePoint.properties) === null || _b === void 0 ? void 0 : _b.controls) === null || _c === void 0 ? void 0 : _c[axisName];
    var buckets = (_d = newReferencePoint === null || newReferencePoint === void 0 ? void 0 : newReferencePoint.buckets) !== null && _d !== void 0 ? _d : [];
    var allMeasures = getMeasureItems(buckets);
    var secondaryMeasures = getAllMeasuresShowOnSecondaryAxis(buckets);
    if (!secondaryAxisProperties && !secondaryMeasures.length) {
        return referencePoint;
    }
    var secondaryAxis = __assign(__assign({}, secondaryAxisProperties), { measures: getItemsLocalIdentifiers(secondaryMeasures) });
    var axis = (_a = {
            0: AXIS.PRIMARY
        },
        _a[allMeasures.length] = AXIS.SECONDARY,
        _a)[secondaryMeasures.length] || AXIS.DUAL;
    set(newReferencePoint, path, secondaryAxis);
    set(newReferencePoint, UICONFIG_AXIS, axis);
    return newReferencePoint;
}
export function isEmptyObject(obj) {
    return obj && keys(obj).length === 0;
}
export function getSupportedProperties(visualizationProperties, supportedPropertiesList) {
    var _a;
    var controls = (_a = visualizationProperties === null || visualizationProperties === void 0 ? void 0 : visualizationProperties.controls) !== null && _a !== void 0 ? _a : {};
    var supportedControls = getSupportedPropertiesControls(controls, supportedPropertiesList);
    return isEmpty(supportedControls)
        ? {}
        : {
            controls: supportedControls,
        };
}
export function getReferencePointWithSupportedProperties(referencePoint, supportedPropertiesList) {
    var _a;
    var supportedControlsProperties = referencePoint.properties
        ? getSupportedPropertiesControls(referencePoint.properties.controls, supportedPropertiesList)
        : {};
    if (isEmpty(supportedControlsProperties)) {
        var sortItems = referencePoint.properties && referencePoint.properties.sortItems;
        var sortItemsExpand = sortItems && !isEmpty(sortItems) ? { sortItems: sortItems } : {};
        return __assign(__assign({}, referencePoint), { properties: __assign({}, sortItemsExpand) });
    }
    var buckets = (_a = referencePoint === null || referencePoint === void 0 ? void 0 : referencePoint.buckets) !== null && _a !== void 0 ? _a : [];
    var stackCount = getItemsCount(buckets, BucketNames.STACK);
    var stackMeasuresToPercent = Boolean(supportedControlsProperties.stackMeasuresToPercent);
    if (!stackCount && stackMeasuresToPercent) {
        supportedControlsProperties.stackMeasures = true;
    }
    return __assign(__assign({}, referencePoint), { properties: __assign(__assign({}, referencePoint.properties), { controls: supportedControlsProperties }) });
}
export function isStackingMeasure(properties) {
    var _a, _b;
    return (_b = (_a = properties === null || properties === void 0 ? void 0 : properties.controls) === null || _a === void 0 ? void 0 : _a.stackMeasures) !== null && _b !== void 0 ? _b : false;
}
export function isStackingToPercent(properties) {
    var _a, _b;
    return (_b = (_a = properties === null || properties === void 0 ? void 0 : properties.controls) === null || _a === void 0 ? void 0 : _a.stackMeasuresToPercent) !== null && _b !== void 0 ? _b : false;
}
export function isDualAxisOrSomeSecondaryAxisMeasure(extReferencePoint, secondaryMeasures) {
    var _a, _b, _c;
    return (((_c = (_b = (_a = extReferencePoint === null || extReferencePoint === void 0 ? void 0 : extReferencePoint.properties) === null || _a === void 0 ? void 0 : _a.controls) === null || _b === void 0 ? void 0 : _b.dualAxis) !== null && _c !== void 0 ? _c : true) ||
        secondaryMeasures.some(function (item) { return item === null || item === void 0 ? void 0 : item.showOnSecondaryAxis; }));
}
export function removeImmutableOptionalStackingProperties(referencePoint, supportedPropertiesList) {
    var _a;
    var buckets = (_a = referencePoint === null || referencePoint === void 0 ? void 0 : referencePoint.buckets) !== null && _a !== void 0 ? _a : [];
    var immutableProperties = [];
    if (getItemsCount(buckets, BucketNames.MEASURES) <= 1) {
        immutableProperties = OPTIONAL_STACKING_PROPERTIES;
    }
    if (getItemsCount(buckets, BucketNames.STACK)) {
        immutableProperties = OPTIONAL_STACKING_PROPERTIES.slice(0, 1);
    }
    return supportedPropertiesList.filter(function (property) {
        return !immutableProperties.some(function (immutableProperty) { return immutableProperty === property; });
    });
}
// mapping between AD and SDK values
var AXIS_NAME_POSITION_MAPPING = {
    auto: "middle",
    bottom: "low",
    middle: "middle",
    top: "high",
    left: "low",
    center: "middle",
    right: "high",
};
var AXIS_TYPES = ["xaxis", "yaxis", "secondary_xaxis", "secondary_yaxis"];
export function getHighchartsAxisNameConfiguration(controlProperties, enableAxisNameConfiguration) {
    if (enableAxisNameConfiguration === void 0) { enableAxisNameConfiguration = false; }
    var axisProperties = AXIS_TYPES.reduce(function (result, axis) {
        var _a;
        var axisNameConfig = (_a = controlProperties === null || controlProperties === void 0 ? void 0 : controlProperties[axis]) === null || _a === void 0 ? void 0 : _a.name;
        if (isEmpty(axisNameConfig)) {
            return result;
        }
        axisNameConfig.position =
            AXIS_NAME_POSITION_MAPPING[enableAxisNameConfiguration ? axisNameConfig.position : AXIS_NAME_POSITION_MAPPING.auto];
        result[axis] = __assign(__assign({}, controlProperties[axis]), { name: axisNameConfig });
        return result;
    }, {});
    return __assign(__assign({}, controlProperties), axisProperties);
}
export function getDataPointsConfiguration(controlProperties, enableHidingOfDataPoints) {
    var _a;
    if (enableHidingOfDataPoints === void 0) { enableHidingOfDataPoints = false; }
    if (enableHidingOfDataPoints) {
        var dataPointsVisible = (_a = controlProperties.dataPoints) === null || _a === void 0 ? void 0 : _a.visible;
        return __assign(__assign({}, controlProperties), { dataPoints: {
                visible: dataPointsVisible !== undefined ? dataPointsVisible : "auto",
            } });
    }
    return __assign(__assign({}, controlProperties), { dataPoints: {
            visible: undefined,
        } });
}
export function getColumnWidthsFromProperties(visualizationProperties) {
    var _a;
    return (_a = visualizationProperties === null || visualizationProperties === void 0 ? void 0 : visualizationProperties.controls) === null || _a === void 0 ? void 0 : _a.columnWidths;
}
//# sourceMappingURL=propertiesHelper.js.map
import { __extends } from "tslib";
import { PluggableHeatmap } from "./PluggableHeatmap";
import { BigChartDescriptor } from "../BigChartDescriptor";
import { isDrillIntersectionAttributeItem } from "@gooddata/sdk-ui";
import { drillDownFromAttributeLocalId } from "../../../utils/ImplicitDrillDownHelper";
import { addIntersectionFiltersToInsight, modifyBucketsAttributesForDrillDown } from "../drillDownUtil";
var HeatmapDescriptor = /** @class */ (function (_super) {
    __extends(HeatmapDescriptor, _super);
    function HeatmapDescriptor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeatmapDescriptor.prototype.getFactory = function () {
        return function (params) { return new PluggableHeatmap(params); };
    };
    HeatmapDescriptor.prototype.applyDrillDown = function (insight, drillDownContext) {
        var withFilters = this.addFilters(insight, drillDownContext.drillDefinition, drillDownContext.event);
        return modifyBucketsAttributesForDrillDown(withFilters, drillDownContext.drillDefinition);
    };
    HeatmapDescriptor.prototype.addFilters = function (source, drillConfig, event) {
        var clicked = drillDownFromAttributeLocalId(drillConfig);
        var cutIntersection = (event.drillContext.intersection || []).filter(function (i) {
            return isDrillIntersectionAttributeItem(i.header) &&
                i.header.attributeHeader.localIdentifier === clicked;
        });
        return addIntersectionFiltersToInsight(source, cutIntersection);
    };
    return HeatmapDescriptor;
}(BigChartDescriptor));
export { HeatmapDescriptor };
//# sourceMappingURL=HeatmapDescriptor.js.map
import { IAnalyticalBackend, IDashboardLayout, IWidget } from "@gooddata/sdk-backend-spi";
import { GoodDataSdkError, UseCancelablePromiseCallbacks, UseCancelablePromiseState, VisType } from "@gooddata/sdk-ui";
import { IInsight, ObjRef } from "@gooddata/sdk-model";
/**
 * @beta
 * @deprecated superseded by Dashboard component; please see `@gooddata/sdk-ui-dashboard` and GoodData.UI documentation for v8.7
 */
export interface IUseDashboardLayoutDataResult {
    getVisType: (widget: IWidget) => VisType | undefined;
    getInsightByRef: (insightRef: ObjRef) => IInsight | undefined;
}
/**
 * @beta
 * @deprecated superseded by Dashboard component; please see `@gooddata/sdk-ui-dashboard` and GoodData.UI documentation for v8.7
 */
export interface IUseDashboardLayoutDataConfig extends UseCancelablePromiseCallbacks<IUseDashboardLayoutDataResult, GoodDataSdkError> {
    /**
     * Dashboard layout to transform to view model.
     */
    dashboardLayout: IDashboardLayout | undefined;
    /**
     * Backend to work with.
     *
     * Note: the backend must come either from this property or from BackendContext. If you do not specify
     * backend here, then the hook MUST be called within an existing BackendContext.
     */
    backend?: IAnalyticalBackend;
    /**
     * Workspace where the insight exists.
     *
     * Note: the workspace must come either from this property or from WorkspaceContext. If you do not specify
     * workspace here, then the hook MUST be called within an existing WorkspaceContext.
     */
    workspace?: string;
}
/**
 * Hook allowing to download additional dashboard layout data (visualization classes and insights)
 * @param config - configuration of the hook
 * @beta
 * @deprecated superseded by Dashboard component; please see `@gooddata/sdk-ui-dashboard` and GoodData.UI documentation for v8.7
 */
export declare const useDashboardLayoutData: ({ dashboardLayout, backend, workspace, onCancel, onError, onLoading, onPending, onSuccess, }: IUseDashboardLayoutDataConfig) => UseCancelablePromiseState<IUseDashboardLayoutDataResult, any>;
//# sourceMappingURL=useDashboardLayoutData.d.ts.map
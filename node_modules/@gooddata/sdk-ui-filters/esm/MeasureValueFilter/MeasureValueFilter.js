import { __assign, __extends } from "tslib";
// (C) 2020 GoodData Corporation
import React from "react";
import noop from "lodash/noop";
import { MeasureValueFilterDropdown } from "./MeasureValueFilterDropdown";
import MeasureValueFilterButton from "./MeasureValueFilterButton";
/**
 * @beta
 */
var MeasureValueFilter = /** @class */ (function (_super) {
    __extends(MeasureValueFilter, _super);
    function MeasureValueFilter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            displayDropdown: false,
        };
        _this.buttonRef = React.createRef();
        _this.onApply = function (filter) {
            _this.closeDropdown();
            _this.props.onApply(filter);
        };
        _this.onCancel = function () {
            _this.closeDropdown();
            _this.props.onCancel();
        };
        _this.closeDropdown = function () {
            _this.setState({ displayDropdown: false });
        };
        _this.toggleDropdown = function () {
            _this.setState(function (state) { return (__assign(__assign({}, state), { displayDropdown: !state.displayDropdown })); });
        };
        return _this;
    }
    MeasureValueFilter.prototype.render = function () {
        var displayDropdown = this.state.displayDropdown;
        var _a = this.props, filter = _a.filter, measureIdentifier = _a.measureIdentifier, buttonTitle = _a.buttonTitle, usePercentage = _a.usePercentage, warningMessage = _a.warningMessage, locale = _a.locale, separators = _a.separators, displayTreatNullAsZeroOption = _a.displayTreatNullAsZeroOption, treatNullAsZeroDefaultValue = _a.treatNullAsZeroDefaultValue, enableOperatorSelection = _a.enableOperatorSelection;
        return (React.createElement(React.Fragment, null,
            React.createElement("div", { ref: this.buttonRef },
                React.createElement(MeasureValueFilterButton, { onClick: this.toggleDropdown, isActive: displayDropdown, buttonTitle: buttonTitle })),
            displayDropdown ? (React.createElement(MeasureValueFilterDropdown, { onApply: this.onApply, onCancel: this.onCancel, filter: filter, measureIdentifier: measureIdentifier, usePercentage: usePercentage, warningMessage: warningMessage, locale: locale, separators: separators, displayTreatNullAsZeroOption: displayTreatNullAsZeroOption, treatNullAsZeroDefaultValue: treatNullAsZeroDefaultValue, enableOperatorSelection: enableOperatorSelection, anchorEl: this.buttonRef.current })) : null));
    };
    MeasureValueFilter.defaultProps = {
        onCancel: noop,
    };
    return MeasureValueFilter;
}(React.PureComponent));
export { MeasureValueFilter };
//# sourceMappingURL=MeasureValueFilter.js.map
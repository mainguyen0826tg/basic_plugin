import { __awaiter, __generator } from "tslib";
import { selectAllCatalogDisplayFormsMap } from "../store/catalog/catalogSelectors";
import { call, select } from "redux-saga/effects";
import { newDisplayFormMap } from "../../_staging/metadata/objRefMap";
function loadDisplayFormsMetadata(ctx, refs) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (!refs.length) {
                return [2 /*return*/, []];
            }
            return [2 /*return*/, ctx.backend.workspace(ctx.workspace).attributes().getAttributeDisplayForms(refs)];
        });
    });
}
/**
 * Given a set of display form refs (which may be of any type.. uri or id), this function returns a list of
 * attribute display form metadata objects.
 *
 * @param ctx dashboard context in which the resolution is done
 * @param refs ObjRefs of display forms; the type of ObjRef can be either uri or id ref, the function will resolve it regardless
 * @param displayForms optionally specify mapping of display forms to use for in-memory resolution of refs to metadata objects; if
 *  not specified, the generator will retrieve all catalog display forms from state
 */
export function resolveDisplayFormMetadata(ctx, refs, displayForms) {
    var catalogDisplayForms, _a, resolvedDisplayForms, tryLoadDisplayForms, loadedDisplayForms, loadedDisplayFormsMap, missing;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (!displayForms) return [3 /*break*/, 1];
                _a = displayForms;
                return [3 /*break*/, 3];
            case 1: return [4 /*yield*/, select(selectAllCatalogDisplayFormsMap)];
            case 2:
                _a = _b.sent();
                _b.label = 3;
            case 3:
                catalogDisplayForms = _a;
                resolvedDisplayForms = [];
                tryLoadDisplayForms = [];
                refs.forEach(function (ref) {
                    var catalogDisplayForm = catalogDisplayForms.get(ref);
                    if (catalogDisplayForm) {
                        resolvedDisplayForms.push(catalogDisplayForm);
                    }
                    else {
                        tryLoadDisplayForms.push(ref);
                    }
                });
                return [4 /*yield*/, call(loadDisplayFormsMetadata, ctx, tryLoadDisplayForms)];
            case 4:
                loadedDisplayForms = _b.sent();
                loadedDisplayFormsMap = newDisplayFormMap(loadedDisplayForms);
                missing = [];
                tryLoadDisplayForms.forEach(function (ref) {
                    var loadedDisplayForm = loadedDisplayFormsMap.get(ref);
                    if (loadedDisplayForm) {
                        resolvedDisplayForms.push(loadedDisplayForm);
                    }
                    else {
                        missing.push(ref);
                    }
                });
                return [2 /*return*/, {
                        resolved: newDisplayFormMap(resolvedDisplayForms),
                        missing: missing,
                    }];
        }
    });
}
//# sourceMappingURL=displayFormResolver.js.map
// (C) 2019-2021 GoodData Corporation
import { __assign } from "tslib";
import { GdcDashboardLayout, GdcVisualizationObject } from "@gooddata/api-model-bear";
import { uriRef, idRef, areObjRefsEqual } from "@gooddata/sdk-model";
// Default layout column size for the kpi widget, when generating implicit layout
var KPI_SIZE = 2;
// Default layout column size for the visualization widget, when generating implicit layout
var VISUALIZATION_SIZE = 12;
export var convertLayoutSize = function (size) {
    var converted = {
        gridWidth: size.width,
    };
    if (size.height) {
        converted.gridHeight = size.height;
    }
    if (size.heightAsRatio) {
        converted.heightAsRatio = size.heightAsRatio;
    }
    return converted;
};
export var convertLayoutItemSize = function (column) {
    var allScreens = ["xl", "md", "lg", "sm", "xs"];
    return allScreens.reduce(function (acc, el) {
        var _a;
        var size = column[el];
        if (size) {
            return __assign(__assign({}, acc), (_a = {}, _a[el] = convertLayoutSize(size), _a));
        }
        return acc;
    }, {});
};
var convertLayoutItem = function (column, widgetDependencies) {
    var content = column.content;
    if (GdcDashboardLayout.isLayoutWidget(content)) {
        var widget = widgetDependencies.find(function (dep) {
            var qualifier = content.widget.qualifier;
            if (GdcVisualizationObject.isObjUriQualifier(qualifier)) {
                return areObjRefsEqual(uriRef(qualifier.uri), dep.ref);
            }
            return areObjRefsEqual(idRef(qualifier.identifier), dep.ref);
        });
        return {
            type: "IDashboardLayoutItem",
            size: convertLayoutItemSize(column.size),
            widget: widget,
        };
    }
    else if (GdcDashboardLayout.isFluidLayout(content)) {
        return {
            type: "IDashboardLayoutItem",
            widget: convertLayout(content, widgetDependencies),
            size: convertLayoutItemSize(column.size),
        };
    }
    return {
        type: "IDashboardLayoutItem",
        size: convertLayoutItemSize(column.size),
    };
};
var convertLayoutSection = function (row, widgetDependencies) {
    var section = {
        type: "IDashboardLayoutSection",
        items: row.columns.map(function (column) { return convertLayoutItem(column, widgetDependencies); }),
    };
    if (row.header) {
        section.header = row.header;
    }
    return section;
};
export var convertLayout = function (layout, widgetDependencies) {
    var rows = layout.fluidLayout.rows, fluidLayout = layout.fluidLayout;
    var convertedLayout = {
        type: "IDashboardLayout",
        sections: rows.map(function (row) { return convertLayoutSection(row, widgetDependencies); }),
    };
    if (fluidLayout.size) {
        convertedLayout.size = convertLayoutSize(fluidLayout.size);
    }
    return convertedLayout;
};
/**
 * Create {@link ILegacyDashboardLayout} from {@link IWidget} items. As widgets do not contain any layout information,
 * implicit layout with a single row will be generated.
 *
 * @returns fluid layout created from the widgets
 */
export function createImplicitDashboardLayout(widgets, dependencies, visualizationClasses) {
    if (widgets.length < 1) {
        return undefined;
    }
    var sections = createLayoutSections(widgets, dependencies, visualizationClasses);
    return {
        type: "IDashboardLayout",
        sections: sections,
    };
}
function createLayoutSections(widgets, dependencies, visualizationClasses) {
    return [
        {
            type: "IDashboardLayoutSection",
            items: createLayoutItems(widgets, dependencies, visualizationClasses),
        },
    ];
}
function createLayoutItems(widgets, dependencies, visualizationClasses) {
    return widgets.map(function (widget) { return createLayoutItem(widget, dependencies, visualizationClasses); });
}
function createLayoutItem(widget, dependencies, visualizationClasses) {
    return {
        type: "IDashboardLayoutItem",
        widget: widget,
        size: {
            xl: {
                gridWidth: implicitWidgetWidth(widget, dependencies, visualizationClasses),
            },
        },
    };
}
function implicitWidgetWidth(widget, dependencies, visualizationClasses) {
    if (widget.type === "kpi") {
        return KPI_SIZE;
    }
    var visualizationUri = widget.insight.uri;
    var vis = dependencies.find(function (v) {
        return GdcVisualizationObject.isVisualization(v) && v.visualizationObject.meta.uri === visualizationUri;
    });
    var visualizationClassUri = vis.visualizationObject.content.visualizationClass.uri;
    var visualizationClass = visualizationClasses.find(function (visClass) { return visClass.visualizationClass.meta.uri === visualizationClassUri; });
    return implicitInsightWidth(visualizationClass);
}
function implicitInsightWidth(visualizationClass) {
    var visualizationType = visualizationClass.visualizationClass.content.url.split(":")[1];
    return visualizationType === "headline" ? KPI_SIZE : VISUALIZATION_SIZE;
}
//# sourceMappingURL=layout.js.map
import { __read, __spread } from "tslib";
// (C) 2007-2021 GoodData Corporation
import { useState, useEffect } from "react";
import { usePromiseCache } from "./usePromiseCache";
/**
 * Hook for getting data from paged resource
 * @public
 */
export function usePagedResource(resourceFactory, fetchParams, fetchDeps, resetDeps, getCacheKey, initialState) {
    if (initialState === void 0) { initialState = {
        totalItemsCount: undefined,
        items: [],
    }; }
    var _a = __read(useState(initialState), 2), state = _a[0], setState = _a[1];
    var reset = function () { return setState(initialState); };
    var mergeResult = function (result) {
        return setState(function (state) {
            var isFirstResult = typeof state.totalItemsCount === "undefined";
            var items = isFirstResult ? new Array(result.totalCount) : __spread(state.items);
            items.splice.apply(items, __spread([result.offset, result.limit], result.items));
            return {
                totalItemsCount: result.totalCount,
                items: items,
            };
        });
    };
    var _b = usePromiseCache(resourceFactory, fetchParams, fetchDeps, resetDeps, getCacheKey), isLoading = _b.isLoading, results = _b.results;
    useEffect(function () {
        // We want to reset state only after resetDeps are changed, not on first run
        return function () {
            reset();
        };
    }, resetDeps);
    useEffect(function () {
        results.forEach(mergeResult);
    }, [results]);
    var items = state.items, totalItemsCount = state.totalItemsCount;
    return {
        isLoading: isLoading,
        items: items,
        totalItemsCount: totalItemsCount,
    };
}
//# sourceMappingURL=usePagedResource.js.map
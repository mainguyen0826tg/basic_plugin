// (C) 2019-2020 GoodData Corporation
import isArray from "lodash/isArray";
import isEmpty from "lodash/isEmpty";
/**
 * Types defined here exactly match types accepted by the executeAfm resource.
 *
 * Types currently map executeAfm version 3.
 *
 * @public
 */
export var GdcExecuteAFM;
(function (GdcExecuteAFM) {
    function isObjectUriQualifier(qualifier) {
        return !isEmpty(qualifier) && qualifier.uri !== undefined;
    }
    GdcExecuteAFM.isObjectUriQualifier = isObjectUriQualifier;
    function isObjIdentifierQualifier(qualifier) {
        return (!isEmpty(qualifier) &&
            qualifier.identifier !== undefined);
    }
    GdcExecuteAFM.isObjIdentifierQualifier = isObjIdentifierQualifier;
    function isLocalIdentifierQualifier(qualifier) {
        return (!isEmpty(qualifier) &&
            qualifier.localIdentifier !== undefined);
    }
    GdcExecuteAFM.isLocalIdentifierQualifier = isLocalIdentifierQualifier;
    function isSimpleMeasureDefinition(definition) {
        return (!isEmpty(definition) &&
            definition.measure !== undefined);
    }
    GdcExecuteAFM.isSimpleMeasureDefinition = isSimpleMeasureDefinition;
    function isArithmeticMeasureDefinition(definition) {
        return (!isEmpty(definition) &&
            definition.arithmeticMeasure !== undefined);
    }
    GdcExecuteAFM.isArithmeticMeasureDefinition = isArithmeticMeasureDefinition;
    function isPopMeasureDefinition(definition) {
        return (!isEmpty(definition) &&
            definition.popMeasure !== undefined);
    }
    GdcExecuteAFM.isPopMeasureDefinition = isPopMeasureDefinition;
    function isPreviousPeriodMeasureDefinition(definition) {
        return (!isEmpty(definition) &&
            definition.previousPeriodMeasure !== undefined);
    }
    GdcExecuteAFM.isPreviousPeriodMeasureDefinition = isPreviousPeriodMeasureDefinition;
    function isAttributeSortItem(sortItem) {
        return (!isEmpty(sortItem) &&
            sortItem.attributeSortItem !== undefined);
    }
    GdcExecuteAFM.isAttributeSortItem = isAttributeSortItem;
    function isMeasureSortItem(sortItem) {
        return (!isEmpty(sortItem) && sortItem.measureSortItem !== undefined);
    }
    GdcExecuteAFM.isMeasureSortItem = isMeasureSortItem;
    function isAttributeLocatorItem(locator) {
        return (!isEmpty(locator) &&
            locator.attributeLocatorItem !== undefined);
    }
    GdcExecuteAFM.isAttributeLocatorItem = isAttributeLocatorItem;
    function isMeasureLocatorItem(locator) {
        return (!isEmpty(locator) &&
            locator.measureLocatorItem !== undefined);
    }
    GdcExecuteAFM.isMeasureLocatorItem = isMeasureLocatorItem;
    function isDateFilter(filter) {
        return !isEmpty(filter) && (isRelativeDateFilter(filter) || isAbsoluteDateFilter(filter));
    }
    GdcExecuteAFM.isDateFilter = isDateFilter;
    function isRelativeDateFilter(filter) {
        return !isEmpty(filter) && filter.relativeDateFilter !== undefined;
    }
    GdcExecuteAFM.isRelativeDateFilter = isRelativeDateFilter;
    function isAbsoluteDateFilter(filter) {
        return !isEmpty(filter) && filter.absoluteDateFilter !== undefined;
    }
    GdcExecuteAFM.isAbsoluteDateFilter = isAbsoluteDateFilter;
    function isAttributeFilter(filter) {
        return !isEmpty(filter) && (isPositiveAttributeFilter(filter) || isNegativeAttributeFilter(filter));
    }
    GdcExecuteAFM.isAttributeFilter = isAttributeFilter;
    function isPositiveAttributeFilter(filter) {
        return (!isEmpty(filter) &&
            filter.positiveAttributeFilter !== undefined);
    }
    GdcExecuteAFM.isPositiveAttributeFilter = isPositiveAttributeFilter;
    function isNegativeAttributeFilter(filter) {
        return (!isEmpty(filter) &&
            filter.negativeAttributeFilter !== undefined);
    }
    GdcExecuteAFM.isNegativeAttributeFilter = isNegativeAttributeFilter;
    function isMeasureValueFilter(filter) {
        return (!isEmpty(filter) && filter.measureValueFilter !== undefined);
    }
    GdcExecuteAFM.isMeasureValueFilter = isMeasureValueFilter;
    function isRankingFilter(filter) {
        return !isEmpty(filter) && filter.rankingFilter !== undefined;
    }
    GdcExecuteAFM.isRankingFilter = isRankingFilter;
    function isExpressionFilter(filter) {
        return !isEmpty(filter) && filter.expression !== undefined;
    }
    GdcExecuteAFM.isExpressionFilter = isExpressionFilter;
    function isAttributeElementsArray(attributeElements) {
        return attributeElements !== undefined && attributeElements instanceof Array;
    }
    GdcExecuteAFM.isAttributeElementsArray = isAttributeElementsArray;
    function isAttributeElementsByRef(attributeElements) {
        return (!isEmpty(attributeElements) &&
            attributeElements.uris !== undefined);
    }
    GdcExecuteAFM.isAttributeElementsByRef = isAttributeElementsByRef;
    function isAttributeElementsByValue(attributeElements) {
        return (!isEmpty(attributeElements) &&
            !isArray(attributeElements) &&
            attributeElements.values !== undefined);
    }
    GdcExecuteAFM.isAttributeElementsByValue = isAttributeElementsByValue;
})(GdcExecuteAFM || (GdcExecuteAFM = {}));
//# sourceMappingURL=GdcExecuteAFM.js.map
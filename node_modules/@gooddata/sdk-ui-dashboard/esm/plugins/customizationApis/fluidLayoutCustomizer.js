import { DashboardLayoutBuilder } from "../../_staging/dashboard/fluidLayout";
import isEmpty from "lodash/isEmpty";
import cloneDeep from "lodash/cloneDeep";
var FluidLayoutCustomizer = /** @class */ (function () {
    function FluidLayoutCustomizer(logger) {
        var _this = this;
        this.logger = logger;
        this.addItemOps = [];
        this.addSectionOps = [];
        this.addItem = function (sectionIdx, itemIdx, item) {
            if (!item.widget) {
                _this.logger.warn("Item to add to section " + sectionIdx + " at index " + itemIdx + " does not contain any widget. The item will not be added at all.", item);
                return _this;
            }
            _this.addItemOps.push({
                sectionIdx: sectionIdx,
                itemIdx: itemIdx,
                item: cloneDeep(item),
            });
            return _this;
        };
        this.addSection = function (sectionIdx, section) {
            if (isEmpty(section.items)) {
                _this.logger.warn("Section to add at index " + sectionIdx + " contains no items. The section will not be added at all.", section);
                return _this;
            }
            var itemsWithoutWidget = section.items.filter(function (item) { return item.widget === undefined; });
            if (!isEmpty(itemsWithoutWidget)) {
                _this.logger.warn("Section to add at index " + sectionIdx + " contains items that do not specify any widgets. The section will not be added at all.", section);
                return _this;
            }
            _this.addSectionOps.push({
                sectionIdx: sectionIdx,
                section: cloneDeep(section),
            });
            return _this;
        };
        this.applyTransformations = function (layout) {
            var builder = DashboardLayoutBuilder.for(layout);
            var facade = builder.facade();
            _this.addItemOps.forEach(function (op) {
                var sectionIdx = op.sectionIdx, itemIdx = op.itemIdx, item = op.item;
                var actualSectionIdx = sectionIdx === -1 ? facade.sections().count() : sectionIdx;
                builder.modifySection(actualSectionIdx, function (sectionBuilder) {
                    sectionBuilder.addItem(item, itemIdx === -1 ? undefined : itemIdx);
                    return sectionBuilder;
                });
            });
            _this.addSectionOps.forEach(function (op) {
                var sectionIdx = op.sectionIdx, section = op.section;
                builder.addSection(section, sectionIdx === -1 ? undefined : sectionIdx);
            });
            return builder.build();
        };
    }
    return FluidLayoutCustomizer;
}());
export { FluidLayoutCustomizer };
//# sourceMappingURL=fluidLayoutCustomizer.js.map
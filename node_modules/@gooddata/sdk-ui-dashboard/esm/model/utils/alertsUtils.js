// (C) 2021 GoodData Corporation
import { __assign, __read } from "tslib";
import { isDashboardAttributeFilterReference, isDashboardDateFilter, isDashboardDateFilterReference, } from "@gooddata/sdk-backend-spi";
import last from "lodash/last";
import partition from "lodash/partition";
import { areObjRefsEqual, filterObjRef, isAttributeFilter } from "@gooddata/sdk-model";
import invariant from "ts-invariant";
/**
 * Gets the information about the so called broken alert filters. These are filters that are set up on the alert,
 * but the currently applied filters either do not contain them, or the KPI has started ignoring them
 * since the alert was first set up.
 *
 * @param alert the alert to compute the broken filters for
 * @param kpi the KPI widget that the alert is relevant to
 * @param appliedFilters all the currently applied filters (including All Time date filters)
 * @param displayFormsMap map of all resolved related display forms
 *
 * @internal
 */
export function getBrokenAlertFiltersBasicInfo(alert, kpi, appliedFilters, displayFormsMap) {
    var _a, _b;
    var alertFilters = (_a = alert === null || alert === void 0 ? void 0 : alert.filterContext) === null || _a === void 0 ? void 0 : _a.filters;
    // no filters -> no filters can be broken, bail early
    if (!alertFilters) {
        return [];
    }
    var result = [];
    var _c = __read(partition(alertFilters, isDashboardDateFilter), 2), alertDateFilters = _c[0], alertAttributeFilters = _c[1];
    // attribute filters
    var appliedAttributeFilters = appliedFilters.filter(isAttributeFilter);
    alertAttributeFilters.forEach(function (alertFilter) {
        var attributeFilterDisplayForm = displayFormsMap.get(alertFilter.attributeFilter.displayForm);
        invariant(attributeFilterDisplayForm, "Alert filter display form not resolved " + alertFilter.attributeFilter.displayForm);
        // ignored attribute filters are broken even if they are noop
        var isIgnored = isAttributeFilterIgnored(kpi, attributeFilterDisplayForm.ref);
        if (isIgnored) {
            result.push({
                alertFilter: alertFilter,
                brokenType: "ignored",
            });
            return;
        }
        // deleted attribute filters are broken even if they are noop
        var isInAppliedFilters = appliedAttributeFilters.some(function (f) {
            return areObjRefsEqual(filterObjRef(f), attributeFilterDisplayForm.ref);
        });
        var isDeleted = !isInAppliedFilters;
        if (isDeleted) {
            result.push({
                alertFilter: alertFilter,
                brokenType: "deleted",
            });
        }
    });
    // date filter
    var alertDateFilter = last(alertDateFilters);
    if (alertDateFilter) {
        var isIrrelevantNow = isDateFilterIrrelevant(kpi);
        if (isIrrelevantNow) {
            result.push({
                alertFilter: {
                    dateFilter: __assign(__assign({}, alertDateFilter.dateFilter), { dataSet: (_b = alertDateFilter.dateFilter.dataSet) !== null && _b !== void 0 ? _b : kpi.dateDataSet }),
                },
                brokenType: "ignored",
            });
        }
    }
    return result;
}
function isAttributeFilterIgnored(widget, displayForm) {
    return widget.ignoreDashboardFilters.some(function (filter) {
        return isDashboardAttributeFilterReference(filter) && areObjRefsEqual(filter.displayForm, displayForm);
    });
}
function isDateFilterIrrelevant(widget) {
    var dateDataSetRef = widget.dateDataSet;
    // backward compatibility for old kpis
    var ignoredOldWay = !!dateDataSetRef && isDateFilterIgnored(widget, dateDataSetRef);
    // now dataSetRef is cleaned
    var checkboxEnabled = !!dateDataSetRef;
    return !checkboxEnabled || ignoredOldWay;
}
function isDateFilterIgnored(widget, displayForm) {
    return widget.ignoreDashboardFilters.some(function (filter) { return isDashboardDateFilterReference(filter) && areObjRefsEqual(filter.dataSet, displayForm); });
}
//# sourceMappingURL=alertsUtils.js.map
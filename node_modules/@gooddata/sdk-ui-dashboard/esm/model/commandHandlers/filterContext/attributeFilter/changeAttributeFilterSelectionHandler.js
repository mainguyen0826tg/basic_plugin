import { __generator } from "tslib";
// (C) 2021 GoodData Corporation
import { call, put, select } from "redux-saga/effects";
import invariant from "ts-invariant";
import { invalidArgumentsProvided } from "../../../events/general";
import { attributeFilterSelectionChanged } from "../../../events/filters";
import { filterContextActions } from "../../../store/filterContext";
import { dispatchFilterContextChanged } from "../common";
import { selectFilterContextAttributeFilterByLocalId } from "../../../store/filterContext/filterContextSelectors";
import { dispatchDashboardEvent } from "../../../store/_infra/eventDispatcher";
export function changeAttributeFilterSelectionHandler(ctx, cmd) {
    var _a, elements, filterLocalId, selectionType, affectedFilter, changedFilter;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = cmd.payload, elements = _a.elements, filterLocalId = _a.filterLocalId, selectionType = _a.selectionType;
                return [4 /*yield*/, select(selectFilterContextAttributeFilterByLocalId(cmd.payload.filterLocalId))];
            case 1:
                affectedFilter = _b.sent();
                if (!affectedFilter) {
                    throw invalidArgumentsProvided(ctx, cmd, "Filter with filterLocalId " + filterLocalId + " not found.");
                }
                return [4 /*yield*/, put(filterContextActions.updateAttributeFilterSelection({
                        elements: elements,
                        filterLocalId: filterLocalId,
                        negativeSelection: selectionType === "NOT_IN",
                    }))];
            case 2:
                _b.sent();
                return [4 /*yield*/, select(selectFilterContextAttributeFilterByLocalId(cmd.payload.filterLocalId))];
            case 3:
                changedFilter = _b.sent();
                invariant(changedFilter, "Inconsistent state in attributeFilterChangeSelectionCommandHandler");
                return [4 /*yield*/, dispatchDashboardEvent(attributeFilterSelectionChanged(ctx, changedFilter, cmd.correlationId))];
            case 4:
                _b.sent();
                return [4 /*yield*/, call(dispatchFilterContextChanged, ctx, cmd)];
            case 5:
                _b.sent();
                return [2 /*return*/];
        }
    });
}
//# sourceMappingURL=changeAttributeFilterSelectionHandler.js.map
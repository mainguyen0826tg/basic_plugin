// (C) 2019-2021 GoodData Corporation
import { __awaiter, __generator } from "tslib";
import { NoDataError, NotSupported, UnexpectedError, } from "@gooddata/sdk-backend-spi";
import SparkMD5 from "spark-md5";
import { transformResultDimensions } from "../../../convertors/fromBackend/afm/dimensions";
import { transformExecutionResult, transformGrandTotalData, } from "../../../convertors/fromBackend/afm/result";
var TIGER_PAGE_SIZE_LIMIT = 1000;
function sanitizeOffset(offset) {
    return offset.map(function (offsetItem) {
        if (offsetItem === void 0) { offsetItem = 0; }
        return offsetItem;
    });
}
function sanitizeSize(size) {
    return size.map(function (sizeInDim) {
        if (sizeInDim === void 0) { sizeInDim = TIGER_PAGE_SIZE_LIMIT; }
        if (sizeInDim > TIGER_PAGE_SIZE_LIMIT) {
            // eslint-disable-next-line no-console
            console.warn("The maximum limit per page is " + TIGER_PAGE_SIZE_LIMIT);
            return TIGER_PAGE_SIZE_LIMIT;
        }
        return sizeInDim;
    });
}
var TigerExecutionResult = /** @class */ (function () {
    function TigerExecutionResult(authCall, definition, executionFactory, execResponse, dateFormatter) {
        var _this = this;
        this.authCall = authCall;
        this.definition = definition;
        this.executionFactory = executionFactory;
        this.execResponse = execResponse;
        this.dateFormatter = dateFormatter;
        this.asDataView = function (promisedRes) {
            return promisedRes.then(function (result) {
                if (!result) {
                    // TODO: SDK8: investigate when can this actually happen; perhaps end of data during paging?
                    //  perhaps legitimate NoDataCase?
                    throw new UnexpectedError("Server returned no data");
                }
                if (isEmptyDataResult(result)) {
                    throw new NoDataError("The execution resulted in no data to display.", new TigerDataView(_this, result, _this.dateFormatter));
                }
                return new TigerDataView(_this, result, _this.dateFormatter);
            });
        };
        this.dimensions = transformResultDimensions(execResponse.executionResponse.dimensions, this.definition);
        this.workspace = this.definition.workspace;
        this.resultId = execResponse.executionResponse.links.executionResult;
        this._fingerprint = SparkMD5.hash(this.resultId);
    }
    TigerExecutionResult.prototype.readAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var executionResultPromise;
            var _this = this;
            return __generator(this, function (_a) {
                executionResultPromise = this.authCall(function (client) {
                    return client.executionResult
                        .retrieveResult({
                        workspaceId: _this.workspace,
                        resultId: _this.resultId,
                    })
                        .then(function (_a) {
                        var data = _a.data;
                        return data;
                    });
                });
                return [2 /*return*/, this.asDataView(executionResultPromise)];
            });
        });
    };
    TigerExecutionResult.prototype.readWindow = function (offset, size) {
        return __awaiter(this, void 0, void 0, function () {
            var saneOffset, saneSize, executionResultPromise;
            var _this = this;
            return __generator(this, function (_a) {
                saneOffset = sanitizeOffset(offset);
                saneSize = sanitizeSize(size);
                executionResultPromise = this.authCall(function (client) {
                    return client.executionResult
                        .retrieveResult({
                        workspaceId: _this.workspace,
                        resultId: _this.resultId,
                        limit: saneSize,
                        offset: saneOffset,
                    })
                        .then(function (_a) {
                        var data = _a.data;
                        return data;
                    });
                });
                return [2 /*return*/, this.asDataView(executionResultPromise)];
            });
        });
    };
    TigerExecutionResult.prototype.transform = function () {
        return this.executionFactory.forDefinition(this.definition);
    };
    TigerExecutionResult.prototype.export = function (_options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (_, reject) {
                        reject(new NotSupported("Tiger backend does not support exports"));
                    })];
            });
        });
    };
    TigerExecutionResult.prototype.equals = function (other) {
        return this.fingerprint() === other.fingerprint();
    };
    TigerExecutionResult.prototype.fingerprint = function () {
        return this._fingerprint;
    };
    return TigerExecutionResult;
}());
export { TigerExecutionResult };
var TigerDataView = /** @class */ (function () {
    function TigerDataView(result, execResult, dateFormatter) {
        var _a;
        this.result = result;
        this.definition = result.definition;
        var transformedResult = transformExecutionResult(execResult, result.dimensions, dateFormatter);
        this.data = transformedResult.data;
        this.headerItems = transformedResult.headerItems;
        this.offset = transformedResult.offset;
        this.count = transformedResult.count;
        this.totalCount = transformedResult.total;
        this.totals = transformGrandTotalData(result.definition, (_a = execResult.grandTotals) !== null && _a !== void 0 ? _a : []);
        this._fingerprint = result.fingerprint() + "/" + this.offset.join(",") + "-" + this.count.join(",");
    }
    TigerDataView.prototype.fingerprint = function () {
        return this._fingerprint;
    };
    TigerDataView.prototype.equals = function (other) {
        return this.fingerprint() === other.fingerprint();
    };
    return TigerDataView;
}());
function hasEmptyData(result) {
    return result.data.length === 0;
}
function hasMissingDimensionHeaders(result) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    /*
     * messy fix to tiger's afm always returning dimension headers with no content
     */
    var firstDimHeaders = (_e = (_d = (_c = (_b = (_a = result.dimensionHeaders) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.headerGroups) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.headers) === null || _e === void 0 ? void 0 : _e[0];
    var secondDimHeaders = (_k = (_j = (_h = (_g = (_f = result.dimensionHeaders) === null || _f === void 0 ? void 0 : _f[1]) === null || _g === void 0 ? void 0 : _g.headerGroups) === null || _h === void 0 ? void 0 : _h[0]) === null || _j === void 0 ? void 0 : _j.headers) === null || _k === void 0 ? void 0 : _k[0];
    return !result.dimensionHeaders || (!firstDimHeaders && !secondDimHeaders);
}
function isEmptyDataResult(result) {
    return hasEmptyData(result) && hasMissingDimensionHeaders(result);
}
//# sourceMappingURL=executionResult.js.map
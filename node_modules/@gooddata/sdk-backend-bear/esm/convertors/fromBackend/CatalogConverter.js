// (C) 2019-2021 GoodData Corporation
import { uriRef, idRef } from "@gooddata/sdk-model";
import { newAttributeDisplayFormMetadataObject, newCatalogAttribute, newCatalogDateAttribute, newCatalogDateDataset, newCatalogFact, newCatalogGroup, newCatalogMeasure, } from "@gooddata/sdk-backend-base";
export var isCompatibleCatalogItemType = function (type) {
    return type !== "dateDataset";
};
var bearItemTypeByCatalogItemType = {
    attribute: "attribute",
    fact: "fact",
    measure: "metric",
};
export var convertItemType = function (type) {
    return bearItemTypeByCatalogItemType[type];
};
var bearObjectMetaToBearRef = function (obj) { return uriRef(obj.uri); };
var bearCatalogItemToBearRef = function (obj) { return uriRef(obj.links.self); };
var bearGroupableCatalogItemToTagRefs = function (item) {
    var _a = item.groups, groups = _a === void 0 ? [] : _a;
    return groups.map(function (tagId) { return idRef(tagId); });
};
var commonMetadataModifications = function (item) {
    return function (builder) {
        var _a;
        return builder
            .id(item.identifier)
            .uri(item.uri)
            .title(item.title)
            .description((_a = item.summary) !== null && _a !== void 0 ? _a : "")
            .production(item.isProduction === 1)
            .unlisted(item.unlisted === 1)
            .deprecated(item.deprecated === "1");
    };
};
var commonCatalogItemModifications = function (item) {
    return function (builder) {
        return builder
            .id(item.identifier)
            .uri(item.links.self)
            .title(item.title)
            .description(item.summary)
            .production(item.production)
            .unlisted(false)
            .deprecated(false);
    };
};
var convertDisplayForm = function (df, attrRef) {
    var ref = bearObjectMetaToBearRef(df.meta);
    return newAttributeDisplayFormMetadataObject(ref, function (m) {
        return m
            .modify(commonMetadataModifications(df.meta))
            .attribute(attrRef)
            .displayFormType(df.content.type);
    });
};
export var convertAttribute = function (attribute, displayForms, attributes) {
    var _a;
    var attrRef = bearCatalogItemToBearRef(attribute);
    var defaultDisplayForm = displayForms[attribute.links.defaultDisplayForm];
    var attributeData = attributes[attribute.identifier];
    var geoPinDisplayForms = ((_a = attribute.links.geoPinDisplayForms) !== null && _a !== void 0 ? _a : []).map(function (uri) { return displayForms[uri]; });
    var attributeDisplayForms = attributeData.attribute.content.displayForms.map(function (displayForm) {
        return convertDisplayForm(displayForm, attrRef);
    });
    var groups = bearGroupableCatalogItemToTagRefs(attribute);
    var drillDownStep = attributeData.attribute.content.drillDownStepAttributeDF
        ? uriRef(attributeData.attribute.content.drillDownStepAttributeDF)
        : undefined;
    var drillDownLink = attributeData.attribute.content.linkAttributeDF
        ? uriRef(attributeData.attribute.content.linkAttributeDF)
        : undefined;
    return newCatalogAttribute(function (catalogA) {
        return catalogA
            .attribute(attrRef, function (a) {
            return a
                .modify(commonCatalogItemModifications(attribute))
                .drillDownStep(drillDownStep)
                .drillToAttributeLink(drillDownLink)
                .displayForms(attributeDisplayForms);
        })
            .defaultDisplayForm(convertDisplayForm(defaultDisplayForm, attrRef))
            .displayForms(attributeDisplayForms)
            .geoPinDisplayForms(geoPinDisplayForms.map(function (df) { return convertDisplayForm(df, attrRef); }))
            .groups(groups);
    });
};
export var convertMeasure = function (metric) {
    var measureRef = bearCatalogItemToBearRef(metric);
    var groups = bearGroupableCatalogItemToTagRefs(metric);
    return newCatalogMeasure(function (catalogM) {
        return catalogM
            .measure(measureRef, function (m) {
            return m
                .modify(commonCatalogItemModifications(metric))
                .expression(metric.expression)
                .format(metric.format);
        })
            .groups(groups);
    });
};
export var convertFact = function (fact) {
    var factRef = bearCatalogItemToBearRef(fact);
    var groups = bearGroupableCatalogItemToTagRefs(fact);
    return newCatalogFact(function (catalogF) {
        return catalogF.fact(factRef, function (f) { return f.modify(commonCatalogItemModifications(fact)); }).groups(groups);
    });
};
var convertDateDataSetAttribute = function (dateDatasetAttribute, attributeById) {
    var attributeMeta = dateDatasetAttribute.attributeMeta, defaultDisplayFormMeta = dateDatasetAttribute.defaultDisplayFormMeta;
    var attributeRef = bearObjectMetaToBearRef(attributeMeta);
    var displayFormRef = bearObjectMetaToBearRef(defaultDisplayFormMeta);
    var attributeData = attributeById[attributeMeta.identifier];
    var attributeDisplayForms = attributeData.attribute.content.displayForms.map(function (displayForm) {
        return convertDisplayForm(displayForm, attributeRef);
    });
    var drillDownStep = attributeData.attribute.content.drillDownStepAttributeDF
        ? uriRef(attributeData.attribute.content.drillDownStepAttributeDF)
        : undefined;
    return newCatalogDateAttribute(function (catalogDa) {
        return catalogDa
            .attribute(attributeRef, function (a) {
            return a
                .modify(commonMetadataModifications(attributeMeta))
                .drillDownStep(drillDownStep)
                .displayForms(attributeDisplayForms);
        })
            .defaultDisplayForm(displayFormRef, function (df) {
            return df.modify(commonMetadataModifications(defaultDisplayFormMeta));
        })
            .granularity(dateDatasetAttribute.type);
    });
};
export var convertDateDataset = function (dateDataset, attributeById) {
    var _a = dateDataset.availableDateAttributes, availableDateAttributes = _a === void 0 ? [] : _a;
    var dateDatasetRef = bearObjectMetaToBearRef(dateDataset.meta);
    var dateAttributes = availableDateAttributes.map(function (attribute) {
        return convertDateDataSetAttribute(attribute, attributeById);
    });
    return newCatalogDateDataset(function (catalogDs) {
        return catalogDs
            .dataSet(dateDatasetRef, function (ds) { return ds.modify(commonMetadataModifications(dateDataset.meta)); })
            .dateAttributes(dateAttributes)
            .relevance(dateDataset.relevance);
    });
};
export var convertWrappedFact = function (fact) {
    var meta = fact.fact.meta;
    var factRef = uriRef(meta.uri);
    return newCatalogFact(function (catalogFact) {
        return catalogFact.fact(factRef, function (f) { return f.modify(commonMetadataModifications(meta)); });
    });
};
export var convertWrappedAttribute = function (attribute) {
    var _a, _b;
    var _c = attribute.attribute, content = _c.content, meta = _c.meta;
    var attrRef = uriRef(meta.uri);
    var displayForms = (_a = content.displayForms) !== null && _a !== void 0 ? _a : [];
    var defaultDisplayForm = (_b = displayForms.find(function (df) { return df.content.default === 1; })) !== null && _b !== void 0 ? _b : displayForms[0];
    var geoPinDisplayForms = displayForms.filter(function (df) { return df.content.type === "GDC.geo.pin"; });
    return newCatalogAttribute(function (catalogAttr) {
        var result = catalogAttr
            .attribute(attrRef, function (a) { return a.modify(commonMetadataModifications(meta)); })
            .displayForms(displayForms.map(function (displayForm) {
            return newAttributeDisplayFormMetadataObject(uriRef(displayForm.meta.uri), function (df) {
                return df
                    .modify(commonMetadataModifications(displayForm.meta))
                    .attribute(attrRef)
                    .displayFormType(displayForm.content.type);
            });
        }))
            .geoPinDisplayForms(geoPinDisplayForms.map(function (geoDisplayForm) {
            return newAttributeDisplayFormMetadataObject(uriRef(geoDisplayForm.meta.uri), function (df) {
                return df
                    .modify(commonMetadataModifications(geoDisplayForm.meta))
                    .attribute(attrRef)
                    .displayFormType(geoDisplayForm.content.type);
            });
        }));
        if (defaultDisplayForm) {
            result = result.defaultDisplayForm(uriRef(defaultDisplayForm.meta.uri), function (df) {
                return df
                    .modify(commonMetadataModifications(defaultDisplayForm.meta))
                    .attribute(attrRef)
                    .displayFormType(defaultDisplayForm.content.type);
            });
        }
        return result;
    });
};
export var convertMetric = function (metric) {
    var _a = metric.metric, content = _a.content, meta = _a.meta;
    var measureRef = uriRef(meta.uri);
    return newCatalogMeasure(function (catalogMeasure) {
        return catalogMeasure.measure(measureRef, function (m) {
            var _a;
            return m
                .modify(commonMetadataModifications(meta))
                .expression(content.expression)
                .format((_a = content.format) !== null && _a !== void 0 ? _a : "#,#.##");
        });
    });
};
export var convertGroup = function (group) {
    return newCatalogGroup(function (catalogG) { return catalogG.title(group.title).tag(idRef(group.identifier)); });
};
//# sourceMappingURL=CatalogConverter.js.map
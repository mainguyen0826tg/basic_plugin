/**
 * @public
 */
export declare namespace GdcDataSetsCsv {
    /**
     * Represents the current status of CSV source.
     *
     * @public
     */
    type DatasetLoadStatus = "RUNNING" | "OK" | "ERROR" | "CANCELLED" | "ERROR_METADATA" | "REFRESHING";
    /**
     * Object wrapping info about the user that created CSV load. Contains their login and full name.
     *
     * @public
     */
    interface IDatasetUser {
        login: string;
        fullName: string;
        profileUri: string;
    }
    /**
     * Object wrapping basic information (owner, date created, status) about a CSV Load.
     *
     * @public
     */
    interface IDatasetLoadInfo {
        owner: IDatasetUser;
        status: DatasetLoadStatus;
        created: string;
    }
    /**
     * Represents type of LDM field created from the Dataset column.
     *
     * @public
     */
    type DataColumnType = "ATTRIBUTE" | "FACT" | "DATE";
    /**
     * Dataset column with name, type and boolean flag whether the column
     * needs to be skipped while data loading or not.
     *
     * @public
     */
    interface IDataColumn {
        column: {
            name: string;
            type: DataColumnType;
            skip?: boolean;
            format?: string;
        };
    }
    /**
     * Structural information about CSV header and columns. Indicates whether the CSV file
     * contains header or not and on which row. Also contains the list of CSV columns with
     * their names and types.
     *
     * @public
     */
    interface IDataHeader {
        headerRowIndex?: number;
        columns: IDataColumn[];
    }
    /**
     * Dataset describes a particular structure of dataset (CSV file). There may be many Loads
     * related to a single dataset - meaning multiple files with the same structure and different data.
     *
     * @public
     */
    interface IDataset {
        dataset: {
            name: string;
            dataHeader: IDataHeader;
            datasetId: string;
            loadedRowCount: number;
            datasetLoadStatus: DatasetLoadStatus;
            firstSuccessfulUpdate?: IDatasetLoadInfo;
            lastSuccessfulUpdate?: IDatasetLoadInfo;
            lastUpdate?: IDatasetLoadInfo;
        };
    }
    /**
     * @public
     */
    interface IDatasetsResponse {
        datasets: {
            items: IDataset[];
        };
    }
}
//# sourceMappingURL=GdcDataSetsCsv.d.ts.map
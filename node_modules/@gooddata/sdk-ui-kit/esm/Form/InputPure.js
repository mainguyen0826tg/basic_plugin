import { __extends } from "tslib";
// (C) 2020 GoodData Corporation
import React from "react";
import cx from "classnames";
import NativeListener from "react-native-listener";
import noop from "lodash/noop";
import { ENUM_KEY_CODE } from "../typings/utilities";
import tryFocus from "./focus";
/**
 * @internal
 */
var InputPure = /** @class */ (function (_super) {
    __extends(InputPure, _super);
    function InputPure() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.focusTimer = -1;
        _this.focusInterval = -1;
        _this.onChange = function (e) {
            _this.props.onChange(e.target.value, e);
        };
        _this.onKeyPress = function (e) {
            switch (e.keyCode) {
                case ENUM_KEY_CODE.KEY_CODE_ESCAPE:
                    if (_this.props.clearOnEsc) {
                        _this.onClear();
                    }
                    _this.props.onEscKeyPress();
                    break;
                case ENUM_KEY_CODE.KEY_CODE_ENTER:
                    _this.props.onEnterKeyPress();
                    break;
                default:
                    break;
            }
        };
        _this.onClear = function (e) {
            if (e) {
                e.stopPropagation();
            }
            _this.props.onChange("", e);
        };
        return _this;
    }
    InputPure.prototype.componentDidMount = function () {
        var _this = this;
        var _a = this.props, autofocus = _a.autofocus, nativeLikeAutofocus = _a.nativeLikeAutofocus;
        if (autofocus && !nativeLikeAutofocus) {
            // https://github.com/facebook/react/issues/1791
            this.focusTimer = window.setTimeout(function () { return _this.inputNodeRef && _this.inputNodeRef.focus(); }, 100);
        }
        if (autofocus && nativeLikeAutofocus) {
            this.focusInterval = tryFocus(function () { return _this.inputNodeRef; });
        }
    };
    InputPure.prototype.componentWillUnmount = function () {
        window.clearTimeout(this.focusTimer);
        window.clearInterval(this.focusInterval);
    };
    InputPure.prototype.getLabelClassNames = function (className) {
        return cx({
            "gd-input": true,
            "gd-input-small": this.props.isSmall,
            "gd-input-search": this.props.isSearch,
            "gd-input-with-prefix": !!this.props.prefix,
            "gd-input-with-suffix": !!this.props.suffix,
            "gd-input-with-label": !!this.props.label,
            "gd-input-label-top": this.props.labelPositionTop,
            "has-error": this.props.hasError,
            "has-warning": this.props.hasWarning,
            "is-disabled": this.props.disabled,
        }, className);
    };
    InputPure.prototype.getInputClassNames = function () {
        return cx({
            "gd-input-field": true,
            "gd-input-field-small": this.props.isSmall,
        });
    };
    InputPure.prototype.renderPrefix = function (prefix) {
        return prefix ? React.createElement("span", { className: "gd-input-prefix" }, prefix) : false;
    };
    InputPure.prototype.renderSuffix = function (suffix) {
        return suffix ? React.createElement("span", { className: "gd-input-suffix" }, suffix) : false;
    };
    InputPure.prototype.renderLabel = function (label) {
        return label ? React.createElement("span", { className: "gd-input-label" }, label) : false;
    };
    InputPure.prototype.renderSearch = function (isSearch) {
        return isSearch ? React.createElement("span", { className: "gd-input-icon gd-icon-search" }) : false;
    };
    InputPure.prototype.renderClearIcon = function (clearOnEsc) {
        return clearOnEsc && this.props.value.length > 0 ? (
        // react events use delegation and don't bubble, click on clear needs to be kept local
        // to avoid handling by overlay close handler and others
        React.createElement(NativeListener, { onClick: this.onClear },
            React.createElement("span", { className: "gd-input-icon-clear gd-icon-clear s-input-clear" }))) : (false);
    };
    InputPure.prototype.render = function () {
        var _this = this;
        var _a = this.props, className = _a.className, clearOnEsc = _a.clearOnEsc, disabled = _a.disabled, isSearch = _a.isSearch, placeholder = _a.placeholder, prefix = _a.prefix, readonly = _a.readonly, suffix = _a.suffix, label = _a.label, maxlength = _a.maxlength, value = _a.value, onBlur = _a.onBlur, onFocus = _a.onFocus;
        return (React.createElement("label", { className: this.getLabelClassNames(className) },
            this.renderLabel(label),
            React.createElement("div", { className: "gd-input-wrapper" },
                React.createElement("input", { ref: function (ref) {
                        _this.inputNodeRef = ref;
                    }, className: this.getInputClassNames(), disabled: disabled, maxLength: maxlength, onChange: this.onChange, onBlur: onBlur, onFocus: onFocus, onKeyDown: this.onKeyPress, placeholder: placeholder, readOnly: readonly, value: value }),
                this.renderSearch(isSearch),
                this.renderClearIcon(clearOnEsc),
                this.renderPrefix(prefix),
                this.renderSuffix(suffix))));
    };
    InputPure.prototype.focus = function (options) {
        if (this.inputNodeRef) {
            this.inputNodeRef.focus(options);
        }
    };
    InputPure.defaultProps = {
        autofocus: false,
        className: "",
        clearOnEsc: false,
        disabled: false,
        hasError: false,
        hasWarning: false,
        isSearch: false,
        isSmall: false,
        maxlength: 255,
        onChange: noop,
        onEscKeyPress: noop,
        onEnterKeyPress: noop,
        onBlur: noop,
        onFocus: noop,
        placeholder: "",
        prefix: "",
        readonly: false,
        suffix: "",
        label: "",
        labelPositionTop: false,
        value: "",
    };
    return InputPure;
}(React.PureComponent));
export { InputPure };
//# sourceMappingURL=InputPure.js.map
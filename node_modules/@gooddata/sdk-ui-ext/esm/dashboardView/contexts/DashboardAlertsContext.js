import { __assign, __spreadArrays } from "tslib";
// (C) 2021 GoodData Corporation
import React, { useReducer } from "react";
import noop from "lodash/noop";
import findIndex from "lodash/findIndex";
import { areObjRefsEqual } from "@gooddata/sdk-model";
var DashboardAlertsContext = React.createContext({
    alerts: [],
    addAlert: noop,
    removeAlert: noop,
    updateAlert: noop,
});
DashboardAlertsContext.displayName = "DashboardAlertsContext";
function reducer(state, action) {
    var _a, _b;
    switch (action.type) {
        case "add":
            return __assign(__assign({}, state), { alerts: __spreadArrays(((_a = state.alerts) !== null && _a !== void 0 ? _a : []), [action.payload]) });
        case "remove":
            return __assign(__assign({}, state), { alerts: (_b = state.alerts) === null || _b === void 0 ? void 0 : _b.filter(function (alert) { return alert !== action.payload; }) });
        case "update": {
            var index = findIndex(state.alerts, function (alert) { return areObjRefsEqual(alert.ref, action.payload.ref); });
            return __assign(__assign({}, state), { alerts: __spreadArrays(state.alerts.slice(0, index), [action.payload], state.alerts.slice(index + 1)) });
        }
    }
}
/**
 * @internal
 */
export var DashboardAlertsProvider = function (_a) {
    var children = _a.children, alerts = _a.alerts;
    var _b = useReducer(reducer, { alerts: alerts }), state = _b[0], dispatch = _b[1];
    var contextValue = {
        alerts: state.alerts,
        addAlert: function (alert) { return dispatch({ type: "add", payload: alert }); },
        removeAlert: function (alert) { return dispatch({ type: "remove", payload: alert }); },
        updateAlert: function (alert) { return dispatch({ type: "update", payload: alert }); },
    };
    return React.createElement(DashboardAlertsContext.Provider, { value: contextValue }, children);
};
/**
 * @internal
 */
export var useAlerts = function () {
    return React.useContext(DashboardAlertsContext);
};
//# sourceMappingURL=DashboardAlertsContext.js.map
import { __assign, __awaiter, __generator, __spreadArrays } from "tslib";
import invariant from "ts-invariant";
/**
 * This implementation of {@link @gooddata/sdk-backend-spi#IPagedResource} pages over a list of items
 * provided at construction time. The paging is done using pre-configured page limit and starts at particular offset.
 *
 * @internal
 */
var InMemoryPaging = /** @class */ (function () {
    function InMemoryPaging(allItems, limit, offset) {
        if (limit === void 0) { limit = 50; }
        if (offset === void 0) { offset = 0; }
        this.allItems = allItems;
        invariant(offset >= 0, "paging offset must be non-negative, got: " + offset);
        invariant(limit > 0, "limit must be a positive number, got: " + limit);
        // this will naturally return empty items if at the end of data; limit will always be positive
        this.items = allItems.slice(offset, offset + limit);
        // offset is at most at the end of all available elements
        this.offset = Math.min(offset, allItems.length);
        // limit is always kept as-requested
        this.limit = limit;
        this.totalCount = allItems.length;
    }
    InMemoryPaging.prototype.next = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.items.length === 0) {
                    return [2 /*return*/, this];
                }
                return [2 /*return*/, new InMemoryPaging(this.allItems, this.limit, this.offset + this.items.length)];
            });
        });
    };
    InMemoryPaging.prototype.goTo = function (pageIndex) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.items.length === 0) {
                    return [2 /*return*/, this];
                }
                return [2 /*return*/, new InMemoryPaging(this.allItems, this.limit, pageIndex * this.items.length)];
            });
        });
    };
    InMemoryPaging.prototype.all = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, __spreadArrays(this.allItems)];
            });
        });
    };
    InMemoryPaging.prototype.allSorted = function (compareFn) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, __spreadArrays(this.allItems).sort(compareFn)];
            });
        });
    };
    return InMemoryPaging;
}());
export { InMemoryPaging };
/**
 * Given a paged result, this function will retrieve all pages from the backend concatenated to a single array.
 *
 * @param pagedResource - the paged resource to get all the pages of
 */
function getAllPagesOfInner(pagedResource) {
    return __awaiter(this, void 0, void 0, function () {
        var results, pageSize, currentPage, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    results = [];
                    pageSize = pagedResource.limit;
                    if (!(pagedResource.offset !== 0)) return [3 /*break*/, 2];
                    return [4 /*yield*/, pagedResource.goTo(0)];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 3];
                case 2:
                    _a = pagedResource;
                    _b.label = 3;
                case 3:
                    currentPage = _a;
                    _b.label = 4;
                case 4:
                    if (!true) return [3 /*break*/, 6];
                    results.push.apply(results, currentPage.items);
                    if (currentPage.items.length < pageSize) {
                        return [2 /*return*/, results];
                    }
                    currentPage.items.sort();
                    return [4 /*yield*/, currentPage.next()];
                case 5:
                    currentPage = _b.sent();
                    return [3 /*break*/, 4];
                case 6: return [2 /*return*/];
            }
        });
    });
}
/**
 * Given a paged result, this function will enhance it with the `all` implementation.
 *
 * @remarks TODO: FET-847 avoid the need for this function
 *
 * @param pagedResource - paged resource to enhance
 * @internal
 */
export function enhanceWithAll(pagedResource) {
    return __assign(__assign({}, pagedResource), { all: function () { return getAllPagesOfInner(pagedResource); }, allSorted: function (compareFn) { return getAllPagesOfInner(pagedResource).then(function (items) { return items.sort(compareFn); }); } });
}
//# sourceMappingURL=paging.js.map
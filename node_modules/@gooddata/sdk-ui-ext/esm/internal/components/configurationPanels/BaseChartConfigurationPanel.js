import { __assign, __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { FormattedMessage } from "react-intl";
import includes from "lodash/includes";
import { BucketNames } from "@gooddata/sdk-ui";
import { Bubble, BubbleHoverTrigger } from "@gooddata/sdk-ui-kit";
import cx from "classnames";
import MinMaxControl from "../configurationControls//MinMaxControl";
import ConfigurationPanelContent from "./ConfigurationPanelContent";
import ConfigSection from "../configurationControls/ConfigSection";
import CheckboxControl from "../configurationControls/CheckboxControl";
import DataLabelsControl from "../configurationControls/DataLabelsControl";
import { SHOW_DELAY_DEFAULT, HIDE_DELAY_DEFAULT, BUBBLE_ARROW_OFFSET_X, BUBBLE_ARROW_OFFSET_Y, } from "../../constants/bubble";
import LabelSubsection from "../configurationControls/axis/LabelSubsection";
import { AXIS, BASE_CHART_AXIS_CONFIG, DUAL_AXES_SUPPORTED_CHARTS } from "../../constants/axis";
import { bucketsIsEmpty, insightBuckets } from "@gooddata/sdk-model";
import { countItemsOnAxes } from "../pluggableVisualizations/baseChart/insightIntrospection";
import NameSubsection from "../configurationControls/axis/NameSubsection";
var BaseChartConfigurationPanel = /** @class */ (function (_super) {
    __extends(BaseChartConfigurationPanel, _super);
    function BaseChartConfigurationPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaseChartConfigurationPanel.prototype.renderCanvasSection = function () {
        var gridEnabled = this.getControlProperties().gridEnabled;
        var _a = this.props, properties = _a.properties, propertiesMeta = _a.propertiesMeta, pushData = _a.pushData;
        var controlsDisabled = this.isControlDisabled();
        return (React.createElement(ConfigSection, { id: "canvas_section", title: "properties.canvas.title", propertiesMeta: propertiesMeta, properties: properties, pushData: pushData },
            React.createElement(DataLabelsControl, { pushData: pushData, properties: properties, isDisabled: controlsDisabled }),
            React.createElement(CheckboxControl, { valuePath: "grid.enabled", labelText: "properties.canvas.gridline", properties: properties, checked: gridEnabled, disabled: controlsDisabled, pushData: pushData })));
    };
    BaseChartConfigurationPanel.prototype.renderConfigurationPanel = function () {
        var axes = this.getControlProperties().axes;
        return (React.createElement(BubbleHoverTrigger, { showDelay: SHOW_DELAY_DEFAULT, hideDelay: HIDE_DELAY_DEFAULT },
            React.createElement("div", null,
                this.renderColorSection(),
                this.getBaseChartAxisSection(axes),
                this.renderLegendSection(),
                this.renderCanvasSection()),
            React.createElement(Bubble, { className: this.getBubbleClassNames(), arrowOffsets: { "tc bc": [BUBBLE_ARROW_OFFSET_X, BUBBLE_ARROW_OFFSET_Y] }, alignPoints: [{ align: "tc bc" }] },
                React.createElement(FormattedMessage, { id: "properties.config.not_applicable" }))));
    };
    BaseChartConfigurationPanel.prototype.getAxesConfiguration = function (type) {
        return BASE_CHART_AXIS_CONFIG[type];
    };
    BaseChartConfigurationPanel.prototype.getControlProperties = function () {
        var _a, _b, _c, _d, _e;
        var props = this.props;
        var gridEnabled = (_d = (_c = (_b = (_a = props.properties) === null || _a === void 0 ? void 0 : _a.controls) === null || _b === void 0 ? void 0 : _b.grid) === null || _c === void 0 ? void 0 : _c.enabled) !== null && _d !== void 0 ? _d : true;
        var axisType = includes(DUAL_AXES_SUPPORTED_CHARTS, props.type)
            ? (_e = props.axis) !== null && _e !== void 0 ? _e : AXIS.PRIMARY : AXIS.PRIMARY;
        var configurations = this.getAxesConfiguration(axisType);
        var axes = configurations.map(function (axis) {
            var _a, _b, _c, _d;
            return __assign(__assign({}, axis), { visible: (_d = (_c = (_b = (_a = props.properties) === null || _a === void 0 ? void 0 : _a.controls) === null || _b === void 0 ? void 0 : _b[axis.name]) === null || _c === void 0 ? void 0 : _c.visible) !== null && _d !== void 0 ? _d : true });
        });
        return {
            gridEnabled: gridEnabled,
            axes: axes,
        };
    };
    BaseChartConfigurationPanel.prototype.getBubbleClassNames = function () {
        return cx("bubble-primary", {
            invisible: !this.isControlDisabled(),
        });
    };
    BaseChartConfigurationPanel.prototype.isViewedBy = function () {
        var insight = this.props.insight;
        return !bucketsIsEmpty(insightBuckets(insight, BucketNames.VIEW, BucketNames.TREND));
    };
    BaseChartConfigurationPanel.prototype.getBaseChartAxisSection = function (axes) {
        var _this = this;
        var _a = this.props, featureFlags = _a.featureFlags, type = _a.type, properties = _a.properties, propertiesMeta = _a.propertiesMeta, pushData = _a.pushData, insight = _a.insight;
        var controls = properties && properties.controls;
        var controlsDisabled = this.isControlDisabled();
        var isViewedBy = this.isViewedBy();
        var itemsOnAxes = countItemsOnAxes(type, controls, insight);
        var isNameSubsectionVisible = featureFlags.enableAxisNameConfiguration;
        var isAxisLabelsFormatEnabled = featureFlags.enableAxisLabelFormat;
        return axes.map(function (axis) {
            var disabled = controlsDisabled || (!axis.primary && !isViewedBy);
            var hasMoreThanOneItem = itemsOnAxes[axis.name] > 1;
            var name = axis.name, title = axis.title, subtitle = axis.subtitle, visible = axis.visible;
            return (React.createElement(ConfigSection, { key: name, id: name + "_section", title: title, subtitle: subtitle, valuePath: name + ".visible", canBeToggled: true, toggledOn: visible, toggleDisabled: controlsDisabled, propertiesMeta: propertiesMeta, properties: properties, pushData: pushData },
                isNameSubsectionVisible && (React.createElement(NameSubsection, { disabled: disabled || hasMoreThanOneItem, configPanelDisabled: controlsDisabled, axis: axis.name, properties: properties, pushData: pushData })),
                React.createElement(LabelSubsection, { disabled: disabled, configPanelDisabled: controlsDisabled, axis: axis.name, properties: properties, pushData: pushData, showFormat: axis.primary && isAxisLabelsFormatEnabled }),
                axis.primary && _this.renderMinMax(axis.name)));
        });
    };
    BaseChartConfigurationPanel.prototype.renderMinMax = function (basePath) {
        var _a = this.props, pushData = _a.pushData, properties = _a.properties, propertiesMeta = _a.propertiesMeta;
        return (React.createElement(MinMaxControl, { isDisabled: this.isControlDisabled(), basePath: basePath, pushData: pushData, properties: properties, propertiesMeta: propertiesMeta }));
    };
    return BaseChartConfigurationPanel;
}(ConfigurationPanelContent));
export default BaseChartConfigurationPanel;
//# sourceMappingURL=BaseChartConfigurationPanel.js.map
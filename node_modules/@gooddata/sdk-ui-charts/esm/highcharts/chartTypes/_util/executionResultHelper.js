import { __assign } from "tslib";
import invariant from "ts-invariant";
//
// TODO: move all this code to data view facade.
//
//
function findInDimensionHeaders(dimensions, headerCallback) {
    for (var dimensionIndex = 0; dimensionIndex < dimensions.length; dimensionIndex++) {
        var dimension = dimensions[dimensionIndex];
        for (var headerIndex = 0; headerIndex < dimension.headers.length; headerIndex++) {
            var wrappedDescriptor = dimension.headers[headerIndex];
            var headerType = Object.keys(wrappedDescriptor)[0];
            var header = wrappedDescriptor[headerType];
            var headerCount = dimension.headers.length;
            var callbackResult = headerCallback(headerType, header, dimensionIndex, headerIndex, headerCount);
            if (callbackResult) {
                return callbackResult;
            }
        }
    }
    return null;
}
export function findMeasureGroupInDimensions(dimensions) {
    return findInDimensionHeaders(dimensions, function (descriptorType, descriptor, _dimensionIndex, headerIndex, headerCount) {
        var measureGroupHeader = descriptorType === "measureGroupHeader" ? descriptor : null;
        if (measureGroupHeader) {
            invariant(headerIndex === headerCount - 1, "MeasureGroup must be the last header in it's dimension");
        }
        return measureGroupHeader;
    });
}
export function findAttributeInDimension(dimension, attributeHeaderItemsDimension, indexInDimension) {
    return findInDimensionHeaders([dimension], function (descriptorType, descriptor, _dimensionIndex, headerIndex) {
        if (descriptorType === "attributeHeader" &&
            (indexInDimension === undefined || indexInDimension === headerIndex)) {
            return __assign(__assign({}, descriptor), { 
                // attribute items are delivered separately from attributeHeaderItems
                items: attributeHeaderItemsDimension[indexInDimension ? indexInDimension : 0] });
        }
        return null;
    });
}
//# sourceMappingURL=executionResultHelper.js.map
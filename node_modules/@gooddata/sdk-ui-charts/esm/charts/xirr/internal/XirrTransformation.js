import { __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { injectIntl } from "react-intl";
import noop from "lodash/noop";
import { convertDrillableItemsToPredicates, fireDrillEvent, } from "@gooddata/sdk-ui";
import { getHeadlineData, applyDrillableItems, buildDrillEventData } from "./utils/XirrTransformationUtils";
import Headline from "../../headline/internal/Headline";
/**
 * The React component that handles the transformation of the execution objects into the data accepted by the {Headline}
 * React component that this components wraps. It also handles the propagation of the drillable items to the component
 * and drill events out of it.
 */
var XirrTransformation = /** @class */ (function (_super) {
    __extends(XirrTransformation, _super);
    function XirrTransformation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getDisableDrillUnderlineFromConfig = function () {
            return _this.props.config ? _this.props.config.disableDrillUnderline : false;
        };
        _this.handleFiredDrillEvent = function (item, target) {
            var _a = _this.props, onDrill = _a.onDrill, dataView = _a.dataView;
            var drillEventData = buildDrillEventData(item, dataView);
            fireDrillEvent(onDrill, drillEventData, target);
        };
        return _this;
    }
    XirrTransformation.prototype.render = function () {
        var _a = this.props, drillableItems = _a.drillableItems, config = _a.config, onAfterRender = _a.onAfterRender, dataView = _a.dataView;
        var drillablePredicates = convertDrillableItemsToPredicates(drillableItems);
        var data = getHeadlineData(dataView);
        var dataWithUpdatedDrilling = applyDrillableItems(data, drillablePredicates, dataView);
        var disableDrillUnderline = this.getDisableDrillUnderlineFromConfig();
        return (React.createElement(Headline, { data: dataWithUpdatedDrilling, config: config, onDrill: this.handleFiredDrillEvent, onAfterRender: onAfterRender, disableDrillUnderline: disableDrillUnderline }));
    };
    XirrTransformation.defaultProps = {
        config: {},
        drillableItems: [],
        onDrill: function () { return true; },
        onAfterRender: noop,
    };
    return XirrTransformation;
}(React.Component));
export default injectIntl(XirrTransformation);
//# sourceMappingURL=XirrTransformation.js.map
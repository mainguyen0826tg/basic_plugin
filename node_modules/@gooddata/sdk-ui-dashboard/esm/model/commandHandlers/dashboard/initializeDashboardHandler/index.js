import { __generator, __read, __spread } from "tslib";
import { all, call, put } from "redux-saga/effects";
import { dashboardInitialized } from "../../../events/dashboard";
import { insightsActions } from "../../../store/insights";
import { loadingActions } from "../../../store/loading";
import { resolveDashboardConfig } from "./resolveDashboardConfig";
import { configActions } from "../../../store/config";
import { dateFilterConfigActions } from "../../../store/dateFilterConfig";
import { mergeDateFilterConfigWithOverrides } from "./mergeDateFilterConfigs";
import { resolvePermissions } from "./resolvePermissions";
import { permissionsActions } from "../../../store/permissions";
import { loadCatalog } from "./loadCatalog";
import { loadDashboardAlerts } from "./loadDashboardAlerts";
import { catalogActions } from "../../../store/catalog";
import { alertsActions } from "../../../store/alerts";
import { batchActions } from "redux-batched-actions";
import { loadUser } from "./loadUser";
import { userActions } from "../../../store/user";
import { loadDashboardList } from "./loadDashboardList";
import { listedDashboardsActions } from "../../../store/listedDashboards";
import { backendCapabilitiesActions } from "../../../store/backendCapabilities";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import { actionsToInitializeExistingDashboard, actionsToInitializeNewDashboard, } from "../common/stateInitializers";
import { executionResultsActions } from "../../../store/executionResults";
import { createDisplayFormMapFromCatalog } from "../../../../_staging/catalog/displayFormMap";
import { getPrivateContext } from "../../../store/_infra/contexts";
function loadDashboardFromBackend(ctx, privateCtx, dashboardRef) {
    var backend = ctx.backend, workspace = ctx.workspace, filterContextRef = ctx.filterContextRef;
    var preloadedDashboard = privateCtx.preloadedDashboard;
    if (preloadedDashboard && areObjRefsEqual(preloadedDashboard.ref, dashboardRef)) {
        return backend
            .workspace(workspace)
            .dashboards()
            .getDashboardReferencedObjects(preloadedDashboard, ["insight"])
            .then(function (references) {
            return {
                dashboard: preloadedDashboard,
                references: references,
            };
        });
    }
    return backend
        .workspace(workspace)
        .dashboards()
        .getDashboardWithReferences(dashboardRef, filterContextRef, { loadUserData: true }, ["insight"]);
}
function loadExistingDashboard(ctx, cmd, dashboardRef) {
    var backend, privateCtx, _a, dashboardWithReferences, config, permissions, catalog, alerts, user, listedDashboards, dashboard, insights, effectiveDateFilterConfig, initActions, batch, event;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                backend = ctx.backend;
                return [4 /*yield*/, call(getPrivateContext)];
            case 1:
                privateCtx = _b.sent();
                return [4 /*yield*/, all([
                        call(loadDashboardFromBackend, ctx, privateCtx, dashboardRef),
                        call(resolveDashboardConfig, ctx, cmd),
                        call(resolvePermissions, ctx, cmd),
                        call(loadCatalog, ctx),
                        call(loadDashboardAlerts, ctx),
                        call(loadUser, ctx),
                        call(loadDashboardList, ctx),
                    ])];
            case 2:
                _a = __read.apply(void 0, [_b.sent(), 7]), dashboardWithReferences = _a[0], config = _a[1], permissions = _a[2], catalog = _a[3], alerts = _a[4], user = _a[5], listedDashboards = _a[6];
                dashboard = dashboardWithReferences.dashboard, insights = dashboardWithReferences.references.insights;
                return [4 /*yield*/, call(mergeDateFilterConfigWithOverrides, ctx, cmd, config.dateFilterConfig, dashboard.dateFilterConfig)];
            case 3:
                effectiveDateFilterConfig = _b.sent();
                return [4 /*yield*/, call(actionsToInitializeExistingDashboard, ctx, dashboard, insights, config.settings, effectiveDateFilterConfig.config, createDisplayFormMapFromCatalog(catalog))];
            case 4:
                initActions = _b.sent();
                batch = batchActions(__spread([
                    backendCapabilitiesActions.setBackendCapabilities(backend.capabilities),
                    configActions.setConfig(config),
                    userActions.setUser(user),
                    permissionsActions.setPermissions(permissions),
                    catalogActions.setCatalogItems({
                        attributes: catalog.attributes(),
                        dateDatasets: catalog.dateDatasets(),
                        facts: catalog.facts(),
                        measures: catalog.measures(),
                    })
                ], initActions, [
                    alertsActions.setAlerts(alerts),
                    insightsActions.setInsights(insights),
                    dateFilterConfigActions.setDateFilterConfig({
                        dateFilterConfig: dashboard.dateFilterConfig,
                        effectiveDateFilterConfig: effectiveDateFilterConfig.config,
                        isUsingDashboardOverrides: effectiveDateFilterConfig.source === "dashboard",
                    }),
                    listedDashboardsActions.setListedDashboards(listedDashboards),
                ]), "@@GDC.DASH/BATCH.INIT.EXISTING");
                event = dashboardInitialized(ctx, dashboard, insights, config, permissions, cmd.correlationId);
                return [2 /*return*/, {
                        batch: batch,
                        event: event,
                    }];
        }
    });
}
function initializeNewDashboard(ctx, cmd) {
    var backend, _a, config, permissions, catalog, user, listedDashboards, batch, event;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                backend = ctx.backend;
                return [4 /*yield*/, all([
                        call(resolveDashboardConfig, ctx, cmd),
                        call(resolvePermissions, ctx, cmd),
                        call(loadCatalog, ctx),
                        call(loadUser, ctx),
                        call(loadDashboardList, ctx),
                    ])];
            case 1:
                _a = __read.apply(void 0, [_b.sent(), 5]), config = _a[0], permissions = _a[1], catalog = _a[2], user = _a[3], listedDashboards = _a[4];
                batch = batchActions(__spread([
                    backendCapabilitiesActions.setBackendCapabilities(backend.capabilities),
                    configActions.setConfig(config),
                    userActions.setUser(user),
                    permissionsActions.setPermissions(permissions),
                    catalogActions.setCatalogItems({
                        attributes: catalog.attributes(),
                        dateDatasets: catalog.dateDatasets(),
                        facts: catalog.facts(),
                        measures: catalog.measures(),
                    }),
                    listedDashboardsActions.setListedDashboards(listedDashboards),
                    executionResultsActions.clearAllExecutionResults()
                ], actionsToInitializeNewDashboard(config.dateFilterConfig), [
                    dateFilterConfigActions.setDateFilterConfig({
                        dateFilterConfig: undefined,
                        effectiveDateFilterConfig: config.dateFilterConfig,
                        isUsingDashboardOverrides: false,
                    }),
                ]), "@@GDC.DASH/BATCH.INIT.NEW");
                event = dashboardInitialized(ctx, undefined, [], config, permissions, cmd.correlationId);
                return [2 /*return*/, {
                        batch: batch,
                        event: event,
                    }];
        }
    });
}
export function initializeDashboardHandler(ctx, cmd) {
    var dashboardRef, result, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                dashboardRef = ctx.dashboardRef;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 9, , 11]);
                return [4 /*yield*/, put(loadingActions.setLoadingStart())];
            case 2:
                _a.sent();
                result = void 0;
                if (!dashboardRef) return [3 /*break*/, 4];
                return [4 /*yield*/, call(loadExistingDashboard, ctx, cmd, dashboardRef)];
            case 3:
                result = _a.sent();
                return [3 /*break*/, 6];
            case 4: return [4 /*yield*/, call(initializeNewDashboard, ctx, cmd)];
            case 5:
                result = _a.sent();
                _a.label = 6;
            case 6: return [4 /*yield*/, put(result.batch)];
            case 7:
                _a.sent();
                return [4 /*yield*/, put(loadingActions.setLoadingSuccess())];
            case 8:
                _a.sent();
                return [2 /*return*/, result.event];
            case 9:
                e_1 = _a.sent();
                return [4 /*yield*/, put(loadingActions.setLoadingError(e_1))];
            case 10:
                _a.sent();
                throw e_1;
            case 11: return [2 /*return*/];
        }
    });
}
//# sourceMappingURL=index.js.map
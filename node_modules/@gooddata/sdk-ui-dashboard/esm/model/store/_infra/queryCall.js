// (C) 2021 GoodData Corporation
import { __generator } from "tslib";
import { queryEnvelopeWithPromise } from "./queryProcessing";
import { call, put } from "redux-saga/effects";
/**
 * Runs the provided query and returns its result.
 *
 * @param q - query to run
 * @param refresh - indicates whether the query should ignore cached results and re-load data from backend
 */
export function query(q, refresh) {
    var _a, promise, envelope, waitForResult;
    if (refresh === void 0) { refresh = false; }
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = queryEnvelopeWithPromise(q, refresh), promise = _a.promise, envelope = _a.envelope;
                waitForResult = function () {
                    return promise;
                };
                /*
                 * dispatch the enveloped query. the envelope is setup so that upon query finish a promise will be resolved
                 */
                return [4 /*yield*/, put(envelope)];
            case 1:
                /*
                 * dispatch the enveloped query. the envelope is setup so that upon query finish a promise will be resolved
                 */
                _b.sent();
                return [4 /*yield*/, call(waitForResult)];
            case 2: return [2 /*return*/, _b.sent()];
        }
    });
}
/**
 * Runs the provided query, forcing refresh of any results that may be cached in the state, and returns its result.
 *
 * @param q - query to run
 */
export function queryFresh(q) {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, call(query, q, true)];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}
//# sourceMappingURL=queryCall.js.map
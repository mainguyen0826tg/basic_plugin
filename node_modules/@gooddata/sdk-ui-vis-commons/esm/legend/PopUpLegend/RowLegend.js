// (C) 2007-2021 GoodData Corporation
import React, { useState } from "react";
import { Icon } from "@gooddata/sdk-ui-kit";
import cx from "classnames";
import { LegendLabelItem } from "../LegendLabelItem";
import { LegendList } from "../LegendList";
var LEGEND_ROW_HEIGHT = 20;
var LEGEND_TOP_BOTTOM_PADDING = 10;
var useCheckOverflow = function () {
    var _a = useState(false), isOverflow = _a[0], setOverFlow = _a[1];
    var _b = useState(1), numOfUsedRow = _b[0], setNumOfUsedRow = _b[1];
    var getNumberOfRows = function (clientHeight) {
        return Math.ceil((clientHeight - LEGEND_TOP_BOTTOM_PADDING) / LEGEND_ROW_HEIGHT);
    };
    var checkOverFlow = function (element) {
        if (!element)
            return;
        var clientHeight = element.clientHeight, scrollHeight = element.scrollHeight;
        setOverFlow(scrollHeight > clientHeight);
        var numberOfRows = getNumberOfRows(clientHeight);
        setNumOfUsedRow(numberOfRows);
    };
    return [isOverflow, numOfUsedRow, checkOverFlow];
};
export var RowLegendIcoButton = function (props) {
    var isVisible = props.isVisible, isActive = props.isActive, onIconClick = props.onIconClick;
    if (!isVisible) {
        return null;
    }
    var handleOnClick = function (e) {
        e.stopPropagation();
        onIconClick();
    };
    var iconClasses = cx("legend-popup-icon s-legend-popup-icon", {
        "legend-popup-icon-active": isActive
    });
    return (React.createElement("div", { className: "legend-popup-button" },
        React.createElement("div", { onClick: handleOnClick, className: iconClasses },
            React.createElement(Icon.LegendMenu, null))));
};
export var RowLegend = function (props) {
    var series = props.series, _a = props.maxRowsCount, maxRowsCount = _a === void 0 ? 1 : _a, legendLabel = props.legendLabel, enableBorderRadius = props.enableBorderRadius, onDialogIconClick = props.onDialogIconClick, onLegendItemClick = props.onLegendItemClick, _b = props.isActive, isActive = _b === void 0 ? false : _b;
    var _c = useCheckOverflow(), isOverflow = _c[0], numOfUsedRow = _c[1], checkOverFlow = _c[2];
    var LEGEND_HEIGHT = maxRowsCount * LEGEND_ROW_HEIGHT + LEGEND_TOP_BOTTOM_PADDING;
    var itemsAlign = numOfUsedRow === 1 ? "flex-end" : "flex-start";
    return (React.createElement("div", { className: "legend-popup-row", style: { maxHeight: LEGEND_HEIGHT } },
        React.createElement("div", { className: "viz-legend static position-row" },
            React.createElement("div", { className: "series", style: {
                    justifyContent: itemsAlign
                }, ref: function (element) {
                    checkOverFlow(element);
                } },
                React.createElement(LegendLabelItem, { label: legendLabel }),
                React.createElement(LegendList, { enableBorderRadius: enableBorderRadius, series: series, onItemClick: onLegendItemClick }))),
        React.createElement(RowLegendIcoButton, { isActive: isActive, isVisible: isOverflow, onIconClick: onDialogIconClick })));
};
//# sourceMappingURL=RowLegend.js.map
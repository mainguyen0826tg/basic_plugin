import { __assign, __awaiter, __generator } from "tslib";
import { userLoginMd5FromAuthenticatedPrincipalWithAnonymous } from "../../../utils/api";
import { ANONYMOUS_USER_SETTINGS } from "../../constants";
// settings which are ignored from user level as they can be set up only for project and above levels
// no explicit type as every string is valid key from IUserWorkspaceSettings
var IGNORED_USER_SETTINGS = [
    "enableAnalyticalDashboardPermissions",
    "enableNewAnalyticalDashboardsNavigation",
];
var filterIgnoredUserSettings = function (userFeatureFlags) {
    var keptUserSettings = __assign({}, userFeatureFlags);
    for (var _i = 0, IGNORED_USER_SETTINGS_1 = IGNORED_USER_SETTINGS; _i < IGNORED_USER_SETTINGS_1.length; _i++) {
        var settingName = IGNORED_USER_SETTINGS_1[_i];
        delete keptUserSettings[settingName];
    }
    return keptUserSettings;
};
export var mergeWorkspaceAndUserSettings = function (workspaceFeatureFlags, userFeatureFlags) {
    return __assign(__assign({}, workspaceFeatureFlags), filterIgnoredUserSettings(userFeatureFlags));
};
var BearWorkspaceSettings = /** @class */ (function () {
    function BearWorkspaceSettings(authCall, workspace) {
        this.authCall = authCall;
        this.workspace = workspace;
    }
    BearWorkspaceSettings.prototype.getSettings = function () {
        var _this = this;
        return this.authCall(function (sdk) { return __awaiter(_this, void 0, void 0, function () {
            var flags;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, sdk.project.getProjectFeatureFlags(this.workspace)];
                    case 1:
                        flags = _a.sent();
                        return [2 /*return*/, __assign({ workspace: this.workspace }, flags)];
                }
            });
        }); });
    };
    BearWorkspaceSettings.prototype.getSettingsForCurrentUser = function () {
        var _this = this;
        return this.authCall(function (sdk, _a) {
            var getPrincipal = _a.getPrincipal;
            return __awaiter(_this, void 0, void 0, function () {
                var userLoginMd5, workspaceSettings, _b, workspaceFeatureFlags, userFeatureFlags, currentProfile, separators, language;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, userLoginMd5FromAuthenticatedPrincipalWithAnonymous(getPrincipal)];
                        case 1:
                            userLoginMd5 = _c.sent();
                            if (!!userLoginMd5) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.getSettings()];
                        case 2:
                            workspaceSettings = _c.sent();
                            return [2 /*return*/, __assign(__assign({}, ANONYMOUS_USER_SETTINGS), workspaceSettings)];
                        case 3: return [4 /*yield*/, Promise.all([
                                sdk.project.getProjectFeatureFlags(this.workspace),
                                // the getUserFeatureFlags returns all the feature flags (including the defaults)
                                // so we have to filter only the user specific values so as not to use defaults everywhere
                                sdk.user.getUserFeatureFlags(userLoginMd5, ["user"]),
                                sdk.user.getCurrentProfile(),
                                sdk.user.getUserRegionalNumberFormatting(userLoginMd5),
                            ])];
                        case 4:
                            _b = _c.sent(), workspaceFeatureFlags = _b[0], userFeatureFlags = _b[1], currentProfile = _b[2], separators = _b[3];
                            language = currentProfile.language;
                            return [2 /*return*/, __assign({ userId: userLoginMd5, workspace: this.workspace, locale: language, separators: separators }, mergeWorkspaceAndUserSettings(workspaceFeatureFlags, userFeatureFlags))];
                    }
                });
            });
        });
    };
    return BearWorkspaceSettings;
}());
export { BearWorkspaceSettings };
//# sourceMappingURL=settings.js.map
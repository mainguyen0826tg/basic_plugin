import { __assign, __extends, __read, __spread } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { Component } from "react";
import { Table, Column, Cell } from "fixed-data-table-2";
import cx from "classnames";
import noop from "lodash/noop";
var BORDER_HEIGHT = 1;
var preventDefault = function (e) { return e.preventDefault(); };
function isTouchDevice() {
    return "ontouchstart" in document.documentElement;
}
/**
 * @deprecated  This component is deprecated use List instead
 * @internal
 */
var LegacyList = /** @class */ (function (_super) {
    __extends(LegacyList, _super);
    function LegacyList(props) {
        var _this = _super.call(this, props) || this;
        _this.onSelect = function (_event, rowIndex) {
            var _a = _this.props, dataSource = _a.dataSource, onSelect = _a.onSelect;
            var item = dataSource.getObjectAt(rowIndex);
            if (item) {
                onSelect(item);
            }
        };
        _this.onScrollStart = function (_scrollX, scrollY) {
            _this.onScroll(_this.props.onScrollStart, scrollY);
        };
        _this.onScrollEnd = function (_scrollX, scrollY) {
            _this.onScroll(_this.props.onScroll, scrollY);
        };
        _this.renderCell = function (props) {
            var _a = _this.props, dataSource = _a.dataSource, rowItem = _a.rowItem;
            var item = dataSource.getObjectAt(props.rowIndex);
            var itemElement = React.cloneElement(rowItem, __assign(__assign({}, (item ? { item: item } : {})), { width: _this.props.width, isFirst: props.rowIndex === 0, isLast: props.rowIndex === dataSource.rowsCount - 1 }));
            return React.createElement(Cell, __assign({}, props), itemElement);
        };
        _this.state = {
            selected: null,
        };
        return _this;
    }
    LegacyList.prototype.componentDidMount = function () {
        var _this = this;
        var _a = this.props, scrollToSelected = _a.scrollToSelected, dataSource = _a.dataSource;
        if (scrollToSelected) {
            __spread(Array(dataSource.rowsCount).keys()).forEach(function (row) {
                var item = _this.props.dataSource.getObjectAt(row);
                if (item && item.selected) {
                    // Because list items start from 0 we need to add the +1 here
                    _this.setState({ selected: row + 1 });
                }
            });
        }
    };
    LegacyList.prototype.componentWillUnmount = function () {
        this.enablePageScrolling();
    };
    LegacyList.prototype.onScroll = function (method, scrollY) {
        if (method) {
            var _a = this.props, height = _a.height, itemHeight = _a.itemHeight;
            // vertical scroll position returned by fixed-data-table is converted to index of first visible item
            var rowIndex = Math.floor(scrollY / itemHeight);
            var visibleRange = Math.ceil(height / itemHeight);
            method(rowIndex, rowIndex + visibleRange);
        }
    };
    LegacyList.prototype.getClassNames = function () {
        return cx("gd-infinite-list", this.props.className);
    };
    LegacyList.prototype.disablePageScrolling = function () {
        document.body.addEventListener("wheel", preventDefault, { passive: false });
    };
    LegacyList.prototype.enablePageScrolling = function () {
        document.body.removeEventListener("wheel", preventDefault);
    };
    LegacyList.prototype.render = function () {
        var _a = this.props, width = _a.width, height = _a.height, itemHeight = _a.itemHeight, dataSource = _a.dataSource, itemHeightGetter = _a.itemHeightGetter;
        var selected = this.state.selected;
        // compensates for https://github.com/facebook/fixed-data-table/blob/5373535d98b08b270edd84d7ce12833a4478c6b6/src/FixedDataTableNew.react.js#L872
        var compensatedHeight = this.props.compensateBorder ? height + BORDER_HEIGHT * 2 : height;
        return (React.createElement("div", { className: this.getClassNames(), onMouseOver: this.disablePageScrolling, onMouseOut: this.enablePageScrolling },
            React.createElement(Table, { width: width, height: compensatedHeight, rowHeight: itemHeight, rowHeightGetter: itemHeightGetter, headerHeight: 0, rowsCount: dataSource.rowsCount, onRowClick: this.onSelect, onScrollStart: this.onScrollStart, onScrollEnd: this.onScrollEnd, touchScrollEnabled: isTouchDevice(), scrollToRow: selected },
                React.createElement(Column, { flexGrow: 1, width: 1, cell: this.renderCell }))));
    };
    LegacyList.defaultProps = {
        className: "",
        onScroll: noop,
        onScrollStart: noop,
        onSelect: noop,
        width: 200,
        height: 300,
        itemHeight: 28,
        itemHeightGetter: null,
        compensateBorder: true,
        scrollToSelected: false,
    };
    return LegacyList;
}(Component));
export { LegacyList };
//# sourceMappingURL=LegacyList.js.map
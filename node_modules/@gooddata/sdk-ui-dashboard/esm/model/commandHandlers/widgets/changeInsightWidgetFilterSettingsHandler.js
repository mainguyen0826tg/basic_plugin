// (C) 2021 GoodData Corporation
import { __generator } from "tslib";
import { selectWidgetsMap } from "../../store/layout/layoutSelectors";
import { call, put, select } from "redux-saga/effects";
import { validateExistingInsightWidget } from "./validation/widgetValidations";
import { layoutActions } from "../../store/layout";
import { insightWidgetFilterSettingsChanged } from "../../events/insight";
import { processFilterOp } from "./common/filterOperations";
import { validateAttributeFiltersToIgnore, validateDatasetForInsightWidgetDateFilter, } from "./validation/filterValidation";
var InsightWidgetFilterValidations = {
    dateDatasetValidator: validateDatasetForInsightWidgetDateFilter,
    attributeFilterValidator: validateAttributeFiltersToIgnore,
};
/**
 * Filter setting handler contains some of the more complex validations.
 *
 * If command specifies date dataset to use for date filter (meaning at the same time that date filter should be enabled),
 * then the date dataset validation occurs. This needs to perform complex query processing first to obtain all available
 * date datasets for the insight widget.
 *
 * If command specifies refs of display forms to ignore attribute filters by, then another validation occurs. This one
 * will ensure that the display form refs on the input represent valid, existing display forms. And then ensure that
 * those display forms are actually used in currently used attribute filters.
 */
export function changeInsightWidgetFilterSettingsHandler(ctx, cmd) {
    var widgets, insightWidget, result, dateDataSet, ignoredFilters, ignoreDashboardFilters;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, select(selectWidgetsMap)];
            case 1:
                widgets = _a.sent();
                insightWidget = validateExistingInsightWidget(widgets, cmd, ctx);
                return [4 /*yield*/, call(processFilterOp, ctx, InsightWidgetFilterValidations, cmd, insightWidget)];
            case 2:
                result = _a.sent();
                dateDataSet = result.dateDataSet, ignoredFilters = result.ignoredFilters;
                ignoreDashboardFilters = ignoredFilters === null || ignoredFilters === void 0 ? void 0 : ignoredFilters.map(function (filter) {
                    var filterReference = {
                        type: "attributeFilterReference",
                        displayForm: filter.attributeFilter.displayForm,
                    };
                    return filterReference;
                });
                return [4 /*yield*/, put(layoutActions.replaceWidgetFilterSettings({
                        ref: insightWidget.ref,
                        dateDataSet: dateDataSet === null || dateDataSet === void 0 ? void 0 : dateDataSet.dataSet.ref,
                        ignoreDashboardFilters: ignoreDashboardFilters,
                        undo: {
                            cmd: cmd,
                        },
                    }))];
            case 3:
                _a.sent();
                return [2 /*return*/, insightWidgetFilterSettingsChanged(ctx, insightWidget.ref, ignoredFilters !== null && ignoredFilters !== void 0 ? ignoredFilters : [], result.dateDataSet, cmd.correlationId)];
        }
    });
}
//# sourceMappingURL=changeInsightWidgetFilterSettingsHandler.js.map
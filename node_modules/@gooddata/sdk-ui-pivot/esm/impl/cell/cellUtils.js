import { __assign } from "tslib";
// (C) 2007-2021 GoodData Corporation
import cx from "classnames";
import { colors2Object, numberFormat } from "@gooddata/numberjs";
// TODO: see if we can use existing / common function for this
function getFormattedNumber(value, format, separators) {
    var parsedNumber = value === null ? "" : typeof value === "string" ? parseFloat(value) : value;
    return numberFormat(parsedNumber, format, undefined, separators);
}
// TODO: move to cell class; refactor tests
export function getCellClassNames(rowIndex, columnIndex, isDrillable) {
    return cx({
        "gd-cell-drillable": isDrillable,
    }, "gd-cell", "s-cell-" + rowIndex + "-" + columnIndex, "s-table-cell");
}
export function getMeasureCellFormattedValue(value, format, separators) {
    var formattedNumber = getFormattedNumber(value, format, separators);
    var label = colors2Object(formattedNumber).label;
    return label === "" ? "â€“" : label;
}
export function getMeasureCellStyle(value, format, separators, applyColor) {
    var formattedNumber = getFormattedNumber(value, format, separators);
    var _a = colors2Object(formattedNumber), backgroundColor = _a.backgroundColor, color = _a.color, label = _a.label;
    if (label === "") {
        return {
            color: "var(--gd-table-nullValueColor, var(--gd-palette-complementary-6, #94a1ad))",
            fontWeight: "bold",
        };
    }
    if (!applyColor) {
        return {};
    }
    return __assign(__assign({}, (color && { color: color })), (backgroundColor && { backgroundColor: backgroundColor }));
}
//# sourceMappingURL=cellUtils.js.map
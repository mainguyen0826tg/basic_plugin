import { __assign, __awaiter, __extends, __generator, __spreadArrays } from "tslib";
// (C) 2007-2018 GoodData Corporation
import React from "react";
import isEqual from "lodash/isEqual";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import { defaultErrorHandler, withContexts } from "@gooddata/sdk-ui";
import stringify from "json-stable-stringify";
import { AttributeElementsDefaultChildren } from "./AttributeElementsDefaultChildren";
var AttributeElementsCore = /** @class */ (function (_super) {
    __extends(AttributeElementsCore, _super);
    function AttributeElementsCore() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            validElements: null,
            isLoading: true,
            error: null,
        };
        _this.lastRequestedConfigHash = "";
        _this.getLoadingConfigHash = function (props) {
            return stringify({
                workspace: props.workspace,
                displayForm: props.displayForm,
                offset: props.offset,
                limit: props.limit,
                options: props.options,
                filters: props.filters,
            });
        };
        _this.getBackend = function () {
            return _this.props.backend.withTelemetry("AttributeElements", _this.props);
        };
        _this.loadMore = function () { return __awaiter(_this, void 0, void 0, function () {
            var moreItems_1, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // do not execute while still loading
                        if (this.state.isLoading) {
                            return [2 /*return*/];
                        }
                        this.setState({ isLoading: true, error: null });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.state.validElements.next()];
                    case 2:
                        moreItems_1 = _a.sent();
                        this.setState(function (state) { return (__assign(__assign({}, state), { isLoading: false, validElements: __assign(__assign(__assign({}, state.validElements), moreItems_1), { items: __spreadArrays(state.validElements.items, moreItems_1.items) }) })); });
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        this.setState({ isLoading: false, error: error_1 });
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        _this.getValidElements = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, workspace, options, displayForm, offset, limit, filters, configHash, elements, error_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, workspace = _a.workspace, options = _a.options, displayForm = _a.displayForm, offset = _a.offset, limit = _a.limit, filters = _a.filters;
                        this.setState({ isLoading: true, error: null });
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        configHash = this.getLoadingConfigHash(this.props);
                        this.lastRequestedConfigHash = configHash;
                        return [4 /*yield*/, this.getBackend()
                                .workspace(workspace)
                                .attributes()
                                .elements()
                                .forDisplayForm(displayForm)
                                .withOffset(offset || 0)
                                .withLimit(limit || 50)
                                .withOptions(options)
                                .withAttributeFilters(filters !== null && filters !== void 0 ? filters : [])
                                .query()];
                    case 2:
                        elements = _b.sent();
                        // only set the result if the data is still relevant
                        if (this.lastRequestedConfigHash === configHash) {
                            this.setState({ validElements: elements, isLoading: false });
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _b.sent();
                        this.setState({ isLoading: false, error: error_2 });
                        this.props.onError(error_2);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        return _this;
    }
    AttributeElementsCore.prototype.componentDidMount = function () {
        this.getValidElements();
    };
    AttributeElementsCore.prototype.componentDidUpdate = function (prevProps) {
        var needsInvalidation = !areObjRefsEqual(this.props.displayForm, prevProps.displayForm) ||
            !isEqual(this.props.filters, prevProps.filters) ||
            this.props.workspace !== prevProps.workspace ||
            !isEqual(this.props.options, prevProps.options);
        if (needsInvalidation) {
            this.getValidElements();
        }
    };
    AttributeElementsCore.prototype.render = function () {
        var _a = this.state, validElements = _a.validElements, isLoading = _a.isLoading, error = _a.error;
        return this.props.children({
            validElements: validElements,
            loadMore: this.loadMore,
            isLoading: isLoading,
            error: error,
        });
    };
    AttributeElementsCore.defaultProps = {
        options: {},
        children: AttributeElementsDefaultChildren,
        onError: defaultErrorHandler,
    };
    return AttributeElementsCore;
}(React.PureComponent));
/**
 * AttributeElements is a component that lists attribute values using a children function
 *
 * @public
 */
export var AttributeElements = withContexts(AttributeElementsCore);
//# sourceMappingURL=AttributeElements.js.map
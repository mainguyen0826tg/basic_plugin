import { __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { DefaultLocale } from "@gooddata/sdk-ui";
import ColorsSection from "../configurationControls/colors/ColorsSection";
import LegendSection from "../configurationControls/legend/LegendSection";
import { InternalIntlWrapper } from "../../utils/internalIntlProvider";
import { insightHasMeasures } from "@gooddata/sdk-model";
import { getMeasuresFromMdObject } from "../../utils/bucketHelper";
import noop from "lodash/noop";
var ConfigurationPanelContent = /** @class */ (function (_super) {
    __extends(ConfigurationPanelContent, _super);
    function ConfigurationPanelContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ConfigurationPanelContent.prototype.render = function () {
        return (React.createElement("div", { key: "config-" + this.props.type },
            React.createElement(InternalIntlWrapper, { locale: this.props.locale }, this.renderConfigurationPanel())));
    };
    ConfigurationPanelContent.prototype.isControlDisabled = function () {
        var _a = this.props, insight = _a.insight, isError = _a.isError, isLoading = _a.isLoading;
        return !insight || !insightHasMeasures(insight) || isError || isLoading;
    };
    ConfigurationPanelContent.prototype.renderColorSection = function () {
        var _a = this.props, properties = _a.properties, propertiesMeta = _a.propertiesMeta, pushData = _a.pushData, colors = _a.colors, featureFlags = _a.featureFlags, references = _a.references, insight = _a.insight, isLoading = _a.isLoading;
        var controlsDisabled = this.isControlDisabled();
        var hasMeasures = getMeasuresFromMdObject(insight).length > 0;
        return (React.createElement(ColorsSection, { properties: properties, propertiesMeta: propertiesMeta, references: references, colors: colors, controlsDisabled: controlsDisabled, pushData: pushData, hasMeasures: hasMeasures, showCustomPicker: featureFlags.enableCustomColorPicker, isLoading: isLoading }));
    };
    ConfigurationPanelContent.prototype.renderLegendSection = function () {
        var _a = this.props, properties = _a.properties, propertiesMeta = _a.propertiesMeta, pushData = _a.pushData;
        var controlsDisabled = this.isControlDisabled();
        return (React.createElement(LegendSection, { properties: properties, propertiesMeta: propertiesMeta, controlsDisabled: controlsDisabled, pushData: pushData }));
    };
    ConfigurationPanelContent.defaultProps = {
        properties: null,
        references: null,
        propertiesMeta: null,
        colors: null,
        locale: DefaultLocale,
        isError: false,
        isLoading: false,
        insight: null,
        pushData: noop,
        featureFlags: {},
        axis: null,
        panelConfig: {},
    };
    return ConfigurationPanelContent;
}(React.PureComponent));
export default ConfigurationPanelContent;
//# sourceMappingURL=ConfigurationPanelContent.js.map
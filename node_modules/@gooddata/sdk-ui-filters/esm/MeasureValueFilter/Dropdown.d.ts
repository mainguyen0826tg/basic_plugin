import React from "react";
import { WrappedComponentProps } from "react-intl";
import { ISeparators } from "@gooddata/sdk-ui";
import { MeasureValueFilterOperator, IMeasureValueFilterValue } from "./types";
import { WarningMessage } from "./typings";
interface IDropdownOwnProps {
    onApply: (operator: string, value: IMeasureValueFilterValue, treatNullValuesAsZero: boolean) => void;
    onCancel: () => void;
    operator?: MeasureValueFilterOperator;
    value?: IMeasureValueFilterValue;
    usePercentage?: boolean;
    warningMessage?: WarningMessage;
    locale?: string;
    anchorEl: HTMLElement | string;
    separators?: ISeparators;
    displayTreatNullAsZeroOption?: boolean;
    treatNullAsZeroValue?: boolean;
    enableOperatorSelection?: boolean;
}
declare type IDropdownProps = WrappedComponentProps & IDropdownOwnProps;
interface IDropdownState {
    displayDropdown: boolean;
}
export declare const DropdownWithIntl: React.ForwardRefExoticComponent<Pick<IDropdownProps, "locale" | "value" | "onCancel" | "separators" | "onApply" | "operator" | "usePercentage" | "warningMessage" | "treatNullAsZeroValue" | "displayTreatNullAsZeroOption" | "enableOperatorSelection" | "anchorEl"> & {
    forwardedRef?: React.Ref<any>;
} & React.RefAttributes<any>> & {
    WrappedComponent: React.ComponentType<IDropdownProps>;
};
export declare class Dropdown extends React.PureComponent<IDropdownOwnProps, IDropdownState> {
    render(): React.ReactNode;
}
export {};
//# sourceMappingURL=Dropdown.d.ts.map
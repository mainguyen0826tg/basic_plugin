// (C) 2019-2021 GoodData Corporation
import { bucketIsEmpty, idMatchMeasure, measureMasterIdentifier, bucketMeasures, } from "@gooddata/sdk-model";
import findIndex from "lodash/findIndex";
function buildBucketIndex(definition) {
    return definition.buckets.reduce(function (acc, val) {
        var id = val.localIdentifier ? val.localIdentifier : "unknown";
        acc[id] = val;
        return acc;
    }, {});
}
var ExecutionDefinitonMethods = /** @class */ (function () {
    function ExecutionDefinitonMethods(definition) {
        this.definition = definition;
        this._bucketByLocalId = buildBucketIndex(definition);
    }
    ExecutionDefinitonMethods.prototype.attributes = function () {
        return this.definition.attributes;
    };
    ExecutionDefinitonMethods.prototype.measures = function () {
        return this.definition.measures;
    };
    ExecutionDefinitonMethods.prototype.buckets = function () {
        return this.definition.buckets;
    };
    ExecutionDefinitonMethods.prototype.bucket = function (localId) {
        if (!localId) {
            return undefined;
        }
        return this._bucketByLocalId[localId];
    };
    ExecutionDefinitonMethods.prototype.bucketCount = function () {
        return this.definition.buckets.length;
    };
    ExecutionDefinitonMethods.prototype.hasBuckets = function () {
        return this.bucketCount() > 0;
    };
    ExecutionDefinitonMethods.prototype.isBucketEmpty = function (localId) {
        var bucket = this._bucketByLocalId[localId];
        if (!bucket) {
            return true;
        }
        return bucketIsEmpty(this._bucketByLocalId[localId]);
    };
    ExecutionDefinitonMethods.prototype.bucketMeasures = function (localId) {
        var bucket = this._bucketByLocalId[localId];
        if (!bucket) {
            return [];
        }
        return bucketMeasures(this._bucketByLocalId[localId]);
    };
    ExecutionDefinitonMethods.prototype.measure = function (localId) {
        return this.definition.measures.find(idMatchMeasure(localId));
    };
    ExecutionDefinitonMethods.prototype.measureIndex = function (localId) {
        return findIndex(this.definition.measures, idMatchMeasure(localId));
    };
    ExecutionDefinitonMethods.prototype.masterMeasureForDerived = function (localId) {
        var measure = this.measure(localId);
        if (!measure) {
            return;
        }
        var masterMeasureId = measureMasterIdentifier(measure);
        if (!masterMeasureId) {
            // TODO: revisit; this is weird but existing callers used to rely on the behavior;
            //  perhaps rename method?
            return measure;
        }
        return this.measure(masterMeasureId);
    };
    ExecutionDefinitonMethods.prototype.hasAttributes = function () {
        return this.definition.attributes.length > 0;
    };
    return ExecutionDefinitonMethods;
}());
export function newExecutionDefinitonMethods(definition) {
    return new ExecutionDefinitonMethods(definition);
}
//# sourceMappingURL=definitionMethods.js.map
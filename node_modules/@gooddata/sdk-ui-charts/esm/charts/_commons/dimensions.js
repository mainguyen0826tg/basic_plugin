// (C) 2019-2020 GoodData Corporation
import { __spreadArrays } from "tslib";
import { attributeLocalId, bucketAttribute, bucketAttributes, bucketIsEmpty, bucketsAttributes, bucketsFind, MeasureGroupIdentifier, newTwoDimensional, } from "@gooddata/sdk-model";
import { BucketNames } from "@gooddata/sdk-ui";
function isStackedChart(buckets, stackBucketName) {
    var stackBucket = bucketsFind(buckets, stackBucketName);
    return stackBucket && !bucketIsEmpty(stackBucket);
}
function stackedDimensions(buckets, viewBucketName, stackBucketName) {
    var viewBucket = bucketsFind(buckets, viewBucketName);
    var stackBucket = bucketsFind(buckets, stackBucketName);
    var viewByAttributes = viewBucket ? bucketAttributes(viewBucket) : [];
    var stackByAttribute = stackBucket && bucketAttribute(stackBucket);
    var stackByAttributeLocalIdentifier = stackByAttribute
        ? stackByAttribute.attribute.localIdentifier
        : undefined;
    var viewByAttributeLocalIdentifiers = viewByAttributes && viewByAttributes.map(attributeLocalId);
    return newTwoDimensional(stackByAttributeLocalIdentifier ? [stackByAttributeLocalIdentifier] : [], viewByAttributeLocalIdentifiers
        ? __spreadArrays(viewByAttributeLocalIdentifiers, [MeasureGroupIdentifier]) : [MeasureGroupIdentifier]);
}
export function defaultDimensions(def) {
    return newTwoDimensional([MeasureGroupIdentifier], bucketsAttributes(def.buckets).map(attributeLocalId));
}
export function stackedChartDimensions(def, viewBucketName, stackBucketName) {
    if (viewBucketName === void 0) { viewBucketName = BucketNames.VIEW; }
    if (stackBucketName === void 0) { stackBucketName = BucketNames.STACK; }
    var buckets = def.buckets;
    return isStackedChart(buckets, stackBucketName)
        ? stackedDimensions(buckets, viewBucketName, stackBucketName)
        : defaultDimensions(def);
}
export function pointyChartDimensions(def) {
    return newTwoDimensional(bucketsAttributes(def.buckets).map(attributeLocalId), [MeasureGroupIdentifier]);
}
export function roundChartDimensions(def) {
    var attributes = bucketsAttributes(def.buckets).map(attributeLocalId);
    if (attributes.length === 0) {
        return newTwoDimensional([], [MeasureGroupIdentifier]);
    }
    return newTwoDimensional([MeasureGroupIdentifier], attributes);
}
export function heatmapDimensions(def) {
    var view = bucketsFind(def.buckets, BucketNames.VIEW);
    var viewAttributeLocalIdentifiers = view ? bucketAttributes(view).map(attributeLocalId) : [];
    var stack = bucketsFind(def.buckets, BucketNames.STACK);
    if (!stack || bucketIsEmpty(stack)) {
        return newTwoDimensional(viewAttributeLocalIdentifiers, [MeasureGroupIdentifier]);
    }
    return newTwoDimensional(viewAttributeLocalIdentifiers, bucketAttributes(stack).map(attributeLocalId).concat([MeasureGroupIdentifier]));
}
export function treemapDimensions(def) {
    var attributes = bucketsAttributes(def.buckets);
    if (attributes.length === 1) {
        return newTwoDimensional([MeasureGroupIdentifier], attributes.map(attributeLocalId));
    }
    return newTwoDimensional(attributes.map(attributeLocalId), [MeasureGroupIdentifier]);
}
//# sourceMappingURL=dimensions.js.map
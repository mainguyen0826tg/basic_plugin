import { __extends } from "tslib";
// (C) 2019-2020 GoodData Corporation
import identity from "lodash/identity";
import { GroupableCatalogItemBuilder } from "./groupFactory";
import { newMeasure } from "@gooddata/sdk-model";
import { isMeasureMetadataObject } from "@gooddata/sdk-backend-spi";
import { builderFactory } from "../builder";
import { newMeasureMetadataObject } from "../metadata/measureFactory";
/**
 * Catalog measure builder
 * See {@link Builder}
 *
 * @beta
 */
var CatalogMeasureBuilder = /** @class */ (function (_super) {
    __extends(CatalogMeasureBuilder, _super);
    function CatalogMeasureBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CatalogMeasureBuilder.prototype.measure = function (measureOrRef, modifications) {
        if (!isMeasureMetadataObject(measureOrRef)) {
            this.item.measure = newMeasureMetadataObject(measureOrRef, modifications);
        }
        else {
            this.item.measure = measureOrRef;
        }
        return this;
    };
    CatalogMeasureBuilder.prototype.toExecutionModel = function (modifications) {
        var _this = this;
        if (modifications === void 0) { modifications = identity; }
        if (!this.item.measure) {
            throw new Error("Cannot convert catalog measure to execution model, no measure found!");
        }
        var defaultModifications = function (m) { var _a, _b; return m.alias((_a = _this.item.measure) === null || _a === void 0 ? void 0 : _a.title).format((_b = _this.item.measure) === null || _b === void 0 ? void 0 : _b.format); };
        return newMeasure(this.item.measure.ref, function (m) { return modifications(defaultModifications(m)); });
    };
    return CatalogMeasureBuilder;
}(GroupableCatalogItemBuilder));
export { CatalogMeasureBuilder };
/**
 * Catalog measure factory
 *
 * @param modifications - catalog measure builder modifications to perform
 * @returns created catalog measure
 * @beta
 */
export var newCatalogMeasure = function (modifications) {
    if (modifications === void 0) { modifications = identity; }
    return builderFactory(CatalogMeasureBuilder, { type: "measure" }, modifications);
};
//# sourceMappingURL=measureFactory.js.map
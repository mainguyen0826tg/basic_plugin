function getDisplayFormFromAttr(attrs, attributeName, displayFormName, property) {
    var _a, _b, _c, _d, _e;
    if (!displayFormName) {
        return (_b = (_a = attrs === null || attrs === void 0 ? void 0 : attrs[attributeName]) === null || _a === void 0 ? void 0 : _a.defaultDisplayForm) === null || _b === void 0 ? void 0 : _b[property];
    }
    return (_e = (_d = (_c = attrs === null || attrs === void 0 ? void 0 : attrs[attributeName]) === null || _c === void 0 ? void 0 : _c.displayForms) === null || _d === void 0 ? void 0 : _d[displayFormName]) === null || _e === void 0 ? void 0 : _e[property];
}
/**
 * CatalogHelper
 * is a tool that exposes API that to look up measures, attributes, visualizations and other metadata elements
 * example usage:
 *  import catalog from './catalog.json';
 *  const C = new CatalogHelper(catalog);
 *
 * @deprecated catalog helper is deprecated in favor of code-based catalog that can be generated by catalog-export tool
 * @public
 */
var CatalogHelper = /** @class */ (function () {
    function CatalogHelper(catalog) {
        var _a;
        this.measures = (_a = catalog.measures) !== null && _a !== void 0 ? _a : {};
        this.visualizations = catalog.visualizations;
        this.attributes = catalog.attributes;
        this.dateDataSets = catalog.dateDataSets;
    }
    CatalogHelper.prototype.measure = function (name) {
        var _a, _b;
        return (_b = (_a = this.measures) === null || _a === void 0 ? void 0 : _a[name]) === null || _b === void 0 ? void 0 : _b.identifier;
    };
    CatalogHelper.prototype.measureTags = function (name) {
        var _a, _b;
        return (_b = (_a = this.measures) === null || _a === void 0 ? void 0 : _a[name]) === null || _b === void 0 ? void 0 : _b.tags;
    };
    CatalogHelper.prototype.visualization = function (name) {
        var _a, _b;
        return (_b = (_a = this.visualizations) === null || _a === void 0 ? void 0 : _a[name]) === null || _b === void 0 ? void 0 : _b.identifier;
    };
    CatalogHelper.prototype.visualizationTags = function (name) {
        var _a, _b;
        return (_b = (_a = this.visualizations) === null || _a === void 0 ? void 0 : _a[name]) === null || _b === void 0 ? void 0 : _b.tags;
    };
    CatalogHelper.prototype.attribute = function (attributeName) {
        var _a, _b;
        return (_b = (_a = this.attributes) === null || _a === void 0 ? void 0 : _a[attributeName]) === null || _b === void 0 ? void 0 : _b.identifier;
    };
    CatalogHelper.prototype.attributeTags = function (attributeName) {
        var _a, _b;
        return (_b = (_a = this.attributes) === null || _a === void 0 ? void 0 : _a[attributeName]) === null || _b === void 0 ? void 0 : _b.tags;
    };
    CatalogHelper.prototype.attributeDisplayForm = function (attributeName, displayFormName) {
        return getDisplayFormFromAttr(this.attributes, attributeName, displayFormName, "identifier");
    };
    CatalogHelper.prototype.attributeDisplayFormTags = function (attributeName, displayFormName) {
        return getDisplayFormFromAttr(this.attributes, attributeName, displayFormName, "tags");
    };
    CatalogHelper.prototype.dateDataSet = function (dataSetName) {
        var _a, _b;
        return (_b = (_a = this.dateDataSets) === null || _a === void 0 ? void 0 : _a[dataSetName]) === null || _b === void 0 ? void 0 : _b.identifier;
    };
    CatalogHelper.prototype.dateDataSetTags = function (dataSetName) {
        var _a, _b;
        return (_b = (_a = this.dateDataSets) === null || _a === void 0 ? void 0 : _a[dataSetName]) === null || _b === void 0 ? void 0 : _b.tags;
    };
    CatalogHelper.prototype.dateDataSetAttribute = function (dataSetName, attrName) {
        var _a, _b, _c, _d;
        return (_d = (_c = (_b = (_a = this.dateDataSets) === null || _a === void 0 ? void 0 : _a[dataSetName]) === null || _b === void 0 ? void 0 : _b.attributes) === null || _c === void 0 ? void 0 : _c[attrName]) === null || _d === void 0 ? void 0 : _d.identifier;
    };
    CatalogHelper.prototype.dateDataSetAttributeTags = function (dataSetName, attrName) {
        var _a, _b, _c, _d;
        return (_d = (_c = (_b = (_a = this.dateDataSets) === null || _a === void 0 ? void 0 : _a[dataSetName]) === null || _b === void 0 ? void 0 : _b.attributes) === null || _c === void 0 ? void 0 : _c[attrName]) === null || _d === void 0 ? void 0 : _d.tags;
    };
    CatalogHelper.prototype.dateDataSetDisplayForm = function (dataSetName, attributeName, displayFormName) {
        var _a, _b;
        var attrs = (_b = (_a = this.dateDataSets) === null || _a === void 0 ? void 0 : _a[dataSetName]) === null || _b === void 0 ? void 0 : _b.attributes;
        return getDisplayFormFromAttr(attrs, attributeName, displayFormName, "identifier");
    };
    CatalogHelper.prototype.dateDataSetDisplayFormTags = function (dataSetName, attributeName, displayFormName) {
        var _a, _b;
        var attrs = (_b = (_a = this.dateDataSets) === null || _a === void 0 ? void 0 : _a[dataSetName]) === null || _b === void 0 ? void 0 : _b.attributes;
        return getDisplayFormFromAttr(attrs, attributeName, displayFormName, "tags");
    };
    return CatalogHelper;
}());
export { CatalogHelper };
//# sourceMappingURL=CatalogHelper.js.map
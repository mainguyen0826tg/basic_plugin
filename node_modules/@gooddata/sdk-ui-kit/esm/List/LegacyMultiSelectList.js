import { __extends } from "tslib";
// (C) 2020 GoodData Corporation
import React, { Component } from "react";
import { injectIntl } from "react-intl";
import cx from "classnames";
import noop from "lodash/noop";
import { Button } from "../Button";
import { LegacyList } from "./LegacyList";
import { LegacyListItem } from "./LegacyListItem";
import LegacyMultiSelectListItem from "./LegacyMultiSelectListItem";
import { guidFor } from "./guid";
import { FlexDimensions } from "../FlexDimensions";
/**
 * @deprecated  This component is deprecated use MultiSelectList
 * @internal
 */
var LegacyMultiSelectList = /** @class */ (function (_super) {
    __extends(LegacyMultiSelectList, _super);
    function LegacyMultiSelectList() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onActionCheckboxChange = function () {
            var _a = _this.props, onSelectAll = _a.onSelectAll, onSelectNone = _a.onSelectNone, isInverted = _a.isInverted, isSearching = _a.isSearching;
            if (_this.isAllSelected() ||
                (!isInverted && isSearching && _this.isIndefiniteSelection && !_this.isEmpty())) {
                return onSelectNone();
            }
            return onSelectAll();
        };
        return _this;
    }
    LegacyMultiSelectList.prototype.getSelectableItems = function () {
        var props = this.props;
        return props.items.map(function (source) { return ({
            source: source,
            onSelect: props.onSelect,
            onMouseOver: props.onItemMouseOver,
            onMouseOut: props.onItemMouseOut,
            onOnly: props.onSelectOnly,
            selected: props.isSelected(source),
            id: props.getItemKey(source),
        }); });
    };
    LegacyMultiSelectList.prototype.getRowItem = function () {
        var _a = this.props, rowItem = _a.rowItem, listItemClass = _a.listItemClass;
        return rowItem || React.createElement(LegacyListItem, { listItemClass: listItemClass });
    };
    LegacyMultiSelectList.prototype.getSelectionString = function (selection) {
        var intl = this.props.intl;
        if (!selection.length) {
            return "";
        }
        return selection
            .map(function (item) {
            if (item.available !== undefined && !item.available) {
                return intl.formatMessage({ id: "gs.list.notAvailableAbbreviation" });
            }
            return item.title || "(" + intl.formatMessage({ id: "empty_value" }) + ")";
        })
            .join(", ");
    };
    LegacyMultiSelectList.prototype.getDataSource = function () {
        var selectableItems = this.getSelectableItems();
        return {
            rowsCount: this.props.itemsCount || selectableItems.length,
            getObjectAt: function (rowIndex) { return selectableItems[rowIndex]; },
        };
    };
    LegacyMultiSelectList.prototype.isEmpty = function () {
        var _a = this.props, selection = _a.selection, itemsCount = _a.itemsCount, isInverted = _a.isInverted, isSearching = _a.isSearching, items = _a.items, isSelected = _a.isSelected;
        if (selection.length === 0) {
            return !isInverted;
        }
        if (isSearching) {
            return items.every(function (item) { return !isSelected(item); });
        }
        return (selection.length === 0 && !isInverted) || (selection.length === itemsCount && isInverted);
    };
    LegacyMultiSelectList.prototype.isPositiveSelection = function () {
        var _a = this.props, isInverted = _a.isInverted, selection = _a.selection;
        return selection.length > 0 && !isInverted;
    };
    LegacyMultiSelectList.prototype.isIndefiniteSelection = function () {
        var _a = this.props, selection = _a.selection, isSearching = _a.isSearching, items = _a.items, isSelected = _a.isSelected, filteredItemsCount = _a.filteredItemsCount;
        if (selection.length === 0) {
            return false;
        }
        if (isSearching) {
            var selectedItems = items.filter(function (item) { return isSelected(item); });
            var selectedItemsCount = selectedItems.length;
            return selectedItemsCount !== 0 && selectedItemsCount !== filteredItemsCount;
        }
        return true;
    };
    LegacyMultiSelectList.prototype.isAllSelected = function () {
        var _a = this.props, itemsCount = _a.itemsCount, isInverted = _a.isInverted, isSearching = _a.isSearching, items = _a.items, isSelected = _a.isSelected, selection = _a.selection;
        if (isSearching) {
            var selectedItemsCount = items.filter(function (item) { return isSelected(item); }).length;
            var totalItemsCount = items.filter(function (item) { return item !== null; }).length;
            return selectedItemsCount === totalItemsCount;
        }
        return isInverted ? selection.length === 0 : selection.length === itemsCount;
    };
    LegacyMultiSelectList.prototype.renderSearchResultsLength = function () {
        var _a = this.props, itemsCount = _a.itemsCount, isSearching = _a.isSearching, intl = _a.intl;
        if (isSearching && itemsCount > 0) {
            return (React.createElement("span", { className: "gd-list-actions-selection-size s-list-search-selection-size" },
                intl.formatMessage({ id: "gs.list.searchResults" }),
                " (",
                itemsCount,
                ")"));
        }
        return null;
    };
    LegacyMultiSelectList.prototype.renderActions = function () {
        var _a = this.props, selectAllCheckbox = _a.selectAllCheckbox, intl = _a.intl;
        if (selectAllCheckbox) {
            var checkboxClasses = cx("input-checkbox", "gd-checkbox-selection", {
                "checkbox-indefinite": this.isIndefiniteSelection(),
            });
            var labelClasses = cx("input-checkbox-label", "s-select-all-checkbox");
            var checkbox = (React.createElement("label", { className: labelClasses },
                React.createElement("input", { readOnly: true, type: "checkbox", className: checkboxClasses, checked: !this.isEmpty(), onChange: this.onActionCheckboxChange }),
                React.createElement("span", { className: "input-label-text" }, intl.formatMessage({ id: "gs.list.all" }))));
            return (React.createElement("div", { className: "gd-list-actions gd-list-actions-invertable" },
                checkbox,
                this.renderSearchResultsLength()));
        }
        return (React.createElement("div", { className: "gd-list-actions" },
            React.createElement(Button, { className: "gd-button-link", tagName: "a", onClick: this.props.onSelectAll, value: intl.formatMessage({ id: "gs.list.selectAll" }) }),
            React.createElement(Button, { className: "gd-button-link", tagName: "a", onClick: this.props.onSelectNone, value: intl.formatMessage({ id: "gs.list.clear" }) })));
    };
    LegacyMultiSelectList.prototype.renderStatusBar = function () {
        var _a = this.props, selectAllCheckbox = _a.selectAllCheckbox, selection = _a.selection, isInverted = _a.isInverted, tagName = _a.tagName, intl = _a.intl;
        if (!selectAllCheckbox) {
            return null;
        }
        var attributeName = (React.createElement("span", { className: "gd-shortened-text gd-attribute-name s-dropdown-attribute-filter-name", title: tagName }, tagName));
        var selectionItemsStr = this.getSelectionString(selection);
        var isSelectionEmpty = selection.length === 0;
        var invertedInfo = !isSelectionEmpty && isInverted ? (React.createElement("span", null,
            React.createElement("b", null, intl.formatMessage({ id: "gs.list.all" })),
            "\u00A0",
            intl.formatMessage({ id: "gs.list.except" }),
            "\u00A0")) : null;
        var selectionList = !isSelectionEmpty ? (React.createElement("span", { className: "gd-shortened-text gd-selection-list s-dropdown-attribute-selection-list", title: selectionItemsStr }, "" + selectionItemsStr)) : null;
        var selectionLengthInfo = selection.length > 1 ? "\u00A0(" + selection.length + ")" : null;
        var is = React.createElement("span", null,
            "\u00A0",
            intl.formatMessage({ id: "gs.list.is" }),
            "\u00A0");
        var allOrNone = isSelectionEmpty &&
            (!isInverted ? ("(" + intl.formatMessage({ id: "gs.filterLabel.none" }) + ")") : (React.createElement("b", null, intl.formatMessage({ id: "gs.list.all" }))));
        return (React.createElement("div", { className: "gd-list-status-bar s-list-status-bar" },
            attributeName,
            is,
            allOrNone,
            invertedInfo,
            selectionList,
            selectionLengthInfo));
    };
    LegacyMultiSelectList.prototype.render = function () {
        var _a = this.props, isMobile = _a.isMobile, width = _a.width, height = _a.height, itemHeight = _a.itemHeight;
        var rowItem = this.getRowItem();
        var dataSource = this.getDataSource();
        return (React.createElement("div", { className: "gd-flex-item-stretch-mobile gd-flex-row-container-mobile" },
            this.renderActions(),
            React.createElement(FlexDimensions, { measureHeight: isMobile, measureWidth: isMobile || !width, className: "gd-flex-item-stretch-mobile" },
                React.createElement(LegacyList, { className: "is-multiselect", width: width, height: height, itemHeight: itemHeight, dataSource: dataSource, rowItem: rowItem, onScroll: this.props.onRangeChange, compensateBorder: !isMobile })),
            this.renderStatusBar()));
    };
    LegacyMultiSelectList.defaultProps = {
        isInverted: false,
        isSearching: false,
        selection: [],
        filtered: false,
        getItemKey: guidFor,
        isFiltered: false,
        isMobile: false,
        isSelected: function () { return false; },
        listItemClass: LegacyMultiSelectListItem,
        maxSelectionSize: 500,
        filteredItemsCount: 0,
        onItemMouseOut: noop,
        onItemMouseOver: noop,
        onRangeChange: noop,
        onSelect: noop,
        onSelectAll: noop,
        onSelectNone: noop,
        onSelectOnly: noop,
        rowItem: null,
        selectAllCheckbox: false,
        tagName: "",
    };
    return LegacyMultiSelectList;
}(Component));
export { LegacyMultiSelectList };
/**
 * @internal
 * @deprecated This component is deprecated use MultiSelectList instead
 */
var LegacyMultiSelectListWithIntl = injectIntl(LegacyMultiSelectList);
export default LegacyMultiSelectListWithIntl;
//# sourceMappingURL=LegacyMultiSelectList.js.map
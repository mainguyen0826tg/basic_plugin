import { __assign } from "tslib";
// (C) 2020 GoodData Corporation
import isEmpty from "lodash/isEmpty";
import isFinite from "lodash/isFinite";
import escape from "lodash/escape";
import { DEFAULT_PUSHPIN_COLOR_VALUE, NULL_TOOLTIP_VALUE } from "./constants/geoChart";
import { parseGeoProperties } from "./helpers/geoChart/data";
import { formatValueForTooltip, getTooltipContentWidth } from "./helpers/geoChart/format";
var TOOLTIP_FULLSCREEN_THRESHOLD = 480;
export var TOOLTIP_MAX_WIDTH = 320;
function isTooltipItemValid(item) {
    if (!item) {
        return false;
    }
    var title = item.title;
    return Boolean(title);
}
function escapeAttributeValue(value) {
    return isFinite(value) ? value : escape(String(value));
}
function formatMeasure(item, separators) {
    var title = item.title, value = item.value, format = item.format;
    return {
        title: title,
        value: isFinite(value) ? formatValueForTooltip(value, format, separators) : NULL_TOOLTIP_VALUE
    };
}
function formatAttribute(item) {
    var value = item.value;
    return __assign(__assign({}, item), { value: value ? escapeAttributeValue(value) : NULL_TOOLTIP_VALUE });
}
// Tooltips are now switched off in edit/export mode
function isTooltipDisabled(config) {
    var _a = config.viewport, viewport = _a === void 0 ? {} : _a;
    return Boolean(viewport.frozen);
}
function isTooltipShownInFullScreen() {
    return document.documentElement.clientWidth <= TOOLTIP_FULLSCREEN_THRESHOLD;
}
export function shouldShowTooltip(geoProperties) {
    if (isEmpty(geoProperties)) {
        return false;
    }
    var _a = geoProperties, locationName = _a.locationName, color = _a.color, size = _a.size, segment = _a.segment;
    return (isTooltipItemValid(locationName) ||
        isTooltipItemValid(size) ||
        isTooltipItemValid(color) ||
        isTooltipItemValid(segment));
}
function getInteractionMessage(drillableItems, intl) {
    var message = intl ? intl.formatMessage({ id: "visualization.tooltip.interaction" }) : null;
    return (drillableItems === null || drillableItems === void 0 ? void 0 : drillableItems.length) && intl ? "<div class=\"gd-viz-tooltip-interaction\">" + message + "</div>" : "";
}
export function getTooltipHtml(geoProperties, tooltipStroke, maxWidth, separators, drillableItems, intl) {
    var _a = geoProperties || {}, _b = _a.locationName, locationName = _b === void 0 ? {} : _b, _c = _a.size, size = _c === void 0 ? {} : _c, _d = _a.color, color = _d === void 0 ? {} : _d, _f = _a.segment, segment = _f === void 0 ? {} : _f;
    var interactionMessage = getInteractionMessage(drillableItems, intl);
    var tooltipItems = [
        formatAttribute(locationName),
        formatMeasure(size, separators),
        formatMeasure(color, separators),
        formatAttribute(segment),
    ]
        .map(getTooltipItemHtml)
        .join("");
    return "<div class=\"gd-viz-tooltip\" style=\"max-width:" + maxWidth + "px\">\n                <span class=\"stroke gd-viz-tooltip-stroke\" style=\"border-top-color: " + tooltipStroke + "\"></span>\n                <div class=\"content gd-viz-tooltip-content\">" + tooltipItems + interactionMessage + "</div>\n            </div>";
}
function getTooltipItemHtml(item) {
    if (!isTooltipItemValid(item)) {
        return "";
    }
    // value is escaped in formatAttribute or formatMeasure function
    var title = item.title, value = item.value;
    return "<div class=\"gd-viz-tooltip-item\">\n                <span class=\"gd-viz-tooltip-title\">" + escape(title) + "</span>\n                <div class=\"gd-viz-tooltip-value-wraper\">\n                    <span class=\"gd-viz-tooltip-value\">" + value + "</span>\n                </div>\n            </div>";
}
export var handlePushpinMouseEnter = function (e, chart, tooltip, config, drillableItems, intl) {
    var _a, _b;
    if (isTooltipDisabled(config)) {
        return;
    }
    var separators = config.separators;
    var feature = e.features[0];
    var properties = feature.properties;
    var parsedProps = parseGeoProperties(properties);
    if (!shouldShowTooltip(parsedProps)) {
        return;
    }
    chart.getCanvas().style.cursor = "pointer";
    var coordinates = feature.geometry.coordinates.slice();
    var tooltipStroke = (_b = (_a = parsedProps === null || parsedProps === void 0 ? void 0 : parsedProps.color) === null || _a === void 0 ? void 0 : _a.background) !== null && _b !== void 0 ? _b : DEFAULT_PUSHPIN_COLOR_VALUE;
    var isFullScreenTooltip = isTooltipShownInFullScreen();
    var chartWidth = chart.getCanvas().clientWidth;
    var maxTooltipContentWidth = getTooltipContentWidth(isFullScreenTooltip, chartWidth, TOOLTIP_MAX_WIDTH);
    var tooltipHtml = getTooltipHtml(parsedProps, tooltipStroke, maxTooltipContentWidth, separators, drillableItems, intl);
    tooltip
        .setLngLat(coordinates)
        .setHTML(tooltipHtml)
        .setMaxWidth(maxTooltipContentWidth + "px")
        .addTo(chart);
};
export var handlePushpinMouseLeave = function (_e, chart, tooltip, config) {
    if (isTooltipDisabled(config)) {
        return;
    }
    chart.getCanvas().style.cursor = "";
    tooltip.remove();
};
//# sourceMappingURL=geoChartTooltip.js.map
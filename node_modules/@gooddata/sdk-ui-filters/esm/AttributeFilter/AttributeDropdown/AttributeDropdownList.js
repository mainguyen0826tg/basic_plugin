// (C) 2019 GoodData Corporation
import React, { useCallback } from "react";
import { FormattedMessage } from "react-intl";
import { LegacyInvertableList, LoadingMask } from "@gooddata/sdk-ui-kit";
import { AttributeFilterItem } from "./AttributeFilterItem";
import { isNonEmptyListItem } from "./types";
var ITEM_HEIGHT = 28;
export var MAX_SELECTION_SIZE = 500;
var VISIBLE_ITEMS_COUNT = 10;
var ListLoading = function () { return React.createElement(LoadingMask, { height: 306 }); };
var ListError = function () { return (React.createElement("div", { className: "gd-message error" },
    React.createElement(FormattedMessage, { id: "gs.list.error" }))); };
export var AttributeDropdownList = function (_a) {
    var items = _a.items, totalCount = _a.totalCount, error = _a.error, isLoading = _a.isLoading, selectedItems = _a.selectedItems, isInverted = _a.isInverted, onRangeChange = _a.onRangeChange, onSelect = _a.onSelect, onSearch = _a.onSearch, searchString = _a.searchString;
    if (error) {
        return React.createElement(ListError, null);
    }
    var getItemKey = useCallback(function (i) {
        var _a;
        var isSelectionByUri = !!((_a = selectedItems[0]) === null || _a === void 0 ? void 0 : _a.uri);
        return isNonEmptyListItem(i) ? (isSelectionByUri ? i.uri : i.title) : "empty";
    }, []);
    return (React.createElement(LegacyInvertableList, { items: items, itemsCount: totalCount, filteredItemsCount: totalCount, selection: selectedItems, isLoading: isLoading, isLoadingClass: ListLoading, noItemsFound: !items.length, isInverted: isInverted, showSearchField: true, onSearch: onSearch, searchString: searchString, rowItem: React.createElement(AttributeFilterItem, null), maxSelectionSize: MAX_SELECTION_SIZE, itemHeight: ITEM_HEIGHT, height: ITEM_HEIGHT * VISIBLE_ITEMS_COUNT, onRangeChange: onRangeChange, onSelect: onSelect, getItemKey: getItemKey }));
};
//# sourceMappingURL=AttributeDropdownList.js.map
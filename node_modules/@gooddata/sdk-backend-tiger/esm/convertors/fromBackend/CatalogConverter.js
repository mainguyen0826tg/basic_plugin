// (C) 2019-2021 GoodData Corporation
import { idRef } from "@gooddata/sdk-model";
import { toSdkGranularity } from "./dateGranularityConversions";
import { newAttributeDisplayFormMetadataObject, newCatalogAttribute, newCatalogDateAttribute, newCatalogDateDataset, newCatalogFact, newCatalogMeasure, } from "@gooddata/sdk-backend-base";
import { commonMetadataObjectModifications } from "./MetadataConverter";
import { isInheritedObject } from "./utils";
var commonGroupableCatalogItemModifications = function (item) {
    return function (builder) {
        var _a;
        var tags = (((_a = item.attributes) === null || _a === void 0 ? void 0 : _a.tags) || []).map(function (tag) { return idRef(tag, "tag"); });
        return builder.groups(tags);
    };
};
var tigerLabelToDisplayFormMd = function (label) {
    return newAttributeDisplayFormMetadataObject(idRef(label.id, "displayForm"), commonMetadataObjectModifications(label));
};
export var convertAttribute = function (attribute, defaultLabel, geoLabels, allLabels) {
    var geoPinDisplayForms = geoLabels.map(tigerLabelToDisplayFormMd);
    var displayForms = allLabels.map(tigerLabelToDisplayFormMd);
    return newCatalogAttribute(function (catalogA) {
        return catalogA
            .attribute(idRef(attribute.id, "attribute"), function (a) {
            return a.modify(commonMetadataObjectModifications(attribute));
        })
            .defaultDisplayForm(idRef(defaultLabel.id, "displayForm"), function (df) {
            return df.modify(commonMetadataObjectModifications(defaultLabel));
        })
            .geoPinDisplayForms(geoPinDisplayForms)
            .displayForms(displayForms)
            .modify(commonGroupableCatalogItemModifications(attribute));
    });
};
export var convertMeasure = function (measure) {
    var _a;
    var _b = ((_a = measure.attributes) === null || _a === void 0 ? void 0 : _a.content) || {}, _c = _b.maql, maql = _c === void 0 ? "" : _c, _d = _b.format, format = _d === void 0 ? "" : _d;
    return newCatalogMeasure(function (catalogM) {
        return catalogM
            .measure(idRef(measure.id, "measure"), function (m) {
            return m
                .modify(commonMetadataObjectModifications(measure))
                .expression(maql)
                .format(format)
                .isLocked(isInheritedObject(measure.id));
        })
            .modify(commonGroupableCatalogItemModifications(measure));
    });
};
export var convertFact = function (fact) {
    return newCatalogFact(function (catalogF) {
        return catalogF
            .fact(idRef(fact.id, "fact"), function (f) { return f.modify(commonMetadataObjectModifications(fact)); })
            .modify(commonGroupableCatalogItemModifications(fact));
    });
};
export var convertDateAttribute = function (attribute, label, allLabels) {
    var displayForms = allLabels.map(tigerLabelToDisplayFormMd);
    return newCatalogDateAttribute(function (dateAttribute) {
        return dateAttribute
            .granularity(toSdkGranularity(attribute.attributes.granularity))
            .attribute(idRef(attribute.id, "attribute"), function (a) {
            return a.modify(commonMetadataObjectModifications(attribute)).displayForms(displayForms);
        })
            .defaultDisplayForm(idRef(label.id, "displayForm"), function (df) {
            return df.modify(commonMetadataObjectModifications(label));
        });
    });
};
export var convertDateDataset = function (dataset, attributes) {
    return newCatalogDateDataset(function (dateDataset) {
        return dateDataset
            .relevance(0)
            .dataSet(idRef(dataset.id, "dataSet"), function (m) {
            var _a, _b;
            return m
                .id(dataset.id)
                .title(((_a = dataset.attributes) === null || _a === void 0 ? void 0 : _a.title) || "")
                .description(((_b = dataset.attributes) === null || _b === void 0 ? void 0 : _b.description) || "")
                .uri(dataset.links.self)
                .production(true)
                .unlisted(false);
        })
            .dateAttributes(attributes);
    });
};
//# sourceMappingURL=CatalogConverter.js.map
import { __generator, __read, __spread } from "tslib";
import { all, call, select } from "redux-saga/effects";
import { createQueryService } from "../store/_infra/queryService";
import { areObjRefsEqual, filterObjRef, idRef, insightFilters, insightMeasures, isAllTimeDateFilter, isAttributeFilter, isDateFilter, isMeasureValueFilter, isRankingFilter, isSimpleMeasure, measureFilters, newAllTimeFilter, objRefToString, uriRef, } from "@gooddata/sdk-model";
import { selectAllFiltersForWidgetByRef, selectWidgetByRef } from "../store/layout/layoutSelectors";
import { selectInsightByRef } from "../store/insights/insightsSelectors";
import { invalidQueryArguments } from "../events/general";
import { isDashboardAttributeFilterReference, isInsightWidget, } from "@gooddata/sdk-backend-spi";
import compact from "lodash/compact";
import { selectAllCatalogDateDatasetsMap } from "../store/catalog/catalogSelectors";
import { resolveDisplayFormMetadata } from "../utils/displayFormResolver";
import invariant from "ts-invariant";
import isEmpty from "lodash/isEmpty";
export var QueryWidgetFiltersService = createQueryService("GDC.DASH/QUERY.WIDGET.FILTERS", queryService);
function refMatchesMdObject(ref, mdObject, type) {
    return (areObjRefsEqual(ref, mdObject.ref) ||
        areObjRefsEqual(ref, idRef(mdObject.id, type)) ||
        areObjRefsEqual(ref, uriRef(mdObject.uri)));
}
function loadDisplayFormsForAttributeFilters(ctx, filters) {
    var refs, resolvedObjects;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                refs = filters.map(filterObjRef);
                return [4 /*yield*/, call(resolveDisplayFormMetadata, ctx, compact(refs))];
            case 1:
                resolvedObjects = _a.sent();
                // if some display forms could not be resolved then there is something seriously amiss
                invariant(isEmpty(resolvedObjects.missing));
                return [2 /*return*/, filters.map(function (filter) {
                        return {
                            filter: filter,
                            displayForm: resolvedObjects.resolved.get(filterObjRef(filter)),
                        };
                    })];
        }
    });
}
function selectDateDatasetsForDateFilters(state, filters) {
    var fromCatalog = selectAllCatalogDateDatasetsMap(state);
    return filters.map(function (filter) {
        var dateDataset = fromCatalog.get(filterObjRef(filter));
        return {
            dateDataset: dateDataset,
            filter: filter,
        };
    });
}
function getResolvedInsightAttributeFilters(ctx, widget, dashboardAttributeFilters, insightAttributeFilters) {
    var resolvedDashboardFilters;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, call(getResolvedAttributeFilters, ctx, widget, dashboardAttributeFilters)];
            case 1:
                resolvedDashboardFilters = _a.sent();
                return [2 /*return*/, __spread(resolvedDashboardFilters, insightAttributeFilters)];
        }
    });
}
function getResolvedAttributeFilters(ctx, widget, attributeFilters) {
    var attributeFilterDisplayFormPairs, attributeFilterDisplayFormPairsWithIgnoreResolved;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, call(loadDisplayFormsForAttributeFilters, ctx, attributeFilters)];
            case 1:
                attributeFilterDisplayFormPairs = _a.sent();
                attributeFilterDisplayFormPairsWithIgnoreResolved = resolveWidgetFilterIgnore(widget, attributeFilterDisplayFormPairs);
                return [2 /*return*/, attributeFilterDisplayFormPairsWithIgnoreResolved.map(function (item) { return item.filter; })];
        }
    });
}
function resolveWidgetFilterIgnore(widget, dashboardNonDateFilterDisplayFormPairs) {
    return dashboardNonDateFilterDisplayFormPairs.filter(function (_a) {
        var displayForm = _a.displayForm;
        var matches = displayForm &&
            widget.ignoreDashboardFilters
                .filter(isDashboardAttributeFilterReference)
                .some(function (ignored) { return refMatchesMdObject(ignored.displayForm, displayForm, "displayForm"); });
        return !matches;
    });
}
/**
 * Tests whether dashboard's date filter should not be applied on the insight included in the provided widget.
 *
 * This should happen for insights whose simple measures are all already set up with date filters. I guess ignoring
 * global date filter is desired because otherwise there is a large chance that the intersection of global date filter
 * and measure's date filters would lead to empty set and no data shown for the insight?
 */
export function isDateFilterIgnoredForInsight(insight) {
    var simpleMeasures = insightMeasures(insight, isSimpleMeasure);
    if (simpleMeasures.length === 0) {
        return false;
    }
    var simpleMeasuresWithDateFilter = simpleMeasures.filter(function (m) { var _a; return ((_a = measureFilters(m)) !== null && _a !== void 0 ? _a : []).some(isDateFilter); });
    return simpleMeasures.length === simpleMeasuresWithDateFilter.length;
}
function selectResolvedInsightDateFilters(state, insight, dashboardDateFilters, insightDateFilters) {
    if (isDateFilterIgnoredForInsight(insight)) {
        return insightDateFilters;
    }
    var allDateFilters = __spread(insightDateFilters, dashboardDateFilters);
    var allDateFilterDateDatasetPairs = selectDateDatasetsForDateFilters(state, allDateFilters);
    return resolveDateFilters(allDateFilterDateDatasetPairs);
}
function selectResolvedKpiDateFilters(state, dashboardDateFilters) {
    var allDateFilterDateDatasetPairs = selectDateDatasetsForDateFilters(state, dashboardDateFilters);
    return resolveDateFilters(allDateFilterDateDatasetPairs);
}
function resolveDateFilters(allDateFilterDateDatasetPairs) {
    // go through the filters in reverse order using the first filter for a given dimension encountered
    // and strip useless all time filters at the end
    return allDateFilterDateDatasetPairs
        .filter(function (item) { return !!item.dateDataset; })
        .reduceRight(function (acc, curr) {
        var alreadyPresent = acc.some(function (item) {
            return refMatchesMdObject(filterObjRef(item), curr.dateDataset.dataSet, "dataSet");
        });
        if (!alreadyPresent) {
            acc.push(curr.filter);
        }
        return acc;
    }, [])
        .filter(function (item) { return !isAllTimeDateFilter(item); });
}
function queryForInsightWidget(ctx, widget, widgetFilterOverrides, correlationId) {
    var insightRef, insightSelector, insight, widgetAwareDashboardFiltersSelector, widgetAwareDashboardFilters, effectiveInsightFilters, _a, dateFilters, attributeFilters;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                insightRef = widget.insight;
                insightSelector = selectInsightByRef(insightRef);
                return [4 /*yield*/, select(insightSelector)];
            case 1:
                insight = _b.sent();
                if (!insight) {
                    throw invalidQueryArguments(ctx, "Insight with ref " + objRefToString(insightRef) + " does not exist on the dashboard", correlationId);
                }
                widgetAwareDashboardFiltersSelector = selectAllFiltersForWidgetByRef(widget.ref);
                return [4 /*yield*/, select(widgetAwareDashboardFiltersSelector)];
            case 2:
                widgetAwareDashboardFilters = _b.sent();
                // add all time filter explicitly in case the date widgetAwareDashboardFilters are empty
                // this will cause the all time filter to be used instead of the insight date filter
                // if the dashboard date filter is not ignored by the widget
                if (!widgetAwareDashboardFilters.filter(isDateFilter).length && widget.dateDataSet) {
                    widgetAwareDashboardFilters.push(newAllTimeFilter(widget.dateDataSet));
                }
                effectiveInsightFilters = widgetFilterOverrides !== null && widgetFilterOverrides !== void 0 ? widgetFilterOverrides : insightFilters(insight);
                return [4 /*yield*/, all([
                        select(selectResolvedInsightDateFilters, insight, widgetAwareDashboardFilters.filter(isDateFilter), effectiveInsightFilters.filter(isDateFilter)),
                        call(getResolvedInsightAttributeFilters, ctx, widget, widgetAwareDashboardFilters.filter(isAttributeFilter), effectiveInsightFilters.filter(isAttributeFilter)),
                    ])];
            case 3:
                _a = __read.apply(void 0, [_b.sent(), 2]), dateFilters = _a[0], attributeFilters = _a[1];
                return [2 /*return*/, __spread(dateFilters, attributeFilters, effectiveInsightFilters.filter(isMeasureValueFilter), effectiveInsightFilters.filter(isRankingFilter))];
        }
    });
}
function queryForKpiWidget(ctx, widget, widgetFilterOverrides) {
    var widgetAwareDashboardFiltersSelector, widgetAwareDashboardFilters, effectiveDashboardFilters, _a, dateFilters, attributeFilters;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                widgetAwareDashboardFiltersSelector = selectAllFiltersForWidgetByRef(widget.ref);
                return [4 /*yield*/, select(widgetAwareDashboardFiltersSelector)];
            case 1:
                widgetAwareDashboardFilters = _b.sent();
                effectiveDashboardFilters = widgetFilterOverrides !== null && widgetFilterOverrides !== void 0 ? widgetFilterOverrides : widgetAwareDashboardFilters;
                return [4 /*yield*/, all([
                        select(selectResolvedKpiDateFilters, effectiveDashboardFilters.filter(isDateFilter)),
                        call(getResolvedAttributeFilters, ctx, widget, effectiveDashboardFilters.filter(isAttributeFilter)),
                    ])];
            case 2:
                _a = __read.apply(void 0, [_b.sent(), 2]), dateFilters = _a[0], attributeFilters = _a[1];
                return [2 /*return*/, __spread(dateFilters, attributeFilters)];
        }
    });
}
function queryService(ctx, query) {
    var _a, widgetRef, widgetFilterOverrides, correlationId, widgetSelector, widget;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = query.payload, widgetRef = _a.widgetRef, widgetFilterOverrides = _a.widgetFilterOverrides, correlationId = query.correlationId;
                widgetSelector = selectWidgetByRef(widgetRef);
                return [4 /*yield*/, select(widgetSelector)];
            case 1:
                widget = _b.sent();
                if (!widget) {
                    throw invalidQueryArguments(ctx, "Widget with ref " + objRefToString(widgetRef) + " does not exist on the dashboard", correlationId);
                }
                if (!isInsightWidget(widget)) return [3 /*break*/, 3];
                return [4 /*yield*/, call(queryForInsightWidget, ctx, widget, widgetFilterOverrides, correlationId)];
            case 2: return [2 /*return*/, _b.sent()];
            case 3: return [4 /*yield*/, call(queryForKpiWidget, ctx, widget, widgetFilterOverrides)];
            case 4: return [2 /*return*/, _b.sent()];
        }
    });
}
//# sourceMappingURL=queryWidgetFilters.js.map
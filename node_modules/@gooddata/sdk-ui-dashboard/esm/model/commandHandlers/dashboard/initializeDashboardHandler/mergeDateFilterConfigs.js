import { __generator } from "tslib";
import { mergeDateFilterConfigs } from "../../../../_staging/dateFilterConfig/merge";
import { validateDateFilterConfig } from "../../../../_staging/dateFilterConfig/validation";
import { dispatchDashboardEvent } from "../../../store/_infra/eventDispatcher";
import { dateFilterValidationFailed } from "../../../events/dashboard";
export function mergeDateFilterConfigWithOverrides(ctx, cmd, config, dashboardOverrides) {
    var mergedConfig, mergedConfigValidation;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!dashboardOverrides) {
                    return [2 /*return*/, {
                            config: config,
                            source: "workspace",
                        }];
                }
                mergedConfig = mergeDateFilterConfigs(config, dashboardOverrides);
                mergedConfigValidation = validateDateFilterConfig(mergedConfig, false);
                if (!(mergedConfigValidation !== "Valid")) return [3 /*break*/, 2];
                return [4 /*yield*/, dispatchDashboardEvent(dateFilterValidationFailed(ctx, mergedConfigValidation, cmd.correlationId))];
            case 1:
                _a.sent();
                return [2 /*return*/, {
                        config: config,
                        source: "workspace",
                    }];
            case 2: return [2 /*return*/, {
                    config: mergedConfig,
                    source: "dashboard",
                }];
        }
    });
}
//# sourceMappingURL=mergeDateFilterConfigs.js.map
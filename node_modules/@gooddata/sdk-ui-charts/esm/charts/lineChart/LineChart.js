import { __assign, __spreadArrays } from "tslib";
// (C) 2007-2018 GoodData Corporation
import React from "react";
import { newBucket, } from "@gooddata/sdk-model";
import { BucketNames, useResolveValuesWithPlaceholders, } from "@gooddata/sdk-ui";
import { stackedChartDimensions } from "../_commons/dimensions";
import { CoreLineChart } from "./CoreLineChart";
import { withChart } from "../_base/withChart";
//
// Internals
//
function lineChartDimensions(def) {
    return stackedChartDimensions(def, BucketNames.TREND, BucketNames.SEGMENT);
}
var lineChartDefinition = {
    chartName: "LineChart",
    bucketPropsKeys: ["measures", "trendBy", "segmentBy", "filters", "sortBy"],
    bucketsFactory: function (props) {
        return [
            newBucket.apply(void 0, __spreadArrays([BucketNames.MEASURES], props.measures)),
            newBucket(BucketNames.TREND, props.trendBy),
            newBucket(BucketNames.SEGMENT, props.segmentBy),
        ];
    },
    executionFactory: function (props, buckets) {
        var _a;
        var backend = props.backend, workspace = props.workspace, execConfig = props.execConfig;
        return (_a = backend
            .withTelemetry("LineChart", props)
            .workspace(workspace)
            .execution()
            .forBuckets(buckets, props.filters))
            .withSorting.apply(_a, props.sortBy).withDimensions(lineChartDimensions)
            .withExecConfig(execConfig);
    },
};
var WrappedLineChart = withChart(lineChartDefinition)(CoreLineChart);
/**
 * [LineChart](http://sdk.gooddata.com/gooddata-ui/docs/line_chart_component.html)
 *
 * Line chart shows data as line-connected dots. Line charts can display either multiple measures as individual lines
 * or a single measure split by one attribute into multiple lines with points intersecting attribute values.
 *
 * @public
 */
export var LineChart = function (props) {
    var _a = useResolveValuesWithPlaceholders([props.measures, props.trendBy, props.segmentBy, props.filters, props.sortBy], props.placeholdersResolutionContext), measures = _a[0], trendBy = _a[1], segmentBy = _a[2], filters = _a[3], sortBy = _a[4];
    return (React.createElement(WrappedLineChart, __assign({}, props, {
        measures: measures,
        trendBy: trendBy,
        segmentBy: segmentBy,
        filters: filters,
        sortBy: sortBy,
    })));
};
//# sourceMappingURL=LineChart.js.map
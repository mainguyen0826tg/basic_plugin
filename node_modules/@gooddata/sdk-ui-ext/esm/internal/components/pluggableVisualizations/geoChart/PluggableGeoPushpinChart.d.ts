import { IExtendedReferencePoint, IReferencePoint, IUiConfig, IVisConstruct, IVisProps, IVisualizationProperties } from "../../../interfaces/Visualization";
import { PluggableBaseChart } from "../baseChart/PluggableBaseChart";
import { IInsightDefinition } from "@gooddata/sdk-model";
import { IExecutionFactory } from "@gooddata/sdk-backend-spi";
import { IGeoConfig } from "@gooddata/sdk-ui-geo";
export declare class PluggableGeoPushpinChart extends PluggableBaseChart {
    private geoPushpinElement;
    constructor(props: IVisConstruct);
    protected checkBeforeRender(insight: IInsightDefinition): boolean;
    getExtendedReferencePoint(referencePoint: IReferencePoint): Promise<IExtendedReferencePoint>;
    getUiConfig(): IUiConfig;
    protected getSupportedPropertiesList(): string[];
    protected configureBuckets(extendedReferencePoint: IExtendedReferencePoint): IExtendedReferencePoint;
    protected renderConfigurationPanel(insight: IInsightDefinition): void;
    protected buildVisualizationConfig(options: IVisProps, supportedControls: IVisualizationProperties): IGeoConfig;
    protected renderVisualization(options: IVisProps, insight: IInsightDefinition, executionFactory: IExecutionFactory): void;
    private withEmptyAttributeTargets;
    private superHandlePushData;
    protected handlePushData: (data: any) => void;
    private sanitizeMeasures;
    private createSort;
    private getSegmentItems;
    private getLocationItems;
    private getPreferredBucketItemLimit;
    private updateSupportedProperties;
}
//# sourceMappingURL=PluggableGeoPushpinChart.d.ts.map
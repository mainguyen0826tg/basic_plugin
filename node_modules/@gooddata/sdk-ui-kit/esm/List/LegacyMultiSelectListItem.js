import { __extends } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { PureComponent } from "react";
import { FormattedMessage, injectIntl } from "react-intl";
import cx from "classnames";
import noop from "lodash/noop";
import { stringUtils } from "@gooddata/util";
/**
 * @internal
 * @deprecated This component is deprecated use MultiSelectListItem instead
 */
var LegacyMultiSelectListItem = /** @class */ (function (_super) {
    __extends(LegacyMultiSelectListItem, _super);
    function LegacyMultiSelectListItem(props) {
        var _this = _super.call(this, props) || this;
        _this.handleSelect = function () {
            _this.props.onSelect(_this.props.source);
        };
        _this.handleMouseOver = function () {
            _this.props.onMouseOver(_this.props.source);
        };
        _this.handleMouseOut = function () {
            _this.props.onMouseOut(_this.props.source);
        };
        _this.handleOnly = function (ev) {
            ev.stopPropagation();
            _this.props.onOnly(_this.props.source);
        };
        _this.handleSelect = _this.handleSelect.bind(_this);
        _this.handleMouseOver = _this.handleMouseOver.bind(_this);
        _this.handleMouseOut = _this.handleMouseOut.bind(_this);
        _this.handleOnly = _this.handleOnly.bind(_this);
        return _this;
    }
    LegacyMultiSelectListItem.prototype.getClassNames = function () {
        var _a;
        return cx((_a = {
                "gd-list-item": true
            },
            _a["s-" + stringUtils.simplifyText(this.props.source.title)] = true,
            _a["has-only-visible"] = true,
            _a["is-selected"] = this.props.selected,
            _a));
    };
    LegacyMultiSelectListItem.prototype.renderOnly = function () {
        return (React.createElement("span", { className: "gd-list-item-only", onClick: this.handleOnly },
            React.createElement(FormattedMessage, { id: "gs.list.only" })));
    };
    LegacyMultiSelectListItem.prototype.render = function () {
        return (React.createElement("div", { className: this.getClassNames(), onClick: this.handleSelect, onMouseOver: this.handleMouseOver, onMouseOut: this.handleMouseOut },
            React.createElement("label", { className: "input-checkbox-label" },
                React.createElement("input", { type: "checkbox", className: "input-checkbox", readOnly: true, checked: this.props.selected }),
                React.createElement("span", { className: "input-label-text" }, this.props.source.title)),
            this.renderOnly()));
    };
    LegacyMultiSelectListItem.defaultProps = {
        isLoading: false,
        onMouseOver: noop,
        onMouseOut: noop,
        onOnly: noop,
        onSelect: noop,
        selected: false,
        source: {},
    };
    return LegacyMultiSelectListItem;
}(PureComponent));
export { LegacyMultiSelectListItem };
export default injectIntl(LegacyMultiSelectListItem);
//# sourceMappingURL=LegacyMultiSelectListItem.js.map
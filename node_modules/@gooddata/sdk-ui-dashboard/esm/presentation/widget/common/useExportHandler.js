import { __awaiter, __generator } from "tslib";
// (C) 2020-2021 GoodData Corporation
import { useCallback, useRef } from "react";
import { isProtectedDataError } from "@gooddata/sdk-backend-spi";
import { useToastMessage } from "@gooddata/sdk-ui-kit";
import { downloadFile } from "../../../_staging/fileUtils/downloadFile";
export var useExportHandler = function () {
    var _a = useToastMessage(), addProgress = _a.addProgress, addSuccess = _a.addSuccess, addError = _a.addError, removeMessage = _a.removeMessage;
    var lastExportMessageId = useRef("");
    return useCallback(function (exportFunction, exportConfig) { return __awaiter(void 0, void 0, void 0, function () {
        var exportResultUri, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    lastExportMessageId.current = addProgress({ id: "messages.exportResultStart" }, 
                    // make sure the message stays there until removed by either success or error
                    { duration: 0 });
                    return [4 /*yield*/, exportFunction(exportConfig)];
                case 1:
                    exportResultUri = _a.sent();
                    if (lastExportMessageId.current) {
                        removeMessage(lastExportMessageId.current);
                    }
                    addSuccess({ id: "messages.exportResultSuccess" });
                    downloadFile(exportResultUri);
                    return [3 /*break*/, 3];
                case 2:
                    err_1 = _a.sent();
                    if (lastExportMessageId.current) {
                        removeMessage(lastExportMessageId.current);
                    }
                    if (isProtectedDataError(err_1)) {
                        addError({ id: "messages.exportResultRestrictedError" });
                    }
                    else {
                        addError({ id: "messages.exportResultError" });
                    }
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); }, []);
};
//# sourceMappingURL=useExportHandler.js.map
import { __assign, __read, __spread } from "tslib";
// (C) 2019-2021 GoodData Corporation
import { isDashboardLayoutItem, isInsightWidget, isInsightWidgetDefinition, isKpiWidget, isKpiWidgetDefinition, } from "@gooddata/sdk-backend-spi";
import invariant from "ts-invariant";
import { InsightWidgetBuilder, KpiWidgetBuilder, resolveValueOrUpdateCallback, } from "@gooddata/sdk-backend-base";
import identity from "lodash/identity";
/**
 * @alpha
 */
var DashboardLayoutItemBuilder = /** @class */ (function () {
    function DashboardLayoutItemBuilder(setSection, getItemFacade, itemIndex) {
        this.setSection = setSection;
        this.getItemFacade = getItemFacade;
        this.itemIndex = itemIndex;
    }
    /**
     * Creates an instance of DashboardLayoutItemBuilder for particular layout item.
     *
     * @param item - item to modify
     */
    DashboardLayoutItemBuilder.for = function (sectionBuilder, itemIndex) {
        var _a;
        invariant(isDashboardLayoutItem((_a = sectionBuilder.facade().item(itemIndex)) === null || _a === void 0 ? void 0 : _a.raw()), "Provided data must be IDashboardLayoutItem! " + itemIndex + " " + sectionBuilder
            .facade()
            .item(itemIndex));
        return new DashboardLayoutItemBuilder(function (section) { return sectionBuilder.setSection(section); }, function () { return sectionBuilder.facade().item(itemIndex); }, itemIndex);
    };
    DashboardLayoutItemBuilder.prototype.size = function (valueOrUpdateCallback) {
        this.setItem(function (item) { return (__assign(__assign({}, item), { size: resolveValueOrUpdateCallback(valueOrUpdateCallback, item.size) })); });
        return this;
    };
    DashboardLayoutItemBuilder.prototype.widget = function (valueOrUpdateCallback) {
        this.setItem(function (item) { return (__assign(__assign({}, item), { widget: resolveValueOrUpdateCallback(valueOrUpdateCallback, item.widget) })); });
        return this;
    };
    DashboardLayoutItemBuilder.prototype.setItem = function (valueOrUpdateCallback) {
        var _this = this;
        this.setSection(function (section) {
            var updatedItems = __spread(section.items);
            updatedItems[_this.itemIndex] = resolveValueOrUpdateCallback(valueOrUpdateCallback, _this.build());
            return __assign(__assign({}, section), { items: updatedItems });
        });
        return this;
    };
    DashboardLayoutItemBuilder.prototype.modify = function (modifications) {
        modifications(this, this.facade());
        return this;
    };
    DashboardLayoutItemBuilder.prototype.build = function () {
        return this.facade().raw();
    };
    DashboardLayoutItemBuilder.prototype.facade = function () {
        return this.getItemFacade();
    };
    DashboardLayoutItemBuilder.prototype.newInsightWidget = function (insight, create) {
        if (create === void 0) { create = identity; }
        this.widget(create(InsightWidgetBuilder.forNew(insight)).build());
        return this;
    };
    DashboardLayoutItemBuilder.prototype.modifyInsightWidget = function (modify) {
        var content = this.facade().widget();
        invariant(isInsightWidgetDefinition(content) || isInsightWidget(content), "Content of the item is not a kpi widget.");
        this.widget(modify(InsightWidgetBuilder.for(content)).build());
        return this;
    };
    DashboardLayoutItemBuilder.prototype.newKpiWidget = function (measure, create) {
        if (create === void 0) { create = identity; }
        this.widget(create(KpiWidgetBuilder.forNew(measure)).build());
        return this;
    };
    DashboardLayoutItemBuilder.prototype.modifyKpiWidget = function (modify) {
        var content = this.facade().widget();
        invariant(isKpiWidgetDefinition(content) || isKpiWidget(content), "Content of the item is not a kpi widget.");
        this.widget(modify(KpiWidgetBuilder.for(content)).build());
        return this;
    };
    return DashboardLayoutItemBuilder;
}());
export { DashboardLayoutItemBuilder };
//# sourceMappingURL=item.js.map
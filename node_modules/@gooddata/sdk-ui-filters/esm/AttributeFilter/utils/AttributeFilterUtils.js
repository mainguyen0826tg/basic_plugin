// (C) 2021 GoodData Corporation
import { __assign, __awaiter, __generator } from "tslib";
import isFunction from "lodash/isFunction";
import { isNonEmptyListItem, } from "../AttributeDropdown/types";
import { filterAttributeElements, filterIsEmpty, filterObjRef, idRef, isAttributeElementsByRef, isAttributeElementsByValue, } from "@gooddata/sdk-model";
export var getAllTitleIntl = function (intl, isInverted, empty, equal) {
    if ((isInverted && empty) || (!isInverted && equal)) {
        return getAllTitle(intl);
    }
    return getAllExceptTitle(intl);
};
export var getAllTitle = function (intl) {
    return intl.formatMessage({ id: "attrf.all" });
};
export var getAllExceptTitle = function (intl) {
    return intl.formatMessage({ id: "attrf.all_except" });
};
export var getLoadingTitleIntl = function (intl) {
    return intl.formatMessage({ id: "loading" });
};
export var getFilteringTitleIntl = function (intl) {
    return intl.formatMessage({ id: "filtering" });
};
export var getNoneTitleIntl = function (intl) {
    return intl.formatMessage({ id: "gs.filterLabel.none" });
};
export var getItemsTitles = function (selectedFilterOptions, elementTitles) {
    return selectedFilterOptions
        .map(function (selectedOption) { var _a; return (selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.uri) ? (_a = elementTitles.get(selectedOption.uri)) === null || _a === void 0 ? void 0 : _a.title : undefined; })
        .join(", ");
};
export var updateSelectedOptionsWithDataByMap = function (selection, validElements) {
    return selection.map(function (selectedItem) {
        return validElements.get(selectedItem.uri);
    });
};
export var updateSelectedOptionsWithData = function (selection, items) {
    var nonEmptyItems = items.filter(isNonEmptyListItem);
    return selection.map(function (selectedItem) {
        return nonEmptyItems.find(function (item) {
            return (selectedItem.uri && item.uri === selectedItem.uri) ||
                (selectedItem.title && item.title === selectedItem.title);
        });
    });
};
export var getElementTotalCount = function (workspace, backend, objRef, searchString, parentFilters) { return __awaiter(void 0, void 0, void 0, function () {
    var elementsLoader, elements;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                elementsLoader = backend
                    .workspace(workspace)
                    .attributes()
                    .elements()
                    .forDisplayForm(objRef)
                    .withOptions(__assign({}, (searchString ? { filter: searchString } : {})));
                // only set the parent filters if needed to avoid errors on backends that do not support this feature
                if ((parentFilters === null || parentFilters === void 0 ? void 0 : parentFilters.length) > 0) {
                    elementsLoader = elementsLoader.withAttributeFilters(parentFilters);
                }
                return [4 /*yield*/, elementsLoader.query()];
            case 1:
                elements = _a.sent();
                return [2 /*return*/, elements.totalCount];
        }
    });
}); };
export function needsLoading(validElements, offset, limit) {
    var currentElements = validElements ? validElements.items : [];
    var isQueryOutOfBound = offset + limit > currentElements.length;
    var isMissingDataInWindow = currentElements
        .slice(offset, offset + limit)
        .some(function (e) { return e.empty; });
    var hasAllData = validElements &&
        currentElements.length === validElements.totalCount &&
        !currentElements.some(function (e) { return e.empty; });
    return !hasAllData && (isQueryOutOfBound || isMissingDataInWindow);
}
export var getElements = function (validElements, offset, limit, loadElements, force) {
    if (force === void 0) { force = false; }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (needsLoading(validElements, offset, limit) || force) {
                return [2 /*return*/, loadElements(offset, limit)];
            }
            return [2 /*return*/, {
                    validOptions: validElements,
                    totalCount: validElements.totalCount,
                }];
        });
    });
};
export var getObjRef = function (filter, identifier) {
    if (filter && identifier) {
        throw new Error("Don't use both identifier and filter to specify the attribute to filter");
    }
    if (filter) {
        return filterObjRef(filter);
    }
    if (identifier) {
        // eslint-disable-next-line no-console
        console.warn("Definition of an attribute using 'identifier' is deprecated, use 'filter' property instead. Please see the documentation of [AttributeFilter component](https://sdk.gooddata.com/gooddata-ui/docs/attribute_filter_component.html) for further details.");
        return idRef(identifier);
    }
};
export var getValidElementsFilters = function (parentFilters, overAttribute) {
    if (!parentFilters || !overAttribute) {
        return [];
    }
    var overAttributeGetter = isFunction(overAttribute) ? overAttribute : function () { return overAttribute; };
    return parentFilters
        .filter(function (parentFilter) {
        return (!filterIsEmpty(parentFilter) &&
            isAttributeElementsByRef(filterAttributeElements(parentFilter)));
    })
        .map(function (attributeFilter, index) {
        return {
            attributeFilter: attributeFilter,
            overAttribute: overAttributeGetter(attributeFilter, index),
        };
    });
};
export var isParentFiltersElementsByRef = function (parentFilters) {
    return parentFilters === null || parentFilters === void 0 ? void 0 : parentFilters.every(function (parentFilter) {
        return isAttributeElementsByRef(filterAttributeElements(parentFilter));
    });
};
export var isParentFilteringEnabled = function (backend) {
    return !!backend.capabilities.supportsElementsQueryParentFiltering;
};
export function attributeElementsToAttributeElementArray(elements) {
    if (isAttributeElementsByValue(elements)) {
        return elements.values.map(function (title) { return ({
            title: title,
        }); });
    }
    else if (isAttributeElementsByRef(elements)) {
        return elements.uris.map(function (uri) { return ({
            uri: uri,
        }); });
    }
    return [];
}
export function getFilterAttributeTitle(backend, workspace, filter) {
    return __awaiter(this, void 0, void 0, function () {
        var attributes, displayForm, attribute;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    attributes = backend.workspace(workspace).attributes();
                    return [4 /*yield*/, attributes.getAttributeDisplayForm(getObjRef(filter, null))];
                case 1:
                    displayForm = _a.sent();
                    return [4 /*yield*/, attributes.getAttribute(displayForm.attribute)];
                case 2:
                    attribute = _a.sent();
                    return [2 /*return*/, attribute.title];
            }
        });
    });
}
export function showAllFilteredMessage(isElementsLoading, parentFilters, totalElementsCount) {
    if (!parentFilters) {
        return false;
    }
    var parentFiltersEmpty = parentFilters.every(function (filter) { return filterIsEmpty(filter); });
    return !isElementsLoading && !parentFiltersEmpty && totalElementsCount === 0;
}
export function showItemsFilteredMessage(isElementsLoading, parentFilters) {
    if (!parentFilters) {
        return false;
    }
    var parentFiltersNotEmpty = parentFilters.some(function (filter) { return !filterIsEmpty(filter); });
    return !isElementsLoading && parentFiltersNotEmpty;
}
export function getParentFilterTitles(filters, backend, workspace) {
    var promises = filters.map(function (parentFilter) {
        return getFilterAttributeTitle(backend, workspace, parentFilter);
    });
    return Promise.all(promises);
}
//# sourceMappingURL=AttributeFilterUtils.js.map
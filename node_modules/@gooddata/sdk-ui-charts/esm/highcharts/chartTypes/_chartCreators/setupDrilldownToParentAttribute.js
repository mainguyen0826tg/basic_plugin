import { __assign } from "tslib";
// (C) 2007-2021 GoodData Corporation
import partial from "lodash/partial";
import { styleVariables } from "./styles/variables";
import { tickLabelClick } from "./drilldownEventing";
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export function getDDPointsInParentTick(axis, tick) {
    var startAt = tick.startAt, leaves = tick.leaves;
    var ddPoints = []; // drilldown points
    for (var i = startAt; i < startAt + leaves; i++) {
        var currentDDPoints = axis.getDDPoints(i);
        ddPoints.push.apply(ddPoints, currentDDPoints.filter(function (point) { return !!point; }));
    }
    // replace y value by target value for bullet chart target
    return ddPoints.map(function (ddPoint) {
        var _a, _b;
        if (((_b = (_a = ddPoint.series) === null || _a === void 0 ? void 0 : _a.userOptions) === null || _b === void 0 ? void 0 : _b.bulletChartMeasureType) === "target") {
            return Object.assign({}, ddPoint, { y: ddPoint.isNullTarget ? null : ddPoint.target });
        }
        return ddPoint;
    });
}
function setParentTickDrillable(drillConfig, target, chartType, tick, ddPoints) {
    // copy behavior 'Tick.prototype.drillable' from 'highcharts/module/drilldown.js'
    var label = tick.label;
    var drilldownStyle = {
        cursor: "pointer",
        color: styleVariables.gdColorText,
    };
    if (label && ddPoints && ddPoints.length) {
        if (!label.basicStyles) {
            label.basicStyles = __assign({}, label.styles);
        }
        label
            .addClass("highcharts-drilldown-axis-label")
            .css(drilldownStyle)
            .on("click", function () {
            tickLabelClick(drillConfig, ddPoints, target, chartType);
        });
    }
    else if (label && label.basicStyles) {
        label.styles = {}; // reset for full overwrite of styles
        label.css(label.basicStyles);
        label.on("click", null);
    }
}
export function setupDrilldown(chart, chartType) {
    var xAxes = (chart && chart.xAxis) || [];
    var axis = xAxes[0];
    if (!axis) {
        return;
    }
    // not support chart without type
    if (!chartType) {
        return;
    }
    var categoriesTree = axis.categoriesTree, drillConfig = axis.userOptions.drillConfig;
    var setParentTickDrillableFunc = partial(setParentTickDrillable, drillConfig, chart.container, chartType);
    (categoriesTree || []).forEach(function (categories) {
        var tick = categories.tick;
        if (!tick) {
            return;
        }
        var ddPoints = getDDPointsInParentTick(axis, tick);
        setParentTickDrillableFunc(tick, ddPoints);
    });
}
//# sourceMappingURL=setupDrilldownToParentAttribute.js.map
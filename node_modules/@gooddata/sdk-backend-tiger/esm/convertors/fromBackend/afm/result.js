// (C) 2019-2021 GoodData Corporation
import { isResultAttributeHeader, JsonApiAttributeOutAttributesGranularityEnum, } from "@gooddata/api-client-tiger";
import { isAttributeDescriptor, isMeasureGroupDescriptor, } from "@gooddata/sdk-backend-spi";
import { createDateValueFormatter } from "../dateFormatting/dateValueFormatter";
import { toSdkGranularity } from "../dateGranularityConversions";
import { totalLocalIdentifier, withTotals } from "../../toBackend/afm/TotalsConverter";
import isEmpty from "lodash/isEmpty";
// gets all the enum values
var supportedSuffixes = Object.keys(JsonApiAttributeOutAttributesGranularityEnum)
    .filter(function (item) { return isNaN(Number(item)); })
    .map(function (key) {
    return JsonApiAttributeOutAttributesGranularityEnum[key];
});
function getGranularity(header) {
    if (!isAttributeDescriptor(header)) {
        return undefined;
    }
    var identifier = header.attributeHeader.formOf.identifier;
    var suffix = identifier.substr(identifier.lastIndexOf(".") + 1);
    return supportedSuffixes.includes(suffix)
        ? toSdkGranularity(suffix)
        : undefined; // not a date attribute
}
function getMeasuresFromDimensions(dimensions) {
    for (var _i = 0, dimensions_1 = dimensions; _i < dimensions_1.length; _i++) {
        var dim = dimensions_1[_i];
        var measureGroup = dim.headers.find(isMeasureGroupDescriptor);
        if (measureGroup) {
            return measureGroup.measureGroupHeader.items;
        }
    }
    return [];
}
function transformHeaderItems(dimensions, dateFormatter, dimensionHeaders) {
    if (!dimensionHeaders) {
        return [[[]]];
    }
    var measureDescriptors = getMeasuresFromDimensions(dimensions);
    var dateValueFormatter = createDateValueFormatter(dateFormatter);
    return dimensionHeaders.map(function (dimensionHeader, dimensionIndex) {
        return dimensionHeader.headerGroups.map(function (headerGroup, headerGroupIndex) {
            var granularity = getGranularity(dimensions[dimensionIndex].headers[headerGroupIndex]);
            return headerGroup.headers.map(function (header) {
                var _a;
                if (isResultAttributeHeader(header)) {
                    return {
                        attributeHeaderItem: {
                            uri: header.attributeHeader.primaryLabelValue,
                            name: granularity
                                ? dateValueFormatter(header.attributeHeader.labelValue, granularity)
                                : header.attributeHeader.labelValue,
                        },
                    };
                }
                /*
                 * Funny stuff #1 - Tiger sends just the measure index in the measure headers. This is the index of the
                 * measure descriptor within the measure group. The code looks up the measure descriptor so that
                 * it can then fill in the `name` to the one in the descriptor
                 */
                var measureIndex = header.measureHeader.measureIndex;
                return {
                    measureHeaderItem: {
                        name: (_a = measureDescriptors[measureIndex]) === null || _a === void 0 ? void 0 : _a.measureHeaderItem.name,
                        order: measureIndex,
                    },
                };
            });
        });
    });
}
export function transformExecutionResult(result, dimensions, dateFormatter) {
    return {
        // in API is data typed as Array<object>
        data: result.data,
        headerItems: transformHeaderItems(dimensions, dateFormatter, result.dimensionHeaders),
        offset: result.paging.offset,
        count: result.paging.count,
        total: result.paging.total,
    };
}
export function transformGrandTotalData(definition, grandTotals) {
    if (definition.dimensions.every(function (dim) { return isEmpty(dim.totals); })) {
        // SDK cannot work with explicit empty totals, undefined must be returned instead
        return undefined;
    }
    var grandTotalsData = definition.dimensions.map(function (_) { return []; });
    var grandTotalsByLocalId = new Map(grandTotals.map(function (total) { return [total.localIdentifier, total.data]; }));
    withTotals(definition.dimensions, function (dimIdx, typeIdx, totalsOfType) {
        var totalType = totalsOfType[0].type;
        var localId = totalLocalIdentifier(totalType, dimIdx);
        // Tiger API supports multi-dimensional totals but SDK limits to single dim totals only
        grandTotalsData[dimIdx][typeIdx] = grandTotalsByLocalId.get(localId);
    });
    return grandTotalsData;
}
//# sourceMappingURL=result.js.map
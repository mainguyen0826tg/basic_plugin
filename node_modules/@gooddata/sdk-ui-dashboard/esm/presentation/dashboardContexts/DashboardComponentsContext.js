import { __rest } from "tslib";
// (C) 2019 GoodData Corporation
import React, { createContext, useContext } from "react";
import { UnexpectedSdkError } from "@gooddata/sdk-ui";
var ThrowMissingComponentError = function (componentName) { return function () {
    throw new UnexpectedSdkError("Component: " + componentName + " is missing in the DashboardComponentsProvider.");
}; };
/**
 * @internal
 */
var DashboardComponentsContext = createContext({
    ErrorComponent: ThrowMissingComponentError("ErrorComponent"),
    LoadingComponent: ThrowMissingComponentError("LoadingComponent"),
    LayoutComponent: ThrowMissingComponentError("LayoutComponent"),
    InsightComponentProvider: ThrowMissingComponentError("InsightComponent"),
    InsightMenuButtonComponentProvider: ThrowMissingComponentError("InsightMenuButtonComponent"),
    InsightMenuComponentProvider: ThrowMissingComponentError("InsightMenuComponent"),
    KpiComponentProvider: ThrowMissingComponentError("KpiComponent"),
    WidgetComponentProvider: ThrowMissingComponentError("WidgetComponent"),
    ButtonBarComponent: ThrowMissingComponentError("ButtonBarComponent"),
    MenuButtonComponent: ThrowMissingComponentError("MenuButtonComponent"),
    TitleComponent: ThrowMissingComponentError("TitleComponent"),
    TopBarComponent: ThrowMissingComponentError("TopBarComponent"),
    ScheduledEmailDialogComponent: ThrowMissingComponentError("ScheduledEmailDialogComponent"),
    ShareDialogComponent: ThrowMissingComponentError("ShareDialogComponent"),
    SaveAsDialogComponent: ThrowMissingComponentError("SaveAsDialogComponent"),
    DashboardAttributeFilterComponentProvider: ThrowMissingComponentError("DashboardAttributeFilterComponentFactory"),
    DashboardDateFilterComponent: ThrowMissingComponentError("DashboardDateFilterComponent"),
    FilterBarComponent: ThrowMissingComponentError("FilterBarComponent"),
});
DashboardComponentsContext.displayName = "DashboardComponentsContext";
/**
 * @internal
 */
export var useDashboardComponentsContext = function (localComponentOverrides) {
    var globalComponents = useContext(DashboardComponentsContext);
    // cannot just spread here, we only want to use overrides that are not undefined
    return Object.keys(globalComponents).reduce(function (acc, key) {
        var _a;
        acc[key] = (_a = localComponentOverrides === null || localComponentOverrides === void 0 ? void 0 : localComponentOverrides[key]) !== null && _a !== void 0 ? _a : globalComponents[key];
        return acc;
    }, {});
};
/**
 * @internal
 */
export function DashboardComponentsProvider(props) {
    var children = props.children, components = __rest(props, ["children"]);
    return (React.createElement(DashboardComponentsContext.Provider, { value: components }, children));
}
//# sourceMappingURL=DashboardComponentsContext.js.map
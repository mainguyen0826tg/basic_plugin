import { __generator } from "tslib";
import { invalidArgumentsProvided } from "../../events/general";
import { selectLayout } from "../../store/layout/layoutSelectors";
import { put, select } from "redux-saga/effects";
import { layoutActions } from "../../store/layout";
import { layoutSectionRemoved } from "../../events/layout";
import isEmpty from "lodash/isEmpty";
import { validateSectionExists } from "./validation/layoutValidation";
import { resolveRelativeIndex } from "../../utils/arrayOps";
export function removeLayoutSectionHandler(ctx, cmd) {
    var layout, _a, index, stashIdentifier, absoluteIndex, section;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, select(selectLayout)];
            case 1:
                layout = _b.sent();
                _a = cmd.payload, index = _a.index, stashIdentifier = _a.stashIdentifier;
                if (isEmpty(layout.sections)) {
                    throw invalidArgumentsProvided(ctx, cmd, "Attempting to remove a section from an empty layout.");
                }
                if (!validateSectionExists(layout, index)) {
                    throw invalidArgumentsProvided(ctx, cmd, "Attempting to remove non-existing layout section at index " + index + ".");
                }
                absoluteIndex = resolveRelativeIndex(layout.sections, index);
                section = layout.sections[absoluteIndex];
                return [4 /*yield*/, put(layoutActions.removeSection({
                        index: absoluteIndex,
                        stashIdentifier: stashIdentifier,
                        undo: {
                            cmd: cmd,
                        },
                    }))];
            case 2:
                _b.sent();
                return [2 /*return*/, layoutSectionRemoved(ctx, section, absoluteIndex, false, stashIdentifier, cmd.correlationId)];
        }
    });
}
//# sourceMappingURL=removeLayoutSectionHandler.js.map
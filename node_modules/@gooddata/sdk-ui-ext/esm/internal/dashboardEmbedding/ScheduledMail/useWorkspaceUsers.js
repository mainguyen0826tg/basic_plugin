import { useBackend, useCancelablePromise, useWorkspace, } from "@gooddata/sdk-ui";
import invariant from "ts-invariant";
/**
 * Hook allowing to download workspace users
 * @param config - configuration of the hook
 * @internal
 */
export function useWorkspaceUsers(_a) {
    var search = _a.search, backend = _a.backend, workspace = _a.workspace, onCancel = _a.onCancel, onError = _a.onError, onLoading = _a.onLoading, onPending = _a.onPending, onSuccess = _a.onSuccess;
    var effectiveBackend = useBackend(backend);
    var effectiveWorkspace = useWorkspace(workspace);
    invariant(effectiveBackend, "The effectiveBackend in useWorkspaceUsers must be defined. Either pass it as a config prop or make sure there is a BackendProvider up the component tree.");
    invariant(effectiveWorkspace, "The effectiveWorkspace in useWorkspaceUsers must be defined. Either pass it as a config prop or make sure there is a WorkspaceProvider up the component tree.");
    var promise = function () {
        var loader = effectiveBackend.workspace(effectiveWorkspace).users();
        if (search) {
            loader = loader.withOptions({ search: "%" + search });
        }
        return loader.queryAll();
    };
    return useCancelablePromise({ promise: promise, onCancel: onCancel, onError: onError, onLoading: onLoading, onPending: onPending, onSuccess: onSuccess }, [
        effectiveBackend,
        effectiveWorkspace,
        search,
    ]);
}
//# sourceMappingURL=useWorkspaceUsers.js.map
// (C) 2020 GoodData Corporation
import React, { useState } from "react";
import { Button } from "@gooddata/sdk-ui-kit";
import cx from "classnames";
import { OperatorDropdownBody } from "./OperatorDropdownBody";
import { injectIntl } from "react-intl";
var operatorItems = [
    { value: "TOP", translationId: "rankingFilter.top" },
    { value: "BOTTOM", translationId: "rankingFilter.bottom" },
];
var getOperatorItemTranslation = function (operator) {
    return operatorItems.find(function (_a) {
        var value = _a.value;
        return value === operator;
    }).translationId;
};
var OperatorDropdownComponent = function (_a) {
    var selectedValue = _a.selectedValue, onSelect = _a.onSelect, intl = _a.intl;
    var _b = useState(false), isOpen = _b[0], setIsOpen = _b[1];
    var onButtonClick = function () {
        setIsOpen(!isOpen);
    };
    var onItemSelect = function (value) {
        onSelect(value);
        setIsOpen(false);
    };
    var buttonClassNames = cx("gd-button-secondary", "gd-button-small", "button-dropdown", "gd-icon-right", {
        "gd-icon-navigateup": isOpen,
        "gd-icon-navigatedown": !isOpen,
    }, "gd-rf-operator-dropdown-button", "s-rf-operator-dropdown-button");
    var title = intl.formatMessage({ id: getOperatorItemTranslation(selectedValue) });
    return (React.createElement(React.Fragment, null,
        React.createElement(Button, { className: buttonClassNames, value: title, onClick: onButtonClick }),
        isOpen && (React.createElement(OperatorDropdownBody, { items: operatorItems, selectedValue: selectedValue, onSelect: onItemSelect, onClose: function () { return setIsOpen(false); } }))));
};
export var OperatorDropdown = injectIntl(OperatorDropdownComponent);
//# sourceMappingURL=OperatorDropdown.js.map
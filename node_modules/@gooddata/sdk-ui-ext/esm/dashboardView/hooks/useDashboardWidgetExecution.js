// (C) 2020-2021 GoodData Corporation
import { isWidget, widgetId, widgetUri, layoutWidgets, } from "@gooddata/sdk-backend-spi";
import { useBackend, useWorkspace, UnexpectedSdkError, } from "@gooddata/sdk-ui";
import { areObjRefsEqual, objRefToString } from "@gooddata/sdk-model";
import { useDashboard } from "./useDashboard";
import { useDashboardLayoutData, useDashboardInsightExecution, useDashboardKpiExecution } from "./internal";
import { backendInvariant, workspaceInvariant } from "./utils";
/**
 * Hook allowing to get execution for particular dashboard widget.
 * @param config - configuration of the hook
 * @beta
 * @deprecated superseded by Dashboard component; please see `@gooddata/sdk-ui-dashboard` and GoodData.UI documentation for v8.7
 */
export function useDashboardWidgetExecution(_a) {
    var _b;
    var dashboard = _a.dashboard, widgetRef = _a.widget, filters = _a.filters, backend = _a.backend, workspace = _a.workspace;
    var effectiveBackend = useBackend(backend);
    var effectiveWorkspace = useWorkspace(workspace);
    backendInvariant(effectiveBackend, "useDashboardWidgetExecution");
    workspaceInvariant(effectiveWorkspace, "useDashboardWidgetExecution");
    var _c = useDashboard({
        dashboard: dashboard,
        backend: effectiveBackend,
        workspace: effectiveWorkspace,
    }), dashboardResult = _c.result, dashboardStatus = _c.status, dashboardError = _c.error;
    var _d = useDashboardLayoutData({
        dashboardLayout: dashboardResult === null || dashboardResult === void 0 ? void 0 : dashboardResult.layout,
        backend: effectiveBackend,
        workspace: effectiveWorkspace,
    }), dashboardLayoutResult = _d.result, dashboardLayoutStatus = _d.status, dashboardLayoutError = _d.error;
    var widget = (dashboardResult === null || dashboardResult === void 0 ? void 0 : dashboardResult.layout) &&
        layoutWidgets(dashboardResult.layout)
            .filter(isWidget)
            .find(function (w) {
            return areObjRefsEqual(widgetRef, {
                uri: widgetUri(w),
                identifier: widgetId(w),
            });
        });
    if ((dashboardResult === null || dashboardResult === void 0 ? void 0 : dashboardResult.layout) && !widget) {
        throw new UnexpectedSdkError("Widget with ObjRef " + objRefToString(widget) + " not found on the referenced dashboard.");
    }
    var kpiWidget = (widget === null || widget === void 0 ? void 0 : widget.type) === "kpi" ? widget : undefined;
    var insightWidget = (widget === null || widget === void 0 ? void 0 : widget.type) === "insight" ? widget : undefined;
    var kpiExecution = useDashboardKpiExecution({
        kpiWidget: kpiWidget,
        filterContext: dashboardResult === null || dashboardResult === void 0 ? void 0 : dashboardResult.filterContext,
        filters: filters,
        backend: effectiveBackend,
        workspace: effectiveWorkspace,
    });
    var insightExecution = useDashboardInsightExecution({
        insightWidget: insightWidget,
        insight: dashboardLayoutResult === null || dashboardLayoutResult === void 0 ? void 0 : dashboardLayoutResult.getInsightByRef(insightWidget === null || insightWidget === void 0 ? void 0 : insightWidget.insight),
        filters: filters,
        filterContext: dashboardResult === null || dashboardResult === void 0 ? void 0 : dashboardResult.filterContext,
        backend: effectiveBackend,
        workspace: effectiveWorkspace,
    });
    var _e = (widget === null || widget === void 0 ? void 0 : widget.type) === "kpi" ? kpiExecution : insightExecution, executionResult = _e.result, executionStatus = _e.status, executionError = _e.error;
    var statuses = [dashboardStatus, dashboardLayoutStatus, executionStatus];
    var error = (_b = dashboardError !== null && dashboardError !== void 0 ? dashboardError : dashboardLayoutError) !== null && _b !== void 0 ? _b : executionError;
    if (error) {
        return {
            error: error,
            result: undefined,
            status: "error",
        };
    }
    else if (statuses.some(function (s) { return s === "loading"; })) {
        return {
            error: undefined,
            result: undefined,
            status: "loading",
        };
    }
    return {
        error: undefined,
        result: executionResult,
        status: "success",
    };
}
//# sourceMappingURL=useDashboardWidgetExecution.js.map
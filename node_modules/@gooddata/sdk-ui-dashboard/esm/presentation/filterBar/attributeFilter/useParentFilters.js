// (C) 2021 GoodData Corporation
import { useMemo } from "react";
import invariant from "ts-invariant";
import { dashboardAttributeFilterToAttributeFilter } from "../../../_staging/dashboard/dashboardFilterConverter";
import { selectFilterContextAttributeFilters, useDashboardSelector } from "../../../model";
/**
 * Returns parent filter-related data to use as AttributeFilterButton props.
 * @param filter - filter to get the parent filter-related data
 */
export var useParentFilters = function (filter) {
    var allAttributeFilters = useDashboardSelector(selectFilterContextAttributeFilters);
    var parentFiltersData = useMemo(function () {
        var _a;
        return (_a = filter.attributeFilter.filterElementsBy) === null || _a === void 0 ? void 0 : _a.map(function (parent) {
            var matchingFilter = allAttributeFilters.find(function (filter) { return filter.attributeFilter.localIdentifier === parent.filterLocalIdentifier; });
            invariant(matchingFilter); // if this blows up, the state is inconsistent
            return { filter: matchingFilter, over: parent.over.attributes[0] };
        });
    }, [allAttributeFilters, filter.attributeFilter.filterElementsBy]);
    var parentFilters = useMemo(function () {
        return parentFiltersData === null || parentFiltersData === void 0 ? void 0 : parentFiltersData.map(function (item) { return dashboardAttributeFilterToAttributeFilter(item.filter); });
    }, [parentFiltersData]);
    var parentOverLookup = useMemo(function () {
        // no parents -> no need for the lookup function
        if (!parentFiltersData) {
            return undefined;
        }
        return function (_parentFilter, index) { return parentFiltersData[index].over; };
    }, [parentFiltersData]);
    return {
        parentFilters: parentFilters,
        parentFilterOverAttribute: parentOverLookup,
    };
};
//# sourceMappingURL=useParentFilters.js.map
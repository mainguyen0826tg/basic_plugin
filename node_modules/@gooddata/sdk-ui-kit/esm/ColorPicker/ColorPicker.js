import { __assign, __extends } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { Component } from "react";
import isEqual from "lodash/isEqual";
import { injectIntl } from "react-intl";
import { Button } from "../Button";
import { ColorPickerMatrix } from "./components/ColorPickerMatrix";
import { HexColorInput } from "./components/HexColorInput";
import { HueColorPicker } from "./components/HueColorPicker";
import { ColorsPreview } from "./components/ColorsPreview";
import { getRgbFromHslColor, getHslFromRgbColor, isHslColorBlackOrWhite } from "./utils";
var WrappedColorPicker = /** @class */ (function (_super) {
    __extends(WrappedColorPicker, _super);
    function WrappedColorPicker(props) {
        var _this = _super.call(this, props) || this;
        var currentHslColor = getHslFromRgbColor(_this.props.initialRgbColor);
        _this.state = {
            draftHslColor: currentHslColor,
        };
        _this.onColorSelected = _this.onColorSelected.bind(_this);
        _this.onHexInputColorSelected = _this.onHexInputColorSelected.bind(_this);
        return _this;
    }
    WrappedColorPicker.prototype.onColorSelected = function (selectedColor) {
        this.setState({
            draftHslColor: selectedColor,
        });
    };
    WrappedColorPicker.prototype.onHexInputColorSelected = function (selectedColor) {
        if (isHslColorBlackOrWhite(selectedColor)) {
            this.setState({
                draftHslColor: __assign(__assign({}, selectedColor), { h: this.state.draftHslColor.h }),
            });
        }
        else {
            this.onColorSelected(selectedColor);
        }
    };
    WrappedColorPicker.prototype.render = function () {
        var _this = this;
        var currentHslColor = getHslFromRgbColor(this.props.initialRgbColor);
        var t = this.props.intl.formatMessage;
        return (React.createElement("div", { className: "color-picker-container" },
            React.createElement(ColorPickerMatrix, { initColor: this.state.draftHslColor, onColorSelected: this.onColorSelected }),
            React.createElement("div", { className: "color-picker-control-wrapper" },
                React.createElement(HueColorPicker, { initColor: this.state.draftHslColor, onChange: this.onColorSelected }),
                React.createElement(HexColorInput, { initColor: this.state.draftHslColor, onInputChanged: this.onHexInputColorSelected, placeholder: t({ id: "gs.color-picker.inputPlaceholder" }), label: t({ id: "gs.color-picker.hex" }) }),
                React.createElement(ColorsPreview, { currentHslColor: currentHslColor, draftHslColor: this.state.draftHslColor, currentTextLabel: t({ id: "gs.color-picker.currentColor" }), draftTextLabel: t({ id: "gs.color-picker.newColor" }) }),
                React.createElement("div", { className: "color-picker-buttons-wrapper" },
                    React.createElement(Button, { value: t({ id: "gs.color-picker.cancelButton" }), className: "gd-button-secondary gd-button color-picker-button", onClick: this.props.onCancel }),
                    React.createElement(Button, { value: t({ id: "gs.color-picker.okButton" }), disabled: isEqual(this.props.initialRgbColor, getRgbFromHslColor(this.state.draftHslColor)), className: "gd-button-action gd-button color-picker-ok-button", onClick: function () { return _this.props.onSubmit(getRgbFromHslColor(_this.state.draftHslColor)); } })))));
    };
    return WrappedColorPicker;
}(Component));
/**
 * @internal
 */
export var ColorPicker = injectIntl(WrappedColorPicker);
//# sourceMappingURL=ColorPicker.js.map
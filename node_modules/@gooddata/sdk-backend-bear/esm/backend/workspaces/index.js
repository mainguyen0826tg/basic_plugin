import { __awaiter, __generator } from "tslib";
// (C) 2019-2021 GoodData Corporation
import { enhanceWithAll } from "@gooddata/sdk-backend-base";
import { convertUserProject } from "../../convertors/toBackend/WorkspaceConverter";
import { userLoginMd5FromAuthenticatedPrincipal } from "../../utils/api";
import { BearWorkspace } from "../workspace";
var BearWorkspaceQueryFactory = /** @class */ (function () {
    function BearWorkspaceQueryFactory(authCall) {
        this.authCall = authCall;
    }
    BearWorkspaceQueryFactory.prototype.forUser = function (userId) {
        return new BearWorkspaceQuery(this.authCall, userId);
    };
    BearWorkspaceQueryFactory.prototype.forCurrentUser = function () {
        return new BearWorkspaceQuery(this.authCall);
    };
    return BearWorkspaceQueryFactory;
}());
export { BearWorkspaceQueryFactory };
var BearWorkspaceQuery = /** @class */ (function () {
    function BearWorkspaceQuery(authCall, userId) {
        this.authCall = authCall;
        this.userId = userId;
        this.limit = 100;
        this.offset = 0;
        this.search = undefined;
    }
    BearWorkspaceQuery.prototype.withLimit = function (limit) {
        this.limit = limit;
        return this;
    };
    BearWorkspaceQuery.prototype.withOffset = function (offset) {
        this.offset = offset;
        return this;
    };
    BearWorkspaceQuery.prototype.withSearch = function (search) {
        this.search = search;
        return this;
    };
    BearWorkspaceQuery.prototype.query = function () {
        return this.queryWorker(this.offset, this.limit, this.search);
    };
    BearWorkspaceQuery.prototype.queryWorker = function (offset, limit, search) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, paging, items, serverOffset, totalCount, count, hasNextPage, goTo, emptyResult;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (sdk, _a) {
                            var getPrincipal = _a.getPrincipal;
                            return __awaiter(_this, void 0, void 0, function () {
                                var userId, _b;
                                return __generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            _b = this.userId;
                                            if (_b) return [3 /*break*/, 2];
                                            return [4 /*yield*/, userLoginMd5FromAuthenticatedPrincipal(getPrincipal)];
                                        case 1:
                                            _b = (_c.sent());
                                            _c.label = 2;
                                        case 2:
                                            userId = _b;
                                            return [2 /*return*/, sdk.project.getProjectsWithPaging(userId, offset, limit, search)];
                                    }
                                });
                            });
                        })];
                    case 1:
                        _a = (_b.sent()).userProjects, paging = _a.paging, items = _a.items;
                        serverOffset = paging.offset;
                        totalCount = paging.totalCount, count = paging.count;
                        hasNextPage = serverOffset + count < totalCount;
                        goTo = function (index) {
                            return index * count < totalCount
                                ? _this.queryWorker(index * count, limit, search)
                                : Promise.resolve(emptyResult);
                        };
                        emptyResult = enhanceWithAll({
                            search: search,
                            items: [],
                            limit: count,
                            offset: totalCount,
                            totalCount: totalCount,
                            next: function () { return Promise.resolve(emptyResult); },
                            goTo: goTo,
                        });
                        return [2 /*return*/, enhanceWithAll({
                                search: search,
                                items: items.map(function (workspace) {
                                    var descriptor = convertUserProject(workspace);
                                    return new BearWorkspace(_this.authCall, descriptor.id, descriptor);
                                }),
                                limit: paging.limit,
                                offset: paging.offset,
                                totalCount: paging.totalCount,
                                next: hasNextPage
                                    ? function () { return _this.queryWorker(offset + count, limit, search); }
                                    : function () { return Promise.resolve(emptyResult); },
                                goTo: goTo,
                            })];
                }
            });
        });
    };
    return BearWorkspaceQuery;
}());
//# sourceMappingURL=index.js.map
import { __assign } from "tslib";
// (C) 2007-2020 GoodData Corporation
import isEmpty from "lodash/isEmpty";
import isNil from "lodash/isNil";
import isObject from "lodash/isObject";
import omitBy from "lodash/fp/omitBy";
import { delay } from "./utils/promise";
import { ApiResponseError } from "./xhr";
/**
 * Omit nil or empty object/array values of the object. Keep booleans & numbers.
 * Checks only first level object properties, does not check it recursively.
 */
export var omitEmpty = omitBy(function (val) {
    if (isNil(val)) {
        return true;
    }
    else if (isObject(val)) {
        return isEmpty(val);
    }
    return false;
});
/**
 * Utility methods. Mostly private
 *
 * @module util
 * @class util
 *
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export var getQueryEntries = function (obj) {
    var _a;
    return (_a = obj === null || obj === void 0 ? void 0 : obj.query) === null || _a === void 0 ? void 0 : _a.entries;
};
/**
 * Helper for polling
 *
 * @param xhrRequest xhr module
 * @param {String} uri
 * @param {Function} isPollingDone
 * @param {Object} options for polling (maxAttempts, pollStep)
 * @private
 */
export var handlePolling = function (
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
xhrRequest, uri, isPollingDone, options) {
    if (options === void 0) { options = {}; }
    // TODO
    var _a = options.attempts, attempts = _a === void 0 ? 0 : _a, _b = options.maxAttempts, maxAttempts = _b === void 0 ? 50 : _b, _c = options.pollStep, pollStep = _c === void 0 ? 5000 : _c;
    return xhrRequest(uri)
        .then(function (r) { return r.getData(); })
        .then(function (response) {
        if (attempts > maxAttempts) {
            return Promise.reject(new Error(response));
        }
        return isPollingDone(response)
            ? Promise.resolve(response)
            : delay(pollStep).then(function () {
                return handlePolling(xhrRequest, uri, isPollingDone, __assign(__assign({}, options), { attempts: attempts + 1 }));
            });
    });
};
/**
 * Helper for polling with header status
 *
 * @param xhrRequest xhr module
 * @param {String} uri
 * @param {Function} isPollingDone
 * @param {Object} options for polling (maxAttempts, pollStep)
 * @private
 */
export var handleHeadPolling = function (
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
xhrRequest, uri, isPollingDone, options) {
    if (options === void 0) { options = {}; }
    var _a = options.attempts, attempts = _a === void 0 ? 0 : _a, _b = options.maxAttempts, maxAttempts = _b === void 0 ? 50 : _b, _c = options.pollStep, pollStep = _c === void 0 ? 5000 : _c;
    return xhrRequest(uri).then(function (response) {
        if (attempts > maxAttempts) {
            return Promise.reject(new Error("Export timeout!!!"));
        }
        var responseHeaders = response.getHeaders();
        if (isPollingDone(responseHeaders, response)) {
            if (responseHeaders.status === 200) {
                return Promise.resolve({ uri: uri });
            }
            return Promise.reject(new ApiResponseError(response.statusText, response, response.getData()));
        }
        else {
            return delay(pollStep).then(function () {
                return handleHeadPolling(xhrRequest, uri, isPollingDone, __assign(__assign({}, options), { attempts: attempts + 1 }));
            });
        }
    });
};
var REG_URI_OBJ = /\/gdc\/md\/(\S+)\/obj\/\d+/;
/**
 * Tests whether the provided string looks like a URI of a metadata object on GoodData platform
 *
 * @param value - string to test
 * @public
 */
export var isUri = function (value) { return REG_URI_OBJ.test(value); };
/**
 * Builds query string from plain object
 * (Refactored from admin/routes.js)
 *
 * @param {Object} query parameters possibly including arrays inside
 * @returns {string} querystring
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export function queryString(query) {
    function getSingleParam(key, value) {
        return Array.isArray(value)
            ? value.map(function (item) { return encodeURIComponent(key) + "=" + encodeURIComponent(item); }).join("&")
            : encodeURIComponent(key) + "=" + encodeURIComponent(value);
    }
    return query
        ? "?" + Object.keys(query)
            .map(function (k) { return getSingleParam(k, query[k]); })
            .join("&")
        : "";
}
/**
 * Get all results from paged api by traversing all resulting pages
 * This is usable for apis which support offset and limit (i.e. not those with next paging links)
 *
 * @param xhrGet xhr module
 * @param {string} uri uri to be fetched, will append offset and limit for next pages
 * @param {string} itemKey key under which to look for results (differs for different apis)
 * @param {number} optional offset starting offset, default 0
 * @param pagesData optional data to be pre-filled
 */
export function getAllPagesByOffsetLimit(
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
xhr, uri, itemKey, offset, pagesData) {
    if (offset === void 0) { offset = 0; }
    if (pagesData === void 0) { pagesData = []; }
    var PAGE_LIMIT = 100;
    return new Promise(function (resolve, reject) {
        xhr.get(uri + "?offset=" + offset + "&limit=" + PAGE_LIMIT)
            .then(function (r) { return r.getData(); })
            .then(function (dataObjects) {
            var _a, _b;
            var projects = dataObjects === null || dataObjects === void 0 ? void 0 : dataObjects[itemKey];
            var data = pagesData.concat(projects.items);
            var totalCount = (_b = (_a = projects === null || projects === void 0 ? void 0 : projects.paging) === null || _a === void 0 ? void 0 : _a.totalCount) !== null && _b !== void 0 ? _b : 0;
            var nextPage = offset + PAGE_LIMIT;
            if (nextPage > totalCount) {
                resolve(data);
            }
            else {
                resolve(getAllPagesByOffsetLimit(xhr, uri, itemKey, nextPage, data));
            }
        }, reject);
    });
}
// Parses string values to boolean, number and string
export var parseSettingItemValue = function (value) {
    if (value === "true") {
        return true;
    }
    if (value === "false") {
        return false;
    }
    var nr = Number(value);
    if (nr.toString() === value) {
        return nr;
    }
    return value;
};
//# sourceMappingURL=util.js.map
// (C) 2020 GoodData Corporation
import { __assign, __extends } from "tslib";
import { ColorStrategy, isValidMappedColor, getColorByGuid, getColorFromMapping, getLighterColorFromRGB, } from "@gooddata/sdk-ui-vis-commons";
import { isColorFromPalette } from "@gooddata/sdk-model";
import { isDarkTheme } from "@gooddata/sdk-ui-theme-provider";
import { findMeasureGroupInDimensions } from "../_util/executionResultHelper";
var emptyColorPaletteItem = { type: "guid", value: "none" };
var MeasureColorStrategy = /** @class */ (function (_super) {
    __extends(MeasureColorStrategy, _super);
    function MeasureColorStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MeasureColorStrategy.prototype.createColorAssignment = function (colorPalette, colorMapping, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    _viewByAttribute, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    _stackByAttribute, dv) {
        var _a = this.mapColorsFromMeasures(dv, colorMapping, colorPalette), allMeasuresAssignment = _a.allMeasuresAssignment, nonDerivedMeasuresAssignment = _a.nonDerivedMeasuresAssignment;
        return {
            fullColorAssignment: this.mapColorsFromDerivedMeasure(dv, allMeasuresAssignment, colorPalette),
            outputColorAssignment: nonDerivedMeasuresAssignment,
        };
    };
    MeasureColorStrategy.prototype.mapColorsFromMeasures = function (dv, colorMapping, colorPalette) {
        var _this = this;
        var currentColorPaletteIndex = 0;
        var nonDerivedMeasuresAssignment = [];
        var measureGroup = findMeasureGroupInDimensions(dv.meta().dimensions());
        var allMeasuresAssignment = measureGroup.items.map(function (headerItem, index) {
            if (dv.meta().isDerivedMeasure(measureGroup.items[index])) {
                return {
                    headerItem: headerItem,
                    color: emptyColorPaletteItem,
                };
            }
            var mappedMeasure = _this.mapMeasureColor(headerItem, currentColorPaletteIndex, colorPalette, colorMapping, dv);
            currentColorPaletteIndex++;
            nonDerivedMeasuresAssignment.push(mappedMeasure);
            return mappedMeasure;
        });
        return {
            allMeasuresAssignment: allMeasuresAssignment,
            nonDerivedMeasuresAssignment: nonDerivedMeasuresAssignment,
        };
    };
    MeasureColorStrategy.prototype.mapMeasureColor = function (descriptor, currentColorPaletteIndex, colorPalette, colorAssignment, dv) {
        var mappedColor = getColorFromMapping(descriptor, colorAssignment, dv);
        var color = isValidMappedColor(mappedColor, colorPalette)
            ? mappedColor
            : {
                type: "guid",
                value: colorPalette[currentColorPaletteIndex % colorPalette.length].guid,
            };
        return {
            headerItem: descriptor,
            color: color,
        };
    };
    MeasureColorStrategy.prototype.mapColorsFromDerivedMeasure = function (dv, measuresColorAssignment, colorPalette) {
        var _this = this;
        return measuresColorAssignment.map(function (mapItem, measureItemIndex) {
            var measureGroup = findMeasureGroupInDimensions(dv.meta().dimensions());
            if (!dv.meta().isDerivedMeasure(measureGroup.items[measureItemIndex])) {
                return mapItem;
            }
            var masterMeasure = dv
                .def()
                .masterMeasureForDerived(measureGroup.items[measureItemIndex].measureHeaderItem.localIdentifier);
            if (!masterMeasure) {
                return mapItem;
            }
            var parentMeasureIndex = dv.def().measureIndex(masterMeasure.measure.localIdentifier);
            if (parentMeasureIndex > -1) {
                var sourceMeasureColor = measuresColorAssignment[parentMeasureIndex].color;
                return _this.getDerivedMeasureColorAssignment(sourceMeasureColor, colorPalette, measureItemIndex, mapItem);
            }
            return __assign(__assign({}, mapItem), { color: mapItem.color });
        });
    };
    MeasureColorStrategy.prototype.getDerivedMeasureColorAssignment = function (sourceMeasureColor, colorPalette, measureItemIndex, mapItem) {
        var rgbColor = isColorFromPalette(sourceMeasureColor)
            ? getColorByGuid(colorPalette, sourceMeasureColor.value, measureItemIndex)
            : sourceMeasureColor.value;
        return __assign(__assign({}, mapItem), { color: {
                type: "rgb",
                value: getLighterColorFromRGB(rgbColor, isDarkTheme(this.theme) ? -0.6 : 0.6),
            } });
    };
    return MeasureColorStrategy;
}(ColorStrategy));
export { MeasureColorStrategy };
//# sourceMappingURL=measure.js.map
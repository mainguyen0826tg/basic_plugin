// (C) 2019-2021 GoodData Corporation
import { __awaiter, __generator } from "tslib";
import { transformResultHeaders } from "@gooddata/sdk-backend-base";
import { NoDataError, UnexpectedError, } from "@gooddata/sdk-backend-spi";
import SparkMD5 from "spark-md5";
import { convertExecutionApiError } from "../../../utils/errorHandling";
import { toAfmExecution } from "../../../convertors/toBackend/afm/ExecutionConverter";
import { convertWarning, convertDimensions } from "../../../convertors/fromBackend/ExecutionResultConverter";
import { createResultHeaderTransformer } from "../../../convertors/fromBackend/afm/result";
import { findDateAttributeUris } from "../../../convertors/dateFormatting/dateFormatter";
var BearExecutionResult = /** @class */ (function () {
    function BearExecutionResult(authApiCall, definition, execFactory, execResponse) {
        var _this = this;
        this.authApiCall = authApiCall;
        this.definition = definition;
        this.execFactory = execFactory;
        this.execResponse = execResponse;
        this.asDataView = function (promisedRes) {
            return promisedRes.then(function (res) {
                if (!res) {
                    // TODO: SDK8: investigate when can this actually happen; perhaps end of data during paging?
                    //  perhaps legitimate NoDataCase?
                    throw new UnexpectedError("Server returned no data");
                }
                if (isEmptyDataResult(res)) {
                    throw new NoDataError("The execution resulted in no data to display.", new BearDataView(_this, res));
                }
                return new BearDataView(_this, res);
            });
        };
        this.dimensions = convertDimensions(execResponse.dimensions);
        this._fingerprint = SparkMD5.hash(execResponse.links.executionResult);
    }
    BearExecutionResult.prototype.readAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.asDataView(this.authApiCall(function (sdk) { return sdk.execution.getExecutionResult(_this.execResponse.links.executionResult); }, convertExecutionApiError))];
            });
        });
    };
    BearExecutionResult.prototype.readWindow = function (offset, size) {
        return __awaiter(this, void 0, void 0, function () {
            var saneOffset, saneSize;
            var _this = this;
            return __generator(this, function (_a) {
                saneOffset = sanitizeOffset(offset);
                saneSize = sanitizeSize(size);
                return [2 /*return*/, this.asDataView(this.authApiCall(function (sdk) {
                        return sdk.execution.getPartialExecutionResult(_this.execResponse.links.executionResult, saneSize, saneOffset);
                    }, convertExecutionApiError))];
            });
        });
    };
    BearExecutionResult.prototype.transform = function () {
        return this.execFactory.forDefinition(this.definition);
    };
    BearExecutionResult.prototype.export = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var optionsForBackend;
            var _this = this;
            return __generator(this, function (_a) {
                optionsForBackend = {
                    format: options.format,
                    mergeHeaders: options.mergeHeaders,
                    title: options.title,
                    showFilters: options.showFilters,
                };
                if (options.showFilters) {
                    optionsForBackend.afm = toAfmExecution(this.definition).execution.afm;
                }
                return [2 /*return*/, this.authApiCall(function (sdk) {
                        return sdk.report.exportResult(_this.definition.workspace, _this.execResponse.links.executionResult, optionsForBackend);
                    })];
            });
        });
    };
    BearExecutionResult.prototype.equals = function (other) {
        return this.fingerprint() === other.fingerprint();
    };
    BearExecutionResult.prototype.fingerprint = function () {
        return this._fingerprint;
    };
    return BearExecutionResult;
}());
export { BearExecutionResult };
var BEAR_PAGE_SIZE_LIMIT = 1000;
function sanitizeOffset(offset) {
    return offset.map(function (offsetItem) {
        if (offsetItem === void 0) { offsetItem = 0; }
        return offsetItem;
    });
}
function sanitizeSize(size) {
    return size.map(function (sizeInDim) {
        if (sizeInDim === void 0) { sizeInDim = BEAR_PAGE_SIZE_LIMIT; }
        if (sizeInDim > BEAR_PAGE_SIZE_LIMIT) {
            // eslint-disable-next-line no-console
            console.warn("The maximum limit per page is " + BEAR_PAGE_SIZE_LIMIT);
            return BEAR_PAGE_SIZE_LIMIT;
        }
        return sizeInDim;
    });
}
var BearDataView = /** @class */ (function () {
    function BearDataView(result, dataResult) {
        var _a, _b;
        this.result = result;
        this.definition = result.definition;
        this.data = dataResult.data;
        this.headerItems = dataResult.headerItems ? dataResult.headerItems : [];
        this.totals = dataResult.totals;
        this.totalCount = dataResult.paging.total;
        this.count = dataResult.paging.count;
        this.offset = dataResult.paging.offset;
        this.warnings = (_b = (_a = dataResult.warnings) === null || _a === void 0 ? void 0 : _a.map(convertWarning)) !== null && _b !== void 0 ? _b : [];
        this._fingerprint = result.fingerprint() + "/" + this.offset.join(",") + "-" + this.count.join(",");
        this.headerItems = transformResultHeaders(this.headerItems, createResultHeaderTransformer(findDateAttributeUris(result.dimensions)), this.definition.postProcessing);
    }
    BearDataView.prototype.fingerprint = function () {
        return this._fingerprint;
    };
    BearDataView.prototype.equals = function (other) {
        return this.fingerprint() === other.fingerprint();
    };
    return BearDataView;
}());
//
//
//
function hasEmptyData(result) {
    return result.data.length === 0;
}
function hasMissingHeaderItems(result) {
    return !result.headerItems;
}
function isEmptyDataResult(result) {
    return hasEmptyData(result) && hasMissingHeaderItems(result);
}
//# sourceMappingURL=executionResult.js.map
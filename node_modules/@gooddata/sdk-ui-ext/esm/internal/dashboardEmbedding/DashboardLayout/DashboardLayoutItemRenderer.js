import { __assign } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { useMemo } from "react";
import { Col } from "react-grid-system";
import isNil from "lodash/isNil";
import cx from "classnames";
var isHiddenStyle = { height: 0, width: 0, overflow: "hidden", flex: 0 };
export var DashboardLayoutItemRenderer = function (props) {
    var _a;
    var _b, _c, _d, _e, _f;
    var item = props.item, screen = props.screen, children = props.children, className = props.className, _g = props.minHeight, minHeight = _g === void 0 ? 0 : _g, isHidden = props.isHidden;
    var size = item.size();
    var currentScreenSizeConfiguration = item.sizeForScreen(screen);
    var ratio = currentScreenSizeConfiguration === null || currentScreenSizeConfiguration === void 0 ? void 0 : currentScreenSizeConfiguration.heightAsRatio;
    var height = currentScreenSizeConfiguration === null || currentScreenSizeConfiguration === void 0 ? void 0 : currentScreenSizeConfiguration.gridHeight;
    var width = currentScreenSizeConfiguration === null || currentScreenSizeConfiguration === void 0 ? void 0 : currentScreenSizeConfiguration.gridWidth;
    var style = useMemo(function () {
        var computedStyle = {
            minHeight: minHeight,
        };
        if (isHidden) {
            computedStyle = __assign(__assign({}, computedStyle), isHiddenStyle);
        }
        return computedStyle;
    }, [minHeight, isHidden]);
    return (React.createElement(Col, { xl: (_b = size === null || size === void 0 ? void 0 : size.xl) === null || _b === void 0 ? void 0 : _b.gridWidth, lg: (_c = size === null || size === void 0 ? void 0 : size.lg) === null || _c === void 0 ? void 0 : _c.gridWidth, md: (_d = size === null || size === void 0 ? void 0 : size.md) === null || _d === void 0 ? void 0 : _d.gridWidth, sm: (_e = size === null || size === void 0 ? void 0 : size.sm) === null || _e === void 0 ? void 0 : _e.gridWidth, xs: (_f = size === null || size === void 0 ? void 0 : size.xs) === null || _f === void 0 ? void 0 : _f.gridWidth, className: cx("gd-fluidlayout-column", "s-fluid-layout-column", "s-fluid-layout-screen-" + screen, "s-fluid-layout-column-width-" + width, (_a = {},
            _a["s-fluid-layout-column-ratio-" + ratio] = !isNil(ratio),
            _a["s-fluid-layout-column-height-" + height] = !isNil(height),
            _a), className), style: style }, children));
};
//# sourceMappingURL=DashboardLayoutItemRenderer.js.map
// (C) 2019-2021 GoodData Corporation
import { __awaiter, __generator, __spreadArrays } from "tslib";
import { defFingerprint, defWithDimensions, defWithSorting, defWithExecConfig, defWithDateFormat, } from "@gooddata/sdk-model";
import isEqual from "lodash/isEqual";
import { TigerExecutionResult } from "./executionResult";
import { toAfmExecution } from "../../../convertors/toBackend/afm/toAfmResultSpec";
import { downloadFile } from "../../../utils/downloadFile";
var TigerPreparedExecution = /** @class */ (function () {
    function TigerPreparedExecution(authCall, definition, executionFactory, dateFormatter) {
        this.authCall = authCall;
        this.definition = definition;
        this.executionFactory = executionFactory;
        this.dateFormatter = dateFormatter;
    }
    TigerPreparedExecution.prototype.execute = function () {
        return __awaiter(this, void 0, void 0, function () {
            var afmExecution;
            var _this = this;
            return __generator(this, function (_a) {
                checkDefIsExecutable(this.definition);
                afmExecution = toAfmExecution(this.definition);
                return [2 /*return*/, this.authCall(function (client) {
                        return client.execution.computeReport({
                            workspaceId: _this.definition.workspace,
                            afmExecution: afmExecution,
                        });
                    }).then(function (response) {
                        return new TigerExecutionResult(_this.authCall, _this.definition, _this.executionFactory, response.data, _this.dateFormatter);
                    })];
            });
        });
    };
    TigerPreparedExecution.prototype.explain = function (explainType) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this.definition) {
                    this.authCall(function (client) {
                        return client.explain
                            .explainAFM({
                            workspaceId: _this.definition.workspace,
                            afmExecution: toAfmExecution(_this.definition),
                            explainType: explainType,
                        }, {
                            responseType: "blob",
                        })
                            .then(function (response) {
                            downloadFile(explainType ? explainType + ".json" : "explainAfm.zip", response.data);
                        })
                            .catch(function (error) {
                            // eslint-disable-next-line no-console
                            console.warn(error);
                        });
                    });
                }
                return [2 /*return*/];
            });
        });
    };
    TigerPreparedExecution.prototype.withDimensions = function () {
        var dimsOrGen = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            dimsOrGen[_i] = arguments[_i];
        }
        return this.executionFactory.forDefinition(defWithDimensions.apply(void 0, __spreadArrays([this.definition], dimsOrGen)));
    };
    TigerPreparedExecution.prototype.withSorting = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        return this.executionFactory.forDefinition(defWithSorting(this.definition, items));
    };
    TigerPreparedExecution.prototype.withDateFormat = function (dateFormat) {
        return this.executionFactory.forDefinition(defWithDateFormat(this.definition, dateFormat));
    };
    TigerPreparedExecution.prototype.fingerprint = function () {
        if (!this._fingerprint) {
            this._fingerprint = defFingerprint(this.definition);
        }
        return this._fingerprint;
    };
    TigerPreparedExecution.prototype.withExecConfig = function (config) {
        return this.executionFactory.forDefinition(defWithExecConfig(this.definition, config));
    };
    TigerPreparedExecution.prototype.equals = function (other) {
        return isEqual(this.definition, other.definition);
    };
    return TigerPreparedExecution;
}());
export { TigerPreparedExecution };
function checkDefIsExecutable(_def) {
    return;
}
//# sourceMappingURL=preparedExecution.js.map
import { __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { injectIntl } from "react-intl";
import { isColorFromPalette, isRgbColor } from "@gooddata/sdk-model";
import { v4 as uuidv4 } from "uuid";
import { ColorPicker } from "@gooddata/sdk-ui-kit";
import ColorOverlay, { DropdownVersionType } from "./ColorOverlay";
import ColorPalette from "./ColorPalette";
import CustomColorButton from "./CustomColorButton";
export var IconPosition;
(function (IconPosition) {
    IconPosition[IconPosition["Down"] = 0] = "Down";
    IconPosition[IconPosition["Right"] = 1] = "Right";
})(IconPosition || (IconPosition = {}));
var COLOR_FOR_UNKNOWN_ITEM = {
    r: 255,
    g: 0,
    b: 0,
};
var ColorDropdown = /** @class */ (function (_super) {
    __extends(ColorDropdown, _super);
    function ColorDropdown(props) {
        var _this = _super.call(this, props) || this;
        _this.onColorPickerSubmit = function (color) {
            var item = {
                type: "rgb",
                value: color,
            };
            _this.onColorSelected(item);
        };
        _this.onColorPickerCancel = function () {
            _this.setState({ dropdownVersion: DropdownVersionType.ColorPalette });
        };
        _this.onCustomColorButtonClick = function () {
            _this.setState({ dropdownVersion: DropdownVersionType.ColorPicker });
        };
        _this.onClose = function () {
            _this.setState({ isDropdownOpen: false, dropdownVersion: DropdownVersionType.ColorPalette });
        };
        _this.onDropdownButtonClick = function () {
            _this.toggleDropdown();
        };
        _this.onColorSelected = function (color) {
            _this.setState({
                isDropdownOpen: false,
                dropdownVersion: DropdownVersionType.ColorPalette,
            });
            setTimeout(function () {
                _this.props.onColorSelected(color);
            }, 100);
        };
        _this.id = uuidv4();
        _this.state = {
            isDropdownOpen: false,
            dropdownVersion: DropdownVersionType.ColorPalette,
        };
        return _this;
    }
    ColorDropdown.prototype.render = function () {
        return (React.createElement(React.Fragment, null,
            React.createElement("div", { className: this.getClassName(), onClick: this.onDropdownButtonClick }, this.setupDropdownChild()),
            this.state.isDropdownOpen && (React.createElement(ColorOverlay, { alignTo: "." + this.getClassName(), onClose: this.onClose, dropdownVersion: this.state.dropdownVersion, key: this.state.dropdownVersion },
                React.createElement("div", { className: "overlay dropdown-body" }, this.isColorPaletteContent()
                    ? this.renderColorPaletteContent()
                    : this.renderColorPickerContent())))));
    };
    ColorDropdown.prototype.setupDropdownChild = function () {
        var childProps = {
            isSelected: this.state.isDropdownOpen,
            position: this.getIconPosition(),
        };
        return React.cloneElement(this.props.children, childProps);
    };
    ColorDropdown.prototype.getIconPosition = function () {
        return this.state.dropdownVersion === DropdownVersionType.ColorPalette
            ? IconPosition.Down
            : IconPosition.Right;
    };
    ColorDropdown.prototype.isColorPaletteContent = function () {
        return this.state.dropdownVersion === DropdownVersionType.ColorPalette;
    };
    ColorDropdown.prototype.renderColorPaletteContent = function () {
        return (React.createElement("div", { className: "gd-color-drop-down" },
            React.createElement(ColorPalette, { selectedColorGuid: this.getSelectedGuidFromColorItem(), colorPalette: this.props.colorPalette, onColorSelected: this.onColorSelected }),
            this.props.showCustomPicker && React.createElement(CustomColorButton, { onClick: this.onCustomColorButtonClick })));
    };
    ColorDropdown.prototype.getSelectedGuidFromColorItem = function () {
        if (isColorFromPalette(this.props.selectedColorItem)) {
            return this.props.selectedColorItem.value;
        }
        return null;
    };
    ColorDropdown.prototype.renderColorPickerContent = function () {
        return (React.createElement(ColorPicker, { initialRgbColor: this.getSelectedColorFromPalette(), onSubmit: this.onColorPickerSubmit, onCancel: this.onColorPickerCancel }));
    };
    ColorDropdown.prototype.getSelectedColorFromPalette = function () {
        var _this = this;
        if (isColorFromPalette(this.props.selectedColorItem)) {
            var selected = this.props.colorPalette.find(function (item) {
                return item.guid === _this.props.selectedColorItem.value;
            });
            if (selected) {
                return selected.fill;
            }
        }
        if (isRgbColor(this.props.selectedColorItem)) {
            return this.props.selectedColorItem.value;
        }
        return COLOR_FOR_UNKNOWN_ITEM;
    };
    ColorDropdown.prototype.getClassName = function () {
        return "s-color-drop-down-button-" + this.id;
    };
    ColorDropdown.prototype.toggleDropdown = function () {
        this.setState({
            isDropdownOpen: !this.state.isDropdownOpen,
            dropdownVersion: DropdownVersionType.ColorPalette,
        });
    };
    return ColorDropdown;
}(React.PureComponent));
export default injectIntl(ColorDropdown);
//# sourceMappingURL=ColorDropdown.js.map
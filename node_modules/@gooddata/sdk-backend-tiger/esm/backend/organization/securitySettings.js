import { __awaiter, __generator } from "tslib";
import { validatePluginUrlIsSane } from "@gooddata/sdk-backend-base";
var SecuritySettingsService = /** @class */ (function () {
    /**
     * Constructs a new SecuritySettingsService
     *
     * @param scope - ID of the scope. For now the backend does not support this and returns true for all calls.
     *  The plan is to support domain, workspace ID and user profile ID.
     */
    function SecuritySettingsService(scope) {
        var _this = this;
        this.scope = scope;
        this.isUrlValid = function (url, context) {
            // eslint-disable-next-line no-console
            console.warn("'isUrlValid' function is not supported by Tiger backend, true is returned for parameters:", url, context);
            return Promise.resolve(true);
        };
        this.isDashboardPluginUrlValid = function (url) { return __awaiter(_this, void 0, void 0, function () {
            var sanitizationError;
            return __generator(this, function (_a) {
                sanitizationError = validatePluginUrlIsSane(url);
                if (sanitizationError) {
                    // eslint-disable-next-line no-console
                    console.warn("Dashboard plugin URL is not valid: ", sanitizationError);
                    return [2 /*return*/, false];
                }
                // On tiger, it is responsibility of the installation admin to correctly set the CSP. The browser
                // will then prevent loading plugins from unsupported locations
                //
                return [2 /*return*/, Promise.resolve(true)];
            });
        }); };
    }
    return SecuritySettingsService;
}());
export { SecuritySettingsService };
//# sourceMappingURL=securitySettings.js.map
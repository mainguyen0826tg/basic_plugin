import { __assign } from "tslib";
// (C) 2007-2020 GoodData Corporation
import set from "lodash/set";
/**
 * Config module holds SDK configuration variables
 *
 * Currently its only custom domain - which enabled using
 * sdk from different domain (using CORS)
 *
 * Never set properties directly - always use setter methods
 *
 * @module config
 * @class config
 */
var URL_REGEXP = "(?:(https)://+|(www\\.)?)\\w[:;,\\.?\\[\\]\\w/~%&=+#-@!]*";
export function sanitizeDomain(domain) {
    if (domain === null) {
        return undefined;
    }
    var sanitizedDomain = domain || "";
    var link = sanitizedDomain.match(URL_REGEXP);
    if (!link) {
        throw new Error(domain + " is not a valid url");
    }
    // ensure https:// prefix and strip possible trailing /
    return "https://" + link[0].replace(/^https?:\/\/|\/$/g, "");
}
/**
 * Returns sanitized config
 *
 * @method sanitizeConfig
 * @return {object|undefined} config with sanitized domain
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export function sanitizeConfig(config) {
    var sanitized = __assign({}, config);
    if (config.domain) {
        sanitized.domain = sanitizeDomain(config.domain);
    }
    return sanitized;
}
/**
 * Config factory
 *
 * @param {object|null} configStorage config object
 * @method createModule
 * @return SDK config module
 */
var ConfigModule = /** @class */ (function () {
    function ConfigModule(configStorage) {
        this.configStorage = configStorage;
        if (arguments.length !== 1) {
            throw new Error("Config module has to be called with exactly one argument.");
        }
    }
    /**
     * Sets custom domain. Parameter is url which has always to be https://
     * (if you don't provide it, we will do it for you).
     *
     * RegExp inspired taken from
     * https://github.com/jarib/google-closure-library/blob/master/closure/goog/string/linkify.js
     * @param {String|null} domain valid domain starting with https:// or null for removing
     * @method setCustomDomain
     */
    ConfigModule.prototype.setCustomDomain = function (domain) {
        this.configStorage.domain = sanitizeDomain(domain);
    };
    /**
     * Returns current domain
     *
     * @method getCustomDomain
     */
    ConfigModule.prototype.getCustomDomain = function () {
        return this.configStorage.domain;
    };
    /**
     * Sets JS package and version info
     *
     * @method setJsPackage
     * @param {String} name package name
     * @param {String} version package version (semver)
     * @private
     */
    ConfigModule.prototype.setJsPackage = function (name, version) {
        if (!this.configStorage.originPackage) {
            // only set the first (topmost) package
            this.configStorage.originPackage = { name: name, version: version };
        }
    };
    /**
     * Returns JS package and version info
     *
     * @method getJsPackage
     * @return {object} with 'name' and 'version' properties
     * @private
     */
    ConfigModule.prototype.getJsPackage = function () {
        return this.configStorage.originPackage;
    };
    ConfigModule.prototype.setRequestHeader = function (key, value) {
        set(this.configStorage, ["xhrSettings", "headers", key], value);
    };
    ConfigModule.prototype.getRequestHeader = function (key) {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.configStorage) === null || _a === void 0 ? void 0 : _a.xhrSettings) === null || _b === void 0 ? void 0 : _b.headers) === null || _c === void 0 ? void 0 : _c[key];
    };
    return ConfigModule;
}());
export { ConfigModule };
//# sourceMappingURL=config.js.map
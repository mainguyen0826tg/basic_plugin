// (C) 2019-2021 GoodData Corporation
import { __assign } from "tslib";
import { GdcFilterContext, GdcVisualizationWidget, GdcKpi, GdcVisualizationObject, } from "@gooddata/api-model-bear";
import { uriRef } from "@gooddata/sdk-model";
import keyBy from "lodash/keyBy";
import { isWidget, } from "@gooddata/sdk-backend-spi";
import { sanitizeExportFilterContext, convertFilterContext, convertTempFilterContext } from "./filterContext";
import { convertLayout, createImplicitDashboardLayout } from "./layout";
import { convertVisualizationWidget, convertKpi } from "./widget";
export var convertListedDashboard = function (dashboardLink, userMap) {
    var _a, _b;
    var isUnderStrictControlProp = dashboardLink.flags && dashboardLink.flags.findIndex(function (flag) { return flag === "strictAccessControl"; }) !== -1
        ? {
            isUnderStrictControl: true,
        }
        : {};
    return __assign({ ref: uriRef(dashboardLink.link), identifier: dashboardLink.identifier, uri: dashboardLink.link, title: dashboardLink.title, description: dashboardLink.summary, updated: dashboardLink.updated, updatedBy: dashboardLink.contributor ? userMap === null || userMap === void 0 ? void 0 : userMap.get(dashboardLink.contributor) : undefined, created: dashboardLink.created, createdBy: dashboardLink.author ? userMap === null || userMap === void 0 ? void 0 : userMap.get(dashboardLink.author) : undefined, 
        // filter takes care of multiple spaces and also the base scenario ("" ~> [])
        tags: (_b = (_a = dashboardLink.tags) === null || _a === void 0 ? void 0 : _a.split(" ").filter(Boolean)) !== null && _b !== void 0 ? _b : [], isLocked: !!dashboardLink.locked, shareStatus: getShareStatus(!!dashboardLink.unlisted, !!dashboardLink.sharedWithSomeone) }, isUnderStrictControlProp);
};
var convertDateFilterConfigAddedPresets = function (addPresets) {
    var _a = addPresets.absolutePresets, absolutePresets = _a === void 0 ? [] : _a, _b = addPresets.relativePresets, relativePresets = _b === void 0 ? [] : _b;
    return {
        absolutePresets: absolutePresets.map(function (preset) { return (__assign(__assign({}, preset), { type: "absolutePreset" })); }),
        relativePresets: relativePresets.map(function (preset) { return (__assign(__assign({}, preset), { type: "relativePreset" })); }),
    };
};
export var convertDashboardDateFilterConfig = function (dateFilterConfig) {
    var filterName = dateFilterConfig.filterName, mode = dateFilterConfig.mode, addPresets = dateFilterConfig.addPresets, hideGranularities = dateFilterConfig.hideGranularities, hideOptions = dateFilterConfig.hideOptions;
    return {
        filterName: filterName,
        mode: mode,
        addPresets: addPresets && convertDateFilterConfigAddedPresets(addPresets),
        hideGranularities: hideGranularities,
        hideOptions: hideOptions,
    };
};
var convertPluginLink = function (link) {
    var type = link.type, parameters = link.parameters;
    return {
        type: "IDashboardPluginLink",
        plugin: uriRef(type),
        parameters: parameters,
    };
};
var getShareStatus = function (unlisted, sharedWithSomeone) {
    if (unlisted && !sharedWithSomeone) {
        return "private";
    }
    else if (unlisted && sharedWithSomeone) {
        return "shared";
    }
    else {
        return "public";
    }
};
export var convertDashboard = function (dashboard, dependencies, visualizationClasses, exportFilterContextUri, userMap) {
    var _a;
    if (visualizationClasses === void 0) { visualizationClasses = []; }
    var _b = dashboard.analyticalDashboard, _c = _b.meta, summary = _c.summary, created = _c.created, author = _c.author, updated = _c.updated, contributor = _c.contributor, identifier = _c.identifier, uri = _c.uri, title = _c.title, locked = _c.locked, tags = _c.tags, unlisted = _c.unlisted, sharedWithSomeone = _c.sharedWithSomeone, flags = _c.flags, _d = _b.content, layout = _d.layout, filterContext = _d.filterContext, dateFilterConfig = _d.dateFilterConfig, widgetsUris = _d.widgets, plugins = _d.plugins;
    var sdkDependencies = dependencies
        // Filter out visualization objects - we only need them to create implicit layout
        .filter(function (d) { return !GdcVisualizationObject.isVisualization(d); })
        .map(convertDashboardDependency);
    var unsortedWidgets = sdkDependencies.filter(isWidget);
    // To preserve the logic of createImplicitDashboardLayout, we must preserve the order of the widgets
    var widgetByUri = keyBy(unsortedWidgets, "uri");
    var widgets = widgetsUris.map(function (widgetUri) { return widgetByUri[widgetUri]; });
    var filterContextOrExportFilterContext = sdkDependencies.find(function (dep) {
        return exportFilterContextUri ? dep.uri === exportFilterContextUri : dep.uri === filterContext;
    });
    var isUnderStrictControlProp = flags && flags.findIndex(function (flag) { return flag === "strictAccessControl"; }) !== -1
        ? {
            isUnderStrictControl: true,
        }
        : {};
    return __assign(__assign({ type: "IDashboard", title: title, description: summary, identifier: identifier, uri: uri, ref: uriRef(uri), created: created, createdBy: author ? userMap === null || userMap === void 0 ? void 0 : userMap.get(author) : undefined, updated: updated, updatedBy: contributor ? userMap === null || userMap === void 0 ? void 0 : userMap.get(contributor) : undefined, isLocked: !!locked, shareStatus: getShareStatus(!!unlisted, !!sharedWithSomeone) }, isUnderStrictControlProp), { dateFilterConfig: dateFilterConfig && convertDashboardDateFilterConfig(dateFilterConfig), filterContext: exportFilterContextUri && filterContextOrExportFilterContext
            ? sanitizeExportFilterContext(filterContextOrExportFilterContext)
            : filterContextOrExportFilterContext, layout: layout
            ? convertLayout(layout, widgets)
            : createImplicitDashboardLayout(widgets, dependencies, visualizationClasses), plugins: plugins === null || plugins === void 0 ? void 0 : plugins.map(convertPluginLink), 
        // filter takes care of multiple spaces and also the base scenario ("" ~> [])
        tags: (_a = tags === null || tags === void 0 ? void 0 : tags.split(" ").filter(function (t) { return t; })) !== null && _a !== void 0 ? _a : [] });
};
var convertDashboardDependency = function (dependency) {
    if (GdcVisualizationWidget.isWrappedVisualizationWidget(dependency)) {
        return convertVisualizationWidget(dependency);
    }
    else if (GdcKpi.isWrappedKpi(dependency)) {
        return convertKpi(dependency);
    }
    else if (GdcFilterContext.isWrappedFilterContext(dependency)) {
        return convertFilterContext(dependency);
    }
    else if (GdcFilterContext.isWrappedTempFilterContext(dependency)) {
        return convertTempFilterContext(dependency);
    }
    throw new Error("No converter for the dashboard dependency!");
};
//# sourceMappingURL=dashboards.js.map
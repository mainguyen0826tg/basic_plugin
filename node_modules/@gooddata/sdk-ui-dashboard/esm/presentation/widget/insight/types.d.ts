import { ComponentType } from "react";
import { IAnalyticalBackend, IInsightWidget } from "@gooddata/sdk-backend-spi";
import { IInsight } from "@gooddata/sdk-model";
import { IErrorProps, ILoadingProps, IPushData, OnError, OnExportReady, OnLoadingChanged } from "@gooddata/sdk-ui";
import { OnDrillDownSuccess, OnDrillToAttributeUrlSuccess, OnDrillToCustomUrlSuccess, OnDrillToDashboardSuccess, OnDrillToInsightSuccess, OnWidgetDrill } from "../../drill/types";
/**
 * Insight widget props.
 *
 * IMPORTANT: this interface is marked as public but not all properties in it are suitable for public consumption
 * yet. Please heed the per-property API maturity annotations; the alpha level APIs may change in a breaking way
 * in the next release.
 *
 * @public
 */
export interface IDashboardInsightProps {
    /**
     * Backend to work with.
     *
     * Note: the backend must come either from this property or from BackendContext. If you do not specify
     * backend here, then the component MUST be rendered within an existing BackendContext.
     *
     * @alpha
     */
    backend?: IAnalyticalBackend;
    /**
     * Workspace where the Insight widget exists.
     *
     * Note: the workspace must come either from this property or from WorkspaceContext. If you do not specify
     * workspace here, then the component MUST be rendered within an existing WorkspaceContext.
     *
     * @alpha
     */
    workspace?: string;
    /**
     * Definition of insight widget to render.
     *
     * @public
     */
    widget: IInsightWidget;
    /**
     * An insight to render.
     *
     * Note: the insight object provided here represents the insight as it is stored on the backend. It does
     * not reflect dashboard filters that should be applied when computing data for this insight.
     *
     * Use the `useWidgetFilters()` to obtain filters to use on this insight. Use those filters to replace
     * all insight filters using `insightSetFilters()` function available in `@gooddata/sdk-model`.
     *
     * @public
     */
    insight: IInsight;
    /**
     * Error component to use when insight rendering fails for any reason.
     *
     * @alpha
     */
    ErrorComponent?: ComponentType<IErrorProps>;
    /**
     * Loading component to use while loading and preparing data to render.
     *
     * @alpha
     */
    LoadingComponent?: ComponentType<ILoadingProps>;
    /**
     * @alpha
     */
    clientHeight?: number;
    /**
     * @alpha
     */
    clientWidth?: number;
    /**
     * @alpha
     */
    onDrill?: OnWidgetDrill;
    /**
     * @alpha
     */
    onDrillDown?: OnDrillDownSuccess;
    /**
     * @alpha
     */
    onDrillToInsight?: OnDrillToInsightSuccess;
    /**
     * @alpha
     */
    onDrillToDashboard?: OnDrillToDashboardSuccess;
    /**
     * @alpha
     */
    onDrillToAttributeUrl?: OnDrillToAttributeUrlSuccess;
    /**
     * @alpha
     */
    onDrillToCustomUrl?: OnDrillToCustomUrlSuccess;
    /**
     * @alpha
     */
    onError?: OnError;
    /**
     * @alpha
     */
    onLoadingChanged?: OnLoadingChanged;
    /**
     * @alpha
     */
    onExportReady?: OnExportReady;
    /**
     * @internal
     */
    pushData?: (data: IPushData) => void;
}
/**
 * @public
 */
export declare type CustomDashboardInsightComponent = ComponentType<IDashboardInsightProps>;
//# sourceMappingURL=types.d.ts.map
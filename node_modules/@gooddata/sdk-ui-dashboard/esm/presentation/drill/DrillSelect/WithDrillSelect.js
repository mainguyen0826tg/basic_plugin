import { __assign, __read } from "tslib";
// (C) 2020-2021 GoodData Corporation
import React, { useState, useCallback, useRef } from "react";
import cx from "classnames";
import { v4 as uuid } from "uuid";
import { DrillSelectDropdown } from "./DrillSelectDropdown";
import { isDrillToCustomUrl, isDrillToAttributeUrl, isDrillToDashboard, isDrillToInsight, } from "@gooddata/sdk-backend-spi";
import { IntlWrapper } from "../../localization";
import { selectLocale, useDashboardSelector, selectDisableDefaultDrills, selectWidgetDrills, } from "../../../model";
import { isDrillDownDefinition, } from "../../../types";
import { filterDrillFromAttributeByPriority } from "../utils/drillDownUtils";
import { useDrills } from "../hooks/useDrills";
/**
 * @internal
 */
export function WithDrillSelect(_a) {
    var widgetRef = _a.widgetRef, children = _a.children, insight = _a.insight, onDrillDownSuccess = _a.onDrillDownSuccess, onDrillToInsightSuccess = _a.onDrillToInsightSuccess, onDrillToDashboardSuccess = _a.onDrillToDashboardSuccess, onDrillToAttributeUrlSuccess = _a.onDrillToAttributeUrlSuccess, onDrillToCustomUrlSuccess = _a.onDrillToCustomUrlSuccess, onError = _a.onError;
    var drillPickerId = useRef(uuid()).current;
    var _b = __read(useState(null), 2), dropdownProps = _b[0], setDropdownProps = _b[1];
    var _c = __read(useState(true), 2), isOpen = _c[0], setIsOpen = _c[1];
    var locale = useDashboardSelector(selectLocale);
    var disableDefaultDrills = useDashboardSelector(selectDisableDefaultDrills); // TODO: maybe remove?
    var configuredDrills = useDashboardSelector(selectWidgetDrills(widgetRef));
    var drills = useDrills({
        onDrillSuccess: function (s) {
            if (disableDefaultDrills || s.payload.drillEvent.drillDefinitions.length === 0) {
                return;
            }
            var drillDefinitions = s.payload.drillEvent.drillDefinitions;
            var drillEvent = s.payload.drillEvent;
            var context = s.payload.drillContext;
            var filteredByPriority = filterDrillFromAttributeByPriority(drillDefinitions, configuredDrills);
            if (filteredByPriority.length === 1) {
                onSelect(filteredByPriority[0], drillEvent, s.correlationId, context);
            }
            else if (filteredByPriority.length > 1) {
                setDropdownProps({
                    drillDefinitions: filteredByPriority,
                    drillEvent: drillEvent,
                    drillContext: context,
                    correlationId: s.correlationId,
                });
                setIsOpen(true);
            }
        },
        onDrillDownSuccess: onDrillDownSuccess,
        onDrillToInsightSuccess: onDrillToInsightSuccess,
        onDrillToDashboardSuccess: onDrillToDashboardSuccess,
        onDrillToAttributeUrlSuccess: onDrillToAttributeUrlSuccess,
        onDrillToCustomUrlSuccess: onDrillToCustomUrlSuccess,
        onError: function (e) { return onError === null || onError === void 0 ? void 0 : onError(e.payload.error); },
    });
    var onSelect = useCallback(function (drillDefinition, drillEvent, correlationId, drillContext) {
        var _a;
        var effectiveDrillEvent = drillEvent !== null && drillEvent !== void 0 ? drillEvent : dropdownProps === null || dropdownProps === void 0 ? void 0 : dropdownProps.drillEvent;
        var effectiveCorrelationId = correlationId !== null && correlationId !== void 0 ? correlationId : dropdownProps === null || dropdownProps === void 0 ? void 0 : dropdownProps.correlationId;
        var effectiveInsight = (_a = drillContext === null || drillContext === void 0 ? void 0 : drillContext.insight) !== null && _a !== void 0 ? _a : insight;
        if (effectiveDrillEvent) {
            if (isDrillDownDefinition(drillDefinition)) {
                drills.drillDown.run(effectiveInsight, drillDefinition, effectiveDrillEvent, effectiveCorrelationId);
            }
            else if (isDrillToInsight(drillDefinition)) {
                drills.drillToInsight.run(drillDefinition, effectiveDrillEvent, effectiveCorrelationId);
            }
            else if (isDrillToDashboard(drillDefinition)) {
                drills.drillToDashboard.run(drillDefinition, effectiveDrillEvent, effectiveCorrelationId);
            }
            else if (isDrillToAttributeUrl(drillDefinition)) {
                drills.drillToAttributeUrl.run(drillDefinition, effectiveDrillEvent, effectiveCorrelationId);
            }
            else if (isDrillToCustomUrl(drillDefinition)) {
                drills.drillToCustomUrl.run(drillDefinition, effectiveDrillEvent, effectiveCorrelationId);
            }
            setDropdownProps(null);
            setIsOpen(false);
        }
    }, [dropdownProps, insight]);
    var onClose = function () {
        setIsOpen(false);
    };
    var dropDownAnchorClass = "s-drill-picker-" + drillPickerId;
    var drillDownDropdown = dropdownProps ? (React.createElement(IntlWrapper, { locale: locale },
        React.createElement(DrillSelectDropdown, __assign({}, dropdownProps, { dropDownAnchorClass: dropDownAnchorClass, isOpen: isOpen, onClose: onClose, onSelect: onSelect })))) : null;
    return (React.createElement("div", { className: cx("gd-drill-modal-wrapper-mask", dropDownAnchorClass) },
        children({ onDrill: drills.drill.run }),
        drillDownDropdown));
}
//# sourceMappingURL=WithDrillSelect.js.map
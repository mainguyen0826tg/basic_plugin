import { __assign, __awaiter, __generator } from "tslib";
// (C) 2019-2021 GoodData Corporation
import { UnexpectedError, NotSupported, } from "@gooddata/sdk-backend-spi";
import { objRefToString, insightTitle, insightId, mergeFilters, insightFilters, insightSetFilters, insightUpdated, insightTags, } from "@gooddata/sdk-model";
import { v4 as uuidv4 } from "uuid";
import sortBy from "lodash/sortBy";
import { jsonApiHeaders, MetadataUtilities, JsonApiVisualizationObjectInTypeEnum, ValidateRelationsHeader, } from "@gooddata/api-client-tiger";
import { insightFromInsightDefinition, visualizationObjectsItemToInsight, } from "../../../convertors/fromBackend/InsightConverter";
import { objRefToUri, objRefToIdentifier } from "../../../utils/api";
import { convertVisualizationObject } from "../../../convertors/fromBackend/visualizationObjects/VisualizationObjectConverter";
import { convertAnalyticalDashboardWithLinks } from "../../../convertors/fromBackend/MetadataConverter";
import { convertInsight } from "../../../convertors/toBackend/InsightConverter";
import { visualizationClasses as visualizationClassesMocks } from "./mocks/visualizationClasses";
import { InMemoryPaging } from "@gooddata/sdk-backend-base";
var TigerWorkspaceInsights = /** @class */ (function () {
    function TigerWorkspaceInsights(authCall, workspace) {
        var _this = this;
        this.authCall = authCall;
        this.workspace = workspace;
        this.getVisualizationClass = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var uri, visualizationClasses, visualizationClass;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(ref, this.workspace, this.authCall)];
                    case 1:
                        uri = _a.sent();
                        return [4 /*yield*/, this.getVisualizationClasses()];
                    case 2:
                        visualizationClasses = _a.sent();
                        visualizationClass = visualizationClasses.find(function (v) { return v.visualizationClass.uri === uri; });
                        if (!visualizationClass) {
                            throw new UnexpectedError("Visualization class for " + objRefToString(ref) + " not found!");
                        }
                        return [2 /*return*/, visualizationClass];
                }
            });
        }); };
        this.getVisualizationClasses = function () { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authCall(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                        return [2 /*return*/, visualizationClassesMocks];
                    }); }); })];
            });
        }); };
        this.getInsights = function (options) { return __awaiter(_this, void 0, void 0, function () {
            var orderBy, usesOrderingByUpdated, optionsToUse, allInsights, sanitizedOrder;
            var _this = this;
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (options === null || options === void 0 ? void 0 : options.loadUserData) {
                            throw new NotSupported("Tiger backend does not support the 'loadUserData' option of getInsights.");
                        }
                        orderBy = options === null || options === void 0 ? void 0 : options.orderBy;
                        usesOrderingByUpdated = !orderBy || orderBy === "updated";
                        optionsToUse = {
                            query: __assign({}, (usesOrderingByUpdated ? {} : { sort: orderBy })),
                            headers: ValidateRelationsHeader,
                        };
                        return [4 /*yield*/, this.authCall(function (client) {
                                return MetadataUtilities.getAllPagesOf(client, client.workspaceObjects.getAllEntitiesVisualizationObjects, { workspaceId: _this.workspace }, optionsToUse)
                                    .then(MetadataUtilities.mergeEntitiesResults)
                                    .then(MetadataUtilities.filterValidEntities)
                                    .then(function (res) {
                                    if (options === null || options === void 0 ? void 0 : options.title) {
                                        var lowercaseSearch_1 = options.title.toLocaleLowerCase();
                                        return res.data
                                            .filter(function (vo) {
                                            var _a;
                                            var title = (_a = vo.attributes) === null || _a === void 0 ? void 0 : _a.title;
                                            return title && title.toLowerCase().indexOf(lowercaseSearch_1) > -1;
                                        })
                                            .map(visualizationObjectsItemToInsight);
                                    }
                                    return res.data.map(visualizationObjectsItemToInsight);
                                });
                            })];
                    case 1:
                        allInsights = _c.sent();
                        sanitizedOrder = allInsights;
                        if (usesOrderingByUpdated && allInsights.length > 0) {
                            // tiger started sending "updated" property -> use it to sort
                            if (insightUpdated(allInsights[0])) {
                                sanitizedOrder = sortBy(allInsights, function (insight) { return insightUpdated(insight); });
                            }
                            // tiger still does not support the "updated" property -> sort by title
                            else {
                                sanitizedOrder = sortBy(allInsights, function (insight) { return insightTitle(insight).toUpperCase(); });
                            }
                        }
                        return [2 /*return*/, new InMemoryPaging(sanitizedOrder, (_a = options === null || options === void 0 ? void 0 : options.limit) !== null && _a !== void 0 ? _a : 50, (_b = options === null || options === void 0 ? void 0 : options.offset) !== null && _b !== void 0 ? _b : 0)];
                }
            });
        }); };
        this.getInsight = function (ref, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var id, response, _a, visualizationObject, links, insight;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (options.loadUserData) {
                                throw new NotSupported("Tiger backend does not support the 'loadUserData' option of getInsight.");
                            }
                            return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                        case 1:
                            id = _b.sent();
                            return [4 /*yield*/, this.authCall(function (client) {
                                    return client.workspaceObjects.getEntityVisualizationObjects({
                                        objectId: id,
                                        workspaceId: _this.workspace,
                                    }, {
                                        headers: jsonApiHeaders,
                                    });
                                })];
                        case 2:
                            response = _b.sent();
                            _a = response.data, visualizationObject = _a.data, links = _a.links;
                            insight = insightFromInsightDefinition(convertVisualizationObject(visualizationObject.attributes.content, visualizationObject.attributes.title), visualizationObject.id, links.self, visualizationObject.attributes.tags);
                            if (!insight) {
                                throw new UnexpectedError("Insight for " + objRefToString(ref) + " not found!");
                            }
                            return [2 /*return*/, insight];
                    }
                });
            });
        };
        this.createInsight = function (insight) { return __awaiter(_this, void 0, void 0, function () {
            var createResponse, insightData;
            var _this = this;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (client) {
                            return client.workspaceObjects.createEntityVisualizationObjects({
                                workspaceId: _this.workspace,
                                jsonApiVisualizationObjectInDocument: {
                                    data: {
                                        id: uuidv4(),
                                        type: JsonApiVisualizationObjectInTypeEnum.VisualizationObject,
                                        attributes: {
                                            description: insightTitle(insight),
                                            content: convertInsight(insight),
                                            title: insightTitle(insight),
                                            tags: insightTags(insight),
                                        },
                                    },
                                },
                            }, {
                                headers: jsonApiHeaders,
                            });
                        })];
                    case 1:
                        createResponse = _b.sent();
                        insightData = createResponse.data;
                        return [2 /*return*/, insightFromInsightDefinition(insight, insightData.data.id, insightData.links.self, (_a = insightData.data.attributes) === null || _a === void 0 ? void 0 : _a.tags)];
                }
            });
        }); };
        this.updateInsight = function (insight) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (client) {
                            return client.workspaceObjects.updateEntityVisualizationObjects({
                                objectId: insightId(insight),
                                workspaceId: _this.workspace,
                                jsonApiVisualizationObjectInDocument: {
                                    data: {
                                        id: insightId(insight),
                                        type: JsonApiVisualizationObjectInTypeEnum.VisualizationObject,
                                        attributes: {
                                            description: insightTitle(insight),
                                            content: convertInsight(insight),
                                            title: insightTitle(insight),
                                            tags: insightTags(insight),
                                        },
                                    },
                                },
                            }, {
                                headers: jsonApiHeaders,
                            });
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, insight];
                }
            });
        }); };
        this.deleteInsight = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var id;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                    case 1:
                        id = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.workspaceObjects.deleteEntityVisualizationObjects({
                                    objectId: id,
                                    workspaceId: _this.workspace,
                                });
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.getInsightReferencedObjects = function (_insight, _types) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.resolve({})];
            });
        }); };
        this.getInsightReferencingObjects = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var id, filterReferencingObj, dashboards;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                    case 1:
                        id = _a.sent();
                        filterReferencingObj = {
                            filter: "visualizationObjects.id==" + id,
                        };
                        return [4 /*yield*/, this.authCall(function (client) {
                                return MetadataUtilities.getAllPagesOf(client, client.workspaceObjects.getAllEntitiesAnalyticalDashboards, {
                                    workspaceId: _this.workspace,
                                    include: ["visualizationObjects"],
                                }, { query: filterReferencingObj })
                                    .then(MetadataUtilities.mergeEntitiesResults)
                                    .then(function (result) { var _a; return (_a = result.data) !== null && _a !== void 0 ? _a : []; });
                            })];
                    case 2:
                        dashboards = _a.sent();
                        return [2 /*return*/, Promise.resolve({
                                analyticalDashboards: dashboards.map(convertAnalyticalDashboardWithLinks),
                            })];
                }
            });
        }); };
        this.getInsightWithAddedFilters = function (insight, filters) { return __awaiter(_this, void 0, void 0, function () {
            var mergedFilters;
            return __generator(this, function (_a) {
                if (!filters.length) {
                    return [2 /*return*/, insight];
                }
                mergedFilters = mergeFilters(insightFilters(insight), filters);
                return [2 /*return*/, insightSetFilters(insight, mergedFilters)];
            });
        }); };
    }
    return TigerWorkspaceInsights;
}());
export { TigerWorkspaceInsights };
//# sourceMappingURL=index.js.map
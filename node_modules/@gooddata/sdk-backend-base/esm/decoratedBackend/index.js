// (C) 2019-2021 GoodData Corporation
import { __awaiter, __generator } from "tslib";
import isEmpty from "lodash/isEmpty";
var BackendWithDecoratedServices = /** @class */ (function () {
    function BackendWithDecoratedServices(backend, factories) {
        if (factories === void 0) { factories = {}; }
        this.decorated = backend;
        this.factories = factories;
        this.capabilities = backend.capabilities;
        this.config = backend.config;
    }
    BackendWithDecoratedServices.prototype.authenticate = function (force) {
        return this.decorated.authenticate(force);
    };
    BackendWithDecoratedServices.prototype.deauthenticate = function () {
        return this.decorated.deauthenticate();
    };
    BackendWithDecoratedServices.prototype.isAuthenticated = function () {
        return this.decorated.isAuthenticated();
    };
    BackendWithDecoratedServices.prototype.onHostname = function (hostname) {
        return new BackendWithDecoratedServices(this.decorated.onHostname(hostname), this.factories);
    };
    BackendWithDecoratedServices.prototype.withAuthentication = function (provider) {
        return new BackendWithDecoratedServices(this.decorated.withAuthentication(provider), this.factories);
    };
    BackendWithDecoratedServices.prototype.withTelemetry = function (componentName, props) {
        return new BackendWithDecoratedServices(this.decorated.withTelemetry(componentName, props), this.factories);
    };
    BackendWithDecoratedServices.prototype.organization = function (organizationId) {
        return new OrganizationDecorator(this.decorated.organization(organizationId), this.factories);
    };
    BackendWithDecoratedServices.prototype.organizations = function () {
        return new OrganizationsDecorator(this.decorated.organizations(), this.factories);
    };
    BackendWithDecoratedServices.prototype.currentUser = function () {
        return this.decorated.currentUser();
    };
    BackendWithDecoratedServices.prototype.workspace = function (id) {
        return new AnalyticalWorkspaceDecorator(this.decorated.workspace(id), this.factories);
    };
    BackendWithDecoratedServices.prototype.workspaces = function () {
        return this.decorated.workspaces();
    };
    return BackendWithDecoratedServices;
}());
var AnalyticalWorkspaceDecorator = /** @class */ (function () {
    function AnalyticalWorkspaceDecorator(decorated, factories) {
        this.decorated = decorated;
        this.factories = factories;
        this.workspace = decorated.workspace;
    }
    AnalyticalWorkspaceDecorator.prototype.getDescriptor = function () {
        return this.decorated.getDescriptor();
    };
    AnalyticalWorkspaceDecorator.prototype.getParentWorkspace = function () {
        return this.decorated.getParentWorkspace();
    };
    AnalyticalWorkspaceDecorator.prototype.attributes = function () {
        var attributes = this.factories.attributes;
        if (attributes) {
            return attributes(this.decorated.attributes(), this.workspace);
        }
        return this.decorated.attributes();
    };
    AnalyticalWorkspaceDecorator.prototype.execution = function () {
        var execution = this.factories.execution;
        if (execution) {
            return execution(this.decorated.execution());
        }
        return this.decorated.execution();
    };
    AnalyticalWorkspaceDecorator.prototype.catalog = function () {
        var catalog = this.factories.catalog;
        if (catalog) {
            return catalog(this.decorated.catalog());
        }
        return this.decorated.catalog();
    };
    AnalyticalWorkspaceDecorator.prototype.measures = function () {
        return this.decorated.measures();
    };
    AnalyticalWorkspaceDecorator.prototype.facts = function () {
        return this.decorated.facts();
    };
    AnalyticalWorkspaceDecorator.prototype.insights = function () {
        return this.decorated.insights();
    };
    AnalyticalWorkspaceDecorator.prototype.dashboards = function () {
        return this.decorated.dashboards();
    };
    AnalyticalWorkspaceDecorator.prototype.settings = function () {
        var workspaceSettings = this.factories.workspaceSettings;
        if (workspaceSettings) {
            return workspaceSettings(this.decorated.settings());
        }
        return this.decorated.settings();
    };
    AnalyticalWorkspaceDecorator.prototype.styling = function () {
        return this.decorated.styling();
    };
    AnalyticalWorkspaceDecorator.prototype.datasets = function () {
        return this.decorated.datasets();
    };
    AnalyticalWorkspaceDecorator.prototype.permissions = function () {
        return this.decorated.permissions();
    };
    AnalyticalWorkspaceDecorator.prototype.users = function () {
        return this.decorated.users();
    };
    AnalyticalWorkspaceDecorator.prototype.dateFilterConfigs = function () {
        return this.decorated.dateFilterConfigs();
    };
    return AnalyticalWorkspaceDecorator;
}());
var OrganizationDecorator = /** @class */ (function () {
    function OrganizationDecorator(decorated, factories) {
        this.decorated = decorated;
        this.factories = factories;
        this.organizationId = decorated.organizationId;
    }
    OrganizationDecorator.prototype.getDescriptor = function () {
        return this.decorated.getDescriptor();
    };
    OrganizationDecorator.prototype.securitySettings = function () {
        var securitySettings = this.factories.securitySettings;
        if (securitySettings) {
            return securitySettings(this.decorated.securitySettings());
        }
        return this.decorated.securitySettings();
    };
    return OrganizationDecorator;
}());
var OrganizationsDecorator = /** @class */ (function () {
    function OrganizationsDecorator(decorated, factories) {
        this.decorated = decorated;
        this.factories = factories;
    }
    OrganizationsDecorator.prototype.getCurrentOrganization = function () {
        return __awaiter(this, void 0, void 0, function () {
            var fromDecorated;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.decorated.getCurrentOrganization()];
                    case 1:
                        fromDecorated = _a.sent();
                        return [2 /*return*/, new OrganizationDecorator(fromDecorated, this.factories)];
                }
            });
        });
    };
    return OrganizationsDecorator;
}());
/**
 * Decorated backend is a wrapper of any other backend implementations that can be used to enrich
 * functionality of the services that the wrapped backend normally provides.
 *
 * It can be for instance used to decorate execution factories and in conjunction with {@link DecoratedPreparedExecution}
 * also create decorated prepared executions.
 *
 * @param backend - instance of backend to decorate
 * @param decorators - configuration for the decorations
 * @returns new decorated backend
 * @alpha
 */
export function decoratedBackend(backend, decorators) {
    if (isEmpty(decorators)) {
        return backend;
    }
    return new BackendWithDecoratedServices(backend, decorators);
}
//# sourceMappingURL=index.js.map
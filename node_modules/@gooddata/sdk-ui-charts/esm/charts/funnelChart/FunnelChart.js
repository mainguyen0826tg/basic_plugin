import { __assign, __spreadArrays } from "tslib";
// (C) 2007-2018 GoodData Corporation
import React from "react";
import { newBucket } from "@gooddata/sdk-model";
import { BucketNames, useResolveValuesWithPlaceholders, } from "@gooddata/sdk-ui";
import { roundChartDimensions } from "../_commons/dimensions";
import { CoreFunnelChart } from "./CoreFunnelChart";
import { withChart } from "../_base/withChart";
//
// Internals
//
var funnelChartDefinition = {
    chartName: "FunnelChart",
    bucketPropsKeys: ["measures", "viewBy", "filters", "sortBy"],
    bucketsFactory: function (props) {
        return [
            newBucket.apply(void 0, __spreadArrays([BucketNames.MEASURES], props.measures)),
            newBucket(BucketNames.VIEW, props.viewBy),
        ];
    },
    executionFactory: function (props, buckets) {
        var backend = props.backend, workspace = props.workspace, execConfig = props.execConfig;
        return backend
            .withTelemetry("FunnelChart", props)
            .workspace(workspace)
            .execution()
            .forBuckets(buckets, props.filters)
            .withDimensions(roundChartDimensions)
            .withExecConfig(execConfig);
    },
};
var WrappedFunnelChart = withChart(funnelChartDefinition)(CoreFunnelChart);
/**
 * A funnel chart displays values as progressively decreasing proportions.
 *
 * You can define funnel chart using either multiple measures or single measure and a viewBy attribute whose
 * values will be used to slice the single measure.
 *
 * In either case, the measure values will be charted into a funnel. With the largest values being on the broadest
 * part of the funnel, and the smallest values towards the narrow part of the funnel.
 *
 * @public
 */
export var FunnelChart = function (props) {
    var _a = useResolveValuesWithPlaceholders([props.measures, props.viewBy, props.filters, props.sortBy], props.placeholdersResolutionContext), measures = _a[0], viewBy = _a[1], filters = _a[2], sortBy = _a[3];
    return (React.createElement(WrappedFunnelChart, __assign({}, props, {
        measures: measures,
        viewBy: viewBy,
        filters: filters,
        sortBy: sortBy,
    })));
};
//# sourceMappingURL=FunnelChart.js.map
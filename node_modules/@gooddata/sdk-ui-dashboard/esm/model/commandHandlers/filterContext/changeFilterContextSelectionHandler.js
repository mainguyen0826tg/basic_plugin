import { __generator, __read, __spread, __values } from "tslib";
// (C) 2021 GoodData Corporation
import { all, call, put, select } from "redux-saga/effects";
import { filterContextActions } from "../../store/filterContext";
import { selectFilterContextAttributeFilterByDisplayForm, selectFilterContextAttributeFilters, } from "../../store/filterContext/filterContextSelectors";
import { batchActions } from "redux-batched-actions";
import { canApplyDateFilter, dispatchFilterContextChanged } from "./common";
import partition from "lodash/partition";
import uniqBy from "lodash/uniqBy";
import compact from "lodash/compact";
import { isAttributeFilter, objRefToString, filterObjRef, isRelativeDateFilter, isUriRef, filterAttributeElements, isNegativeAttributeFilter, isAbsoluteDateFilter, isAllTimeDateFilter, } from "@gooddata/sdk-model";
import { isAllTimeDashboardDateFilter, isDashboardAttributeFilter, isDashboardDateFilter, newAbsoluteDashboardDateFilter, newAllTimeDashboardDateFilter, newRelativeDashboardDateFilter, NotSupported, } from "@gooddata/sdk-backend-spi";
import { resolveDisplayFormMetadata } from "../../utils/displayFormResolver";
import { resolveAttributeMetadata } from "../../utils/attributeResolver";
function dashboardFilterToFilterContextItem(filter) {
    if (isAttributeFilter(filter)) {
        return {
            attributeFilter: {
                negativeSelection: isNegativeAttributeFilter(filter),
                displayForm: filterObjRef(filter),
                attributeElements: filterAttributeElements(filter),
            },
        };
    }
    else if (isAbsoluteDateFilter(filter)) {
        return newAbsoluteDashboardDateFilter(filter.absoluteDateFilter.from, filter.absoluteDateFilter.to);
    }
    else if (isAllTimeDateFilter(filter)) {
        return newAllTimeDashboardDateFilter();
    }
    else if (isRelativeDateFilter(filter)) {
        return newRelativeDashboardDateFilter(filter.relativeDateFilter.granularity, filter.relativeDateFilter.from, filter.relativeDateFilter.to);
    }
    throw new NotSupported("Unsupported filter type! Please provide valid dashboard filter.");
}
export function changeFilterContextSelectionHandler(ctx, cmd) {
    var _a, filters, resetOthers, normalizedFilters, uniqueFilters, _b, _c, dateFilter, attributeFilters, _d, attributeFilterUpdateActions, dateFilterUpdateActions;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                _a = cmd.payload, filters = _a.filters, resetOthers = _a.resetOthers;
                normalizedFilters = filters.map(function (filter) {
                    if (isDashboardAttributeFilter(filter) || isDashboardDateFilter(filter)) {
                        return filter;
                    }
                    else {
                        return dashboardFilterToFilterContextItem(filter);
                    }
                });
                uniqueFilters = uniqBy(normalizedFilters, function (filter) {
                    var identification = isDashboardAttributeFilter(filter)
                        ? filter.attributeFilter.displayForm
                        : filter.dateFilter.dataSet;
                    return identification ? objRefToString(identification) : identification;
                });
                _b = __read(partition(uniqueFilters, isDashboardDateFilter), 2), _c = __read(_b[0], 1), dateFilter = _c[0], attributeFilters = _b[1];
                return [4 /*yield*/, all([
                        call(getAttributeFiltersUpdateActions, attributeFilters, resetOthers, ctx),
                        call(getDateFilterUpdateActions, dateFilter, resetOthers),
                    ])];
            case 1:
                _d = __read.apply(void 0, [_e.sent(), 2]), attributeFilterUpdateActions = _d[0], dateFilterUpdateActions = _d[1];
                return [4 /*yield*/, put(batchActions(__spread(attributeFilterUpdateActions, dateFilterUpdateActions)))];
            case 2:
                _e.sent();
                return [4 /*yield*/, call(dispatchFilterContextChanged, ctx, cmd)];
            case 3:
                _e.sent();
                return [2 /*return*/];
        }
    });
}
function getAttributeFiltersUpdateActions(attributeFilters, resetOthers, ctx) {
    var updateActions, handledLocalIds, resolvedDisplayForms, attributeFilters_1, attributeFilters_1_1, attributeFilter, filterRef, dashboardFilter, filterDF, resolvedAttribute, attribute, _a, _b, displayForm, e_1_1, e_2_1, currentAttributeFilters, unhandledFilters;
    var e_2, _c, e_1, _d;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                updateActions = [];
                handledLocalIds = new Set();
                return [4 /*yield*/, call(resolveDisplayFormMetadata, ctx, attributeFilters.map(function (af) { return af.attributeFilter.displayForm; }))];
            case 1:
                resolvedDisplayForms = _f.sent();
                _f.label = 2;
            case 2:
                _f.trys.push([2, 16, 17, 18]);
                attributeFilters_1 = __values(attributeFilters), attributeFilters_1_1 = attributeFilters_1.next();
                _f.label = 3;
            case 3:
                if (!!attributeFilters_1_1.done) return [3 /*break*/, 15];
                attributeFilter = attributeFilters_1_1.value;
                filterRef = attributeFilter.attributeFilter.displayForm;
                return [4 /*yield*/, select(selectFilterContextAttributeFilterByDisplayForm(filterRef))];
            case 4:
                dashboardFilter = _f.sent();
                if (!!dashboardFilter) return [3 /*break*/, 13];
                if (isUriRef(filterRef) && !ctx.backend.capabilities.supportsObjectUris) {
                    throw new NotSupported("Unsupported filter ObjRef! Please provide IdentifierRef instead of UriRef.");
                }
                filterDF = resolvedDisplayForms.resolved.get(filterRef);
                return [4 /*yield*/, call(resolveAttributeMetadata, ctx, compact([filterDF === null || filterDF === void 0 ? void 0 : filterDF.attribute]))];
            case 5:
                resolvedAttribute = _f.sent();
                attribute = (filterDF === null || filterDF === void 0 ? void 0 : filterDF.attribute) && resolvedAttribute.resolved.get(filterDF === null || filterDF === void 0 ? void 0 : filterDF.attribute);
                _f.label = 6;
            case 6:
                _f.trys.push([6, 11, 12, 13]);
                _a = (e_1 = void 0, __values((_e = attribute === null || attribute === void 0 ? void 0 : attribute.displayForms) !== null && _e !== void 0 ? _e : [])), _b = _a.next();
                _f.label = 7;
            case 7:
                if (!!_b.done) return [3 /*break*/, 10];
                displayForm = _b.value;
                return [4 /*yield*/, select(selectFilterContextAttributeFilterByDisplayForm(displayForm.ref))];
            case 8:
                dashboardFilter = _f.sent();
                if (dashboardFilter) {
                    return [3 /*break*/, 10];
                }
                _f.label = 9;
            case 9:
                _b = _a.next();
                return [3 /*break*/, 7];
            case 10: return [3 /*break*/, 13];
            case 11:
                e_1_1 = _f.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 13];
            case 12:
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 13:
                if (dashboardFilter) {
                    updateActions.push(filterContextActions.updateAttributeFilterSelection({
                        elements: attributeFilter.attributeFilter.attributeElements,
                        filterLocalId: dashboardFilter.attributeFilter.localIdentifier,
                        negativeSelection: attributeFilter.attributeFilter.negativeSelection,
                    }));
                    handledLocalIds.add(dashboardFilter.attributeFilter.localIdentifier);
                }
                _f.label = 14;
            case 14:
                attributeFilters_1_1 = attributeFilters_1.next();
                return [3 /*break*/, 3];
            case 15: return [3 /*break*/, 18];
            case 16:
                e_2_1 = _f.sent();
                e_2 = { error: e_2_1 };
                return [3 /*break*/, 18];
            case 17:
                try {
                    if (attributeFilters_1_1 && !attributeFilters_1_1.done && (_c = attributeFilters_1.return)) _c.call(attributeFilters_1);
                }
                finally { if (e_2) throw e_2.error; }
                return [7 /*endfinally*/];
            case 18:
                if (!resetOthers) return [3 /*break*/, 20];
                return [4 /*yield*/, select(selectFilterContextAttributeFilters)];
            case 19:
                currentAttributeFilters = _f.sent();
                unhandledFilters = currentAttributeFilters.filter(function (filter) { return !handledLocalIds.has(filter.attributeFilter.localIdentifier); });
                if (unhandledFilters.length > 0) {
                    updateActions.push(filterContextActions.clearAttributeFiltersSelection({
                        filterLocalIds: unhandledFilters.map(function (filter) { return filter.attributeFilter.localIdentifier; }),
                    }));
                }
                _f.label = 20;
            case 20: return [2 /*return*/, updateActions];
        }
    });
}
function getDateFilterUpdateActions(dateFilter, resetOthers) {
    var canApply, upsertPayload;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!dateFilter) return [3 /*break*/, 2];
                return [4 /*yield*/, call(canApplyDateFilter, dateFilter)];
            case 1:
                canApply = _a.sent();
                if (!canApply) {
                    return [2 /*return*/, []];
                }
                upsertPayload = isAllTimeDashboardDateFilter(dateFilter)
                    ? { type: "allTime" }
                    : {
                        type: dateFilter.dateFilter.type,
                        granularity: dateFilter.dateFilter.granularity,
                        from: dateFilter.dateFilter.from,
                        to: dateFilter.dateFilter.to,
                    };
                return [2 /*return*/, [filterContextActions.upsertDateFilter(upsertPayload)]];
            case 2:
                if (resetOthers) {
                    return [2 /*return*/, [filterContextActions.upsertDateFilter({ type: "allTime" })]];
                }
                _a.label = 3;
            case 3: return [2 /*return*/, []];
        }
    });
}
//# sourceMappingURL=changeFilterContextSelectionHandler.js.map
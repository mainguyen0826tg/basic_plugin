import { __assign, __spreadArrays } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { disableComputeRatio, newBucket, } from "@gooddata/sdk-model";
import { BucketNames, useResolveValuesWithPlaceholders, } from "@gooddata/sdk-ui";
import { ViewByAttributesLimit } from "../../interfaces";
import { truncate } from "../_commons/truncate";
import { CoreBulletChart } from "./CoreBulletChart";
import { stackedChartDimensions } from "../_commons/dimensions";
import { withChart } from "../_base/withChart";
import { sanitizeConfig } from "../_commons/sanitizeStacking";
//
// Internals
//
var bulletChartDefinition = {
    chartName: "BulletChart",
    bucketPropsKeys: ["primaryMeasure", "targetMeasure", "comparativeMeasure", "viewBy", "filters", "sortBy"],
    propTransformation: function (props) {
        /*
         * Modify input props - disable compute ratio on all measures
         */
        return __assign(__assign({}, props), { primaryMeasure: disableComputeRatio(props.primaryMeasure), targetMeasure: props.targetMeasure
                ? disableComputeRatio(props.targetMeasure)
                : undefined, comparativeMeasure: props.comparativeMeasure
                ? disableComputeRatio(props.comparativeMeasure)
                : undefined });
    },
    bucketsFactory: function (props) {
        var viewBy = truncate(props.viewBy, ViewByAttributesLimit);
        return [
            newBucket(BucketNames.MEASURES, props.primaryMeasure),
            newBucket(BucketNames.SECONDARY_MEASURES, props.targetMeasure),
            newBucket(BucketNames.TERTIARY_MEASURES, props.comparativeMeasure),
            newBucket.apply(void 0, __spreadArrays([BucketNames.VIEW], viewBy)),
        ];
    },
    executionFactory: function (props, buckets) {
        var _a;
        var backend = props.backend, workspace = props.workspace, execConfig = props.execConfig;
        return (_a = backend
            .withTelemetry("BulletChart", props)
            .workspace(workspace)
            .execution()
            .forBuckets(buckets, props.filters))
            .withSorting.apply(_a, props.sortBy).withDimensions(stackedChartDimensions)
            .withExecConfig(execConfig);
    },
    propOverridesFactory: function (props, _buckets) {
        return {
            config: sanitizeConfig([
                props.primaryMeasure,
                props.targetMeasure,
                props.comparativeMeasure,
            ], props.config),
        };
    },
};
var WrappedBulletChart = withChart(bulletChartDefinition)(CoreBulletChart);
/**
 * [BulletChart](http://sdk.gooddata.com/gooddata-ui/docs/bullet_chart_component.html)
 *
 * Bullet chart is a variation of a bar chart that displays performance of a measure (primary measure) and its progress
 * towards a goal (target measure). Optionally, the primary measure can also be compared to another measure (comparative measure).
 *
 * @public
 */
export var BulletChart = function (props) {
    var _a = useResolveValuesWithPlaceholders([
        props.primaryMeasure,
        props.targetMeasure,
        props.comparativeMeasure,
        props.viewBy,
        props.filters,
        props.sortBy,
    ], props.placeholdersResolutionContext), primaryMeasure = _a[0], targetMeasure = _a[1], comparativeMeasure = _a[2], viewBy = _a[3], filters = _a[4], sortBy = _a[5];
    return (React.createElement(WrappedBulletChart, __assign({}, props, {
        primaryMeasure: primaryMeasure,
        targetMeasure: targetMeasure,
        comparativeMeasure: comparativeMeasure,
        viewBy: viewBy,
        filters: filters,
        sortBy: sortBy,
    })));
};
//# sourceMappingURL=BulletChart.js.map
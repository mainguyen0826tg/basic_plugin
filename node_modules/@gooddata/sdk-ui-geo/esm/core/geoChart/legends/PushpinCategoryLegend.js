import { __assign } from "tslib";
// (C) 2020 GoodData Corporation
import React from "react";
import noop from "lodash/noop";
import { PopUpLegend, StaticLegend, LegendPosition, FluidLegend, } from "@gooddata/sdk-ui-vis-commons";
export var HEIGHT_OF_SIZE_LEGEND = 161;
export default function PushpinCategoryLegend(props) {
    var contentRect = props.contentRect, hasSizeLegend = props.hasSizeLegend, isFluidLegend = props.isFluidLegend, renderPopUp = props.renderPopUp, _a = props.isSizeLegendVisible, isSizeLegendVisible = _a === void 0 ? true : _a;
    if (renderPopUp) {
        return React.createElement(GeoPopUpLegend, __assign({}, props, { isSizeLegendVisible: isSizeLegendVisible }));
    }
    return (React.createElement("div", { className: "s-geo-category-legend" }, isFluidLegend
        ? renderFluidCategoryLegend(props, contentRect)
        : renderStaticCategoryLegend(props, contentRect, hasSizeLegend)));
}
function renderFluidCategoryLegend(props, contentRect) {
    var categoryItems = props.categoryItems, onItemClick = props.onItemClick;
    var legendProps = {
        series: categoryItems !== null && categoryItems !== void 0 ? categoryItems : [],
        onItemClick: onItemClick
    };
    var contentRectClient = contentRect.client;
    var usedWidth = contentRectClient && contentRectClient.width ? Math.floor(contentRectClient.width) : 0;
    return React.createElement(FluidLegend, __assign({}, legendProps, { containerWidth: usedWidth }));
}
function renderStaticCategoryLegend(props, contentRect, hasSizeLegend) {
    var _a = props.categoryItems, categoryItems = _a === void 0 ? [] : _a, _b = props.position, position = _b === void 0 ? "top" : _b, height = props.height, format = props.format, locale = props.locale, onItemClick = props.onItemClick, responsive = props.responsive;
    // For Geo Pushpin with position left/right
    // we set the height of series to number of actual displayed items
    // so that, size legend will be visible
    var shouldFillAvailableSpace = position !== "left" && position !== "right";
    var legendProps = {
        format: format,
        locale: locale,
        position: position,
        responsive: responsive,
        series: categoryItems,
        shouldFillAvailableSpace: shouldFillAvailableSpace,
        onItemClick: onItemClick
    };
    var contentRectClient = contentRect.client;
    var hasSizeAndLeftRightPosition = hasSizeLegend && (position === LegendPosition.LEFT || position === LegendPosition.RIGHT);
    var measuredHeight = contentRectClient && contentRectClient.height ? Math.floor(contentRectClient.height) : 0;
    var usedHeight = (height || measuredHeight) - (hasSizeAndLeftRightPosition ? HEIGHT_OF_SIZE_LEGEND : 0);
    return React.createElement(StaticLegend, __assign({}, legendProps, { containerHeight: usedHeight }));
}
function GeoPopUpLegend(props) {
    var containerId = props.containerId, _a = props.categoryItems, categoryItems = _a === void 0 ? [] : _a, _b = props.onItemClick, onItemClick = _b === void 0 ? noop : _b, name = props.name, maxRows = props.maxRows, customComponent = props.customComponent, customComponentName = props.customComponentName, hasSizeLegend = props.hasSizeLegend, isSizeLegendVisible = props.isSizeLegendVisible;
    return (React.createElement(PopUpLegend, { series: categoryItems, onLegendItemClick: onItemClick, maxRows: hasSizeLegend && isSizeLegendVisible && maxRows ? maxRows - 1 : maxRows, name: name, containerId: containerId, customComponent: customComponent, customComponentName: customComponentName }));
}
//# sourceMappingURL=PushpinCategoryLegend.js.map
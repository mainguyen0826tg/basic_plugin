import { __extends } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { PureComponent } from "react";
import cx from "classnames";
import { BubbleHoverTrigger } from "../Bubble/BubbleHoverTrigger";
import { Bubble } from "../Bubble/Bubble";
// ShortenText adds ellipsis (â€¦) in the middle of the string.
// SIDE_SCALE_RATIO is a constant which tells the percentage of
// of the string characters to be taken from both sides to produce
// final shortened string
var SIDE_SCALE_RATIO = 0.42;
function getElementWidth(element) {
    return Math.ceil(element.getBoundingClientRect().width);
}
export function getShortenedTitle(title, element) {
    var elementWidth = getElementWidth(element);
    var scrollWidth = element.scrollWidth;
    if (elementWidth >= scrollWidth) {
        return title;
    }
    var titleLength = title.length;
    var numChars = titleLength * (elementWidth / scrollWidth);
    var numCharsSideStrip = Math.floor(numChars * SIDE_SCALE_RATIO);
    var pre = title.substr(0, numCharsSideStrip);
    var post = title.substr(titleLength - numCharsSideStrip, titleLength);
    return pre + "\u2026" + post;
}
/**
 * @internal
 */
var ShortenedText = /** @class */ (function (_super) {
    __extends(ShortenedText, _super);
    function ShortenedText(props) {
        var _this = _super.call(this, props) || this;
        _this.textRef = React.createRef();
        _this.state = {
            title: props.children,
            customTitle: false,
        };
        return _this;
    }
    ShortenedText.prototype.componentDidMount = function () {
        this.checkTitle();
    };
    ShortenedText.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        if (this.props.children !== nextProps.children) {
            this.setState({
                title: nextProps.children,
                customTitle: false,
            });
        }
    };
    ShortenedText.prototype.componentDidUpdate = function () {
        if (this.state.customTitle) {
            return;
        }
        this.checkTitle();
    };
    ShortenedText.prototype.checkTitle = function () {
        var element = this.props.getElement(this);
        var title = this.props.children;
        var elementWidth = getElementWidth(element);
        if (elementWidth > 0 && elementWidth < element.scrollWidth) {
            this.setState({ title: getShortenedTitle(title, element), customTitle: true });
        }
    };
    ShortenedText.prototype.recomputeShortening = function () {
        // causes repaint & checkTitle to be called
        this.setState({
            title: this.props.children,
            customTitle: false,
        });
    };
    ShortenedText.prototype.renderTextWithBubble = function () {
        return (React.createElement(BubbleHoverTrigger, { showDelay: 0, hideDelay: 0, eventsOnBubble: this.props.tooltipVisibleOnMouseOver },
            React.createElement(Bubble, { alignPoints: this.props.tooltipAlignPoints }, this.state.customTitle ? this.props.children : ""),
            this.renderText()));
    };
    ShortenedText.prototype.renderText = function () {
        var TagName = this.props.tagName;
        return (React.createElement(TagName, { ref: this.textRef, className: cx(this.props.className, "shortened", {
                "is-shortened": this.state.customTitle,
                "is-whole": !this.state.customTitle,
            }) }, this.state.title));
    };
    ShortenedText.prototype.render = function () {
        if (this.state.customTitle && this.props.displayTooltip) {
            return this.renderTextWithBubble();
        }
        return this.renderText();
    };
    ShortenedText.defaultProps = {
        className: "",
        tagName: "span",
        tooltipAlignPoints: [{ align: "cr cl" }],
        tooltipVisibleOnMouseOver: false,
        getElement: function (context) {
            // Necessary for testing width in JSDOM env.
            return context.textRef.current;
        },
        displayTooltip: true,
    };
    return ShortenedText;
}(PureComponent));
export { ShortenedText };
//# sourceMappingURL=ShortenedText.js.map
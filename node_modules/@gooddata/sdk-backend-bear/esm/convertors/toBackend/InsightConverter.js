import { __assign } from "tslib";
import { insightBuckets, insightVisualizationUrl, isMeasure, attributeLocalId, attributeAlias, attributeDisplayFormRef, insightTitle, insightFilters, insightProperties, insightId, insightUri, insightIsLocked, insightCreated, insightUpdated, insightTags, } from "@gooddata/sdk-model";
import isEmpty from "lodash/isEmpty";
import omitBy from "lodash/omitBy";
import { convertUrisToReferences } from "../fromBackend/ReferenceConverter";
import { serializeProperties } from "../fromBackend/PropertiesConverter";
import { convertExtendedFilter } from "./FilterConverter";
import { convertMeasure } from "./MeasureConverter";
var convertAttribute = function (attribute) {
    var alias = attributeAlias(attribute);
    return {
        visualizationAttribute: __assign({ localIdentifier: attributeLocalId(attribute), displayForm: attributeDisplayFormRef(attribute) }, (alias && { alias: alias })),
    };
};
var convertBucketItem = function (bucketItem) {
    return isMeasure(bucketItem) ? convertMeasure(bucketItem) : convertAttribute(bucketItem);
};
var convertBucket = function (bucket) {
    var totals = bucket.totals;
    return __assign({ items: bucket.items.map(convertBucketItem), localIdentifier: bucket.localIdentifier }, (!isEmpty(totals) && { totals: totals }));
};
/**
 * @internal
 */
export var convertInsightContent = function (insight) {
    var _a = convertUrisToReferences({
        properties: insightProperties(insight),
        references: {},
    }), properties = _a.properties, references = _a.references;
    var nonEmptyProperties = omitBy(properties, function (value, key) { return key !== "controls" && isEmpty(value); });
    var filters = insightFilters(insight).map(convertExtendedFilter);
    return __assign(__assign(__assign({ buckets: insightBuckets(insight).map(convertBucket), visualizationClass: { uri: insightVisualizationUrl(insight) } }, (!isEmpty(nonEmptyProperties) && {
        properties: serializeProperties(nonEmptyProperties),
    })), (!isEmpty(filters) && { filters: filters })), (!isEmpty(references) && { references: references }));
};
/**
 * @internal
 */
export var convertInsightDefinition = function (insight) {
    return {
        content: convertInsightContent(insight),
        meta: {
            title: insightTitle(insight),
            category: "visualizationObject",
        },
    };
};
/**
 * @internal
 */
export var convertInsight = function (insight) {
    var convertedDefinition = convertInsightDefinition(insight);
    var locked = insightIsLocked(insight);
    return {
        content: convertedDefinition.content,
        meta: __assign(__assign(__assign(__assign({}, convertedDefinition.meta), { identifier: insightId(insight), uri: insightUri(insight), created: insightCreated(insight), updated: insightUpdated(insight) }), (locked && { locked: locked })), { tags: insightTags(insight).join(" ") }),
    };
};
//# sourceMappingURL=InsightConverter.js.map
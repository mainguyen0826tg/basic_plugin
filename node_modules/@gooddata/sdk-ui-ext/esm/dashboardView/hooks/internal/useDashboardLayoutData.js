import { __awaiter, __generator } from "tslib";
// (C) 2020-2021 GoodData Corporation
import { layoutWidgets, isInsightWidget, } from "@gooddata/sdk-backend-spi";
import { useBackend, useCancelablePromise, useWorkspace, } from "@gooddata/sdk-ui";
import { areObjRefsEqual, insightVisualizationUrl } from "@gooddata/sdk-model";
import { insightDataLoaderFactory } from "../../../dataLoaders";
import { backendInvariant, workspaceInvariant } from "../utils";
/**
 * Hook allowing to download additional dashboard layout data (visualization classes and insights)
 * @param config - configuration of the hook
 * @beta
 * @deprecated superseded by Dashboard component; please see `@gooddata/sdk-ui-dashboard` and GoodData.UI documentation for v8.7
 */
export var useDashboardLayoutData = function (_a) {
    var dashboardLayout = _a.dashboardLayout, backend = _a.backend, workspace = _a.workspace, onCancel = _a.onCancel, onError = _a.onError, onLoading = _a.onLoading, onPending = _a.onPending, onSuccess = _a.onSuccess;
    var effectiveBackend = useBackend(backend);
    var effectiveWorkspace = useWorkspace(workspace);
    backendInvariant(effectiveBackend, "useDashboardLayoutData");
    workspaceInvariant(effectiveWorkspace, "useDashboardLayoutData");
    var promise = dashboardLayout
        ? function () { return __awaiter(void 0, void 0, void 0, function () {
            var insightRefsToLoad, loader, insights, getInsightByRef, getVisType;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        insightRefsToLoad = layoutWidgets(dashboardLayout)
                            .filter(isInsightWidget)
                            .map(function (w) { return w.insight; });
                        loader = insightDataLoaderFactory.forWorkspace(effectiveWorkspace);
                        return [4 /*yield*/, Promise.all(insightRefsToLoad.map(function (ref) { return loader.getInsight(effectiveBackend, ref); }))];
                    case 1:
                        insights = _a.sent();
                        getInsightByRef = function (insightRef) {
                            return insights.find(function (i) { return areObjRefsEqual(i.insight.ref, insightRef); });
                        };
                        getVisType = function (widget) {
                            if (widget.type === "kpi") {
                                return undefined;
                            }
                            var insight = getInsightByRef(widget.insight);
                            return insightVisualizationUrl(insight).split(":")[1];
                        };
                        return [2 /*return*/, {
                                getVisType: getVisType,
                                getInsightByRef: getInsightByRef,
                            }];
                }
            });
        }); }
        : null;
    return useCancelablePromise({ promise: promise, onCancel: onCancel, onError: onError, onLoading: onLoading, onPending: onPending, onSuccess: onSuccess }, [
        effectiveBackend,
        effectiveWorkspace,
        dashboardLayout,
    ]);
};
//# sourceMappingURL=useDashboardLayoutData.js.map
import { __read } from "tslib";
// (C) 2021 GoodData Corporation
import React, { useCallback, useState } from "react";
import cx from "classnames";
import { Button, SingleSelectListItem, ItemsWrapper, Overlay, BubbleHoverTrigger, Bubble, } from "@gooddata/sdk-ui-kit";
var overlayAlignPoints = [{ align: "br tr" }];
var bubbleAlignPoints = [{ align: "cl tr" }];
/**
 * @alpha
 */
export var DefaultMenuButton = function (props) {
    var menuItems = props.menuItems;
    var _a = __read(useState(false), 2), isOpen = _a[0], setIsOpen = _a[1];
    var onMenuButtonClick = useCallback(function () {
        setIsOpen(function (prevIsOpen) { return !prevIsOpen; });
    }, []);
    if (!menuItems.length) {
        // eslint-disable-next-line no-console
        console.warn("DefaultMenuButton rendered without menu items. Make sure you are passing some items there.");
        return null;
    }
    var renderMenuItems = function () {
        return (React.createElement(Overlay, { key: "topBarMenuButton", alignTo: ".s-header-options-button", alignPoints: overlayAlignPoints, className: "gd-header-menu-overlay", closeOnMouseDrag: true, closeOnOutsideClick: true, onClose: onMenuButtonClick },
            React.createElement(ItemsWrapper, { smallItemsSpacing: true }, menuItems.map(function (menuItem) {
                var _a;
                if (menuItem.type === "separator") {
                    return React.createElement(SingleSelectListItem, { key: menuItem.itemId, type: menuItem.type });
                }
                if (menuItem.type === "header") {
                    return (React.createElement(SingleSelectListItem, { key: menuItem.itemId, type: menuItem.type, title: menuItem.itemName }));
                }
                var selectorClassName = "gd-menu-item-" + menuItem.itemId;
                var body = (React.createElement(SingleSelectListItem, { className: cx("gd-menu-item", "s-" + menuItem.itemId, (_a = {},
                        _a[selectorClassName] = menuItem.tooltip,
                        _a["is-disabled"] = menuItem.disabled,
                        _a)), key: menuItem.itemId, title: menuItem.itemName, onClick: menuItem.disabled
                        ? undefined
                        : function () {
                            var _a;
                            (_a = menuItem.onClick) === null || _a === void 0 ? void 0 : _a.call(menuItem);
                            setIsOpen(false);
                        } }));
                if (!menuItem.tooltip) {
                    return body;
                }
                return (React.createElement(BubbleHoverTrigger, { key: menuItem.itemId },
                    body,
                    React.createElement(Bubble, { alignTo: "." + selectorClassName, alignPoints: bubbleAlignPoints },
                        React.createElement("span", null, menuItem.tooltip))));
            }))));
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(Button, { onClick: onMenuButtonClick, value: "\u22EF", className: "gd-button-primary dash-header-options-button s-header-options-button gd-button" }),
        isOpen && renderMenuItems()));
};
//# sourceMappingURL=DefaultMenuButton.js.map
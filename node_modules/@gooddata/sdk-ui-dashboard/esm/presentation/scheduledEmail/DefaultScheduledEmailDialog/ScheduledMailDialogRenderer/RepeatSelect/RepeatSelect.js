import { __extends } from "tslib";
// (C) 2019-2020 GoodData Corporation
import * as React from "react";
import { injectIntl } from "react-intl";
import { REPEAT_EXECUTE_ON, REPEAT_FREQUENCIES, REPEAT_TYPES } from "../../constants";
import { RepeatExecuteOnSelect } from "./RepeatExecuteOnSelect";
import { RepeatFrequencySelect } from "./RepeatFrequencySelect";
import { RepeatPeriodSelect } from "./RepeatPeriodSelect";
import { RepeatTypeSelect } from "./RepeatTypeSelect";
var RepeatSelectRender = /** @class */ (function (_super) {
    __extends(RepeatSelectRender, _super);
    function RepeatSelectRender(props) {
        var _this = _super.call(this, props) || this;
        _this.onChange = function () { return _this.props.onChange(_this.state); };
        _this.onRepeatTypeChange = function (repeatType) {
            if (_this.state.repeatType !== repeatType) {
                _this.setState({
                    repeatExecuteOn: REPEAT_EXECUTE_ON.DAY_OF_MONTH,
                    repeatFrequency: REPEAT_FREQUENCIES.DAY,
                    repeatPeriod: 1,
                    repeatType: repeatType,
                }, _this.onChange);
            }
        };
        _this.onRepeatPeriodChange = function (repeatPeriod) {
            if (_this.state.repeatPeriod !== repeatPeriod) {
                _this.setState({ repeatPeriod: repeatPeriod }, _this.onChange);
            }
        };
        _this.onRepeatFrequencyChange = function (repeatFrequency) {
            if (_this.state.repeatFrequency !== repeatFrequency) {
                _this.setState({ repeatFrequency: repeatFrequency }, _this.onChange);
            }
        };
        _this.renderRepeatExecuteOn = function () {
            var startDate = _this.props.startDate;
            var _a = _this.state, repeatExecuteOn = _a.repeatExecuteOn, repeatFrequency = _a.repeatFrequency;
            if (repeatFrequency !== REPEAT_FREQUENCIES.MONTH) {
                return null;
            }
            return (React.createElement(RepeatExecuteOnSelect, { repeatExecuteOn: repeatExecuteOn, startDate: startDate, onChange: _this.onRepeatExecuteOnChange }));
        };
        _this.onRepeatExecuteOnChange = function (repeatExecuteOn) {
            if (_this.state.repeatExecuteOn !== repeatExecuteOn) {
                _this.setState({ repeatExecuteOn: repeatExecuteOn }, _this.onChange);
            }
        };
        var repeatExecuteOn = props.repeatExecuteOn, repeatFrequency = props.repeatFrequency, repeatPeriod = props.repeatPeriod, repeatType = props.repeatType;
        _this.state = {
            repeatExecuteOn: repeatExecuteOn,
            repeatFrequency: repeatFrequency,
            repeatPeriod: repeatPeriod,
            repeatType: repeatType,
        };
        return _this;
    }
    RepeatSelectRender.prototype.render = function () {
        var _a = this.props, label = _a.label, startDate = _a.startDate;
        var repeatType = this.state.repeatType;
        return (React.createElement("div", { className: "gd-input-component gd-schedule-email-dialog-repeat" },
            React.createElement("label", { className: "gd-label" }, label),
            React.createElement("div", null,
                React.createElement(RepeatTypeSelect, { repeatType: repeatType, startDate: startDate, onChange: this.onRepeatTypeChange }),
                this.renderCustomRepeat())));
    };
    RepeatSelectRender.prototype.renderCustomRepeat = function () {
        var intl = this.props.intl;
        var _a = this.state, repeatFrequency = _a.repeatFrequency, repeatPeriod = _a.repeatPeriod, repeatType = _a.repeatType;
        if (repeatType !== REPEAT_TYPES.CUSTOM) {
            return null;
        }
        return (React.createElement("div", { className: "gd-schedule-email-dialog-repeat-custom" },
            React.createElement("span", { className: "gd-schedule-email-dialog-repeat-every" }, intl.formatMessage({
                id: "dialogs.schedule.email.repeats.every",
            })),
            React.createElement(RepeatPeriodSelect, { repeatPeriod: repeatPeriod, onChange: this.onRepeatPeriodChange }),
            React.createElement(RepeatFrequencySelect, { repeatFrequency: repeatFrequency, repeatPeriod: repeatPeriod, onChange: this.onRepeatFrequencyChange }),
            React.createElement("div", { className: "break-the-row" }),
            this.renderRepeatExecuteOn()));
    };
    return RepeatSelectRender;
}(React.PureComponent));
export var RepeatSelect = injectIntl(RepeatSelectRender);
//# sourceMappingURL=RepeatSelect.js.map
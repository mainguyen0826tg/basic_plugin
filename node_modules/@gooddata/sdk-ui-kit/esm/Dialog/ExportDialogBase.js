import { __extends } from "tslib";
// (C) 2020 GoodData Corporation
import React from "react";
import { DialogBase } from "./DialogBase";
import noop from "lodash/noop";
import { Checkbox } from "../Form";
import { ConfirmDialogBase } from "./ConfirmDialogBase";
/**
 * @internal
 */
var ExportDialogBase = /** @class */ (function (_super) {
    __extends(ExportDialogBase, _super);
    function ExportDialogBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            includeFilterContext: _this.props.includeFilterContext,
            mergeHeaders: _this.props.mergeHeaders,
        };
        _this.onFilterContextChange = function (value) {
            _this.setState({ includeFilterContext: value });
        };
        _this.onMergeHeadersChange = function (value) {
            _this.setState({ mergeHeaders: value });
        };
        _this.onSubmit = function () {
            var filterContextVisible = _this.props.filterContextVisible;
            var _a = _this.state, includeFilterContext = _a.includeFilterContext, mergeHeaders = _a.mergeHeaders;
            _this.props.onSubmit({
                includeFilterContext: filterContextVisible && includeFilterContext,
                mergeHeaders: mergeHeaders,
            });
        };
        return _this;
    }
    ExportDialogBase.prototype.render = function () {
        var _a = this.props, displayCloseButton = _a.displayCloseButton, isPositive = _a.isPositive, isSubmitDisabled = _a.isSubmitDisabled, headline = _a.headline, cancelButtonText = _a.cancelButtonText, submitButtonText = _a.submitButtonText, onCancel = _a.onCancel, filterContextText = _a.filterContextText, filterContextTitle = _a.filterContextTitle, filterContextVisible = _a.filterContextVisible, mergeHeadersDisabled = _a.mergeHeadersDisabled, mergeHeadersText = _a.mergeHeadersText, mergeHeadersTitle = _a.mergeHeadersTitle;
        var _b = this.state, includeFilterContext = _b.includeFilterContext, mergeHeaders = _b.mergeHeaders;
        var filterContextCheckbox;
        if (filterContextVisible) {
            filterContextCheckbox = (React.createElement(Checkbox, { name: "gs.dialog.export.checkbox.includeFilterContext", text: filterContextText, title: filterContextTitle, value: includeFilterContext, onChange: this.onFilterContextChange }));
        }
        return (React.createElement(ConfirmDialogBase, { className: "gd-export-dialog", displayCloseButton: displayCloseButton, isPositive: isPositive, isSubmitDisabled: isSubmitDisabled, headline: headline, cancelButtonText: cancelButtonText, submitButtonText: submitButtonText, onCancel: onCancel, onSubmit: this.onSubmit },
            React.createElement(Checkbox, { disabled: mergeHeadersDisabled, name: "gs.dialog.export.checkbox.mergeHeaders", text: mergeHeadersText, title: mergeHeadersTitle, value: mergeHeaders, onChange: this.onMergeHeadersChange }),
            filterContextCheckbox));
    };
    ExportDialogBase.defaultProps = {
        displayCloseButton: true,
        isPositive: true,
        isSubmitDisabled: false,
        headline: "Export to XLSX",
        cancelButtonText: "Cancel",
        submitButtonText: "Export",
        filterContextText: "Include applied filters",
        filterContextTitle: "INSIGHT CONTEXT",
        filterContextVisible: true,
        includeFilterContext: true,
        mergeHeaders: true,
        mergeHeadersDisabled: false,
        mergeHeadersText: "Keep attribute cells merged",
        mergeHeadersTitle: "CELLS",
        onCancel: noop,
        onSubmit: noop,
    };
    return ExportDialogBase;
}(DialogBase));
export { ExportDialogBase };
//# sourceMappingURL=ExportDialogBase.js.map
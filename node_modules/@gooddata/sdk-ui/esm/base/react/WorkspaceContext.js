import { __assign } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { wrapDisplayName } from "./wrapDisplayName";
import invariant from "ts-invariant";
var WorkspaceContext = React.createContext(undefined);
WorkspaceContext.displayName = "WorkspaceContext";
/**
 * WorkspaceProvider can be used to inject analytical workspace instance to all ui-sdk components in your app.
 *
 * @public
 */
export var WorkspaceProvider = function (_a) {
    var children = _a.children, workspace = _a.workspace;
    return React.createElement(WorkspaceContext.Provider, { value: workspace }, children);
};
/**
 * Hook to get workspace instance provided to {@link WorkspaceProvider}.
 * You can optionally set a workspace override that will be returned if defined.
 * This makes the usage more ergonomic (see the following example).
 *
 * Note: For a better TypeScript experience without the hassle of undefined values, you can use the {@link useWorkspaceStrict} hook.
 *
 * @example
 * ```
 * // instead of
 * const fromContext = useWorkspace();
 * const effectiveWorkspace = fromArguments ?? fromContext.
 * // you can write
 * const workspace = useWorkspace(fromArguments);
 *```
 *
 * @param workspace - workspace to use instead of context value. If undefined, the context value is used.
 * @public
 */
export var useWorkspace = function (workspace) {
    var workspaceFromContext = React.useContext(WorkspaceContext);
    return workspace !== null && workspace !== void 0 ? workspace : workspaceFromContext;
};
/**
 * Hook to get workspace instance provided to {@link WorkspaceProvider}.
 * You can optionally set a workspace override that will be returned if defined.
 * This makes the usage more ergonomic (see the following example).
 *
 * Note: Note: If you do not provide a workspace identifier to {@link WorkspaceProvider} or as a parameter for this hook,
 * an invariant error is raised.
 *
 * @example
 * ```
 * // instead of
 * const fromContext = useWorkspaceStrict();
 * const effectiveWorkspace = fromArguments ?? fromContext.
 * // you can write
 * const workspace = useWorkspaceStrict(fromArguments);
 * ```
 *
 * @param workspace - workspace to use instead of context value. If undefined, the context value is used.
 * @param context - optionally provide context to improve error message in raised invariant (e.g. parent hook name).
 * @public
 */
export var useWorkspaceStrict = function (workspace, context) {
    if (context === void 0) { context = "useWorkspaceStrict"; }
    var workspaceFromContext = React.useContext(WorkspaceContext);
    var effectiveWorkspace = workspace !== null && workspace !== void 0 ? workspace : workspaceFromContext;
    invariant(effectiveWorkspace, context + ": workspace must be defined. Either pass it as a parameter or make sure there is a WorkspaceProvider up the component tree.");
    return effectiveWorkspace;
};
/**
 * Wraps component into a WorkspaceContext consumer - injecting an instance of workspace from context into the
 * workspace prop.
 *
 * @internal
 */
export function withWorkspace(Component) {
    var ComponentWithInjectedWorkspace = function (props) {
        return (React.createElement(WorkspaceContext.Consumer, null, function (workspace) { var _a; return React.createElement(Component, __assign({}, props, { workspace: (_a = props.workspace) !== null && _a !== void 0 ? _a : workspace })); }));
    };
    return wrapDisplayName("withWorkspace", Component)(ComponentWithInjectedWorkspace);
}
//# sourceMappingURL=WorkspaceContext.js.map
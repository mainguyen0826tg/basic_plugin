import { IDimension, IExecutionDefinition, ITotal, TotalType } from "@gooddata/sdk-model";
import { GrandTotal } from "@gooddata/api-client-tiger";
/**
 * Extracts total definitions from execution definition dimensions and converts them into total specifications for
 * tiger AFM. Totals in tiger are defined more explicitly and therefore also more generally. Specifically a total is
 * defined by `includedDimensions`, i.e. the actual dimension on which it will be computed. Also there's a possibility
 * to compute totals only for some attribute values from an attribute in a dimension. While this is again working
 * for any attribute (e.g. compute totals only for US column of Country attribute) it's probably mostly useful only in
 * case of the measureGroup pseudo-attribute.
 *
 * TODO: subtotals
 */
export declare function convertTotals(def: IExecutionDefinition): Array<GrandTotal>;
/**
 * Traverse given dimensions and their total definitions, group those by total type and call totalProcessor on each
 * of these groups, together with current dimension index (dimIdx) and total type index in that dimension (typeIdx).
 *
 * This function captures the contract between execution response and execution result. Both of these response
 * structures are synchronized using local identifiers induced from dimIdx typeIdx. In the future the function should
 * be replaced by explicit concept of total local identifiers both in ITotal and ITotalDescriptor. Currently, given
 * the rather limit functionality of general totals API, it's needed/useful only in Tiger.
 */
export declare function withTotals<T>(dimensions: IDimension[], totalProcessor: (dimIdx: number, typeIdx: number, totalsOfType: ITotal[]) => T): T[];
export declare function totalLocalIdentifier(type: TotalType, dimIdx: number): string;
//# sourceMappingURL=TotalsConverter.d.ts.map
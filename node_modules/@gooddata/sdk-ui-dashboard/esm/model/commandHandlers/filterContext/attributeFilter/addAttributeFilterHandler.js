import { __generator } from "tslib";
// (C) 2021 GoodData Corporation
import { call, put, select } from "redux-saga/effects";
import invariant from "ts-invariant";
import { objRefToString } from "@gooddata/sdk-model";
import { invalidArgumentsProvided } from "../../../events/general";
import { attributeFilterAdded } from "../../../events/filters";
import { filterContextActions } from "../../../store/filterContext";
import { selectFilterContextAttributeFilterByDisplayForm, selectFilterContextAttributeFilters, } from "../../../store/filterContext/filterContextSelectors";
import { dispatchFilterContextChanged } from "../common";
import { canFilterBeAdded } from "./validation/uniqueFiltersValidation";
import { dispatchDashboardEvent } from "../../../store/_infra/eventDispatcher";
import { resolveDisplayFormMetadata } from "../../../utils/displayFormResolver";
import isEmpty from "lodash/isEmpty";
import { batchActions } from "redux-batched-actions";
export function addAttributeFilterHandler(ctx, cmd) {
    var _a, displayForm, index, initialIsNegativeSelection, initialSelection, parentFilters, allFilters, canBeAdded, resolvedDisplayForm, displayFormMetadata, addedFilter;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = cmd.payload, displayForm = _a.displayForm, index = _a.index, initialIsNegativeSelection = _a.initialIsNegativeSelection, initialSelection = _a.initialSelection, parentFilters = _a.parentFilters;
                return [4 /*yield*/, select(selectFilterContextAttributeFilters)];
            case 1:
                allFilters = _b.sent();
                return [4 /*yield*/, call(canFilterBeAdded, ctx, displayForm, allFilters)];
            case 2:
                canBeAdded = _b.sent();
                if (!canBeAdded) {
                    throw invalidArgumentsProvided(ctx, cmd, "Filter for the displayForm " + objRefToString(displayForm) + " already exists in the filter context.");
                }
                return [4 /*yield*/, call(resolveDisplayFormMetadata, ctx, [displayForm])];
            case 3:
                resolvedDisplayForm = _b.sent();
                if (!isEmpty(resolvedDisplayForm.missing)) {
                    throw invalidArgumentsProvided(ctx, cmd, "Attempting to add filter for a non-existing display form " + objRefToString(displayForm) + ".");
                }
                displayFormMetadata = resolvedDisplayForm.resolved.get(displayForm);
                invariant(displayFormMetadata);
                return [4 /*yield*/, put(batchActions([
                        filterContextActions.addAttributeFilter({
                            displayForm: displayFormMetadata.ref,
                            index: index,
                            initialIsNegativeSelection: initialIsNegativeSelection,
                            initialSelection: initialSelection,
                            parentFilters: parentFilters,
                        }),
                        filterContextActions.addAttributeFilterDisplayForm(displayFormMetadata),
                    ]))];
            case 4:
                _b.sent();
                return [4 /*yield*/, select(selectFilterContextAttributeFilterByDisplayForm(displayFormMetadata.ref))];
            case 5:
                addedFilter = _b.sent();
                invariant(addedFilter, "Inconsistent state in attributeFilterAddCommandHandler");
                return [4 /*yield*/, dispatchDashboardEvent(attributeFilterAdded(ctx, addedFilter, cmd.payload.index, cmd.correlationId))];
            case 6:
                _b.sent();
                return [4 /*yield*/, call(dispatchFilterContextChanged, ctx, cmd)];
            case 7:
                _b.sent();
                return [2 /*return*/];
        }
    });
}
//# sourceMappingURL=addAttributeFilterHandler.js.map
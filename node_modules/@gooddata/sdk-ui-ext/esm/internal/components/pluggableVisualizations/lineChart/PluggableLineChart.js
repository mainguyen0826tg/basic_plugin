import { __assign, __extends } from "tslib";
// (C) 2019 GoodData Corporation
import { BucketNames, VisualizationTypes } from "@gooddata/sdk-ui";
import React from "react";
import { render } from "react-dom";
import { AXIS, AXIS_NAME } from "../../../constants/axis";
import { ATTRIBUTE, BUCKETS, DATE } from "../../../constants/bucket";
import { LINE_CHART_SUPPORTED_PROPERTIES } from "../../../constants/supportedProperties";
import { DEFAULT_LINE_UICONFIG, LINE_UICONFIG_WITH_MULTIPLE_DATES } from "../../../constants/uiConfig";
import { configureOverTimeComparison, configurePercent } from "../../../utils/bucketConfig";
import { filterOutDerivedMeasures, getAllAttributeItemsWithPreference, getAttributeItemsWithoutStacks, getDateItems, getFilteredMeasuresForStackedCharts, getFistDateItemWithMultipleDates, getMeasureItems, getStackItems, isDateBucketItem, sanitizeFilters, } from "../../../utils/bucketHelper";
import { getReferencePointWithSupportedProperties, setSecondaryMeasures, } from "../../../utils/propertiesHelper";
import { removeSort } from "../../../utils/sort";
import { setLineChartUiConfig } from "../../../utils/uiConfigHelpers/lineChartUiConfigHelper";
import LineChartBasedConfigurationPanel from "../../configurationPanels/LineChartBasedConfigurationPanel";
import { PluggableBaseChart } from "../baseChart/PluggableBaseChart";
import cloneDeep from "lodash/cloneDeep";
import set from "lodash/set";
import { addIntersectionFiltersToInsight, modifyBucketsAttributesForDrillDown, reverseAndTrimIntersection, } from "../drillDownUtil";
var PluggableLineChart = /** @class */ (function (_super) {
    __extends(PluggableLineChart, _super);
    function PluggableLineChart(props) {
        var _this = _super.call(this, props) || this;
        // set default to DUAL to get the full supported props list
        // and will be updated in getExtendedReferencePoint
        _this.axis = AXIS.DUAL;
        _this.type = VisualizationTypes.LINE;
        _this.supportedPropertiesList = _this.getSupportedPropertiesList();
        _this.initializeProperties(props.visualizationProperties);
        return _this;
    }
    PluggableLineChart.prototype.getSupportedPropertiesList = function () {
        return LINE_CHART_SUPPORTED_PROPERTIES[this.axis];
    };
    PluggableLineChart.prototype.configureBucketsWithMultipleDates = function (newReferencePoint) {
        var _a;
        var buckets = (_a = newReferencePoint === null || newReferencePoint === void 0 ? void 0 : newReferencePoint.buckets) !== null && _a !== void 0 ? _a : [];
        var measures = getMeasureItems(buckets);
        var masterMeasures = filterOutDerivedMeasures(measures);
        var attributes = [];
        var stacks = getStackItems(buckets, [ATTRIBUTE, DATE]);
        var allAttributes = getAllAttributeItemsWithPreference(buckets, [
            BucketNames.LOCATION,
            BucketNames.TREND,
            BucketNames.VIEW,
            BucketNames.ATTRIBUTES,
            BucketNames.SEGMENT,
            BucketNames.STACK,
        ]);
        var firstDateItemInViews = getFistDateItemWithMultipleDates(buckets);
        if (firstDateItemInViews) {
            attributes = [firstDateItemInViews];
            var nextAttribute = allAttributes.find(function (attr) { return attr !== firstDateItemInViews; });
            if (masterMeasures.length <= 1 && nextAttribute && !stacks.length) {
                stacks = [nextAttribute];
            }
        }
        else {
            if (masterMeasures.length <= 1 && allAttributes.length > 1 && !stacks.length) {
                stacks = allAttributes.slice(1, 2);
            }
            attributes = getAttributeItemsWithoutStacks(buckets, [ATTRIBUTE, DATE]).slice(0, 1);
        }
        set(newReferencePoint, BUCKETS, [
            {
                localIdentifier: BucketNames.MEASURES,
                items: getFilteredMeasuresForStackedCharts(buckets),
            },
            {
                localIdentifier: BucketNames.TREND,
                items: attributes,
            },
            {
                localIdentifier: BucketNames.SEGMENT,
                items: stacks,
            },
        ]);
    };
    PluggableLineChart.prototype.configureBuckets = function (newReferencePoint) {
        var _a;
        if (this.isMultipleDatesEnabled()) {
            this.configureBucketsWithMultipleDates(newReferencePoint);
            return;
        }
        var buckets = (_a = newReferencePoint === null || newReferencePoint === void 0 ? void 0 : newReferencePoint.buckets) !== null && _a !== void 0 ? _a : [];
        var measures = getMeasureItems(buckets);
        var masterMeasures = filterOutDerivedMeasures(measures);
        var attributes = [];
        var stacks = getStackItems(buckets);
        var dateItems = getDateItems(buckets);
        var allAttributes = getAllAttributeItemsWithPreference(buckets, [
            BucketNames.LOCATION,
            BucketNames.TREND,
            BucketNames.VIEW,
            BucketNames.SEGMENT,
            BucketNames.STACK,
        ]);
        if (dateItems.length) {
            attributes = dateItems.slice(0, 1);
            stacks =
                masterMeasures.length <= 1 && allAttributes.length > 1
                    ? allAttributes
                        .filter(function (attribute) { return !isDateBucketItem(attribute); })
                        .slice(0, 1)
                    : stacks;
        }
        else {
            if (masterMeasures.length <= 1 &&
                allAttributes.length > 1 &&
                !isDateBucketItem(allAttributes === null || allAttributes === void 0 ? void 0 : allAttributes[1])) {
                stacks = allAttributes.slice(1, 2);
            }
            attributes = getAttributeItemsWithoutStacks(buckets).slice(0, 1);
        }
        set(newReferencePoint, BUCKETS, [
            {
                localIdentifier: BucketNames.MEASURES,
                items: getFilteredMeasuresForStackedCharts(buckets),
            },
            {
                localIdentifier: BucketNames.TREND,
                items: attributes,
            },
            {
                localIdentifier: BucketNames.SEGMENT,
                items: stacks,
            },
        ]);
    };
    PluggableLineChart.prototype.getUiConfig = function () {
        var config = this.isMultipleDatesEnabled()
            ? LINE_UICONFIG_WITH_MULTIPLE_DATES
            : DEFAULT_LINE_UICONFIG;
        return cloneDeep(config);
    };
    PluggableLineChart.prototype.getExtendedReferencePoint = function (referencePoint) {
        var _a, _b;
        var clonedReferencePoint = cloneDeep(referencePoint);
        var newReferencePoint = __assign(__assign({}, clonedReferencePoint), { uiConfig: this.getUiConfig() });
        this.configureBuckets(newReferencePoint);
        newReferencePoint = setSecondaryMeasures(newReferencePoint, AXIS_NAME.SECONDARY_Y);
        this.axis = (_b = (_a = newReferencePoint === null || newReferencePoint === void 0 ? void 0 : newReferencePoint.uiConfig) === null || _a === void 0 ? void 0 : _a.axis) !== null && _b !== void 0 ? _b : AXIS.PRIMARY;
        this.supportedPropertiesList = this.getSupportedPropertiesList();
        newReferencePoint = setLineChartUiConfig(newReferencePoint, this.intl, this.type);
        newReferencePoint = configurePercent(newReferencePoint, false);
        newReferencePoint = configureOverTimeComparison(newReferencePoint, !!this.featureFlags["enableWeekFilters"]);
        newReferencePoint = getReferencePointWithSupportedProperties(newReferencePoint, this.supportedPropertiesList);
        newReferencePoint = removeSort(newReferencePoint);
        return Promise.resolve(sanitizeFilters(newReferencePoint));
    };
    PluggableLineChart.prototype.addFilters = function (source, drillConfig, event) {
        var cutIntersection = reverseAndTrimIntersection(drillConfig, event.drillContext.intersection);
        return addIntersectionFiltersToInsight(source, cutIntersection);
    };
    PluggableLineChart.prototype.getInsightWithDrillDownApplied = function (source, drillDownContext) {
        var withFilters = this.addFilters(source, drillDownContext.drillDefinition, drillDownContext.event);
        return modifyBucketsAttributesForDrillDown(withFilters, drillDownContext.drillDefinition);
    };
    PluggableLineChart.prototype.renderConfigurationPanel = function (insight) {
        if (document.querySelector(this.configPanelElement)) {
            render(React.createElement(LineChartBasedConfigurationPanel, { locale: this.locale, references: this.references, properties: this.visualizationProperties, propertiesMeta: this.propertiesMeta, insight: insight, colors: this.colors, pushData: this.handlePushData, type: this.type, isError: this.getIsError(), isLoading: this.isLoading, featureFlags: this.featureFlags, axis: this.axis }), document.querySelector(this.configPanelElement));
        }
    };
    return PluggableLineChart;
}(PluggableBaseChart));
export { PluggableLineChart };
//# sourceMappingURL=PluggableLineChart.js.map
import invariant from "ts-invariant";
import { REPEAT_TYPES, REPEAT_FREQUENCIES, FREQUENCY_TYPE, REPEAT_EXECUTE_ON } from "../constants";
import { getDayName, getWeek, getDate } from "./datetime";
var AM = "AM";
var PM = "PM";
function getRepeatFrequencyType(repeatFrequency) {
    // eslint-disable-next-line no-prototype-builtins
    var result = FREQUENCY_TYPE.find(function (type) { return repeatFrequency.hasOwnProperty(type); });
    invariant(result, "Unknown scheduled email frequency");
    return result;
}
function getScheduledEmailRepeatString(intl, options) {
    var _a = options.repeatData, repeatType = _a.repeatType, repeatPeriod = _a.repeatPeriod, repeatFrequency = _a.repeatFrequency, repeatExecuteOn = _a.repeatExecuteOn, startDate = options.startDate;
    var isCustomRepeatType = repeatType === REPEAT_TYPES.CUSTOM;
    var day = getDayName(startDate);
    var week = getWeek(startDate);
    if (!isCustomRepeatType) {
        return intl.formatMessage({ id: "dialogs.schedule.email.repeats.types." + repeatType }, { day: day, week: week });
    }
    var every = intl.formatMessage({
        id: "dialogs.schedule.email.repeats.every",
    });
    var repeatFrequencyType = getRepeatFrequencyType(repeatFrequency);
    var frequencies = intl.formatMessage({
        id: "dialogs.schedule.email.repeats.frequencies." + repeatFrequencyType,
    }, {
        n: repeatPeriod,
    });
    var appliedRepeatExecuteOn = repeatFrequencyType === REPEAT_FREQUENCIES.WEEK ? REPEAT_EXECUTE_ON.DAY_OF_WEEK : repeatExecuteOn;
    var executeOn = repeatFrequencyType !== REPEAT_FREQUENCIES.DAY
        ? intl.formatMessage({
            id: "dialogs.schedule.email.repeats.execute.on." + appliedRepeatExecuteOn,
        }, {
            date: getDate(startDate),
            day: getDayName(startDate),
            week: getWeek(startDate),
        })
        : "";
    // every 2 months on the first Friday
    return (every + " " + repeatPeriod + " " + frequencies + " " + executeOn).trim();
}
function getFormattedTime(time) {
    var hour = time.hour, minute = time.minute;
    var timeSuffix = getTimePeriod(hour);
    var formattedMinute = getFormattedMinute(minute);
    var formattedHour = getFormattedHour(hour);
    // 12:00 AM
    return formattedHour + ":" + formattedMinute + " " + timeSuffix;
}
function getTimePeriod(hour) {
    return hour >= 12 ? PM : AM;
}
function getFormattedMinute(minute) {
    return minute < 10 ? "0" + minute : "" + minute;
}
function getFormattedHour(hour) {
    var formattedHour = hour > 12 ? hour - 12 : hour;
    if (hour === 0) {
        formattedHour = 12;
    }
    return formattedHour;
}
export function getScheduledEmailSummaryString(intl, options) {
    var repeatDays = getScheduledEmailRepeatString(intl, options);
    var atLocalization = intl.formatMessage({ id: "gs.date.at" });
    var time = getFormattedTime(options.repeatData.time);
    // every 2 months on the first Friday at 12:00 AM
    return repeatDays + " " + atLocalization + " " + time;
}
//# sourceMappingURL=scheduledMailSummary.js.map
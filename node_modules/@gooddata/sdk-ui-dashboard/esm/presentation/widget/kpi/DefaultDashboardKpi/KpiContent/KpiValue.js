import { __extends } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { PureComponent } from "react";
import { injectIntl } from "react-intl";
import { TransitionGroup, CSSTransition } from "react-transition-group";
import cx from "classnames";
import { ResponsiveText, LoadingDots } from "@gooddata/sdk-ui-kit";
import { calculateHeadlineHeightFontSize } from "@gooddata/sdk-ui-vis-commons";
import { HYPHEN, formatMetric, isValueUnhandledNull } from "./utils/format";
var NO_DATA_PLACEHOLDER = HYPHEN;
var SMALLEST_HEIGHT = 54;
var KpiValue = /** @class */ (function (_super) {
    __extends(KpiValue, _super);
    function KpiValue() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KpiValue.prototype.getKpiValueClassNames = function () {
        return cx("kpi-value", {
            "is-smallest-height": this.props.enableCompactSize &&
                this.props.clientHeight &&
                this.props.clientHeight < SMALLEST_HEIGHT,
            "is-error-value": !this.props.isLoading && !!this.props.error,
            "is-empty-value": !this.props.isLoading && this.isValueUnhandledNull(),
        });
    };
    KpiValue.prototype.getKpiCustomHeightStyles = function () {
        if (this.props.enableCompactSize) {
            var height = calculateHeadlineHeightFontSize(this.props.hasComparison, this.props.clientHeight).height;
            var heightStyles = {
                height: height + "px",
                lineHeight: height + "px",
            };
            return heightStyles;
        }
        return undefined;
    };
    KpiValue.prototype.render = function () {
        if (this.props.enableCompactSize && !this.props.clientHeight) {
            return null;
        }
        return (React.createElement(TransitionGroup, { style: this.getKpiCustomHeightStyles(), className: this.getKpiValueClassNames() },
            React.createElement(CSSTransition, { classNames: "kpi-animation", timeout: 300, title: this.getTitle() }, this.renderValue())));
    };
    KpiValue.prototype.renderValue = function () {
        var _a = this.props, isLoading = _a.isLoading, error = _a.error, disableKpiDrillUnderline = _a.disableKpiDrillUnderline, enableCompactSize = _a.enableCompactSize, clientHeight = _a.clientHeight;
        if (isLoading) {
            return React.createElement(LoadingDots, { className: "kpi-value-loading gd-loading-dots-centered" });
        }
        var value = error ? this.formatMessage("error") : this.renderFormattedValue();
        var valueClassNames = cx("kpi-value-value", "s-kpi-value", {
            "kpi-link-style-underline": !disableKpiDrillUnderline,
        });
        if (enableCompactSize) {
            // As clientHeight first render returns undefined, need to wait to have correct value
            // so we can adjust fontSize and make the calculations accordingly.
            if (!clientHeight) {
                return React.createElement(LoadingDots, { className: "kpi-value-loading gd-loading-dots-centered" });
            }
            var fontSize = calculateHeadlineHeightFontSize(this.props.hasComparison, clientHeight).fontSize;
            return (React.createElement("div", { style: { fontSize: fontSize + "px" } },
                React.createElement(ResponsiveText, null,
                    React.createElement("span", { className: valueClassNames }, value))));
        }
        return (React.createElement(ResponsiveText, null,
            React.createElement("span", { className: valueClassNames }, value)));
    };
    KpiValue.prototype.renderFormattedValue = function () {
        var _a;
        if (this.isValueUnhandledNull()) {
            return NO_DATA_PLACEHOLDER;
        }
        return formatMetric((_a = this.props.value) !== null && _a !== void 0 ? _a : null, this.props.format, this.props.separators);
    };
    KpiValue.prototype.isValueUnhandledNull = function () {
        var _a;
        return isValueUnhandledNull(this.props.value, (_a = this.props.format) !== null && _a !== void 0 ? _a : "");
    };
    KpiValue.prototype.getTitle = function () {
        if (this.props.isLoading) {
            return "";
        }
        if (this.props.error && this.props.errorHelp) {
            return this.props.errorHelp;
        }
        if (this.isValueUnhandledNull()) {
            return this.formatMessage("kpi.noData");
        }
        return "";
    };
    KpiValue.prototype.formatMessage = function (id) {
        return this.props.intl.formatMessage({ id: id });
    };
    KpiValue.defaultProps = {
        error: null,
        value: "",
        isLoading: false,
        disableKpiDrillUnderline: false,
    };
    return KpiValue;
}(PureComponent));
export default injectIntl(KpiValue);
//# sourceMappingURL=KpiValue.js.map
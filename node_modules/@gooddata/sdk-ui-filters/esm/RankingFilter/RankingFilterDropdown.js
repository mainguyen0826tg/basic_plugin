import { __assign } from "tslib";
// (C) 2020 GoodData Corporation
import React, { useState } from "react";
import { IntlWrapper } from "@gooddata/sdk-ui";
import { Overlay } from "@gooddata/sdk-ui-kit";
import { RankingFilterDropdownBody } from "./RankingFilterDropdownBody";
import { injectIntl } from "react-intl";
import noop from "lodash/noop";
var alignPoints = ["bl tl", "tl bl", "br tr", "tr br"];
var DROPDOWN_ALIGNMENTS = alignPoints.map(function (align) { return ({ align: align, offset: { x: 1, y: 0 } }); });
export var prepareRankingFilterState = function (filter) {
    var _a = filter.rankingFilter, measure = _a.measure, attributes = _a.attributes, operator = _a.operator, value = _a.value;
    var firstAttribute = attributes && attributes[0];
    var attributesProp = firstAttribute ? { attributes: [firstAttribute] } : {};
    return {
        rankingFilter: __assign({ operator: operator,
            value: value,
            measure: measure }, attributesProp),
    };
};
var RankingFilterDropdownComponent = function (_a) {
    var measureItems = _a.measureItems, attributeItems = _a.attributeItems, filter = _a.filter, onApply = _a.onApply, onCancel = _a.onCancel, anchorEl = _a.anchorEl, onDropDownItemMouseOver = _a.onDropDownItemMouseOver, onDropDownItemMouseOut = _a.onDropDownItemMouseOut, customGranularitySelection = _a.customGranularitySelection;
    var _b = useState(prepareRankingFilterState(filter)), rankingFilter = _b[0], setRankingFilter = _b[1];
    var handleApply = function (rankingFilter) {
        setRankingFilter(rankingFilter);
        onApply(rankingFilter);
    };
    return (React.createElement(Overlay, { closeOnOutsideClick: true, closeOnParentScroll: true, closeOnMouseDrag: true, alignTo: anchorEl, alignPoints: DROPDOWN_ALIGNMENTS, onClose: onCancel, ignoreClicksOnByClass: [".gd-rf-inner-overlay-dropdown"] },
        React.createElement(RankingFilterDropdownBody, { measureItems: measureItems, attributeItems: attributeItems, filter: rankingFilter, onApply: handleApply, onCancel: onCancel, onDropDownItemMouseOver: onDropDownItemMouseOver, onDropDownItemMouseOut: onDropDownItemMouseOut, customGranularitySelection: customGranularitySelection })));
};
RankingFilterDropdownComponent.defaultProps = {
    onCancel: noop,
};
var RankingFilterDropdownWithIntl = injectIntl(RankingFilterDropdownComponent);
/**
 * @beta
 */
export var RankingFilterDropdown = function (props) { return (React.createElement(IntlWrapper, { locale: props.locale },
    React.createElement(RankingFilterDropdownWithIntl, __assign({}, props)))); };
//# sourceMappingURL=RankingFilterDropdown.js.map
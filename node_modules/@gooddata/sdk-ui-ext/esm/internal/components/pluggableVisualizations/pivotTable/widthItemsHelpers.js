import { __assign, __spreadArrays } from "tslib";
// (C) 2020-2021 GoodData Corporation
import includes from "lodash/includes";
import { isAbsoluteColumnWidth, isAllMeasureColumnWidthItem, isAttributeColumnWidthItem, isMeasureColumnWidthItem, isWeakMeasureColumnWidthItem, } from "@gooddata/sdk-ui-pivot";
import { areObjRefsEqual, attributeLocalId, bucketAttributes, insightBucket, insightMeasures, isMeasureLocator, measureLocalId, } from "@gooddata/sdk-model";
import { isAttributeFilter } from "../../../utils/bucketHelper";
import { BucketNames } from "@gooddata/sdk-ui";
var isMeasureWidthItemMatchedByFilter = function (widthItem, filter) {
    return filter.selectedElements.some(function (selectedElement) {
        return widthItem.measureColumnWidthItem.locators.some(function (locator) {
            return !isMeasureLocator(locator) && locator.attributeLocatorItem.element === selectedElement.uri;
        });
    });
};
var matchesMeasureColumnWidthItemFilters = function (widthItem, filters, columnAttributes) {
    return filters
        .filter(isAttributeFilter)
        .filter(function (filter) {
        return columnAttributes.some(function (columnBucketItem) {
            return areObjRefsEqual(columnBucketItem.dfRef, filter.displayFormRef);
        });
    })
        .every(function (filter) {
        var shouldBeMatched = !filter.isInverted;
        return shouldBeMatched === isMeasureWidthItemMatchedByFilter(widthItem, filter);
    });
};
var matchesWidthItemFilters = function (widthItem, filters, columnAttributes) {
    if (isMeasureColumnWidthItem(widthItem)) {
        return matchesMeasureColumnWidthItemFilters(widthItem, filters, columnAttributes);
    }
    return true;
};
var containsMeasureLocator = function (widthItem) {
    return widthItem.measureColumnWidthItem.locators.some(function (locator) { return isMeasureLocator(locator); });
};
var widthItemLocatorsHaveProperLength = function (widthItem, measuresCount, columnAttributesCount) {
    var widthItemLocatorsLength = widthItem.measureColumnWidthItem.locators.length;
    var hasWidthItemLocators = widthItemLocatorsLength > 0;
    var hasMeasureLocators = measuresCount > 0 && containsMeasureLocator(widthItem);
    var hasNotMeasureLocators = measuresCount === 0 && !containsMeasureLocator(widthItem);
    var widthItemLocatorsMatchesColumnAttributesLength = widthItemLocatorsLength === columnAttributesCount + 1;
    var widthItemLocatorsHasLengthAsColumnAttributesLength = widthItemLocatorsLength === columnAttributesCount;
    var locatorsMatchesLength = hasMeasureLocators && widthItemLocatorsMatchesColumnAttributesLength;
    var locatorsAreEmpty = hasNotMeasureLocators && widthItemLocatorsHasLengthAsColumnAttributesLength;
    return hasWidthItemLocators && (locatorsMatchesLength || locatorsAreEmpty);
};
function removeInvalidLocators(columnWidth, measureLocalIdentifiers, columnAttributeLocalIdentifiers) {
    return columnWidth.measureColumnWidthItem.locators.filter(function (locator) {
        // filter out invalid measure locators
        if (isMeasureLocator(locator)) {
            return includes(measureLocalIdentifiers, locator.measureLocatorItem.measureIdentifier);
        }
        // filter out invalid column attribute locators
        return includes(columnAttributeLocalIdentifiers, locator.attributeLocatorItem.attributeIdentifier);
    });
}
function transformToWeakMeasureColumnWidthItem(columnWidth) {
    if (isAbsoluteColumnWidth(columnWidth.measureColumnWidthItem.width) &&
        columnWidth.measureColumnWidthItem.locators.length === 1 &&
        isMeasureLocator(columnWidth.measureColumnWidthItem.locators[0])) {
        return {
            measureColumnWidthItem: {
                width: columnWidth.measureColumnWidthItem.width,
                locator: columnWidth.measureColumnWidthItem.locators.filter(isMeasureLocator)[0],
            },
        };
    }
}
// removes attribute widthItems with invalid identifiers
// removes measure widthItems with invalid identifiers and invalid number of locators
function adaptWidthItemsToPivotTable(originalColumnWidths, measureLocalIdentifiers, rowAttributeLocalIdentifiers, columnAttributeLocalIdentifiers, filters, firstColumnAttributeAdded, columnAttributes) {
    if (!originalColumnWidths) {
        return originalColumnWidths;
    }
    return originalColumnWidths.reduce(function (columnWidths, columnWidth) {
        if (isMeasureColumnWidthItem(columnWidth)) {
            var filteredMeasureColumnWidthItem = {
                measureColumnWidthItem: __assign(__assign({}, columnWidth.measureColumnWidthItem), { locators: removeInvalidLocators(columnWidth, measureLocalIdentifiers, columnAttributeLocalIdentifiers) }),
            };
            if (firstColumnAttributeAdded) {
                var transformedWeakMeasureWidthItem = transformToWeakMeasureColumnWidthItem(columnWidth);
                if (transformedWeakMeasureWidthItem) {
                    return __spreadArrays(columnWidths, [transformedWeakMeasureWidthItem]);
                }
            }
            if (matchesWidthItemFilters(filteredMeasureColumnWidthItem, filters, columnAttributes) &&
                widthItemLocatorsHaveProperLength(filteredMeasureColumnWidthItem, measureLocalIdentifiers.length, columnAttributeLocalIdentifiers.length)) {
                return __spreadArrays(columnWidths, [filteredMeasureColumnWidthItem]);
            }
        }
        else if (isAttributeColumnWidthItem(columnWidth)) {
            if (includes(rowAttributeLocalIdentifiers, columnWidth.attributeColumnWidthItem.attributeIdentifier)) {
                return __spreadArrays(columnWidths, [columnWidth]);
            }
        }
        else if ((isAllMeasureColumnWidthItem(columnWidth) || isWeakMeasureColumnWidthItem(columnWidth)) &&
            measureLocalIdentifiers.length > 0) {
            return __spreadArrays(columnWidths, [columnWidth]);
        }
        return columnWidths;
    }, []);
}
export function adaptReferencePointWidthItemsToPivotTable(originalColumnWidths, measures, rowAttributes, columnAttributes, previousRowAttributes, previousColumnAttributes, filters) {
    var measureLocalIdentifiers = measures.map(function (measure) { return measure.localIdentifier; });
    var rowAttributeLocalIdentifiers = rowAttributes.map(function (rowAttribute) { return rowAttribute.localIdentifier; });
    var columnAttributeLocalIdentifiers = columnAttributes.map(function (columnAttribute) { return columnAttribute.localIdentifier; });
    var previousRowAttributeLocalIdentifiers = previousRowAttributes.map(function (rowAttribute) { return rowAttribute.localIdentifier; });
    var previousColumnAttributeLocalIdentifiers = previousColumnAttributes.map(function (columnAttribute) { return columnAttribute.localIdentifier; });
    var filteredRowAttributeLocalIdentifiers = rowAttributeLocalIdentifiers.filter(function (rowAttributeLocalIdentifier) {
        return !previousColumnAttributeLocalIdentifiers.includes(rowAttributeLocalIdentifier);
    });
    var filteredColumnAttributeLocalIdentifiers = columnAttributeLocalIdentifiers.filter(function (columnAttributeLocalIdentifier) {
        return !previousRowAttributeLocalIdentifiers.includes(columnAttributeLocalIdentifier);
    });
    var firstColumnAttributeAdded = previousColumnAttributes.length === 0 && columnAttributes.length === 1;
    return adaptWidthItemsToPivotTable(originalColumnWidths, measureLocalIdentifiers, filteredRowAttributeLocalIdentifiers, filteredColumnAttributeLocalIdentifiers, filters, firstColumnAttributeAdded, columnAttributes);
}
export function adaptMdObjectWidthItemsToPivotTable(originalColumnWidths, insight) {
    var rowBucket = insightBucket(insight, BucketNames.ATTRIBUTE);
    var columnBucket = insightBucket(insight, BucketNames.COLUMNS);
    var measureLocalIdentifiers = insightMeasures(insight).map(measureLocalId);
    var rowAttributeLocalIdentifiers = rowBucket ? bucketAttributes(rowBucket).map(attributeLocalId) : [];
    var columnAttributeLocalIdentifiers = columnBucket
        ? bucketAttributes(columnBucket).map(attributeLocalId)
        : [];
    return adaptWidthItemsToPivotTable(originalColumnWidths, measureLocalIdentifiers, rowAttributeLocalIdentifiers, columnAttributeLocalIdentifiers, [], false, []);
}
//# sourceMappingURL=widthItemsHelpers.js.map
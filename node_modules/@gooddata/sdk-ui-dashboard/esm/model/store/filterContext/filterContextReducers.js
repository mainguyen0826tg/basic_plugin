// (C) 2021 GoodData Corporation
import { __assign, __read, __spread } from "tslib";
import { v4 as uuidv4 } from "uuid";
import { isDashboardAttributeFilter, isDashboardDateFilter, } from "@gooddata/sdk-backend-spi";
import invariant from "ts-invariant";
import { areObjRefsEqual, attributeElementsIsEmpty, isAttributeElementsByRef, } from "@gooddata/sdk-model";
var generateFilterLocalIdentifier = function () { return uuidv4().replace(/-/g, ""); };
var setFilterContext = function (state, action) {
    var _a;
    var _b = action.payload, filterContextDefinition = _b.filterContextDefinition, filterContextIdentity = _b.filterContextIdentity, attributeFilterDisplayForms = _b.attributeFilterDisplayForms;
    state.filterContextDefinition = __assign(__assign({}, filterContextDefinition), { 
        // make sure attribute filters always have localId
        filters: (_a = filterContextDefinition.filters) === null || _a === void 0 ? void 0 : _a.map(function (filter) {
            var _a;
            return isDashboardAttributeFilter(filter)
                ? {
                    attributeFilter: __assign(__assign({}, filter.attributeFilter), { localIdentifier: (_a = filter.attributeFilter.localIdentifier) !== null && _a !== void 0 ? _a : generateFilterLocalIdentifier() }),
                }
                : filter;
        }) });
    state.filterContextIdentity = filterContextIdentity;
    state.attributeFilterDisplayForms = attributeFilterDisplayForms;
};
var updateFilterContextIdentity = function (state, action) {
    state.filterContextIdentity = action.payload.filterContextIdentity;
};
//
//
//
var removeAttributeFilterDisplayForms = function (state, action) {
    invariant(state.attributeFilterDisplayForms, "attempting to work with uninitialized state");
    state.attributeFilterDisplayForms = state.attributeFilterDisplayForms.filter(function (df) {
        return !areObjRefsEqual(df, action.payload);
    });
};
var addAttributeFilterDisplayForm = function (state, action) {
    invariant(state.attributeFilterDisplayForms, "attempting to work with uninitialized state");
    state.attributeFilterDisplayForms.push(action.payload);
};
var upsertDateFilter = function (state, action) {
    invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
    var existingFilterIndex = state.filterContextDefinition.filters.findIndex(function (item) {
        return isDashboardDateFilter(item);
    });
    /**
     * TODO: This will cause problems once we support dateDataset-specific date filters (then, we might want
     * to keep even the all time filters to carry the information about the selected dateDataset).
     */
    if (action.payload.type === "allTime") {
        if (existingFilterIndex >= 0) {
            // if allTime remove the date filter altogether
            state.filterContextDefinition.filters.splice(existingFilterIndex, 1);
        }
    }
    else if (existingFilterIndex >= 0) {
        var _a = action.payload, type = _a.type, granularity = _a.granularity, from = _a.from, to = _a.to;
        var dateFilter = state.filterContextDefinition.filters[existingFilterIndex];
        if (isDashboardDateFilter(dateFilter)) {
            dateFilter.dateFilter.type = type;
            dateFilter.dateFilter.granularity = granularity;
            dateFilter.dateFilter.from = from;
            dateFilter.dateFilter.to = to;
        }
    }
    else {
        var _b = action.payload, type = _b.type, granularity = _b.granularity, from = _b.from, to = _b.to;
        state.filterContextDefinition.filters.unshift({
            dateFilter: {
                granularity: granularity,
                type: type,
                from: from,
                to: to,
            },
        });
    }
};
var updateAttributeFilterSelection = function (state, action) {
    invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
    var _a = action.payload, elements = _a.elements, filterLocalId = _a.filterLocalId, negativeSelection = _a.negativeSelection;
    var existingFilterIndex = state.filterContextDefinition.filters.findIndex(function (item) { return isDashboardAttributeFilter(item) && item.attributeFilter.localIdentifier === filterLocalId; });
    invariant(existingFilterIndex >= 0, "Attempt to update non-existing filter");
    state.filterContextDefinition.filters[existingFilterIndex] = {
        attributeFilter: __assign(__assign({}, state.filterContextDefinition.filters[existingFilterIndex]
            .attributeFilter), { attributeElements: elements, negativeSelection: negativeSelection }),
    };
};
var addAttributeFilter = function (state, action) {
    invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
    var _a = action.payload, displayForm = _a.displayForm, index = _a.index, initialIsNegativeSelection = _a.initialIsNegativeSelection, initialSelection = _a.initialSelection, parentFilters = _a.parentFilters;
    var hasSelection = initialSelection && !attributeElementsIsEmpty(initialSelection);
    var isNegative = initialIsNegativeSelection || !hasSelection;
    var filter = {
        attributeFilter: {
            attributeElements: initialSelection !== null && initialSelection !== void 0 ? initialSelection : { uris: [] },
            displayForm: displayForm,
            negativeSelection: isNegative,
            localIdentifier: generateFilterLocalIdentifier(),
            filterElementsBy: parentFilters ? __spread(parentFilters) : undefined,
        },
    };
    if (index === -1) {
        state.filterContextDefinition.filters.push(filter);
    }
    else {
        state.filterContextDefinition.filters.splice(index, 0, filter);
    }
};
var removeAttributeFilter = function (state, action) {
    invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
    var filterLocalId = action.payload.filterLocalId;
    state.filterContextDefinition.filters = state.filterContextDefinition.filters.filter(function (item) { return isDashboardDateFilter(item) || item.attributeFilter.localIdentifier !== filterLocalId; });
};
var moveAttributeFilter = function (state, action) {
    invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
    var _a = action.payload, filterLocalId = _a.filterLocalId, index = _a.index;
    var currentFilterIndex = state.filterContextDefinition.filters.findIndex(function (item) { return isDashboardAttributeFilter(item) && item.attributeFilter.localIdentifier === filterLocalId; });
    invariant(currentFilterIndex >= 0, "Attempt to move non-existing filter");
    var filter = state.filterContextDefinition.filters[currentFilterIndex];
    state.filterContextDefinition.filters.splice(currentFilterIndex, 1);
    if (index === -1) {
        state.filterContextDefinition.filters.push(filter);
    }
    else {
        state.filterContextDefinition.filters.splice(index, 0, filter);
    }
};
var setAttributeFilterParents = function (state, action) {
    invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
    var _a = action.payload, filterLocalId = _a.filterLocalId, parentFilters = _a.parentFilters;
    var currentFilterIndex = state.filterContextDefinition.filters.findIndex(function (item) { return isDashboardAttributeFilter(item) && item.attributeFilter.localIdentifier === filterLocalId; });
    invariant(currentFilterIndex >= 0, "Attempt to set parent of a non-existing filter");
    state.filterContextDefinition.filters[currentFilterIndex].attributeFilter.filterElementsBy = __spread(parentFilters);
};
var clearAttributeFiltersSelection = function (state, action) {
    var filterLocalIds = action.payload.filterLocalIds;
    filterLocalIds.forEach(function (filterLocalId) {
        invariant(state.filterContextDefinition, "Attempt to edit uninitialized filter context");
        var currentFilterIndex = state.filterContextDefinition.filters.findIndex(function (item) {
            return isDashboardAttributeFilter(item) && item.attributeFilter.localIdentifier === filterLocalId;
        });
        invariant(currentFilterIndex >= 0, "Attempt to clear selection of a non-existing filter");
        var currentFilter = state.filterContextDefinition.filters[currentFilterIndex];
        currentFilter.attributeFilter.negativeSelection = true;
        currentFilter.attributeFilter.attributeElements = isAttributeElementsByRef(currentFilter.attributeFilter.attributeElements)
            ? { uris: [] }
            : { values: [] };
    });
};
//
//
//
export var filterContextReducers = {
    setFilterContext: setFilterContext,
    updateFilterContextIdentity: updateFilterContextIdentity,
    removeAttributeFilterDisplayForms: removeAttributeFilterDisplayForms,
    addAttributeFilterDisplayForm: addAttributeFilterDisplayForm,
    addAttributeFilter: addAttributeFilter,
    removeAttributeFilter: removeAttributeFilter,
    moveAttributeFilter: moveAttributeFilter,
    updateAttributeFilterSelection: updateAttributeFilterSelection,
    setAttributeFilterParents: setAttributeFilterParents,
    clearAttributeFiltersSelection: clearAttributeFiltersSelection,
    upsertDateFilter: upsertDateFilter,
};
//# sourceMappingURL=filterContextReducers.js.map
import { __assign, __read, __spread } from "tslib";
// (C) 2020-2021 GoodData Corporation
import { useCallback } from "react";
import { v4 as uuid } from "uuid";
import { useDashboardEventsContext } from "./DashboardEventsContext";
import { useDashboardDispatch } from "./DashboardStoreProvider";
/**
 * Hook that takes command creator and event handlers and returns function
 * that will result into dispatching this command, registering the event handlers,
 * and unregistering them once event type with the same type and correlation ID is triggered.
 *
 * If no correlationId is provided, it's auto-generated.

 * @param commandCreator - command factory
 * @param eventHandlers - record with eventTypes as keys and relevant callbacks as values
 * @param onBeforeRun - optionally provide callback that will be called before dispatching the command
 * @returns callback that dispatches the command, registers relevant event handlers and unregisters them
 *          when an event that matches the correlation ID and one of the specified event types occurs
 * @internal
 */
export var useDashboardCommand = function (commandCreator, eventHandlers, onBeforeRun) {
    var dispatch = useDashboardDispatch();
    var _a = useDashboardEventsContext(), registerHandler = _a.registerHandler, unregisterHandler = _a.unregisterHandler;
    var run = useCallback(function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var command = commandCreator.apply(void 0, __spread(args));
        var correlationId = (_a = command.correlationId) !== null && _a !== void 0 ? _a : uuid();
        if (!command.correlationId) {
            command = __assign(__assign({}, command), { correlationId: correlationId });
        }
        var dashboardEventHandlers = eventHandlers
            ? Object.keys(eventHandlers).map(function (eventType) {
                var dashboardEventHandler = {
                    eval: function (eT) { return eT.type === eventType; },
                    handler: function (event) {
                        if (event.correlationId === correlationId) {
                            unregisterHandlers();
                            eventHandlers[eventType](event);
                        }
                    },
                };
                return dashboardEventHandler;
            })
            : [];
        dashboardEventHandlers.forEach(function (handler) {
            registerHandler(handler);
        });
        function unregisterHandlers() {
            dashboardEventHandlers.forEach(function (handler) {
                unregisterHandler(handler);
            });
        }
        onBeforeRun === null || onBeforeRun === void 0 ? void 0 : onBeforeRun(command);
        dispatch(command);
    }, []);
    return run;
};
//# sourceMappingURL=useDashboardCommand.js.map
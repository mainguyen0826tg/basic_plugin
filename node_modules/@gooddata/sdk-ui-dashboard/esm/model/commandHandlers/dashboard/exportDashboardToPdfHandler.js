import { __generator } from "tslib";
import { call, put, select } from "redux-saga/effects";
import { dashboardExportToPdfRequested, dashboardExportToPdfResolved, } from "../../events/dashboard";
import { selectDashboardRef } from "../../store/meta/metaSelectors";
import { invalidArgumentsProvided } from "../../events/general";
import { selectFilterContextFilters } from "../../store/filterContext/filterContextSelectors";
import { ensureAllTimeFilterForExport } from "../../../_staging/exportUtils/filterUtils";
function exportDashboardToPdf(ctx, dashboardRef, filters) {
    var backend = ctx.backend, workspace = ctx.workspace;
    return backend.workspace(workspace).dashboards().exportDashboardToPdf(dashboardRef, filters);
}
export function exportDashboardToPdfHandler(ctx, cmd) {
    var dashboardRef, filterContextFilters, effectiveFilters, resultUri;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, put(dashboardExportToPdfRequested(ctx, cmd.correlationId))];
            case 1:
                _a.sent();
                return [4 /*yield*/, select(selectDashboardRef)];
            case 2:
                dashboardRef = _a.sent();
                if (!dashboardRef) {
                    throw invalidArgumentsProvided(ctx, cmd, "Dashboard to export to PDF must have an ObjRef.");
                }
                return [4 /*yield*/, select(selectFilterContextFilters)];
            case 3:
                filterContextFilters = _a.sent();
                effectiveFilters = ensureAllTimeFilterForExport(filterContextFilters);
                return [4 /*yield*/, call(exportDashboardToPdf, ctx, dashboardRef, effectiveFilters)];
            case 4:
                resultUri = _a.sent();
                return [2 /*return*/, dashboardExportToPdfResolved(ctx, resultUri, cmd.correlationId)];
        }
    });
}
//# sourceMappingURL=exportDashboardToPdfHandler.js.map
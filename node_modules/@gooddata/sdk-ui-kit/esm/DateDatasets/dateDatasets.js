import { __read, __spread } from "tslib";
// (C) 2007-2021 GoodData Corporation
import groupBy from "lodash/groupBy";
import takeWhile from "lodash/takeWhile";
import first from "lodash/first";
/**
 * @internal
 */
export var isDateDatasetHeader = function (obj) {
    return obj && obj.type === "header";
};
function hasSameRelevance(dateDatasets) {
    var relevanceCount = Object.keys(groupBy(dateDatasets, "relevance")).length;
    return relevanceCount === 1;
}
var relevanceComparator = function (a, b) { return b.relevance - a.relevance; }; // descending sort
var titleComparator = function (a, b) {
    return a.title.localeCompare(b.title);
};
function sortByTitle(dateDatasets) {
    return dateDatasets.slice().sort(titleComparator);
}
function sortByRelevanceAndTitle(dateDatasets) {
    return dateDatasets.slice().sort(function (a, b) {
        if (a.relevance === b.relevance) {
            return titleComparator(a, b);
        }
        return relevanceComparator(a, b);
    });
}
var MAX_RECOMMENDED_ITEMS = 3;
/**
 * @internal
 */
export var recommendedHeader = {
    title: "gs.date.date-dataset.recommended",
    type: "header",
};
/**
 * @internal
 */
export var otherHeader = {
    title: "gs.date.date-dataset.other",
    type: "header",
};
/**
 * @internal
 */
export var relatedHeader = {
    title: "gs.date.date-dataset.related",
    type: "header",
};
/**
 * @internal
 */
export var unrelatedHeader = {
    title: "gs.date.date-dataset.unrelated",
    type: "header",
};
function addUnrelatedDateDataset(dateDatasets, unrelatedDateDataset) {
    if (hasSameRelevance(dateDatasets)) {
        return __spread([unrelatedHeader, unrelatedDateDataset, relatedHeader], dateDatasets);
    }
    return __spread([unrelatedHeader, unrelatedDateDataset], dateDatasets);
}
/**
 * @internal
 */
export function getRecommendedDateDataset(items) {
    if (hasSameRelevance(items)) {
        return null;
    }
    return first(sortByRelevanceAndTitle(items));
}
/**
 * @internal
 */
export function transform2Dropdown(dateDatasets) {
    if (!dateDatasets.length) {
        return [];
    }
    var items = sortByRelevanceAndTitle(dateDatasets);
    if (!hasSameRelevance(items)) {
        var nonZeroRelevanceItemsCount = takeWhile(items, function (i) { return i.relevance > 0; }).length;
        var othersIndex = Math.min(MAX_RECOMMENDED_ITEMS, nonZeroRelevanceItemsCount);
        var recommendedItems = __spread([recommendedHeader], items.slice(0, othersIndex));
        if (othersIndex < items.length) {
            return __spread(recommendedItems, [otherHeader], sortByTitle(items.slice(othersIndex)));
        }
        return recommendedItems;
    }
    return sortByTitle(items);
}
function getRecommendedItems(recommendedDate, others) {
    return __spread([recommendedHeader, recommendedDate, otherHeader], sortByTitle(others));
}
/**
 * @internal
 */
export function preselectDateDataset(dateDatasets, recommendedDate) {
    var others = dateDatasets.filter(function (d) { return d.id !== recommendedDate.id; });
    if (others.length > 0) {
        return getRecommendedItems(recommendedDate, others);
    }
    return [recommendedDate];
}
/**
 * @internal
 */
export function sortDateDatasets(dateDatasets, recommendedDate, unrelatedDate) {
    if (recommendedDate === void 0) { recommendedDate = null; }
    if (unrelatedDate === void 0) { unrelatedDate = null; }
    var items = recommendedDate
        ? preselectDateDataset(dateDatasets, recommendedDate)
        : transform2Dropdown(dateDatasets);
    if (unrelatedDate) {
        items = addUnrelatedDateDataset(items, unrelatedDate);
    }
    return items;
}
//# sourceMappingURL=dateDatasets.js.map
import { __spreadArrays } from "tslib";
// (C) 2007-2019 GoodData Corporation
import { GdcVisualizationObject } from "./GdcVisualizationObject";
var isAttribute = GdcVisualizationObject.isAttribute;
var isMeasure = GdcVisualizationObject.isMeasure;
var isAttributeFilter = GdcVisualizationObject.isAttributeFilter;
function getAttributesInBucket(bucket) {
    return bucket.items.reduce(function (list, bucketItem) {
        if (isAttribute(bucketItem)) {
            list.push(bucketItem.visualizationAttribute);
        }
        return list;
    }, []);
}
function getAttributes(mdObject) {
    var buckets = mdObject.buckets;
    return buckets.reduce(function (categoriesList, bucket) {
        return categoriesList.concat(getAttributesInBucket(bucket));
    }, []);
}
function getMeasuresInBucket(bucket) {
    return bucket.items.reduce(function (list, bucketItem) {
        if (isMeasure(bucketItem)) {
            list.push(bucketItem.measure);
        }
        return list;
    }, []);
}
function getDefinition(measure) {
    return GdcVisualizationObject.isMeasureDefinition(measure.definition)
        ? measure.definition.measureDefinition
        : undefined;
}
function getMeasures(mdObject) {
    var buckets = mdObject.buckets;
    return buckets.reduce(function (measuresList, bucket) {
        return measuresList.concat(getMeasuresInBucket(bucket));
    }, []);
}
function getMeasureFilters(measure) {
    var _a, _b;
    return (_b = (_a = getDefinition(measure)) === null || _a === void 0 ? void 0 : _a.filters) !== null && _b !== void 0 ? _b : [];
}
function getMeasureAttributeFilters(measure) {
    return getMeasureFilters(measure).filter(isAttributeFilter);
}
function getAttributeFilters(mdObject) {
    return getMeasures(mdObject).reduce(function (filters, measure) {
        return filters.concat(getMeasureAttributeFilters(measure));
    }, []);
}
function getAttributeFilterDisplayForm(measureFilter) {
    return GdcVisualizationObject.isPositiveAttributeFilter(measureFilter)
        ? measureFilter.positiveAttributeFilter.displayForm.uri
        : measureFilter.negativeAttributeFilter.displayForm.uri;
}
/**
 * @public
 */
export function getAttributesDisplayForms(mdObject) {
    var attributesDfs = getAttributes(mdObject).map(function (attribute) {
        return attribute.displayForm.uri;
    });
    var attrMeasureFilters = getAttributeFilters(mdObject);
    var attrMeasureFiltersDfs = attrMeasureFilters.map(getAttributeFilterDisplayForm);
    return __spreadArrays(attrMeasureFiltersDfs, attributesDfs);
}
//# sourceMappingURL=utils.js.map
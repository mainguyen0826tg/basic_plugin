import { __assign, __spreadArrays } from "tslib";
// (C) 2007-2019 GoodData Corporation
import React from "react";
import { applyRatioRule, ComputeRatioRule, newBucket, } from "@gooddata/sdk-model";
import { BucketNames, useResolveValuesWithPlaceholders, } from "@gooddata/sdk-ui";
import { defaultDimensions } from "../_commons/dimensions";
import { CoreComboChart } from "./CoreComboChart";
import isArray from "lodash/isArray";
import { withChart } from "../_base/withChart";
import { sanitizeConfig } from "../_commons/sanitizeStacking";
//
// Internals
//
var comboChartDefinition = {
    chartName: "ComboChart",
    bucketPropsKeys: ["primaryMeasures", "secondaryMeasures", "viewBy", "filters", "sortBy"],
    propTransformation: function (props) {
        var _a, _b;
        var _c = props.primaryMeasures, primaryMeasures = _c === void 0 ? [] : _c, _d = props.secondaryMeasures, secondaryMeasures = _d === void 0 ? [] : _d;
        var isDualAxis = (_b = (_a = props.config) === null || _a === void 0 ? void 0 : _a.dualAxis) !== null && _b !== void 0 ? _b : true;
        var computeRatioRule = !isDualAxis && primaryMeasures.length + secondaryMeasures.length > 1
            ? ComputeRatioRule.NEVER
            : ComputeRatioRule.SINGLE_MEASURE_ONLY;
        return __assign(__assign({}, props), { primaryMeasures: applyRatioRule(primaryMeasures, computeRatioRule), secondaryMeasures: applyRatioRule(secondaryMeasures, computeRatioRule) });
    },
    bucketsFactory: function (props) {
        var primaryMeasures = props.primaryMeasures, secondaryMeasures = props.secondaryMeasures, viewBy = props.viewBy;
        var categories = isArray(viewBy) ? [viewBy[0]] : [viewBy];
        return [
            newBucket.apply(void 0, __spreadArrays([BucketNames.MEASURES], primaryMeasures)),
            newBucket.apply(void 0, __spreadArrays([BucketNames.SECONDARY_MEASURES], secondaryMeasures)),
            newBucket.apply(void 0, __spreadArrays([BucketNames.VIEW], categories)),
        ];
    },
    executionFactory: function (props, buckets) {
        var _a;
        var backend = props.backend, workspace = props.workspace, execConfig = props.execConfig;
        return (_a = backend
            .withTelemetry("ComboChart", props)
            .workspace(workspace)
            .execution()
            .forBuckets(buckets, props.filters))
            .withSorting.apply(_a, props.sortBy).withDimensions(defaultDimensions)
            .withExecConfig(execConfig);
    },
    propOverridesFactory: function (props) {
        return {
            config: getConfiguration(props),
        };
    },
};
function getConfiguration(props) {
    var _a, _b;
    var primaryMeasures = props.primaryMeasures, secondaryMeasures = props.secondaryMeasures, config = props.config;
    var isDualAxis = (_b = (_a = props.config) === null || _a === void 0 ? void 0 : _a.dualAxis) !== null && _b !== void 0 ? _b : true;
    var measuresOnPrimaryAxis = isDualAxis ? primaryMeasures : __spreadArrays(primaryMeasures, secondaryMeasures);
    return sanitizeConfig(measuresOnPrimaryAxis, config);
}
var WrappedComboChart = withChart(comboChartDefinition)(CoreComboChart);
/**
 * [ComboChart](https://sdk.gooddata.com/gooddata-ui/docs/combo_chart_component.html)
 *
 * Combo chart combines two types of visualizations, for example, a column chart and a line chart. A combo chart can
 * have one or two axes. If a combo chart has two axes, it is often referred to as a dual axis chart.
 *
 * By default, a combo chart is displayed as a combination of a column chart and a line chart, with the secondary axis
 * enabled (you can [disable it](https://sdk.gooddata.com/gooddata-ui/docs/combo_chart_component.html#disable-the-secondary-axis)).
 *
 * The chart types used to display primary and secondary measures can be customized in {@link IChartConfig}.
 *
 * @public
 */
export var ComboChart = function (props) {
    var _a = useResolveValuesWithPlaceholders([props.primaryMeasures, props.secondaryMeasures, props.viewBy, props.filters, props.sortBy], props.placeholdersResolutionContext), primaryMeasures = _a[0], secondaryMeasures = _a[1], viewBy = _a[2], filters = _a[3], sortBy = _a[4];
    return (React.createElement(WrappedComboChart, __assign({}, props, {
        primaryMeasures: primaryMeasures,
        secondaryMeasures: secondaryMeasures,
        viewBy: viewBy,
        filters: filters,
        sortBy: sortBy,
    })));
};
//# sourceMappingURL=ComboChart.js.map
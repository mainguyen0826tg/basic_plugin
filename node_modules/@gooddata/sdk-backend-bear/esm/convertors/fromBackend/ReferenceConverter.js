import { isUri } from "@gooddata/api-client-bear";
import isArray from "lodash/isArray";
import isObject from "lodash/isObject";
import isString from "lodash/isString";
import { v4 as uuidv4 } from "uuid";
/*
 * Helpers
 */
var getReferenceValue = function (id, references) { return references[id]; };
var getReferenceId = function (value, references) {
    return Object.keys(references).find(function (id) { return references[id] === value; });
};
var defaultIdGenerator = function () { return uuidv4().replace(/-/g, ""); };
/**
 * Recursively traverses the object and tries to apply a conversion to every string value
 */
var traverse = function (obj, convert) {
    if (isArray(obj)) {
        return obj.map(function (a) { return traverse(a, convert); });
    }
    else if (isObject(obj)) {
        return Object.keys(obj).reduce(function (result, key) {
            result[key] = traverse(obj[key], convert);
            return result;
        }, {});
    }
    else if (isString(obj)) {
        return convert(obj);
    }
    else {
        return obj;
    }
};
var createConverter = function (conversionFunction) {
    return function (conversionData, idGenerator) {
        if (idGenerator === void 0) { idGenerator = defaultIdGenerator; }
        return conversionFunction(conversionData, idGenerator);
    };
};
/*
 * Conversion from References to URIs
 */
var convertReferenceToUri = function (references) {
    return function (value) {
        return getReferenceValue(value, references) || value;
    };
};
/**
 * Converts URIs to reference based values
 *
 * @param conversionData Data to convert
 * @param [idGenerator=uuid] Function that returns unique ids
 *
 * @internal
 */
export var convertReferencesToUris = createConverter(function (_a) {
    var references = _a.references, properties = _a.properties;
    return {
        properties: traverse(properties, convertReferenceToUri(references)),
        references: references,
    };
});
/*
 * Conversion from URIs to References
 */
var createUriToReferenceConverter = function (originalReferences, idGenerator) {
    var convertedReferences = {};
    return {
        convertedReferences: convertedReferences,
        conversion: function (value) {
            if (!isUri(value)) {
                return value;
            }
            var id = getReferenceId(value, originalReferences) || // try to reuse original references
                getReferenceId(value, convertedReferences) || // or use already converted new references
                idGenerator(); // or get a completely new id
            convertedReferences[id] = value;
            return id;
        },
    };
};
/**
 * Converts URIs to reference based values
 *
 * @param conversionData Data to convert
 * @param [idGenerator=uuid] Function that returns unique ids
 * @internal
 */
export var convertUrisToReferences = createConverter(function (_a, idGenerator) {
    var properties = _a.properties, references = _a.references;
    var converter = createUriToReferenceConverter(references, idGenerator);
    return {
        properties: traverse(properties, converter.conversion),
        references: converter.convertedReferences,
    };
});
//# sourceMappingURL=ReferenceConverter.js.map
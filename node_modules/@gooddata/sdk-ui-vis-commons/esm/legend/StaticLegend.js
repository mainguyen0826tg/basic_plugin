import { __extends } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React from "react";
import cx from "classnames";
import noop from "lodash/noop";
import isNil from "lodash/isNil";
import { LegendList } from "./LegendList";
import { Paging } from "./Paging";
import { BOTTOM, TOP } from "./PositionTypes";
import { calculateStaticLegend, ITEM_HEIGHT, STATIC_PAGING_HEIGHT } from "./helpers";
import { LegendLabelItem } from "./LegendLabelItem";
/**
 * @internal
 */
var StaticLegend = /** @class */ (function (_super) {
    __extends(StaticLegend, _super);
    function StaticLegend() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            page: 1
        };
        _this.showNextPage = function () {
            var updatedPage = _this.state.page + 1;
            _this.props.onPageChanged(updatedPage);
            _this.setState({ page: updatedPage });
        };
        _this.showPrevPage = function () {
            var updatedPage = _this.state.page - 1;
            _this.props.onPageChanged(updatedPage);
            _this.setState({ page: updatedPage });
        };
        _this.renderPaging = function (pagesCount) {
            var page = _this.state.page;
            var buttonOrientation = _this.props.buttonOrientation;
            return (React.createElement(Paging, { page: page, pagesCount: pagesCount, showNextPage: _this.showNextPage, showPrevPage: _this.showPrevPage, buttonsOrientation: buttonOrientation }));
        };
        return _this;
    }
    StaticLegend.prototype.render = function () {
        var _a = this.props, enableBorderRadius = _a.enableBorderRadius, containerHeight = _a.containerHeight, _b = _a.onItemClick, onItemClick = _b === void 0 ? noop : _b, position = _a.position, series = _a.series, _c = _a.shouldFillAvailableSpace, shouldFillAvailableSpace = _c === void 0 ? true : _c, label = _a.label, paginationHeight = _a.paginationHeight, customComponent = _a.customComponent;
        var page = this.state.page;
        var classNames = cx("viz-legend", "static", "position-" + position);
        // Without paging
        if (position === TOP || position === BOTTOM) {
            return (React.createElement("div", { className: classNames },
                React.createElement("div", { className: "series" },
                    React.createElement(LegendList, { enableBorderRadius: enableBorderRadius, series: series, onItemClick: onItemClick }))));
        }
        var columnNum = position === "dialog" ? 2 : 1;
        var labelHeight = label ? ITEM_HEIGHT : 0;
        var labelComponent = label ? React.createElement(LegendLabelItem, { label: label }) : null;
        var contentHeight = containerHeight - labelHeight;
        var seriesCount = series.length;
        var _d = calculateStaticLegend(seriesCount, contentHeight, columnNum, paginationHeight), hasPaging = _d.hasPaging, visibleItemsCount = _d.visibleItemsCount;
        var usePaging = hasPaging || customComponent;
        var heightOfAvailableSpace = (visibleItemsCount / columnNum) * ITEM_HEIGHT;
        var heightOfVisibleItems = Math.min(visibleItemsCount / columnNum, seriesCount) * ITEM_HEIGHT;
        var seriesHeight = (shouldFillAvailableSpace ? heightOfAvailableSpace : heightOfVisibleItems) + labelHeight;
        var shouldDisplayCustomComponent = page === 1 && this.hasCustomComponent();
        var pagesCount = this.getPagesCount(series.length, visibleItemsCount);
        if (shouldDisplayCustomComponent) {
            return (React.createElement("div", { className: classNames },
                React.createElement("div", { className: "series", style: { height: seriesHeight } },
                    labelComponent,
                    customComponent),
                usePaging && this.renderPaging(pagesCount)));
        }
        var _e = getPagingValues(page, visibleItemsCount, series.length, this.hasCustomComponent()), start = _e[0], end = _e[1];
        var pagedSeries = series.slice(start, end);
        var visibleItemsFitOneColumn = shouldItemsFitOneColumn(visibleItemsCount, columnNum, pagedSeries.length);
        var fullClassNames = cx(classNames, {
            "no-width": visibleItemsFitOneColumn
        });
        return (React.createElement("div", { className: fullClassNames },
            React.createElement("div", { className: "series", style: { height: seriesHeight } },
                labelComponent,
                React.createElement(LegendList, { enableBorderRadius: enableBorderRadius, series: pagedSeries, onItemClick: onItemClick })),
            usePaging && this.renderPaging(pagesCount)));
    };
    StaticLegend.prototype.getPagesCount = function (seriesLength, visibleItemsCount) {
        var defaultPagesCount = Math.ceil(seriesLength / visibleItemsCount);
        return this.hasCustomComponent() ? defaultPagesCount + 1 : defaultPagesCount;
    };
    StaticLegend.prototype.hasCustomComponent = function () {
        return !isNil(this.props.customComponent);
    };
    StaticLegend.defaultProps = {
        buttonOrientation: "upDown",
        paginationHeight: STATIC_PAGING_HEIGHT,
        onPageChanged: noop
    };
    return StaticLegend;
}(React.PureComponent));
export { StaticLegend };
export var getPagingValues = function (page, visibleItemsCount, seriesLength, hasCustomComponent) {
    var start = hasCustomComponent ? (page - 2) * visibleItemsCount : (page - 1) * visibleItemsCount;
    var end = hasCustomComponent
        ? Math.min(visibleItemsCount * (page - 1), seriesLength)
        : Math.min(visibleItemsCount * page, seriesLength);
    return [start, end];
};
var shouldItemsFitOneColumn = function (visibleItemsCount, columnNum, pagedSeriesLength) {
    return visibleItemsCount / columnNum >= pagedSeriesLength;
};
//# sourceMappingURL=StaticLegend.js.map
import { __assign, __awaiter, __generator, __spreadArrays } from "tslib";
// (C) 2019-2021 GoodData Corporation
import { isWidgetDefinition, isWidget, isFilterContextDefinition, isFilterContext, layoutWidgetsWithPaths, layoutWidgets, UnexpectedError, isTempFilterContext, widgetType, } from "@gooddata/sdk-backend-spi";
import { areObjRefsEqual, objRefToString, uriRef, } from "@gooddata/sdk-model";
import { GdcDashboardPlugin, GdcVisualizationObject, } from "@gooddata/api-model-bear";
import { convertVisualization } from "../../../convertors/fromBackend/VisualizationConverter";
import * as fromSdkModel from "../../../convertors/toBackend/DashboardConverter";
import * as toSdkModel from "../../../convertors/fromBackend/DashboardConverter";
import clone from "lodash/clone";
import compact from "lodash/compact";
import flatMap from "lodash/flatMap";
import flatten from "lodash/flatten";
import isEqual from "lodash/isEqual";
import set from "lodash/set";
import { getObjectIdFromUri, objRefsToUris, objRefToUri, updateUserMap, userUriFromAuthenticatedPrincipalWithAnonymous, } from "../../../utils/api";
import keyBy from "lodash/keyBy";
import { BearWorkspaceInsights } from "../insights";
import { WidgetReferencesQuery } from "./widgetReferences";
import invariant from "ts-invariant";
import { resolveWidgetFilters } from "./widgetFilters";
import { sanitizeFilterContext } from "./filterContexts";
import { getAnalyticalDashboardUserUris } from "../../../utils/metadata";
import isEmpty from "lodash/isEmpty";
import includes from "lodash/includes";
var isVisualization = GdcVisualizationObject.isVisualization;
var isDashboardPlugin = GdcDashboardPlugin.isDashboardPlugin;
import remove from "lodash/remove";
/**
 * Lists types of those metadata object that are essentially components of the dashboard object. Every time
 * when dashboard is loaded all related objects of these types must be loaded as well as their
 * content is integral part of the dashboard itself.
 */
var DashboardComponentTypes = ["kpi", "visualizationWidget", "filterContext"];
// TODO: refactor impl into bunch of smaller classes + delegates
var BearWorkspaceDashboards = /** @class */ (function () {
    function BearWorkspaceDashboards(authCall, workspace) {
        var _this = this;
        this.authCall = authCall;
        this.workspace = workspace;
        // Public methods
        this.getDashboards = function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var dashboardsObjectLinks, userMap, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.getAnalyticalDashboards(_this.workspace);
                            })];
                        case 1:
                            dashboardsObjectLinks = _b.sent();
                            if (!options.loadUserData) return [3 /*break*/, 3];
                            return [4 /*yield*/, updateUserMap(new Map(), compact(flatMap(dashboardsObjectLinks, function (link) { return [link.author, link.contributor]; })), this.authCall)];
                        case 2:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _a = new Map();
                            _b.label = 4;
                        case 4:
                            userMap = _a;
                            return [2 /*return*/, dashboardsObjectLinks.map(function (link) { return toSdkModel.convertListedDashboard(link, userMap); })];
                    }
                });
            });
        };
        this.getDashboard = function (dashboardRef, exportFilterContextRef, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var dashboardUri, exportFilterContextUri, _a, bearDashboard, dependenciesToGet, bearVisualizationClasses, _b, _c, _d, _e, bearDependencies, bearExportFilterContext, userMap, _f;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0: return [4 /*yield*/, objRefToUri(dashboardRef, this.workspace, this.authCall)];
                        case 1:
                            dashboardUri = _g.sent();
                            if (!exportFilterContextRef) return [3 /*break*/, 3];
                            return [4 /*yield*/, objRefToUri(exportFilterContextRef, this.workspace, this.authCall)];
                        case 2:
                            _a = _g.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _a = undefined;
                            _g.label = 4;
                        case 4:
                            exportFilterContextUri = _a;
                            return [4 /*yield*/, this.getBearDashboard(dashboardUri)];
                        case 5:
                            bearDashboard = _g.sent();
                            dependenciesToGet = __spreadArrays(DashboardComponentTypes);
                            bearVisualizationClasses = [];
                            if (!!bearDashboard.analyticalDashboard.content.layout) return [3 /*break*/, 7];
                            // when dashboard has no layout and only list of widgets, the conversion will build an
                            // implicit layout. in order to set sizes correctly in that layout, the code needs to have
                            // visualization objects & info about visualization classes
                            dependenciesToGet.push("visualizationObject");
                            _c = (_b = bearVisualizationClasses.push).apply;
                            _d = [bearVisualizationClasses];
                            return [4 /*yield*/, this.getBearVisualizationClasses()];
                        case 6:
                            _c.apply(_b, _d.concat([(_g.sent())]));
                            _g.label = 7;
                        case 7: return [4 /*yield*/, Promise.all([
                                this.getBearDashboardDependencies(dashboardUri, dependenciesToGet),
                                this.getBearExportFilterContext(exportFilterContextRef),
                            ])];
                        case 8:
                            _e = _g.sent(), bearDependencies = _e[0], bearExportFilterContext = _e[1];
                            if (bearExportFilterContext) {
                                bearDashboard.analyticalDashboard.content.filterContext = exportFilterContextUri;
                                bearDependencies.push(bearExportFilterContext);
                            }
                            if (!options.loadUserData) return [3 /*break*/, 10];
                            return [4 /*yield*/, updateUserMap(new Map(), getAnalyticalDashboardUserUris(bearDashboard), this.authCall)];
                        case 9:
                            _f = _g.sent();
                            return [3 /*break*/, 11];
                        case 10:
                            _f = new Map();
                            _g.label = 11;
                        case 11:
                            userMap = _f;
                            return [2 /*return*/, toSdkModel.convertDashboard(bearDashboard, bearDependencies, bearVisualizationClasses, exportFilterContextUri, userMap)];
                    }
                });
            });
        };
        this.createDashboard = function (dashboard) { return __awaiter(_this, void 0, void 0, function () {
            var emptyDashboard;
            return __generator(this, function (_a) {
                emptyDashboard = {
                    type: "IDashboard",
                    description: "",
                    filterContext: undefined,
                    title: "",
                    shareStatus: "private",
                    isUnderStrictControl: false,
                };
                return [2 /*return*/, this.updateDashboard(emptyDashboard, dashboard)];
            });
        }); };
        this.updateDashboard = function (originalDashboard, updatedDashboard) { return __awaiter(_this, void 0, void 0, function () {
            var sanitizedPlugins, _a, sanitizedDashboard, _b, filterContext, layout, createdDashboardWithSavedDependencies, created, updated, ref, uri, identifier, updatedDashboardWithSavedDependencies, deletedWidgets, alertsToDelete, _c;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!areObjRefsEqual(originalDashboard.ref, updatedDashboard.ref)) {
                            throw new Error("Cannot update dashboard with different refs!");
                        }
                        if (isEqual(originalDashboard, updatedDashboard)) {
                            return [2 /*return*/, originalDashboard];
                        }
                        if (!updatedDashboard.plugins) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.ensureDashboardPluginLinksHaveUris(updatedDashboard.plugins)];
                    case 1:
                        _a = _d.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = undefined;
                        _d.label = 3;
                    case 3:
                        sanitizedPlugins = _a;
                        sanitizedDashboard = __assign(__assign({}, updatedDashboard), { plugins: sanitizedPlugins });
                        return [4 /*yield*/, Promise.all([
                                this.updateFilterContext(originalDashboard.filterContext, sanitizedDashboard.filterContext),
                                this.updateLayoutAndWidgets(originalDashboard.layout, sanitizedDashboard.layout),
                            ])];
                    case 4:
                        _b = _d.sent(), filterContext = _b[0], layout = _b[1];
                        // Missing refs means that the dashboard is not yet stored, so let's create it
                        if (!originalDashboard.ref && !sanitizedDashboard.ref) {
                            createdDashboardWithSavedDependencies = __assign(__assign({}, sanitizedDashboard), { filterContext: filterContext,
                                layout: layout });
                            return [2 /*return*/, this.createBearDashboard(createdDashboardWithSavedDependencies)];
                        }
                        created = originalDashboard.created, updated = originalDashboard.updated, ref = originalDashboard.ref, uri = originalDashboard.uri, identifier = originalDashboard.identifier;
                        updatedDashboardWithSavedDependencies = __assign(__assign({}, sanitizedDashboard), { created: created,
                            updated: updated,
                            ref: ref,
                            uri: uri,
                            identifier: identifier,
                            filterContext: filterContext,
                            layout: layout });
                        deletedWidgets = this.collectDeletedWidgets(originalDashboard.layout, sanitizedDashboard.layout);
                        _c = flatten;
                        return [4 /*yield*/, Promise.all(deletedWidgets.map(function (widget) { return _this.getBearWidgetAlertsForWidget(widget); }))];
                    case 5:
                        alertsToDelete = _c.apply(void 0, [_d.sent()]);
                        if (!alertsToDelete.length) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.deleteWidgetAlerts(alertsToDelete)];
                    case 6:
                        _d.sent();
                        _d.label = 7;
                    case 7: 
                    // Then update the dashboard itself
                    return [4 /*yield*/, this.updateBearDashboard(updatedDashboardWithSavedDependencies)];
                    case 8:
                        // Then update the dashboard itself
                        _d.sent();
                        // And finally delete the now orphaned widgets
                        return [4 /*yield*/, this.deleteBearWidgets(deletedWidgets)];
                    case 9:
                        // And finally delete the now orphaned widgets
                        _d.sent();
                        return [2 /*return*/, updatedDashboardWithSavedDependencies];
                }
            });
        }); };
        this.deleteDashboard = function (dashboardRef) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteBearMetadataObject(dashboardRef)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.exportDashboardToPdf = function (dashboardRef, filters) { return __awaiter(_this, void 0, void 0, function () {
            var dashboardUri, convertedFilters;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(dashboardRef, this.workspace, this.authCall)];
                    case 1:
                        dashboardUri = _a.sent();
                        convertedFilters = filters && filters.map(fromSdkModel.convertFilterContextItem);
                        return [2 /*return*/, this.authCall(function (sdk) {
                                return sdk.dashboard.exportToPdf(_this.workspace, dashboardUri, convertedFilters).then(function (res) { return res.uri; });
                            })];
                }
            });
        }); };
        this.createScheduledMail = function (scheduledMailDefinition, exportFilterContextDefinition) { return __awaiter(_this, void 0, void 0, function () {
            var filterContext, _a, scheduledMailWithFilterContext, convertedScheduledMail, createdBearScheduledMail;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = exportFilterContextDefinition;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.createBearFilterContext(exportFilterContextDefinition)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        filterContext = _a;
                        scheduledMailWithFilterContext = filterContext
                            ? __assign(__assign({}, scheduledMailDefinition), { attachments: scheduledMailDefinition.attachments.map(function (attachment) { return (__assign(__assign({}, attachment), { filterContext: filterContext.ref })); }) }) : scheduledMailDefinition;
                        convertedScheduledMail = fromSdkModel.convertScheduledMail(scheduledMailWithFilterContext);
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.createObject(_this.workspace, convertedScheduledMail);
                            })];
                    case 3:
                        createdBearScheduledMail = _b.sent();
                        return [2 /*return*/, toSdkModel.convertScheduledMail(createdBearScheduledMail)];
                }
            });
        }); };
        this.getScheduledMailsCountForDashboard = function (dashboardRef) { return __awaiter(_this, void 0, void 0, function () {
            var dashboardUri, objectLinks;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(dashboardRef, this.workspace, this.authCall)];
                    case 1:
                        dashboardUri = _a.sent();
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.getObjectUsedBy(_this.workspace, dashboardUri, {
                                    nearest: true,
                                    types: ["scheduledMail"],
                                });
                            })];
                    case 2:
                        objectLinks = _a.sent();
                        return [2 /*return*/, objectLinks.length];
                }
            });
        }); };
        this.getAllWidgetAlertsForCurrentUser = function () { return __awaiter(_this, void 0, void 0, function () {
            var alerts;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllBearKpiAlertsForCurrentUser()];
                    case 1:
                        alerts = _a.sent();
                        return [2 /*return*/, this.getConvertedAlerts(alerts)];
                }
            });
        }); };
        this.getDashboardWidgetAlertsForCurrentUser = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var alerts;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDashboardBearKpiAlertsForCurrentUser(ref)];
                    case 1:
                        alerts = _a.sent();
                        return [2 /*return*/, this.getConvertedAlerts(alerts)];
                }
            });
        }); };
        this.getWidgetAlertsCountForWidgets = function (refs) { return __awaiter(_this, void 0, void 0, function () {
            var widgetUris, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(refs.map(function (ref) { return objRefToUri(ref, _this.workspace, _this.authCall); }))];
                    case 1:
                        widgetUris = _a.sent();
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.getObjectsUsedByMany(_this.workspace, widgetUris, {
                                    types: ["kpiAlert"],
                                    nearest: true,
                                });
                            })];
                    case 2:
                        result = _a.sent();
                        return [2 /*return*/, result.map(function (entry) {
                                return {
                                    ref: uriRef(entry.uri),
                                    alertCount: entry.entries.length,
                                };
                            })];
                }
            });
        }); };
        this.createWidgetAlert = function (alert) { return __awaiter(_this, void 0, void 0, function () {
            var _a, savedFilterContext, dashboardUri, alertWithSavedFilterContext;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.createOrUpdateWidgetAlertFilterContext(alert),
                            objRefToUri(alert.dashboard, this.workspace, this.authCall),
                        ])];
                    case 1:
                        _a = _b.sent(), savedFilterContext = _a[0], dashboardUri = _a[1];
                        alertWithSavedFilterContext = __assign(__assign({}, alert), { dashboard: uriRef(dashboardUri), filterContext: savedFilterContext });
                        return [2 /*return*/, this.createBearWidgetAlert(alertWithSavedFilterContext)];
                }
            });
        }); };
        this.updateWidgetAlert = function (updatedAlert) { return __awaiter(_this, void 0, void 0, function () {
            var savedFilterContext, alertWithSavedFilterContext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createOrUpdateWidgetAlertFilterContext(updatedAlert)];
                    case 1:
                        savedFilterContext = _a.sent();
                        alertWithSavedFilterContext = __assign(__assign({}, updatedAlert), { filterContext: savedFilterContext });
                        return [2 /*return*/, this.updateBearWidgetAlert(alertWithSavedFilterContext)];
                }
            });
        }); };
        this.deleteWidgetAlert = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteBearMetadataObject(ref)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.deleteWidgetAlerts = function (refs) { return __awaiter(_this, void 0, void 0, function () {
            var uris;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(refs.map(function (ref) { return objRefToUri(ref, _this.workspace, _this.authCall); }))];
                    case 1:
                        uris = _a.sent();
                        return [2 /*return*/, this.authCall(function (sdk) { return sdk.md.bulkDeleteObjects(_this.workspace, uris, "cascade"); })];
                }
            });
        }); };
        this.getWidgetReferencedObjects = function (widget, types) {
            if (types === void 0) { types = ["measure"]; }
            return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    invariant(widgetType(widget) === "kpi", "getWidgetReferencedObjects is currently supported for kpi widgets only");
                    return [2 /*return*/, new WidgetReferencesQuery(this.authCall, this.workspace, widget, types).run()];
                });
            });
        };
        this.getResolvedFiltersForWidget = function (widget, filters) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, resolveWidgetFilters(filters, widget.ignoreDashboardFilters, widget.dateDataSet, function (refs) {
                        return objRefsToUris(refs, _this.workspace, _this.authCall);
                    })];
            });
        }); };
        // Alerts
        this.createBearWidgetAlert = function (alert) { return __awaiter(_this, void 0, void 0, function () {
            var alertWithSanitizedName, bearAlert, createdBearAlert, convertedAlertFilterContext;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        alertWithSanitizedName = __assign(__assign({}, alert), { title: alert.title || "kpi alert" });
                        bearAlert = fromSdkModel.convertWidgetAlert(alertWithSanitizedName);
                        return [4 /*yield*/, this.authCall(function (sdk) { return sdk.md.createObject(_this.workspace, bearAlert); })];
                    case 1:
                        createdBearAlert = _a.sent();
                        convertedAlertFilterContext = fromSdkModel.convertFilterContext(alertWithSanitizedName.filterContext);
                        return [2 /*return*/, toSdkModel.convertAlert(createdBearAlert, convertedAlertFilterContext)];
                }
            });
        }); };
        this.updateBearWidgetAlert = function (alert) { return __awaiter(_this, void 0, void 0, function () {
            var bearAlert;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bearAlert = fromSdkModel.convertWidgetAlert(alert);
                        return [4 /*yield*/, this.updateBearMetadataObject(alert.ref, bearAlert)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, alert];
                }
            });
        }); };
        this.createOrUpdateWidgetAlertFilterContext = function (alert) { return __awaiter(_this, void 0, void 0, function () {
            var filterContext, emptyFilterContextDefinition;
            return __generator(this, function (_a) {
                filterContext = alert.filterContext;
                emptyFilterContextDefinition = {
                    title: "Filter context for " + objRefToString(alert.widget),
                    description: "",
                    filters: [],
                };
                return [2 /*return*/, isFilterContext(filterContext)
                        ? this.updateBearFilterContext(filterContext)
                        : // Create a new filter context, or create implicit filter context, when not provided
                            this.createBearFilterContext(filterContext || emptyFilterContextDefinition)];
            });
        }); };
        this.getBearWidgetAlertsForWidget = function (widget) { return __awaiter(_this, void 0, void 0, function () {
            var objectLinks;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (sdk) {
                            return sdk.md.getObjectUsedBy(_this.workspace, widget.uri, {
                                types: ["kpiAlert"],
                                // limit ourselves to nearest only, otherwise, other alerts on the dashboard would be deleted, too
                                nearest: true,
                            });
                        })];
                    case 1:
                        objectLinks = _a.sent();
                        return [2 /*return*/, objectLinks.map(function (link) { return uriRef(link.link); })];
                }
            });
        }); };
        // Dashboards
        this.getBearDashboard = function (uri) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authCall(function (sdk) { return sdk.md.getObjectDetails(uri); })];
            });
        }); };
        this.createBearDashboard = function (dashboard) { return __awaiter(_this, void 0, void 0, function () {
            var bearDashboard, createdBearDashboard, createdDashboardDependencies;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bearDashboard = fromSdkModel.convertDashboard(dashboard);
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.createObject(_this.workspace, bearDashboard);
                            })];
                    case 1:
                        createdBearDashboard = _a.sent();
                        return [4 /*yield*/, this.getBearDashboardDependencies(createdBearDashboard.analyticalDashboard.meta.uri, DashboardComponentTypes)];
                    case 2:
                        createdDashboardDependencies = _a.sent();
                        return [2 /*return*/, toSdkModel.convertDashboard(createdBearDashboard, createdDashboardDependencies)];
                }
            });
        }); };
        this.updateBearDashboard = function (dashboard) { return __awaiter(_this, void 0, void 0, function () {
            var bearDashboard;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bearDashboard = fromSdkModel.convertDashboard(dashboard);
                        return [4 /*yield*/, this.updateBearMetadataObject(dashboard.ref, bearDashboard)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, dashboard];
                }
            });
        }); };
        // Layout
        this.updateLayoutAndWidgets = function (originalLayout, updatedLayout) { return __awaiter(_this, void 0, void 0, function () {
            var createdWidgetsWithLayoutPaths, updatedWidgetsWithLayoutPaths, createdAndUpdatedWidgetsWithLayoutPaths;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!updatedLayout) {
                            return [2 /*return*/];
                        }
                        createdWidgetsWithLayoutPaths = this.collectCreatedWidgetsWithLayoutPaths(updatedLayout);
                        updatedWidgetsWithLayoutPaths = this.collectUpdatedWidgetsWithLayoutPaths(originalLayout, updatedLayout);
                        return [4 /*yield*/, Promise.all(__spreadArrays(createdWidgetsWithLayoutPaths.map(function (widgetWithpath) {
                                return _this.createBearWidget(widgetWithpath.widget).then(function (widget) { return (__assign(__assign({}, widgetWithpath), { widget: widget })); });
                            }), updatedWidgetsWithLayoutPaths.map(function (widgetWithpath) {
                                return _this.updateBearWidget(widgetWithpath.widget).then(function (widget) { return (__assign(__assign({}, widgetWithpath), { widget: widget })); });
                            })))];
                    case 1:
                        createdAndUpdatedWidgetsWithLayoutPaths = _a.sent();
                        // Update relevant parts of the layout with saved widgets
                        return [2 /*return*/, createdAndUpdatedWidgetsWithLayoutPaths.reduce(function (acc, widgetWithPath) {
                                return set(acc, widgetWithPath.path, widgetWithPath.widget);
                            }, clone(updatedLayout))];
                }
            });
        }); };
        // Filter context
        this.updateFilterContext = function (originalFilterContext, updatedFilterContext) { return __awaiter(_this, void 0, void 0, function () {
            var shouldUpdateFilterContext;
            return __generator(this, function (_a) {
                if (isTempFilterContext(originalFilterContext)) {
                    throw new UnexpectedError("Cannot update temp filter context!");
                }
                else if (isFilterContextDefinition(updatedFilterContext)) {
                    // Create a new filter context
                    return [2 /*return*/, this.createBearFilterContext(updatedFilterContext)];
                }
                else if (isFilterContext(updatedFilterContext)) {
                    shouldUpdateFilterContext = !isEqual(originalFilterContext, updatedFilterContext);
                    if (shouldUpdateFilterContext) {
                        return [2 /*return*/, this.updateBearFilterContext(updatedFilterContext)];
                    }
                }
                // No change, return the original filter context
                return [2 /*return*/, originalFilterContext];
            });
        }); };
        this.getBearExportFilterContext = function (exportFilterContextRef) { return __awaiter(_this, void 0, void 0, function () {
            var exportFilterContextUri;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!exportFilterContextRef) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, objRefToUri(exportFilterContextRef, this.workspace, this.authCall)];
                    case 1:
                        exportFilterContextUri = _a.sent();
                        return [4 /*yield*/, this.authCall(function (sdk) { return __awaiter(_this, void 0, void 0, function () {
                                var result, err_1;
                                var _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _b.trys.push([0, 2, , 3]);
                                            return [4 /*yield*/, sdk.md.getObjectDetails(exportFilterContextUri)];
                                        case 1:
                                            result = _b.sent();
                                            return [3 /*break*/, 3];
                                        case 2:
                                            err_1 = _b.sent();
                                            if (((_a = err_1 === null || err_1 === void 0 ? void 0 : err_1.response) === null || _a === void 0 ? void 0 : _a.status) === 404) {
                                                // Export filter context has expired
                                                result = undefined;
                                            }
                                            // let other errors propagate correctly
                                            throw err_1;
                                        case 3: return [2 /*return*/, result];
                                    }
                                });
                            }); })];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        this.createBearFilterContext = function (filterContext) { return __awaiter(_this, void 0, void 0, function () {
            var sanitizedFilterContext, bearFilterContext, savedBearFilterContext, savedFilterContext;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sanitizeFilterContext(filterContext)];
                    case 1:
                        sanitizedFilterContext = _a.sent();
                        bearFilterContext = fromSdkModel.convertFilterContext(sanitizedFilterContext);
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.createObject(_this.workspace, bearFilterContext);
                            })];
                    case 2:
                        savedBearFilterContext = _a.sent();
                        savedFilterContext = toSdkModel.convertFilterContext(savedBearFilterContext);
                        return [2 /*return*/, savedFilterContext];
                }
            });
        }); };
        this.updateBearFilterContext = function (filterContext) { return __awaiter(_this, void 0, void 0, function () {
            var sanitizedFilterContext, bearFilterContext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sanitizeFilterContext(filterContext)];
                    case 1:
                        sanitizedFilterContext = _a.sent();
                        bearFilterContext = fromSdkModel.convertFilterContext(sanitizedFilterContext);
                        return [4 /*yield*/, this.updateBearMetadataObject(filterContext.ref, bearFilterContext)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, filterContext];
                }
            });
        }); };
        this.sanitizeFilterContext = function (filterContext) {
            return sanitizeFilterContext(filterContext, function (refs) {
                return objRefsToUris(refs, _this.workspace, _this.authCall);
            });
        };
        // Widgets
        this.createBearWidget = function (widget) { return __awaiter(_this, void 0, void 0, function () {
            var bearWidget, savedBearWidget;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bearWidget = fromSdkModel.convertWidget(widget);
                        return [4 /*yield*/, this.authCall(function (sdk) { return sdk.md.createObject(_this.workspace, bearWidget); })];
                    case 1:
                        savedBearWidget = _a.sent();
                        return [2 /*return*/, toSdkModel.convertWidget(savedBearWidget)];
                }
            });
        }); };
        this.updateBearWidget = function (widget) { return __awaiter(_this, void 0, void 0, function () {
            var bearWidget;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bearWidget = fromSdkModel.convertWidget(widget);
                        return [4 /*yield*/, this.updateBearMetadataObject(widget.ref, bearWidget)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, widget];
                }
            });
        }); };
        this.deleteBearWidgets = function (widgets) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(widgets.map(function (widget) { return _this.deleteBearMetadataObject(widget.ref); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.collectCreatedWidgetsWithLayoutPaths = function (updatedLayout) {
            var widgetsWithPath = updatedLayout ? layoutWidgetsWithPaths(updatedLayout) : [];
            return widgetsWithPath.filter(function (widgetWithPath) {
                return isWidgetDefinition(widgetWithPath.widget);
            });
        };
        this.collectUpdatedWidgetsWithLayoutPaths = function (originalLayout, updatedLayout) {
            var originalLayoutWidgetsWithPath = originalLayout ? layoutWidgetsWithPaths(originalLayout) : [];
            var updatedLayoutWidgetsWithPath = updatedLayout ? layoutWidgetsWithPaths(updatedLayout) : [];
            return updatedLayoutWidgetsWithPath.filter(function (_a) {
                var widget = _a.widget;
                return (isWidget(widget) &&
                    originalLayoutWidgetsWithPath.some(function (w) {
                        return isWidget(w.widget) &&
                            areObjRefsEqual(widget.ref, w.widget.ref) &&
                            !isEqual(widget, w.widget);
                    }));
            });
        };
        this.collectDeletedWidgets = function (originalLayout, updatedLayout) {
            var originalLayoutWidgets = originalLayout ? layoutWidgets(originalLayout) : [];
            var updatedLayoutWidgets = updatedLayout ? layoutWidgets(updatedLayout) : [];
            var deletedWidgets = originalLayoutWidgets.filter(function (widget) {
                return (isWidget(widget) &&
                    updatedLayoutWidgets.every(function (w) { return isWidget(w) && !areObjRefsEqual(widget.ref, w.ref); }));
            });
            return deletedWidgets;
        };
        // Alerts
        this.getAllBearKpiAlertsForCurrentUser = function () { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authCall(function (sdk, context) { return __awaiter(_this, void 0, void 0, function () {
                        var author;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, userUriFromAuthenticatedPrincipalWithAnonymous(context.getPrincipal)];
                                case 1:
                                    author = _a.sent();
                                    if (!author) {
                                        return [2 /*return*/, []];
                                    }
                                    return [2 /*return*/, sdk.md.getObjectsByQuery(this.workspace, {
                                            category: "kpiAlert",
                                            author: author,
                                        })];
                            }
                        });
                    }); })];
            });
        }); };
        this.getDashboardBearKpiAlertsForCurrentUser = function (dashboardRef) { return __awaiter(_this, void 0, void 0, function () {
            var allAlerts, dashboardUri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllBearKpiAlertsForCurrentUser()];
                    case 1:
                        allAlerts = _a.sent();
                        if (allAlerts.length === 0) {
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, objRefToUri(dashboardRef, this.workspace, this.authCall)];
                    case 2:
                        dashboardUri = _a.sent();
                        return [2 /*return*/, allAlerts.filter(function (alert) { return alert.kpiAlert.content.dashboard === dashboardUri; })];
                }
            });
        }); };
        this.getConvertedAlerts = function (alerts) { return __awaiter(_this, void 0, void 0, function () {
            var filterContexts, filterContextByUri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBearKpiAlertsFilterContexts(alerts)];
                    case 1:
                        filterContexts = _a.sent();
                        filterContextByUri = keyBy(filterContexts, function (filterContext) { return filterContext.filterContext.meta.uri; });
                        return [2 /*return*/, alerts.map(function (alert) {
                                var alertFilterContext = filterContextByUri[alert.kpiAlert.content.filterContext];
                                return toSdkModel.convertAlert(alert, alertFilterContext);
                            })];
                }
            });
        }); };
        this.getBearKpiAlertsFilterContexts = function (kpiAlerts) { return __awaiter(_this, void 0, void 0, function () {
            var filterContextUris;
            var _this = this;
            return __generator(this, function (_a) {
                filterContextUris = kpiAlerts
                    .map(function (alert) { return alert.kpiAlert.content.filterContext; })
                    .filter(function (a) { return !!a; });
                return [2 /*return*/, this.authCall(function (sdk) {
                        return sdk.md.getObjects(_this.workspace, filterContextUris);
                    })];
            });
        }); };
        // Metadata
        this.updateBearMetadataObject = function (ref, bearMetadataObject) { return __awaiter(_this, void 0, void 0, function () {
            var uri, metadataObjectId;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(ref, this.workspace, this.authCall)];
                    case 1:
                        uri = _a.sent();
                        metadataObjectId = getObjectIdFromUri(uri);
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.updateObject(_this.workspace, metadataObjectId, bearMetadataObject);
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.deleteBearMetadataObject = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(ref, this.workspace, this.authCall)];
                    case 1:
                        uri = _a.sent();
                        return [2 /*return*/, this.authCall(function (sdk) { return sdk.md.deleteObject(uri); })];
                }
            });
        }); };
        this.getBearVisualizationClasses = function () { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authCall(function (sdk) {
                        return sdk.md.getObjectsByQuery(_this.workspace, {
                            category: "visualizationClass",
                        });
                    })];
            });
        }); };
        this.getBearDashboardDependencies = function (uri, types) { return __awaiter(_this, void 0, void 0, function () {
            var dependenciesObjectLinks, dependenciesUris;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (sdk) {
                            return sdk.md.getObjectUsing(_this.workspace, uri, {
                                types: types,
                                nearest: false,
                            });
                        })];
                    case 1:
                        dependenciesObjectLinks = _a.sent();
                        dependenciesUris = dependenciesObjectLinks.map(function (objectLink) { return objectLink.link; });
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.getObjects(_this.workspace, dependenciesUris);
                            })];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        this.getBearDashboardReferences = function (uri, types) { return __awaiter(_this, void 0, void 0, function () {
            var objectTypes;
            return __generator(this, function (_a) {
                objectTypes = compact(types.map(mapDashboardReferenceTypes));
                if (isEmpty(objectTypes)) {
                    return [2 /*return*/, {
                            dependencies: [],
                            visClassMapping: {},
                        }];
                }
                if (includes(types, "insight")) {
                    return [2 /*return*/, Promise.all([
                            this.getBearDashboardDependencies(uri, objectTypes),
                            this.insights.getVisualizationClassesByVisualizationClassUri({ includeDeprecated: true }),
                        ]).then(function (_a) {
                            var dependencies = _a[0], visClassMapping = _a[1];
                            return {
                                dependencies: dependencies,
                                visClassMapping: visClassMapping,
                            };
                        })];
                }
                return [2 /*return*/, this.getBearDashboardDependencies(uri, objectTypes).then(function (dependencies) {
                        return {
                            dependencies: dependencies,
                            visClassMapping: {},
                        };
                    })];
            });
        }); };
        this.getDashboardReferencedObjects = function (dashboard, types) {
            if (types === void 0) { types = ["insight", "dashboardPlugin"]; }
            return __awaiter(_this, void 0, void 0, function () {
                var typesToGet, _a, dependencies, visClassMapping, insights, plugins;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            typesToGet = __spreadArrays(types);
                            // if there are no plugins linked to the dashboard then do not ask for related plugin info
                            if (isEmpty(dashboard.plugins)) {
                                remove(typesToGet, function (item) { return item === "dashboardPlugin"; });
                            }
                            // bail out if there is nothing to get (e.g. user asked for referenced plugins but the dashboard has none)
                            if (isEmpty(typesToGet)) {
                                return [2 /*return*/, {
                                        plugins: [],
                                        insights: [],
                                    }];
                            }
                            return [4 /*yield*/, this.getBearDashboardReferences(dashboard.uri, typesToGet)];
                        case 1:
                            _a = _b.sent(), dependencies = _a.dependencies, visClassMapping = _a.visClassMapping;
                            insights = [];
                            plugins = [];
                            dependencies.forEach(function (dep) {
                                if (isVisualization(dep)) {
                                    insights.push(convertVisualization(dep, visClassMapping[dep.visualizationObject.content.visualizationClass.uri]));
                                }
                                else if (isDashboardPlugin(dep)) {
                                    plugins.push(toSdkModel.convertDashboardPlugin(dep));
                                }
                            });
                            return [2 /*return*/, {
                                    insights: insights,
                                    plugins: plugins,
                                }];
                    }
                });
            });
        };
        this.createDashboardPlugin = function (plugin) { return __awaiter(_this, void 0, void 0, function () {
            var convertedPlugin, savedPlugin, pluginObjectId_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        convertedPlugin = fromSdkModel.convertDashboardPlugin(plugin);
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.createObject(_this.workspace, convertedPlugin);
                            })];
                    case 1:
                        savedPlugin = _a.sent();
                        if (!(plugin.identifier !== undefined)) return [3 /*break*/, 3];
                        pluginObjectId_1 = getObjectIdFromUri(savedPlugin.dashboardPlugin.meta.uri);
                        savedPlugin.dashboardPlugin.meta.identifier = plugin.identifier;
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.updateObject(_this.workspace, pluginObjectId_1, savedPlugin);
                            })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, toSdkModel.convertDashboardPlugin(savedPlugin)];
                }
            });
        }); };
        this.deleteDashboardPlugin = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(ref, this.workspace, this.authCall)];
                    case 1:
                        uri = _a.sent();
                        return [2 /*return*/, this.authCall(function (sdk) {
                                return sdk.md.deleteObject(uri);
                            })];
                }
            });
        }); };
        this.getDashboardPlugin = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(ref, this.workspace, this.authCall)];
                    case 1:
                        uri = _a.sent();
                        return [2 /*return*/, this.authCall(function (sdk) {
                                return sdk.md.getObjectDetails(uri);
                            }).then(toSdkModel.convertDashboardPlugin)];
                }
            });
        }); };
        this.getDashboardPlugins = function () { return __awaiter(_this, void 0, void 0, function () {
            var pluginLinks, pluginUris;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (sdk) { return sdk.md.getDashboardPlugins(_this.workspace); })];
                    case 1:
                        pluginLinks = _a.sent();
                        pluginUris = pluginLinks.map(function (link) { return link.link; });
                        return [2 /*return*/, this.authCall(function (sdk) {
                                return sdk.md.getObjects(_this.workspace, pluginUris);
                            }).then(function (plugins) {
                                return plugins.map(toSdkModel.convertDashboardPlugin);
                            })];
                }
            });
        }); };
        this.ensureDashboardPluginLinksHaveUris = function (pluginLinks) { return __awaiter(_this, void 0, void 0, function () {
            var resolvedUris;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefsToUris(pluginLinks.map(function (p) { return p.plugin; }), this.workspace, this.authCall, true)];
                    case 1:
                        resolvedUris = _a.sent();
                        return [2 /*return*/, pluginLinks.map(function (p, idx) {
                                return __assign(__assign({}, p), { plugin: uriRef(resolvedUris[idx]) });
                            })];
                }
            });
        }); };
        this.insights = new BearWorkspaceInsights(this.authCall, this.workspace);
    }
    BearWorkspaceDashboards.prototype.getDashboardWithReferences = function (ref, filterContextRef, options, types) {
        if (options === void 0) { options = {}; }
        if (types === void 0) { types = ["insight"]; }
        return __awaiter(this, void 0, void 0, function () {
            var dashboard, references;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDashboard(ref, filterContextRef, options)];
                    case 1:
                        dashboard = _a.sent();
                        return [4 /*yield*/, this.getDashboardReferencedObjects(dashboard, types)];
                    case 2:
                        references = _a.sent();
                        return [2 /*return*/, {
                                dashboard: dashboard,
                                references: references,
                            }];
                }
            });
        });
    };
    return BearWorkspaceDashboards;
}());
export { BearWorkspaceDashboards };
function mapDashboardReferenceTypes(type) {
    var mapping = {
        insight: "visualizationObject",
        dashboardPlugin: "dashboardPlugin",
    };
    return mapping[type];
}
//# sourceMappingURL=index.js.map
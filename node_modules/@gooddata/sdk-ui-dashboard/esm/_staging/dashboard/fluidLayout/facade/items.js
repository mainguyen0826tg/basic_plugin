import flatMap from "lodash/flatMap";
import { DashboardLayoutItemFacade } from "./item";
import invariant from "ts-invariant";
import { DASHBOARD_LAYOUT_GRID_COLUMNS_COUNT } from "../config";
/**
 * @alpha
 */
var DashboardLayoutItemsFacade = /** @class */ (function () {
    function DashboardLayoutItemsFacade(itemFacades) {
        this.itemFacades = itemFacades;
    }
    DashboardLayoutItemsFacade.for = function (sectionFacade, items) {
        var itemFacades = items.map(function (column, index) {
            return DashboardLayoutItemFacade.for(sectionFacade, column, index);
        });
        return new DashboardLayoutItemsFacade(itemFacades);
    };
    DashboardLayoutItemsFacade.prototype.raw = function () {
        return this.itemFacades.map(function (item) { return item.raw(); });
    };
    DashboardLayoutItemsFacade.prototype.item = function (index) {
        return this.itemFacades[index];
    };
    DashboardLayoutItemsFacade.prototype.all = function () {
        return this.itemFacades;
    };
    DashboardLayoutItemsFacade.prototype.asGridRows = function (screen) {
        var renderedRows = [];
        var currentRowWidth = 0;
        var currentRow = [];
        this.itemFacades.forEach(function (itemFacade) {
            var itemSize = itemFacade.sizeForScreen(screen);
            invariant(itemSize, "Item size for " + screen + " screen is not defined.");
            if (currentRowWidth + itemSize.gridWidth > DASHBOARD_LAYOUT_GRID_COLUMNS_COUNT) {
                renderedRows.push(currentRow);
                currentRow = [];
                currentRowWidth = 0;
            }
            currentRow.push(itemFacade);
            currentRowWidth = currentRowWidth + itemSize.gridWidth;
        });
        if (currentRow.length > 0) {
            renderedRows.push(currentRow);
        }
        return renderedRows;
    };
    DashboardLayoutItemsFacade.prototype.flatMap = function (callback) {
        return flatMap(this.itemFacades, callback);
    };
    DashboardLayoutItemsFacade.prototype.count = function () {
        return this.itemFacades.length;
    };
    DashboardLayoutItemsFacade.prototype.map = function (callback) {
        return this.itemFacades.map(callback);
    };
    DashboardLayoutItemsFacade.prototype.reduce = function (callback, initialValue) {
        return this.itemFacades.reduce(callback, initialValue);
    };
    DashboardLayoutItemsFacade.prototype.every = function (pred) {
        return this.itemFacades.every(pred);
    };
    DashboardLayoutItemsFacade.prototype.some = function (pred) {
        return this.itemFacades.some(pred);
    };
    DashboardLayoutItemsFacade.prototype.find = function (pred) {
        return this.itemFacades.find(pred);
    };
    DashboardLayoutItemsFacade.prototype.filter = function (pred) {
        return this.itemFacades.filter(pred);
    };
    return DashboardLayoutItemsFacade;
}());
export { DashboardLayoutItemsFacade };
//# sourceMappingURL=items.js.map
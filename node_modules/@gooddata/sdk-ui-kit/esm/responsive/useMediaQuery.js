// (C) 2007-2021 GoodData Corporation
import { useResponsiveContext } from "./ResponsiveContext";
import { useMediaQuery as useReactResponsiveMediaQuery } from "react-responsive";
import invariant from "ts-invariant";
var SCREEN = "only screen";
var getQueryMatching = function (range) {
    return SCREEN + " and (min-width:" + range.lower + "px) and (max-width:" + range.upper + "px)";
};
var getQueryMatchingOrGreater = function (range) { return SCREEN + " and (min-width:" + range.lower + "px)"; };
/**
 * Hook, testing whether screen width matches provided media query.
 *
 * @internal
 * @param mediaQueryName - media query name to test
 * @returns boolean
 */
export var useMediaQuery = function (mediaQueryName) {
    var breakpoints = useResponsiveContext().breakpoints;
    var smallRange = {
        lower: 0,
        upper: breakpoints.sm,
    };
    var mediumRange = {
        lower: breakpoints.sm + 1,
        upper: breakpoints.md,
    };
    var largeRange = {
        lower: breakpoints.md + 1,
        upper: breakpoints.lg,
    };
    var xlargeRange = {
        lower: breakpoints.lg + 1,
        upper: breakpoints.xl,
    };
    var xxlargeRange = {
        lower: breakpoints.xl + 1,
        upper: breakpoints.xxl,
    };
    var desktopRange = {
        lower: xlargeRange.lower,
        upper: xxlargeRange.upper,
    };
    var smallerThanDesktop = {
        lower: 0,
        upper: largeRange.upper,
    };
    var mobileRange = smallRange;
    var notMobileRange = {
        lower: mediumRange.lower,
        upper: xxlargeRange.upper,
    };
    var mediaQueries = {
        "<sm": getQueryMatching(smallRange),
        ">=sm": getQueryMatchingOrGreater(smallRange),
        sm: getQueryMatching(smallRange),
        ">=md": getQueryMatchingOrGreater(mediumRange),
        md: getQueryMatching(mediumRange),
        ">=lg": getQueryMatchingOrGreater(largeRange),
        lg: getQueryMatching(largeRange),
        ">=xl": getQueryMatchingOrGreater(xlargeRange),
        xl: getQueryMatching(xlargeRange),
        ">=xxl": getQueryMatchingOrGreater(xxlargeRange),
        xxl: getQueryMatching(xxlargeRange),
        mobileDevice: getQueryMatching(mobileRange),
        "!mobileDevice": getQueryMatching(notMobileRange),
        desktop: getQueryMatching(desktopRange),
        "<desktop": getQueryMatching(smallerThanDesktop),
    };
    var mediaQuery = mediaQueries[mediaQueryName];
    invariant(mediaQuery, "Please provide valid media query name! Actual: " + mediaQuery);
    return useReactResponsiveMediaQuery({ query: mediaQuery });
};
//# sourceMappingURL=useMediaQuery.js.map
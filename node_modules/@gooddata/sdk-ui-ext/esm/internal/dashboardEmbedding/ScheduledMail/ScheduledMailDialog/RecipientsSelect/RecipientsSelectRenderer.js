import { __assign, __extends } from "tslib";
// (C) 2019-2020 GoodData Corporation
/* eslint-disable import/named,import/namespace */
import React from "react";
import { injectIntl, FormattedHTMLMessage } from "react-intl";
import CreatableSelect from "react-select/creatable";
import { components as ReactSelectComponents, } from "react-select";
import debounce from "lodash/debounce";
import isEmpty from "lodash/isEmpty";
import isEqual from "lodash/isEqual";
import includes from "lodash/includes";
import { Bubble, BubbleHoverTrigger, Message, LoadingMask } from "@gooddata/sdk-ui-kit";
import { isEmail } from "../../utils/validate";
import { isScheduleEmailExistingRecipient, isScheduleEmailExternalRecipient, } from "../../interfaces";
import { getScheduledEmailRecipientDisplayName, getScheduledEmailRecipientEmail, getScheduledEmailRecipientUniqueIdentifier, } from "../../utils/scheduledMailRecipients";
var MAXIMUM_RECIPIENTS_RECEIVE = 20;
var DELAY_TIME = 500;
var PADDING = 16;
var REMOVE_ICON_WIDTH = 21;
var LOADING_MENU_HEIGHT = 50;
var CREATE_OPTION = "create-option";
var SELECT_OPTION = "select-option";
var Menu = ReactSelectComponents.Menu, Input = ReactSelectComponents.Input;
var RecipientsSelectRendererUI = /** @class */ (function (_super) {
    __extends(RecipientsSelectRendererUI, _super);
    function RecipientsSelectRendererUI(props) {
        var _this = _super.call(this, props) || this;
        _this.recipientRef = React.createRef();
        _this.renderEmptyContainer = function () {
            return null;
        };
        _this.renderNoOptionsContainer = function (menuProps) {
            var inputValue = menuProps.selectProps.inputValue;
            if (inputValue) {
                return (React.createElement(Message, { className: "gd-recipient-existed s-gd-recipient-existed", type: "warning", contrast: true },
                    React.createElement(FormattedHTMLMessage, { id: "options.menu.schedule.email.recipient.warning.existed" })));
            }
            return _this.renderEmptyContainer();
        };
        _this.renderMenuOptions = function (menuProps) {
            var _a = _this.props, isLoading = _a.isLoading, currentUser = _a.currentUser;
            var options = menuProps.options, getValue = menuProps.getValue, inputValue = menuProps.selectProps.inputValue;
            var selectedValues = getValue() || [];
            var selectedItemsCount = selectedValues.length;
            var areAllValuesSelected = options.length &&
                options.every(function (option) {
                    return (isScheduleEmailExistingRecipient(option) && isEqual(option, currentUser)) ||
                        _this.isRecipientAdded(selectedValues, getScheduledEmailRecipientEmail(option));
                });
            if (isLoading) {
                return _this.renderLoadingIcon(menuProps);
            }
            if (!inputValue && (selectedItemsCount >= MAXIMUM_RECIPIENTS_RECEIVE || areAllValuesSelected)) {
                return _this.renderEmptyContainer();
            }
            return _this.renderMenuOptionsContainer(menuProps);
        };
        _this.renderMenuOptionsContainer = function (menuProps) {
            return (React.createElement(Menu, __assign({ className: "s-gd-recipients-menu-container" }, menuProps), menuProps.children));
        };
        _this.renderLoadingIcon = function (menuProps) {
            return (React.createElement(Menu, __assign({ className: "s-gd-recipients-menu-container" }, menuProps),
                React.createElement(LoadingMask, { height: LOADING_MENU_HEIGHT })));
        };
        _this.renderOwnerValueContainer = function (value) {
            var isMulti = _this.props.isMulti;
            var selectTypeClassName = isMulti ? "multiple-value" : "single-value";
            return (React.createElement("div", { style: _this.getStyle(), className: "gd-recipient-value-item s-gd-recipient-value-item " + selectTypeClassName + " gd-owner-user" },
                React.createElement("div", { className: "gd-recipient-label" }, value)));
        };
        _this.renderMultiValueItemContainer = function (label, removeIcon) {
            return (React.createElement("div", { className: "gd-recipient-value-item s-gd-recipient-value-item multiple-value" },
                React.createElement("div", { style: _this.getStyle(), className: "gd-recipient-label" }, label),
                React.createElement("div", { className: "s-gd-recipient-remove" }, removeIcon)));
        };
        _this.renderErrorValueContainer = function (label, removeIcon) {
            return (React.createElement("div", { className: "gd-recipient-value-item s-gd-recipient-value-item multiple-value not-valid" },
                React.createElement(BubbleHoverTrigger, { className: "gd-recipient-not-valid-bubble", showDelay: 0, hideDelay: 0 },
                    React.createElement("div", { className: "recipient-item-not-valid" },
                        React.createElement("div", { style: _this.getStyle(), className: "gd-recipient-label" }, label),
                        React.createElement("div", { className: "s-gd-recipient-remove" }, removeIcon)),
                    React.createElement(Bubble, { className: "bubble-negative s-gd-recipient-not-valid-email", alignPoints: [{ align: "cr cl" }] },
                        React.createElement(FormattedHTMLMessage, { id: "options.menu.schedule.email.recipient.invalid" })))));
        };
        _this.renderSingleValueContainer = function (singleValueProps) {
            var data = singleValueProps.data;
            var displayName = getScheduledEmailRecipientDisplayName(data);
            return _this.renderOwnerValueContainer(displayName);
        };
        _this.renderMultiValueContainer = function (multiValueProps) {
            var data = multiValueProps.data, children = multiValueProps.children;
            // MultiValueRemove component from react-select
            var removeIcon = children[1];
            if (isScheduleEmailExistingRecipient(data) && isEqual(data, _this.props.currentUser)) {
                return _this.renderOwnerValueContainer(getScheduledEmailRecipientDisplayName(data));
            }
            var email = getScheduledEmailRecipientEmail(data);
            if (!isEmail(email)) {
                return _this.renderErrorValueContainer(email, removeIcon);
            }
            return _this.renderMultiValueItemContainer(email, removeIcon);
        };
        _this.renderOptionLabel = function (recipient) {
            var email = getScheduledEmailRecipientEmail(recipient);
            var isExternalUser = isScheduleEmailExternalRecipient(recipient);
            var isExternalUserMatchingExistingEmail = isExternalUser &&
                _this.props.options.some(function (option) { return getScheduledEmailRecipientEmail(option) === email; });
            // When we are typing in react-select, it creates a new option on the background (check this.getNewOptionData)
            // To avoid displaying duplicities in the options, do not render external user option,
            // when it matches existing user email.
            if (isExternalUserMatchingExistingEmail) {
                return null;
            }
            // Render warning message, when it's an external user
            if (isExternalUser && isEmail(email)) {
                return (
                // This class is necessary for testcafes
                React.createElement("div", { className: "s-gd-recipient-option-item s-recipient-not-in-workspace-warning" },
                    React.createElement(Message, { type: "warning", contrast: true },
                        React.createElement(FormattedHTMLMessage, { id: "options.menu.schedule.email.recipient.warning.belong.workspace" }))));
            }
            return (React.createElement("div", { className: "gd-recipient-option-item s-gd-recipient-option-item" },
                React.createElement("span", { className: "gd-recipient-option-label-item s-gd-recipient-option-label-item" }, email),
                _this.renderRecipientValue(recipient)));
        };
        _this.getNewOptionData = function (inputValue) { return ({
            email: inputValue,
        }); };
        _this.renderRecipientValue = function (recipient) {
            var isExternalUser = isScheduleEmailExternalRecipient(recipient);
            var email = getScheduledEmailRecipientEmail(recipient);
            if (!isExternalUser && isEmail(email)) {
                return (React.createElement("span", { className: "gd-recipient-option-value-item s-gd-recipient-option-value-item" }, getScheduledEmailRecipientDisplayName(recipient)));
            }
            return _this.renderEmptyContainer();
        };
        _this.renderInputContainer = function (inputProps) {
            var isMulti = _this.props.isMulti;
            if (!isMulti) {
                return _this.renderEmptyContainer();
            }
            return (React.createElement("div", { className: "gd-recipient-input s-gd-recipient-input" },
                React.createElement(Input, __assign({}, inputProps))));
        };
        _this.handleOnChange = function (selectedValues, actionTypes) {
            var value = _this.props.value;
            var action = actionTypes.action;
            if (value.length >= MAXIMUM_RECIPIENTS_RECEIVE &&
                (action === CREATE_OPTION || action === SELECT_OPTION)) {
                _this.props.onChange(value);
                return;
            }
            if (selectedValues === null) {
                _this.props.onChange([value[0]]);
                return;
            }
            _this.props.onChange(selectedValues);
        };
        _this.loadUserListItems = function (searchString) {
            var _a = _this.props, options = _a.options, value = _a.value, canListUsersInProject = _a.canListUsersInProject, onLoad = _a.onLoad;
            var matchedUserList = _this.getMatchedRecipientEmails(options, searchString);
            var matchedUserListCount = matchedUserList.length;
            var isRecipientAdded = _this.isRecipientAdded(value, searchString);
            if (!canListUsersInProject || isRecipientAdded || matchedUserListCount > 0) {
                return;
            }
            _this.setState({ isLoading: true });
            onLoad({ search: searchString });
        };
        _this.onMenuOpen = function () {
            var _a = _this.props, onLoad = _a.onLoad, canListUsersInProject = _a.canListUsersInProject, options = _a.options;
            var userListCount = options.length;
            if (!userListCount && canListUsersInProject) {
                onLoad();
            }
        };
        _this.onSearch = function (searchString) {
            _this.loadUserListItems(searchString);
        };
        _this.isRecipientAdded = function (value, searchKey) {
            return value.some(function (recipient) {
                return isEqual(getScheduledEmailRecipientUniqueIdentifier(recipient), searchKey);
            });
        };
        _this.onSearch = debounce(_this.onSearch, DELAY_TIME);
        return _this;
    }
    RecipientsSelectRendererUI.prototype.componentDidMount = function () {
        var current = this.recipientRef.current;
        if (!current) {
            return;
        }
        // update owner component style after recipient rendered
        var ownerContainer = current.querySelector(".gd-owner-user");
        var maxWidth = this.getStyle().maxWidth;
        if (ownerContainer) {
            ownerContainer.setAttribute("style", "max-width: " + maxWidth + "px");
        }
    };
    RecipientsSelectRendererUI.prototype.render = function () {
        var _a = this.props, intl = _a.intl, isMulti = _a.isMulti, options = _a.options, value = _a.value;
        var creatableSelectComponent = __assign(__assign({}, ReactSelectComponents), { IndicatorsContainer: this.renderEmptyContainer, Input: this.renderInputContainer, MultiValueContainer: this.renderMultiValueContainer, Menu: this.renderMenuOptions, Placeholder: this.renderEmptyContainer, SingleValue: this.renderSingleValueContainer, NoOptionsMessage: this.renderNoOptionsContainer });
        return (React.createElement("div", { className: "gd-input-component gd-recipients-field s-gd-schedule-email-dialog-recipients" },
            React.createElement("label", { className: "gd-label" }, intl.formatMessage({ id: "dialogs.schedule.email.to.label" })),
            React.createElement("div", { ref: this.recipientRef, className: "gd-input s-gd-recipients-value" },
                React.createElement(CreatableSelect, { cacheOptions: true, className: "gd-recipients-container", classNamePrefix: "gd-recipients", components: creatableSelectComponent, getNewOptionData: this.getNewOptionData, formatOptionLabel: this.renderOptionLabel, isClearable: false, isDisabled: !isMulti, isMulti: isMulti, onChange: this.handleOnChange, onInputChange: this.onSearch, onMenuOpen: this.onMenuOpen, options: options, value: value, getOptionValue: getScheduledEmailRecipientUniqueIdentifier, getOptionLabel: getScheduledEmailRecipientEmail }))));
    };
    RecipientsSelectRendererUI.prototype.getStyle = function () {
        var current = this.recipientRef.current;
        var width = (!isEmpty(current) && current.getBoundingClientRect()).width;
        // label item width equal value item container - padding - remove icon
        var recipientLabelWidth = width - PADDING - REMOVE_ICON_WIDTH;
        return {
            maxWidth: width ? recipientLabelWidth : "100%",
        };
    };
    RecipientsSelectRendererUI.prototype.getMatchedRecipientEmails = function (options, searchKey) {
        return searchKey
            ? options.filter(function (recipient) {
                return includes(getScheduledEmailRecipientEmail(recipient), searchKey);
            })
            : [];
    };
    return RecipientsSelectRendererUI;
}(React.PureComponent));
export var RecipientsSelectRenderer = injectIntl(RecipientsSelectRendererUI);
//# sourceMappingURL=RecipientsSelectRenderer.js.map
import { __assign, __extends } from "tslib";
// (C) 2019 GoodData Corporation
import { BucketNames, isDrillIntersectionAttributeItem, VisualizationTypes, } from "@gooddata/sdk-ui";
import React from "react";
import { render } from "react-dom";
import { ATTRIBUTE, BUCKETS, DATE } from "../../../constants/bucket";
import { HEATMAP_SUPPORTED_PROPERTIES } from "../../../constants/supportedProperties";
import { DEFAULT_HEATMAP_UICONFIG } from "../../../constants/uiConfig";
import { configureOverTimeComparison, configurePercent } from "../../../utils/bucketConfig";
import { getAllAttributeItemsWithPreference, getMeasureItems, getPreferredBucketItems, limitNumberOfMeasuresInBuckets, removeAllArithmeticMeasuresFromDerived, removeAllDerivedMeasures, sanitizeFilters, } from "../../../utils/bucketHelper";
import { getReferencePointWithSupportedProperties } from "../../../utils/propertiesHelper";
import { removeSort } from "../../../utils/sort";
import { setHeatmapUiConfig } from "../../../utils/uiConfigHelpers/heatmapUiConfigHelper";
import HeatMapConfigurationPanel from "../../configurationPanels/HeatMapConfigurationPanel";
import { PluggableBaseChart } from "../baseChart/PluggableBaseChart";
import cloneDeep from "lodash/cloneDeep";
import includes from "lodash/includes";
import set from "lodash/set";
import tail from "lodash/tail";
import { drillDownFromAttributeLocalId } from "../../../utils/ImplicitDrillDownHelper";
import { addIntersectionFiltersToInsight, modifyBucketsAttributesForDrillDown } from "../drillDownUtil";
var PluggableHeatmap = /** @class */ (function (_super) {
    __extends(PluggableHeatmap, _super);
    function PluggableHeatmap(props) {
        var _this = _super.call(this, props) || this;
        _this.type = VisualizationTypes.HEATMAP;
        _this.supportedPropertiesList = HEATMAP_SUPPORTED_PROPERTIES;
        _this.initializeProperties(props.visualizationProperties);
        return _this;
    }
    PluggableHeatmap.prototype.getExtendedReferencePoint = function (referencePoint) {
        var clonedReferencePoint = cloneDeep(referencePoint);
        var newReferencePoint = __assign(__assign({}, clonedReferencePoint), { uiConfig: cloneDeep(DEFAULT_HEATMAP_UICONFIG) });
        newReferencePoint = removeAllArithmeticMeasuresFromDerived(newReferencePoint);
        newReferencePoint = removeAllDerivedMeasures(newReferencePoint);
        var buckets = limitNumberOfMeasuresInBuckets(clonedReferencePoint.buckets, 1);
        var allAttributes = getAllAttributeItemsWithPreference(buckets, [
            BucketNames.VIEW,
            BucketNames.TREND,
            BucketNames.LOCATION,
            BucketNames.STACK,
            BucketNames.SEGMENT,
        ]);
        var stackItems = getPreferredBucketItems(buckets, [BucketNames.STACK, BucketNames.SEGMENT], [ATTRIBUTE, DATE]);
        var measures = getMeasureItems(buckets);
        var rowItems = allAttributes.filter(function (attribute) {
            return !includes(stackItems, attribute);
        });
        var columnItems = allAttributes.length > 1 ? tail(allAttributes) : stackItems;
        set(newReferencePoint, BUCKETS, [
            {
                localIdentifier: BucketNames.MEASURES,
                items: measures,
            },
            {
                localIdentifier: BucketNames.VIEW,
                items: rowItems.slice(0, 1),
            },
            {
                localIdentifier: BucketNames.STACK,
                items: columnItems.slice(0, 1),
            },
        ]);
        newReferencePoint = setHeatmapUiConfig(newReferencePoint, this.intl, this.type);
        newReferencePoint = configurePercent(newReferencePoint, true);
        newReferencePoint = configureOverTimeComparison(newReferencePoint, !!this.featureFlags["enableWeekFilters"]);
        newReferencePoint = getReferencePointWithSupportedProperties(newReferencePoint, this.supportedPropertiesList);
        newReferencePoint = removeSort(newReferencePoint);
        return Promise.resolve(sanitizeFilters(newReferencePoint));
    };
    PluggableHeatmap.prototype.addFilters = function (source, drillConfig, event) {
        var clicked = drillDownFromAttributeLocalId(drillConfig);
        var cutIntersection = (event.drillContext.intersection || []).filter(function (i) {
            return isDrillIntersectionAttributeItem(i.header) &&
                i.header.attributeHeader.localIdentifier === clicked;
        });
        return addIntersectionFiltersToInsight(source, cutIntersection);
    };
    PluggableHeatmap.prototype.getInsightWithDrillDownApplied = function (source, drillDownContext) {
        var withFilters = this.addFilters(source, drillDownContext.drillDefinition, drillDownContext.event);
        return modifyBucketsAttributesForDrillDown(withFilters, drillDownContext.drillDefinition);
    };
    PluggableHeatmap.prototype.renderConfigurationPanel = function (insight) {
        if (document.querySelector(this.configPanelElement)) {
            render(React.createElement(HeatMapConfigurationPanel, { locale: this.locale, references: this.references, properties: this.visualizationProperties, propertiesMeta: this.propertiesMeta, insight: insight, colors: this.colors, pushData: this.handlePushData, type: this.type, isError: this.getIsError(), isLoading: this.isLoading, featureFlags: this.featureFlags }), document.querySelector(this.configPanelElement));
        }
        return null;
    };
    return PluggableHeatmap;
}(PluggableBaseChart));
export { PluggableHeatmap };
//# sourceMappingURL=PluggableHeatmap.js.map
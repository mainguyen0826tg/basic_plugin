import { IAnalyticalBackend, IPreparedExecution, IInsightWidget, IFilterContext, ITempFilterContext, FilterContextItem } from "@gooddata/sdk-backend-spi";
import { GoodDataSdkError, UseCancelablePromiseCallbacks, OnError, UseCancelablePromiseState } from "@gooddata/sdk-ui";
import { IInsight } from "@gooddata/sdk-model";
interface IUseInsightExecutionConfig extends UseCancelablePromiseCallbacks<IPreparedExecution | undefined, GoodDataSdkError> {
    insightWidget?: IInsightWidget;
    insight?: IInsight;
    filters?: FilterContextItem[];
    filterContext?: IFilterContext | ITempFilterContext;
    backend?: IAnalyticalBackend;
    workspace?: string;
    onError?: OnError;
}
/**
 * Hook allowing to get execution for particular insight widget.
 * @param config - configuration of the hook
 * @internal
 */
export declare function useDashboardInsightExecution(config: IUseInsightExecutionConfig): UseCancelablePromiseState<IPreparedExecution, GoodDataSdkError>;
export {};
//# sourceMappingURL=useDashboardInsightExecution.d.ts.map
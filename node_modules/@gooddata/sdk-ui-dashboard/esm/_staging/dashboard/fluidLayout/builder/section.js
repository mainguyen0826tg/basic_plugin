import { __assign, __read, __spread } from "tslib";
// (C) 2019-2021 GoodData Corporation
import invariant from "ts-invariant";
import identity from "lodash/identity";
import isArray from "lodash/isArray";
import difference from "lodash/difference";
import { isDashboardLayoutSection, } from "@gooddata/sdk-backend-spi";
import { resolveValueOrUpdateCallback } from "@gooddata/sdk-backend-base";
import { DashboardLayoutItemBuilder } from "./item";
/**
 * @alpha
 */
var DashboardLayoutSectionBuilder = /** @class */ (function () {
    function DashboardLayoutSectionBuilder(sectionIndex, getSectionFacade, setLayout) {
        var _this = this;
        this.sectionIndex = sectionIndex;
        this.getSectionFacade = getSectionFacade;
        this.setLayout = setLayout;
        this.removeEmptyItems = function () {
            return _this.removeItems(function (items) { return items.filter(function (item) { return item.isEmpty(); }); });
        };
    }
    /**
     * Creates an instance of DashboardLayoutSectionBuilder for particular layout item.
     */
    DashboardLayoutSectionBuilder.for = function (layoutBuilder, sectionIndex) {
        var _a;
        invariant(isDashboardLayoutSection((_a = layoutBuilder.facade().sections().section(sectionIndex)) === null || _a === void 0 ? void 0 : _a.raw()), "Provided data must be IDashboardLayoutSection.");
        var sectionBuilder = new DashboardLayoutSectionBuilder(sectionIndex, function () { return layoutBuilder.facade().section(sectionIndex); }, function (layout) { return layoutBuilder.setLayout(layout); });
        return sectionBuilder;
    };
    DashboardLayoutSectionBuilder.prototype.header = function (valueOrUpdateCallback) {
        return this.setSection(function (section) { return (__assign(__assign({}, section), { header: resolveValueOrUpdateCallback(valueOrUpdateCallback, section.header) })); });
    };
    DashboardLayoutSectionBuilder.prototype.createItem = function (xlSize, create, index) {
        if (create === void 0) { create = identity; }
        if (index === void 0) { index = this.facade().items().count(); }
        var emptyItem = {
            type: "IDashboardLayoutItem",
            size: {
                xl: xlSize,
            },
        };
        this.setSection(function (section) {
            var updatedItems = __spread(section.items);
            updatedItems.splice(index, 0, emptyItem);
            return __assign(__assign({}, section), { items: updatedItems });
        });
        DashboardLayoutItemBuilder.for(this, index).modify(create);
        return this;
    };
    DashboardLayoutSectionBuilder.prototype.addItem = function (item, index) {
        if (index === void 0) { index = this.facade().items().count(); }
        this.setSection(function (section) {
            var updatedItems = __spread(section.items);
            updatedItems.splice(index, 0, item);
            return __assign(__assign({}, section), { items: updatedItems });
        });
        return this;
    };
    DashboardLayoutSectionBuilder.prototype.modifyItem = function (index, modify) {
        var itemFacade = this.facade().items().item(index);
        invariant(itemFacade, "Cannot modify the item - item at index " + index + " does not exist.");
        DashboardLayoutItemBuilder.for(this, index).modify(modify);
        return this;
    };
    DashboardLayoutSectionBuilder.prototype.removeItem = function (index) {
        var itemFacade = this.facade().items().item(index);
        invariant(itemFacade, "Cannot remove the item - item at index " + index + " does not exist.");
        return this.setSection(function (section) {
            var updatedItems = __spread(section.items);
            updatedItems.splice(index, 1);
            return __assign(__assign({}, section), { items: updatedItems });
        });
    };
    DashboardLayoutSectionBuilder.prototype.moveItem = function (fromIndex, toIndex) {
        var itemFacade = this.facade().item(fromIndex);
        invariant(itemFacade, "Cannot move the item - item at index " + fromIndex + " does not exist.");
        var maxToIndex = Math.min(toIndex, this.facade().items().count() - 1);
        this.removeItem(fromIndex);
        this.createItem(itemFacade.sizeForScreen("xl"), function (c) { return c.setItem(itemFacade.raw()); }, maxToIndex);
        return this;
    };
    DashboardLayoutSectionBuilder.prototype.removeItems = function (selector) {
        if (selector === void 0) { selector = function (items) { return items.all(); }; }
        var itemsToRemove = selector(this.facade().items());
        if (isArray(itemsToRemove)) {
            this.setSection(function (section) {
                var updatedItems = difference(section.items, itemsToRemove.map(function (r) { return r.raw(); }));
                return __assign(__assign({}, section), { items: updatedItems });
            });
        }
        else if (itemsToRemove) {
            this.removeItem(itemsToRemove.index());
        }
        return this;
    };
    DashboardLayoutSectionBuilder.prototype.modifyItems = function (modify, selector) {
        var _this = this;
        if (selector === void 0) { selector = function (items) { return items.all(); }; }
        var itemsToModify = selector(this.facade().items());
        if (isArray(itemsToModify)) {
            itemsToModify.forEach(function (item) {
                _this.modifyItem(item.index(), modify);
            });
        }
        else if (itemsToModify) {
            this.modifyItem(itemsToModify.index(), modify);
        }
        return this;
    };
    DashboardLayoutSectionBuilder.prototype.setSection = function (valueOrUpdateCallback) {
        var _this = this;
        this.setLayout(function (layout) {
            var updatedRows = __spread(layout.sections);
            updatedRows[_this.sectionIndex] = resolveValueOrUpdateCallback(valueOrUpdateCallback, _this.build());
            return __assign(__assign({}, layout), { sections: updatedRows });
        });
        return this;
    };
    DashboardLayoutSectionBuilder.prototype.facade = function () {
        return this.getSectionFacade();
    };
    DashboardLayoutSectionBuilder.prototype.modify = function (modifications) {
        modifications(this, this.facade());
        return this;
    };
    DashboardLayoutSectionBuilder.prototype.build = function () {
        return this.facade().raw();
    };
    return DashboardLayoutSectionBuilder;
}());
export { DashboardLayoutSectionBuilder };
//# sourceMappingURL=section.js.map
import { __awaiter, __generator } from "tslib";
// (C) 2020-2021 GoodData Corporation
import { isDashboardPluginsItem, isVisualizationObjectsItem, JsonApiAnalyticalDashboardInTypeEnum, JsonApiDashboardPluginInTypeEnum, JsonApiFilterContextInTypeEnum, jsonApiHeaders, MetadataUtilities, ValidateRelationsHeader, } from "@gooddata/api-client-tiger";
import { isFilterContext, isFilterContextDefinition, isTempFilterContext, NotSupported, UnexpectedError, } from "@gooddata/sdk-backend-spi";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import isEqual from "lodash/isEqual";
import { v4 as uuidv4 } from "uuid";
import { convertAnalyticalDashboardToListItems, convertDashboard, convertFilterContextFromBackend, getFilterContextFromIncluded, convertDashboardPluginFromBackend, convertDashboardPluginWithLinksFromBackend, } from "../../../convertors/fromBackend/analyticalDashboards/AnalyticalDashboardConverter";
import { visualizationObjectsItemToInsight } from "../../../convertors/fromBackend/InsightConverter";
import { convertAnalyticalDashboard, convertDashboardPluginToBackend, convertFilterContextToBackend, } from "../../../convertors/toBackend/AnalyticalDashboardConverter";
import { objRefsToIdentifiers, objRefToIdentifier } from "../../../utils/api";
import { resolveWidgetFilters } from "./widgetFilters";
import includes from "lodash/includes";
var TigerWorkspaceDashboards = /** @class */ (function () {
    function TigerWorkspaceDashboards(authCall, workspace) {
        var _this = this;
        this.authCall = authCall;
        this.workspace = workspace;
        // Public methods
        this.getDashboards = function (options) { return __awaiter(_this, void 0, void 0, function () {
            var result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (options === null || options === void 0 ? void 0 : options.loadUserData) {
                            // eslint-disable-next-line no-console
                            console.warn("Tiger backend does not support the 'loadUserData' option of getDashboards. Ignoring.");
                        }
                        return [4 /*yield*/, this.authCall(function (client) {
                                return MetadataUtilities.getAllPagesOf(client, client.workspaceObjects.getAllEntitiesAnalyticalDashboards, { workspaceId: _this.workspace }, { headers: ValidateRelationsHeader })
                                    .then(MetadataUtilities.mergeEntitiesResults)
                                    .then(MetadataUtilities.filterValidEntities);
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, convertAnalyticalDashboardToListItems(result)];
                }
            });
        }); };
        this.getDashboard = function (ref, filterContextRef, options) { return __awaiter(_this, void 0, void 0, function () {
            var filterContextByRef, _a, id, result, included, filterContext;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (options === null || options === void 0 ? void 0 : options.loadUserData) {
                            // eslint-disable-next-line no-console
                            console.warn("Tiger backend does not support the 'loadUserData' option of getDashboard. Ignoring.");
                        }
                        if (!filterContextRef) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getFilterContext(filterContextRef)];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = undefined;
                        _b.label = 3;
                    case 3:
                        filterContextByRef = _a;
                        return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                    case 4:
                        id = _b.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.workspaceObjects.getEntityAnalyticalDashboards({
                                    workspaceId: _this.workspace,
                                    objectId: id,
                                }, {
                                    headers: jsonApiHeaders,
                                    params: {
                                        include: "filterContexts",
                                    },
                                });
                            })];
                    case 5:
                        result = _b.sent();
                        included = result.data.included || [];
                        filterContext = filterContextByRef
                            ? filterContextByRef
                            : getFilterContextFromIncluded(included);
                        return [2 /*return*/, convertDashboard(result.data, filterContext)];
                }
            });
        }); };
        this.getDashboardWithReferences = function (ref, filterContextRef, options, types) {
            if (types === void 0) { types = ["insight", "dashboardPlugin"]; }
            return __awaiter(_this, void 0, void 0, function () {
                var filterContextByRef, _a, dashboard, included, insights, plugins, filterContext;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (options === null || options === void 0 ? void 0 : options.loadUserData) {
                                // eslint-disable-next-line no-console
                                console.warn("Tiger backend does not support the 'loadUserData' option of getDashboardWithReferences. Ignoring.");
                            }
                            if (!filterContextRef) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getFilterContext(filterContextRef)];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            _a = undefined;
                            _b.label = 3;
                        case 3:
                            filterContextByRef = _a;
                            return [4 /*yield*/, this.getDashboardWithSideloads(ref, types)];
                        case 4:
                            dashboard = _b.sent();
                            included = dashboard.included || [];
                            insights = included.filter(isVisualizationObjectsItem).map(visualizationObjectsItemToInsight);
                            plugins = included
                                .filter(isDashboardPluginsItem)
                                .map(convertDashboardPluginWithLinksFromBackend);
                            filterContext = filterContextByRef
                                ? filterContextByRef
                                : getFilterContextFromIncluded(included);
                            return [2 /*return*/, {
                                    dashboard: convertDashboard(dashboard, filterContext),
                                    references: {
                                        insights: insights,
                                        plugins: plugins,
                                    },
                                }];
                    }
                });
            });
        };
        this.getDashboardReferencedObjects = function (dashboard, types) {
            if (types === void 0) { types = ["insight"]; }
            return _this.getDashboardWithSideloads(dashboard.ref, types).then(function (result) {
                var included = result.included || [];
                return {
                    insights: included.filter(isVisualizationObjectsItem).map(visualizationObjectsItemToInsight),
                    plugins: included
                        .filter(isDashboardPluginsItem)
                        .map(convertDashboardPluginWithLinksFromBackend),
                };
            });
        };
        this.getDashboardWithSideloads = function (ref, types) { return __awaiter(_this, void 0, void 0, function () {
            var include, id;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        include = ["filterContexts"];
                        if (includes(types, "insight")) {
                            include.push("visualizationObjects");
                        }
                        if (includes(types, "dashboardPlugin")) {
                            include.push("dashboardPlugins");
                        }
                        return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                    case 1:
                        id = _a.sent();
                        return [2 /*return*/, this.authCall(function (client) {
                                return client.workspaceObjects.getEntityAnalyticalDashboards({
                                    workspaceId: _this.workspace,
                                    objectId: id,
                                }, {
                                    headers: jsonApiHeaders,
                                    params: {
                                        include: include.join(","),
                                    },
                                });
                            }).then(function (result) { return result.data; })];
                }
            });
        }); };
        this.createDashboard = function (dashboard) { return __awaiter(_this, void 0, void 0, function () {
            var filterContext, _a, dashboardContent, result;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!dashboard.filterContext) return [3 /*break*/, 4];
                        if (!isFilterContextDefinition(dashboard.filterContext)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.createFilterContext(dashboard.filterContext)];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = dashboard.filterContext;
                        _b.label = 3;
                    case 3:
                        filterContext = _a;
                        _b.label = 4;
                    case 4:
                        dashboardContent = convertAnalyticalDashboard(dashboard, filterContext === null || filterContext === void 0 ? void 0 : filterContext.ref);
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.workspaceObjects.createEntityAnalyticalDashboards({
                                    workspaceId: _this.workspace,
                                    jsonApiAnalyticalDashboardInDocument: {
                                        data: {
                                            id: uuidv4(),
                                            type: JsonApiAnalyticalDashboardInTypeEnum.AnalyticalDashboard,
                                            attributes: {
                                                content: dashboardContent,
                                                title: dashboard.title,
                                                description: dashboard.description || "",
                                            },
                                        },
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 5:
                        result = _b.sent();
                        return [2 /*return*/, convertDashboard(result.data, filterContext)];
                }
            });
        }); };
        this.updateDashboard = function (originalDashboard, updatedDashboard) { return __awaiter(_this, void 0, void 0, function () {
            var filterContext, objectId, dashboardContent, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!areObjRefsEqual(originalDashboard.ref, updatedDashboard.ref)) {
                            throw new Error("Cannot update dashboard with different refs!");
                        }
                        else if (isEqual(originalDashboard, updatedDashboard)) {
                            return [2 /*return*/, originalDashboard];
                        }
                        // Missing refs means that the dashboard is not yet stored, so let's create it
                        if (!originalDashboard.ref && !updatedDashboard.ref) {
                            return [2 /*return*/, this.createDashboard(updatedDashboard)];
                        }
                        return [4 /*yield*/, this.processFilterContextUpdate(originalDashboard.filterContext, updatedDashboard.filterContext)];
                    case 1:
                        filterContext = _a.sent();
                        return [4 /*yield*/, objRefToIdentifier(originalDashboard.ref, this.authCall)];
                    case 2:
                        objectId = _a.sent();
                        dashboardContent = convertAnalyticalDashboard(updatedDashboard, filterContext === null || filterContext === void 0 ? void 0 : filterContext.ref);
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.workspaceObjects.updateEntityAnalyticalDashboards({
                                    workspaceId: _this.workspace,
                                    objectId: objectId,
                                    jsonApiAnalyticalDashboardInDocument: {
                                        data: {
                                            id: objectId,
                                            type: JsonApiAnalyticalDashboardInTypeEnum.AnalyticalDashboard,
                                            attributes: {
                                                content: dashboardContent,
                                                title: updatedDashboard.title,
                                                description: updatedDashboard.description || "",
                                            },
                                        },
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 3:
                        result = _a.sent();
                        return [2 /*return*/, convertDashboard(result.data, filterContext)];
                }
            });
        }); };
        this.deleteDashboard = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var id;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                    case 1:
                        id = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.workspaceObjects.deleteEntityAnalyticalDashboards({
                                    objectId: id,
                                    workspaceId: _this.workspace,
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.exportDashboardToPdf = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support export to PDF.");
            });
        }); };
        this.createScheduledMail = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support scheduled emails.");
            });
        }); };
        this.getScheduledMailsCountForDashboard = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // FIXME Not supported
                return [2 /*return*/, 0];
            });
        }); };
        this.getAllWidgetAlertsForCurrentUser = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // FIXME Not supported
                return [2 /*return*/, []];
            });
        }); };
        this.getDashboardWidgetAlertsForCurrentUser = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support alerting.");
            });
        }); };
        this.getWidgetAlertsCountForWidgets = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // FIXME Not supported
                return [2 /*return*/, []];
            });
        }); };
        this.createWidgetAlert = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support alerting.");
            });
        }); };
        this.updateWidgetAlert = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support alerting.");
            });
        }); };
        this.deleteWidgetAlert = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support alerting.");
            });
        }); };
        this.deleteWidgetAlerts = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support alerting.");
            });
        }); };
        this.getWidgetReferencedObjects = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new NotSupported("Tiger backend does not support alerting.");
            });
        }); };
        this.getResolvedFiltersForWidget = function (widget, filters) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, resolveWidgetFilters(filters, widget.ignoreDashboardFilters, widget.dateDataSet, function (refs) {
                        return objRefsToIdentifiers(refs, _this.authCall);
                    })];
            });
        }); };
        this.createDashboardPlugin = function (plugin) { return __awaiter(_this, void 0, void 0, function () {
            var pluginContent, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pluginContent = convertDashboardPluginToBackend(plugin);
                        return [4 /*yield*/, this.authCall(function (client) {
                                var _a;
                                return client.workspaceObjects.createEntityDashboardPlugins({
                                    workspaceId: _this.workspace,
                                    jsonApiDashboardPluginInDocument: {
                                        data: {
                                            id: uuidv4(),
                                            type: JsonApiDashboardPluginInTypeEnum.DashboardPlugin,
                                            attributes: {
                                                content: pluginContent,
                                                title: plugin.name,
                                                description: (_a = plugin.description) !== null && _a !== void 0 ? _a : "",
                                            },
                                        },
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, convertDashboardPluginFromBackend(result.data)];
                }
            });
        }); };
        this.deleteDashboardPlugin = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var id;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                    case 1:
                        id = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.workspaceObjects.deleteEntityDashboardPlugins({
                                    objectId: id,
                                    workspaceId: _this.workspace,
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.getDashboardPlugin = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var objectId, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(ref, this.authCall)];
                    case 1:
                        objectId = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.workspaceObjects.getEntityDashboardPlugins({
                                    workspaceId: _this.workspace,
                                    objectId: objectId,
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 2:
                        result = _a.sent();
                        return [2 /*return*/, convertDashboardPluginFromBackend(result.data)];
                }
            });
        }); };
        this.getDashboardPlugins = function () { return __awaiter(_this, void 0, void 0, function () {
            var result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (client) {
                            return MetadataUtilities.getAllPagesOf(client, client.workspaceObjects.getAllEntitiesDashboardPlugins, { workspaceId: _this.workspace }, { headers: ValidateRelationsHeader })
                                .then(MetadataUtilities.mergeEntitiesResults)
                                .then(MetadataUtilities.filterValidEntities);
                        })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.map(convertDashboardPluginWithLinksFromBackend)];
                }
            });
        }); };
        //
        //
        //
        this.createFilterContext = function (filterContext) { return __awaiter(_this, void 0, void 0, function () {
            var tigerFilterContext, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tigerFilterContext = convertFilterContextToBackend(filterContext);
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.workspaceObjects.createEntityFilterContexts({
                                    workspaceId: _this.workspace,
                                    jsonApiFilterContextInDocument: {
                                        data: {
                                            id: uuidv4(),
                                            type: JsonApiFilterContextInTypeEnum.FilterContext,
                                            attributes: {
                                                content: tigerFilterContext,
                                                title: filterContext.title || "",
                                                description: filterContext.description || "",
                                            },
                                        },
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, convertFilterContextFromBackend(result.data)];
                }
            });
        }); };
        this.processFilterContextUpdate = function (originalFilterContext, updatedFilterContext) { return __awaiter(_this, void 0, void 0, function () {
            var shouldUpdateFilterContext;
            return __generator(this, function (_a) {
                if (isTempFilterContext(originalFilterContext)) {
                    throw new UnexpectedError("Cannot update temp filter context!");
                }
                else if (isFilterContextDefinition(updatedFilterContext)) {
                    // Create a new filter context
                    return [2 /*return*/, this.createFilterContext(updatedFilterContext)];
                }
                else if (isFilterContext(updatedFilterContext)) {
                    shouldUpdateFilterContext = !isEqual(originalFilterContext, updatedFilterContext);
                    if (shouldUpdateFilterContext) {
                        return [2 /*return*/, this.updateFilterContext(updatedFilterContext)];
                    }
                }
                // No change, return the original filter context
                return [2 /*return*/, originalFilterContext];
            });
        }); };
        this.updateFilterContext = function (filterContext) { return __awaiter(_this, void 0, void 0, function () {
            var tigerFilterContext, objectId, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tigerFilterContext = convertFilterContextToBackend(filterContext);
                        return [4 /*yield*/, objRefToIdentifier(filterContext.ref, this.authCall)];
                    case 1:
                        objectId = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.workspaceObjects.updateEntityFilterContexts({
                                    workspaceId: _this.workspace,
                                    objectId: objectId,
                                    jsonApiFilterContextInDocument: {
                                        data: {
                                            id: objectId,
                                            type: JsonApiFilterContextInTypeEnum.FilterContext,
                                            attributes: {
                                                content: tigerFilterContext,
                                                title: filterContext.title || "",
                                                description: filterContext.description || "",
                                            },
                                        },
                                    },
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 2:
                        result = _a.sent();
                        return [2 /*return*/, convertFilterContextFromBackend(result.data)];
                }
            });
        }); };
        this.getFilterContext = function (filterContextRef) { return __awaiter(_this, void 0, void 0, function () {
            var filterContextId, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToIdentifier(filterContextRef, this.authCall)];
                    case 1:
                        filterContextId = _a.sent();
                        return [4 /*yield*/, this.authCall(function (client) {
                                return client.workspaceObjects.getEntityFilterContexts({
                                    workspaceId: _this.workspace,
                                    objectId: filterContextId,
                                }, {
                                    headers: jsonApiHeaders,
                                });
                            })];
                    case 2:
                        result = _a.sent();
                        return [2 /*return*/, convertFilterContextFromBackend(result.data)];
                }
            });
        }); };
    }
    return TigerWorkspaceDashboards;
}());
export { TigerWorkspaceDashboards };
//# sourceMappingURL=index.js.map
var _a, _b;
// (C) 2019-2020 GoodData Corporation
import cloneDeep from "lodash/cloneDeep";
import set from "lodash/set";
import { isLineChart } from "@gooddata/sdk-ui-charts";
import { BucketNames, VisualizationTypes } from "@gooddata/sdk-ui";
import { BUCKETS } from "../../constants/bucket";
import { getTranslation } from "../translations";
import { getBucketsByNames, setBucketTitles } from "../bucketHelper";
import columnMeasureIcon from "../../assets/combo/bucket-title-measures-column.svg";
import lineMeasureIcon from "../../assets/combo/bucket-title-measures-line.svg";
import areaMeasureIcon from "../../assets/combo/bucket-title-measures-area.svg";
import columnLineIcon from "../../assets/combo/bucket-title-view-column-line.svg";
import columnAreaIcon from "../../assets/combo/bucket-title-view-column-area.svg";
import lineAreaIcon from "../../assets/combo/bucket-title-view-line-area.svg";
import columnViewIcon from "../../assets/column/bucket-title-view.svg";
import lineViewIcon from "../../assets/combo/bucket-title-view-line-line.svg";
import areaViewIcon from "../../assets/area/bucket-title-view.svg";
import { UICONFIG } from "../../constants/uiConfig";
var COLUMN = VisualizationTypes.COLUMN, LINE = VisualizationTypes.LINE, AREA = VisualizationTypes.AREA;
var MEASURE_BUCKET_ICONS = (_a = {},
    _a[COLUMN] = columnMeasureIcon,
    _a[LINE] = lineMeasureIcon,
    _a[AREA] = areaMeasureIcon,
    _a);
var VIEW_BY_ICONS = (_b = {},
    _b[COLUMN + "-" + COLUMN] = columnViewIcon,
    _b[COLUMN + "-" + LINE] = columnLineIcon,
    _b[COLUMN + "-" + AREA] = columnAreaIcon,
    _b[LINE + "-" + COLUMN] = columnLineIcon,
    _b[LINE + "-" + LINE] = lineViewIcon,
    _b[LINE + "-" + AREA] = lineAreaIcon,
    _b[AREA + "-" + COLUMN] = columnAreaIcon,
    _b[AREA + "-" + LINE] = lineAreaIcon,
    _b[AREA + "-" + AREA] = areaViewIcon,
    _b);
function setCanStackInPercent(uiConfig, secondaryChartType, isDualAxis) {
    var canStackInPercent = !(isDualAxis === false && isLineChart(secondaryChartType));
    set(uiConfig, "optionalStacking.canStackInPercent", canStackInPercent);
}
export function setComboChartUiConfig(referencePoint, intl, visualizationType) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    var referencePointConfigured = cloneDeep(referencePoint);
    var measureBuckets = getBucketsByNames(referencePointConfigured === null || referencePointConfigured === void 0 ? void 0 : referencePointConfigured.buckets, [
        BucketNames.MEASURES,
        BucketNames.SECONDARY_MEASURES,
    ]);
    var chartTypes = [
        (_c = (_b = (_a = referencePointConfigured === null || referencePointConfigured === void 0 ? void 0 : referencePointConfigured.properties) === null || _a === void 0 ? void 0 : _a.controls) === null || _b === void 0 ? void 0 : _b.primaryChartType) !== null && _c !== void 0 ? _c : COLUMN,
        (_f = (_e = (_d = referencePointConfigured === null || referencePointConfigured === void 0 ? void 0 : referencePointConfigured.properties) === null || _d === void 0 ? void 0 : _d.controls) === null || _e === void 0 ? void 0 : _e.secondaryChartType) !== null && _f !== void 0 ? _f : LINE,
    ];
    var updatedUiConfig = setBucketTitles(referencePointConfigured, visualizationType, intl);
    var isDualAxis = (_j = (_h = (_g = referencePointConfigured === null || referencePointConfigured === void 0 ? void 0 : referencePointConfigured.properties) === null || _g === void 0 ? void 0 : _g.controls) === null || _h === void 0 ? void 0 : _h.dualAxis) !== null && _j !== void 0 ? _j : true;
    setCanStackInPercent(updatedUiConfig, chartTypes[1], isDualAxis);
    measureBuckets.forEach(function (bucket, index) {
        var _a;
        var type = chartTypes[index];
        var localIdentifier = (_a = bucket === null || bucket === void 0 ? void 0 : bucket.localIdentifier) !== null && _a !== void 0 ? _a : "";
        var subtitle = getTranslation("dashboard.bucket.combo.subtitle." + type, intl);
        set(updatedUiConfig, [BUCKETS, localIdentifier, "subtitle"], subtitle);
        set(updatedUiConfig, [BUCKETS, localIdentifier, "icon"], MEASURE_BUCKET_ICONS[type]);
    });
    set(updatedUiConfig, [BUCKETS, BucketNames.VIEW, "icon"], VIEW_BY_ICONS[chartTypes.join("-")]);
    set(referencePointConfigured, UICONFIG, updatedUiConfig);
    return referencePointConfigured;
}
//# sourceMappingURL=comboChartUiConfigHelper.js.map
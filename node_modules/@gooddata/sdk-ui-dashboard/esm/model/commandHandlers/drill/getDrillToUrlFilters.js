// (C) 2021 GoodData Corporation
import { __generator } from "tslib";
import { call, select } from "redux-saga/effects";
import { selectEnableFilterValuesResolutionInDrillEvents } from "../../store/config/configSelectors";
import { resolveFilterValues } from "./common/filterValuesResolver";
import { queryWidgetFilters } from "../../queries";
import { isDashboardFilter } from "../../../types";
import { query } from "../../store/_infra/queryCall";
export function getDrillToUrlFiltersWithResolvedValues(ctx, widgetRef) {
    var effectiveFilters, filters, enableFilterValuesResolutionInDrillEvents, resolvedFilterValues;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, call(query, queryWidgetFilters(widgetRef, []))];
            case 1:
                effectiveFilters = _a.sent();
                filters = effectiveFilters.filter(isDashboardFilter);
                return [4 /*yield*/, select(selectEnableFilterValuesResolutionInDrillEvents)];
            case 2:
                enableFilterValuesResolutionInDrillEvents = _a.sent();
                if (!enableFilterValuesResolutionInDrillEvents) return [3 /*break*/, 4];
                return [4 /*yield*/, call(resolveFilterValues, filters, ctx.backend, ctx.workspace)];
            case 3:
                resolvedFilterValues = _a.sent();
                return [2 /*return*/, { filters: filters, resolvedFilterValues: resolvedFilterValues }];
            case 4: return [2 /*return*/, { filters: filters }];
        }
    });
}
//# sourceMappingURL=getDrillToUrlFilters.js.map
import { __assign } from "tslib";
// (C) 2020-2021 GoodData Corporation
import { useMemo } from "react";
import isArray from "lodash/isArray";
import mergeWith from "lodash/mergeWith";
import { insightProperties, insightSetProperties } from "@gooddata/sdk-model";
import { selectSettings, useDashboardSelector } from "../../../../model";
/**
 * @internal
 */
export var useResolveDashboardInsightProperties = function (props) {
    var widget = props.widget, insight = props.insight;
    var settings = useDashboardSelector(selectSettings);
    var insightWithAddedWidgetProperties = useMemo(function () {
        var _a;
        if (!insight) {
            return insight;
        }
        var fromWidget = widget.properties;
        if (!fromWidget) {
            return insight;
        }
        var fromWidgetWithZoomingHandled = __assign(__assign({}, fromWidget), { controls: __assign(__assign({}, fromWidget === null || fromWidget === void 0 ? void 0 : fromWidget.controls), { 
                // we need to take the relevant feature flag into account as well
                zoomInsight: !!(settings.enableKDZooming && ((_a = fromWidget === null || fromWidget === void 0 ? void 0 : fromWidget.controls) === null || _a === void 0 ? void 0 : _a.zoomInsight)) }) });
        var fromInsight = insightProperties(insight);
        var merged = mergeWith({}, fromInsight, fromWidgetWithZoomingHandled, function (currentValue, incomingValue) {
            /**
             * Replace arrays instead of merging them. This is important for column sizing for example,
             * where widget might provide an empty array to override the custom column sizes defined on the insight level.
             */
            if (isArray(currentValue)) {
                return incomingValue;
            }
            // for other types fall back to the default merging strategy by returning nothing
        });
        return insightSetProperties(insight, merged);
    }, [insight, widget.properties, settings]);
    return insightWithAddedWidgetProperties;
};
//# sourceMappingURL=useResolveDashboardInsightProperties.js.map
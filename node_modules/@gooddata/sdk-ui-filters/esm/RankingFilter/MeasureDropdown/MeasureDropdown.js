// (C) 2020 GoodData Corporation
import React, { useState } from "react";
import { Button } from "@gooddata/sdk-ui-kit";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import cx from "classnames";
import { MeasureDropdownBody } from "./MeasureDropdownBody";
export var MeasureDropdown = function (_a) {
    var items = _a.items, selectedItemRef = _a.selectedItemRef, onSelect = _a.onSelect, onDropDownItemMouseOver = _a.onDropDownItemMouseOver, onDropDownItemMouseOut = _a.onDropDownItemMouseOut;
    var _b = useState(false), isOpen = _b[0], setIsOpen = _b[1];
    var onButtonClick = function () {
        setIsOpen(!isOpen);
    };
    var onItemSelect = function (ref) {
        onSelect(ref);
        setIsOpen(false);
        onDropDownItemMouseOut && onDropDownItemMouseOut();
    };
    var buttonClassNames = cx("gd-button-secondary", "gd-button-small", "button-dropdown", "gd-icon-right", {
        "gd-icon-navigateup": isOpen,
        "gd-icon-navigatedown": !isOpen,
    }, "gd-rf-measure-dropdown-button", "s-rf-measure-dropdown-button");
    var selectedItem = items.find(function (item) { return areObjRefsEqual(item.ref, selectedItemRef); });
    var title = selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.title;
    return (React.createElement(React.Fragment, null,
        React.createElement(Button, { className: buttonClassNames, value: title, onClick: onButtonClick, iconLeft: "gd-icon-measure" }),
        isOpen && (React.createElement(MeasureDropdownBody, { items: items, selectedItemRef: selectedItemRef, onSelect: onItemSelect, onClose: function () { return setIsOpen(false); }, onDropDownItemMouseOver: onDropDownItemMouseOver, onDropDownItemMouseOut: onDropDownItemMouseOut }))));
};
//# sourceMappingURL=MeasureDropdown.js.map
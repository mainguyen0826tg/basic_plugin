import { __assign, __read } from "tslib";
// (C) 2021 GoodData Corporation
import { useEffect, useState } from "react";
import { useBackendStrict, useClientWorkspaceIdentifiers, usePrevious, useWorkspace } from "@gooddata/sdk-ui";
import { objectUtils } from "@gooddata/util";
import { newRenderingWorker } from "../commandHandlers/render/renderingWorker";
import { initializeDashboard, InitialLoadCorrelationId } from "../commands";
import { createDashboardStore } from "../store/dashboardStore";
import { isDashboard } from "@gooddata/sdk-backend-spi";
/**
 * This hook is responsible for properly initializing and re-initializing the dashboard redux store,
 * when the props of the Dashboard component change.
 * It also cancels currently running sagas before the re-initialization.
 *
 * @internal
 */
export var useInitializeDashboardStore = function (props) {
    var _a;
    var dashboard = props.dashboard;
    var backend = useBackendStrict(props.backend);
    var workspace = useWorkspace(props.workspace);
    var _b = (_a = useClientWorkspaceIdentifiers()) !== null && _a !== void 0 ? _a : {}, clientId = _b.client, dataProductId = _b.dataProduct;
    var _c = __read(useState(null), 2), dashboardStore = _c[0], setDashboardStore = _c[1];
    var dashboardRef = isDashboard(dashboard) ? dashboard.ref : dashboard;
    var currentInitProps = {
        backend: backend,
        workspace: workspace,
        dashboard: dashboard,
        filterContextRef: props.filterContextRef,
        clientId: clientId,
        dataProductId: dataProductId,
        initialEventHandlers: props.eventHandlers,
    };
    var previousInitProps = usePrevious(currentInitProps);
    useEffect(function () {
        if (!objectUtils.shallowEqualObjects(previousInitProps, currentInitProps) || !dashboardStore) {
            if (dashboardStore) {
                // When props are different and dashboardStore is already initialized or initializing,
                // cancel all running sagas.
                dashboardStore.rootSagaTask.cancel();
            }
            var backgroundWorkers = [newRenderingWorker()];
            // Create new store and fire load dashboard command.
            var dashStore = createDashboardStore({
                dashboardContext: {
                    backend: backend,
                    workspace: workspace,
                    dashboardRef: dashboardRef,
                    filterContextRef: currentInitProps.filterContextRef,
                    clientId: currentInitProps.clientId,
                    dataProductId: currentInitProps.dataProductId,
                },
                eventing: {
                    initialEventHandlers: props.eventHandlers,
                    onStateChange: props.onStateChange,
                    onEventingInitialized: props.onEventingInitialized,
                },
                backgroundWorkers: backgroundWorkers,
                privateContext: __assign(__assign({}, props.customizationFns), { preloadedDashboard: isDashboard(dashboard) ? dashboard : undefined }),
            });
            dashStore.store.dispatch(initializeDashboard(props.config, props.permissions, InitialLoadCorrelationId));
            return setDashboardStore(dashStore);
        }
    });
    return dashboardStore;
};
//# sourceMappingURL=useInitializeDashboardStore.js.map
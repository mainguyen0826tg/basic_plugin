// (C) 2020 GoodData Corporation
import React from "react";
import { ErrorComponent as DefaultError, LoadingComponent as DefaultLoading, } from "@gooddata/sdk-ui";
import invariant from "ts-invariant";
import { KpiExecutor } from "./KpiExecutor";
import { useDashboardViewConfig, useDashboardViewIsReadOnly } from "../../contexts";
import { useKpiData } from "../../hooks/internal";
/**
 * Takes a KPI widget and executes it and displays the result.
 * @internal
 */
export var KpiView = function (_a) {
    var dashboardRef = _a.dashboardRef, kpiWidget = _a.kpiWidget, alert = _a.alert, filters = _a.filters, onFiltersChange = _a.onFiltersChange, filterContext = _a.filterContext, drillableItems = _a.drillableItems, onDrill = _a.onDrill, onError = _a.onError, backend = _a.backend, workspace = _a.workspace, _b = _a.ErrorComponent, ErrorComponent = _b === void 0 ? DefaultError : _b, _c = _a.LoadingComponent, LoadingComponent = _c === void 0 ? DefaultLoading : _c;
    invariant(kpiWidget.kpi, "The provided widget is not a KPI widget.");
    var _d = useKpiData({
        kpiWidget: kpiWidget,
        backend: backend,
        filters: filters,
        filterContext: filterContext,
        workspace: workspace,
        onError: onError,
    }), error = _d.error, result = _d.result, status = _d.status;
    var config = useDashboardViewConfig();
    var isReadOnly = useDashboardViewIsReadOnly();
    if (status === "loading" || status === "pending") {
        return React.createElement(LoadingComponent, null);
    }
    if (status === "error") {
        return React.createElement(ErrorComponent, { message: error.message });
    }
    return (React.createElement(KpiExecutor, { dashboardRef: dashboardRef, kpiWidget: kpiWidget, primaryMeasure: result.primaryMeasure, secondaryMeasure: result.secondaryMeasure, alert: alert, allFilters: result.allFilters, effectiveFilters: result.effectiveFilters, onFiltersChange: onFiltersChange, onDrill: onDrill, onError: onError, drillableItems: drillableItems, separators: config === null || config === void 0 ? void 0 : config.separators, disableDrillUnderline: config === null || config === void 0 ? void 0 : config.disableKpiDrillUnderline, backend: backend, workspace: workspace, ErrorComponent: ErrorComponent, LoadingComponent: LoadingComponent, isReadOnly: isReadOnly }));
};
//# sourceMappingURL=index.js.map
import { __assign } from "tslib";
import { TOP, RIGHT, BOTTOM } from "../PositionTypes";
var LEGEND_WIDTH_BREAKPOINT = 610;
var LEGEND_HEIGHT_BREAKPOINT_SM = 194;
var LEGEND_HEIGHT_BREAKPOINT_ML = 274;
function getLegendDetailsForAutoResponsive(legendPosition, contentRect, legendLabel) {
    var _a, _b;
    var width = (_a = contentRect === null || contentRect === void 0 ? void 0 : contentRect.client) === null || _a === void 0 ? void 0 : _a.width;
    var height = (_b = contentRect === null || contentRect === void 0 ? void 0 : contentRect.client) === null || _b === void 0 ? void 0 : _b.height;
    if (!width || !height) {
        return null;
    }
    var name = legendLabel ? { name: legendLabel } : {};
    // Decision logic: https://gooddata.invisionapp.com/console/share/KJ2A59MOAQ/548340571
    if (width < LEGEND_WIDTH_BREAKPOINT) {
        var maxRowsForTop = height < LEGEND_HEIGHT_BREAKPOINT_ML ? 1 : 2;
        return __assign(__assign({}, name), { position: TOP, renderPopUp: true, maxRows: maxRowsForTop });
    }
    else {
        var isLegendTopBottom = legendPosition === "top" || legendPosition === "bottom";
        if (height < LEGEND_HEIGHT_BREAKPOINT_SM) {
            return __assign(__assign({}, name), { position: RIGHT, renderPopUp: false });
        }
        else {
            var maxRowsForTopBottom = height < LEGEND_HEIGHT_BREAKPOINT_ML ? 1 : 2;
            return __assign(__assign({}, name), { position: legendPosition, renderPopUp: isLegendTopBottom, maxRows: isLegendTopBottom ? maxRowsForTopBottom : undefined });
        }
    }
}
function getLegendDetailsForStandard(legendPosition, responsive, showFluidLegend, isHeatmap) {
    var pos = legendPosition;
    if (isHeatmap) {
        var isSmall = Boolean(responsive && showFluidLegend);
        if (isSmall) {
            pos = legendPosition === TOP ? TOP : BOTTOM;
        }
        else {
            pos = legendPosition || RIGHT;
        }
    }
    return {
        position: pos,
        renderPopUp: false
    };
}
/**
 * @internal
 */
export function getLegendDetails(legendPosition, responsive, options) {
    if (responsive !== "autoPositionWithPopup") {
        return getLegendDetailsForStandard(legendPosition, responsive, options.showFluidLegend, options.isHeatmap);
    }
    return getLegendDetailsForAutoResponsive(legendPosition, options.contentRect, options.legendLabel);
}
//# sourceMappingURL=helpers.js.map
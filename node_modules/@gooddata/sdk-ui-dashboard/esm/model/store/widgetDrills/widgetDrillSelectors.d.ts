import { ICatalogAttribute, ICatalogDateAttribute } from "@gooddata/sdk-backend-spi";
import { ObjRef } from "@gooddata/sdk-model";
import { IAvailableDrillTargets, IHeaderPredicate } from "@gooddata/sdk-ui";
import { DashboardDrillDefinition } from "../../../types";
/**
 * @internal
 */
export interface IImplicitDrillWithPredicates {
    drillDefinition: DashboardDrillDefinition;
    predicates: IHeaderPredicate[];
}
/**
 * @internal
 */
export declare const selectImplicitDrillsDownByWidgetRef: (ref: ObjRef) => import("@reduxjs/toolkit").OutputSelector<import("..").DashboardState, IImplicitDrillWithPredicates[], (res1: import("..").IDrillTargets | undefined, res2: (ICatalogAttribute | ICatalogDateAttribute)[], res3: boolean) => IImplicitDrillWithPredicates[]>;
/**
 * @internal
 */
export declare const selectImplicitDrillsToUrlByWidgetRef: (ref: ObjRef) => import("@reduxjs/toolkit").OutputSelector<import("..").DashboardState, IImplicitDrillWithPredicates[], (res1: import("..").IDrillTargets | undefined, res2: ICatalogAttribute[], res3: boolean) => IImplicitDrillWithPredicates[]>;
/**
 * @internal
 */
export declare const selectConfiguredDrillsByWidgetRef: (ref: ObjRef) => import("@reduxjs/toolkit").OutputSelector<import("..").DashboardState, IImplicitDrillWithPredicates[], (res1: import("@gooddata/sdk-backend-spi").IDrillToLegacyDashboard[] | import("@gooddata/sdk-backend-spi").InsightDrillDefinition[], res2: boolean, res3: boolean, res4: boolean, res5: boolean, res6: boolean, res7: boolean, res8: boolean) => IImplicitDrillWithPredicates[]>;
/**
 * @internal
 */
export declare const selectValidConfiguredDrillsByWidgetRef: (ref: ObjRef) => import("@reduxjs/toolkit").OutputSelector<import("..").DashboardState, IImplicitDrillWithPredicates[], (res1: IImplicitDrillWithPredicates[], res2: import("../../..").ObjRefMap<import("@gooddata/sdk-backend-spi").IAttributeDisplayFormMetadataObject>, res3: import("../../..").ObjRefMap<import("@gooddata/sdk-backend-spi").IListedDashboard>, res4: import("../../..").ObjRefMap<import("@gooddata/sdk-model").IInsight>) => IImplicitDrillWithPredicates[]>;
/**
 * @internal
 */
export declare const selectConfiguredAndImplicitDrillsByWidgetRef: (ref: ObjRef) => import("@reduxjs/toolkit").OutputSelector<import("..").DashboardState, IImplicitDrillWithPredicates[], (res1: IImplicitDrillWithPredicates[], res2: IImplicitDrillWithPredicates[], res3: IImplicitDrillWithPredicates[]) => IImplicitDrillWithPredicates[]>;
/**
 * @internal
 */
export declare const selectDrillableItemsByWidgetRef: (ref: ObjRef) => import("@reduxjs/toolkit").OutputSelector<import("..").DashboardState, import("@gooddata/sdk-ui").ExplicitDrill[], (res1: boolean, res2: import("@gooddata/sdk-ui").ExplicitDrill[], res3: IHeaderPredicate[], res4: IHeaderPredicate[], res5: IHeaderPredicate[]) => import("@gooddata/sdk-ui").ExplicitDrill[]>;
/**
 * @internal
 */
export declare const selectImplicitDrillsByAvailableDrillTargets: (availableDrillTargets: IAvailableDrillTargets | undefined) => import("@reduxjs/toolkit").OutputSelector<import("..").DashboardState, IImplicitDrillWithPredicates[], (res1: (ICatalogAttribute | ICatalogDateAttribute)[], res2: ICatalogAttribute[]) => IImplicitDrillWithPredicates[]>;
/**
 * @internal
 */
export declare const selectDrillableItemsByAvailableDrillTargets: (availableDrillTargets: IAvailableDrillTargets | undefined) => import("@reduxjs/toolkit").OutputSelector<import("..").DashboardState, IHeaderPredicate[], (res: IImplicitDrillWithPredicates[]) => IHeaderPredicate[]>;
//# sourceMappingURL=widgetDrillSelectors.d.ts.map
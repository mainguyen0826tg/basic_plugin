import { __assign, __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { injectIntl } from "react-intl";
import { Button } from "@gooddata/sdk-ui-kit";
import { IntlWrapper } from "@gooddata/sdk-ui";
import OperatorDropdown from "./OperatorDropdown";
import RangeInput from "./RangeInput";
import ComparisonInput from "./ComparisonInput";
import { isComparisonConditionOperator, isRangeConditionOperator } from "@gooddata/sdk-model";
import TreatNullValuesAsZeroCheckbox from "./TreatNullValuesAsZeroCheckbox";
import { WarningMessageComponent } from "./WarningMessage";
var DefaultValuePrecision = 6;
var DropdownBodyWrapped = /** @class */ (function (_super) {
    __extends(DropdownBodyWrapped, _super);
    function DropdownBodyWrapped(props) {
        var _this = _super.call(this, props) || this;
        _this.renderInputSection = function () {
            var _a = _this.props, usePercentage = _a.usePercentage, disableAutofocus = _a.disableAutofocus, separators = _a.separators;
            var _b = _this.state, operator = _b.operator, _c = _b.value, _d = _c.value, value = _d === void 0 ? null : _d, _e = _c.from, from = _e === void 0 ? null : _e, _f = _c.to, to = _f === void 0 ? null : _f;
            if (isComparisonConditionOperator(operator)) {
                return (React.createElement(ComparisonInput, { value: value, usePercentage: usePercentage, onValueChange: _this.handleValueChange, onEnterKeyPress: _this.onApply, disableAutofocus: disableAutofocus, separators: separators }));
            }
            else if (isRangeConditionOperator(operator)) {
                return (React.createElement(RangeInput, { from: from, to: to, usePercentage: usePercentage, onFromChange: _this.handleFromChange, onToChange: _this.handleToChange, onEnterKeyPress: _this.onApply, disableAutofocus: disableAutofocus, separators: separators }));
            }
            return null;
        };
        _this.isChanged = function () {
            return _this.state.operator !== _this.props.operator ||
                _this.state.enabledTreatNullValuesAsZero !== _this.props.treatNullAsZeroValue;
        };
        _this.isApplyButtonDisabled = function () {
            var operator = _this.state.operator;
            if (isComparisonConditionOperator(operator)) {
                return _this.isApplyButtonDisabledForComparison();
            }
            if (isRangeConditionOperator(operator)) {
                return _this.isApplyButtonDisabledForRange();
            }
            return _this.isApplyButtonDisabledForAll();
        };
        _this.handleOperatorSelection = function (operator) { return _this.setState({ operator: operator }); };
        _this.handleValueChange = function (value) {
            _this.setState({ value: __assign(__assign({}, _this.state.value), { value: value }) });
        };
        _this.handleFromChange = function (from) {
            _this.setState({ value: __assign(__assign({}, _this.state.value), { from: from }) });
        };
        _this.handleToChange = function (to) {
            _this.setState({ value: __assign(__assign({}, _this.state.value), { to: to }) });
        };
        _this.handleTreatNullAsZeroClicked = function (checked) {
            _this.setState({ enabledTreatNullValuesAsZero: checked });
        };
        _this.trimToPrecision = function (n) {
            var _a = _this.props.valuePrecision, valuePrecision = _a === void 0 ? DefaultValuePrecision : _a;
            if (!n) {
                return n;
            }
            return parseFloat(n.toFixed(valuePrecision));
        };
        _this.fromPercentToDecimal = function (n) { return (n ? n / 100 : n); };
        _this.fromDecimalToPercent = function (n) { return (n ? n * 100 : n); };
        _this.convertToRawValue = function (value, operator) {
            if (!value) {
                return value;
            }
            return isComparisonConditionOperator(operator)
                ? { value: _this.trimToPrecision(_this.fromPercentToDecimal(value.value)) }
                : {
                    from: _this.trimToPrecision(_this.fromPercentToDecimal(value.from)),
                    to: _this.trimToPrecision(_this.fromPercentToDecimal(value.to)),
                };
        };
        _this.convertToPercentageValue = function (value, operator) {
            if (!value) {
                return value;
            }
            return isComparisonConditionOperator(operator)
                ? { value: _this.trimToPrecision(_this.fromDecimalToPercent(value.value)) }
                : {
                    from: _this.trimToPrecision(_this.fromDecimalToPercent(value.from)),
                    to: _this.trimToPrecision(_this.fromDecimalToPercent(value.to)),
                };
        };
        _this.onApply = function () {
            if (_this.isApplyButtonDisabled()) {
                return;
            }
            var _a = _this.state, enabledTreatNullValuesAsZero = _a.enabledTreatNullValuesAsZero, stateOperator = _a.operator, stateValue = _a.value;
            var usePercentage = _this.props.usePercentage;
            var operator = stateOperator === "ALL" ? null : stateOperator;
            var value = usePercentage ? _this.convertToRawValue(stateValue, stateOperator) : stateValue;
            _this.props.onApply(operator, value, enabledTreatNullValuesAsZero);
        };
        var operator = props.operator, value = props.value, usePercentage = props.usePercentage, treatNullAsZeroValue = props.treatNullAsZeroValue;
        _this.state = {
            operator: operator || "ALL",
            value: (usePercentage ? _this.convertToPercentageValue(value, operator) : value) || {},
            enabledTreatNullValuesAsZero: treatNullAsZeroValue,
        };
        return _this;
    }
    DropdownBodyWrapped.prototype.render = function () {
        var _a = this.props, onCancel = _a.onCancel, warningMessage = _a.warningMessage, displayTreatNullAsZeroOption = _a.displayTreatNullAsZeroOption, enableOperatorSelection = _a.enableOperatorSelection, intl = _a.intl;
        var _b = this.state, operator = _b.operator, enabledTreatNullValuesAsZero = _b.enabledTreatNullValuesAsZero;
        return (React.createElement("div", { className: "gd-mvf-dropdown-body gd-dialog gd-dropdown overlay s-mvf-dropdown-body" },
            React.createElement("div", { className: "gd-mvf-dropdown-content" },
                warningMessage && (React.createElement("div", { className: "gd-mvf-dropdown-section" },
                    React.createElement(WarningMessageComponent, { warningMessage: warningMessage }))),
                React.createElement("div", { className: "gd-mvf-dropdown-section" },
                    React.createElement(OperatorDropdown, { onSelect: this.handleOperatorSelection, operator: operator, isDisabled: !enableOperatorSelection })),
                operator !== "ALL" && (React.createElement("div", { className: "gd-mvf-dropdown-section" },
                    this.renderInputSection(),
                    " ",
                    displayTreatNullAsZeroOption && (React.createElement(TreatNullValuesAsZeroCheckbox, { onChange: this.handleTreatNullAsZeroClicked, checked: enabledTreatNullValuesAsZero, intl: intl }))))),
            React.createElement("div", { className: "gd-mvf-dropdown-footer" },
                React.createElement(Button, { className: "gd-button-secondary gd-button-small s-mvf-dropdown-cancel", onClick: onCancel, value: intl.formatMessage({ id: "cancel" }) }),
                React.createElement(Button, { className: "gd-button-action gd-button-small s-mvf-dropdown-apply", onClick: this.onApply, value: intl.formatMessage({ id: "apply" }), disabled: this.isApplyButtonDisabled() }))));
    };
    DropdownBodyWrapped.prototype.isApplyButtonDisabledForComparison = function () {
        var _a = this.state.value.value, value = _a === void 0 ? null : _a;
        if (value === null) {
            return true;
        }
        if (this.props.value === null || this.isChanged()) {
            return false;
        }
        return value === this.props.value.value;
    };
    DropdownBodyWrapped.prototype.isApplyButtonDisabledForRange = function () {
        var _a = this.state.value, _b = _a.from, from = _b === void 0 ? null : _b, _c = _a.to, to = _c === void 0 ? null : _c;
        if (from === null || to === null) {
            return true;
        }
        if (this.props.value === null || this.isChanged()) {
            return false;
        }
        return from === this.props.value.from && to === this.props.value.to;
    };
    DropdownBodyWrapped.prototype.isApplyButtonDisabledForAll = function () {
        return this.props.operator === "ALL";
    };
    return DropdownBodyWrapped;
}(React.PureComponent));
export var DropdownBodyWithIntl = injectIntl(DropdownBodyWrapped);
var DropdownBody = /** @class */ (function (_super) {
    __extends(DropdownBody, _super);
    function DropdownBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DropdownBody.prototype.render = function () {
        return (React.createElement(IntlWrapper, { locale: this.props.locale },
            React.createElement(DropdownBodyWithIntl, __assign({}, this.props))));
    };
    return DropdownBody;
}(React.PureComponent));
export { DropdownBody };
//# sourceMappingURL=DropdownBody.js.map
import { __read } from "tslib";
// (C) 2020 GoodData Corporation
import React, { useCallback, useMemo, useState } from "react";
import { widgetRef } from "@gooddata/sdk-backend-spi";
import { createSelector } from "@reduxjs/toolkit";
import { insightSetFilters, insightVisualizationUrl, objRefToString } from "@gooddata/sdk-model";
import { useBackendStrict, useWorkspaceStrict, } from "@gooddata/sdk-ui";
import { InsightRenderer } from "@gooddata/sdk-ui-ext";
import stringify from "json-stable-stringify";
import { useDashboardComponentsContext } from "../../../../dashboardContexts";
import { selectColorPalette, selectDrillableItems, selectIsExport, selectLocale, selectMapboxToken, selectSeparators, selectSettings, useDashboardAsyncRender, useDashboardEventDispatch, useDashboardSelector, useWidgetExecutionsHandler, } from "../../../../../model";
import { useResolveDashboardInsightProperties } from "../useResolveDashboardInsightProperties";
import { useWidgetFilters } from "../../../common";
import { useDashboardInsightDrills } from "./useDashboardInsightDrills";
import { CustomError } from "../CustomError/CustomError";
import { DASHBOARD_LAYOUT_RESPONSIVE_SMALL_WIDTH } from "../../../../constants";
import { IntlWrapper } from "../../../../localization";
var selectCommonDashboardInsightProps = createSelector([selectLocale, selectSettings, selectColorPalette], function (locale, settings, colorPalette) { return ({
    locale: locale,
    settings: settings,
    colorPalette: colorPalette,
}); });
var selectChartConfig = createSelector([selectMapboxToken, selectSeparators, selectDrillableItems, selectIsExport], function (mapboxToken, separators, drillableItems, isExport) { return ({
    mapboxToken: mapboxToken,
    separators: separators,
    forceDisableDrillOnAxes: !(drillableItems === null || drillableItems === void 0 ? void 0 : drillableItems.length),
    isExportMode: isExport,
}); });
/**
 * @internal
 */
export var DashboardInsight = function (props) {
    var insight = props.insight, widget = props.widget, clientHeight = props.clientHeight, clientWidth = props.clientWidth, backend = props.backend, workspace = props.workspace, onError = props.onError, onDrillFn = props.onDrill, onLoadingChanged = props.onLoadingChanged, onExportReady = props.onExportReady, CustomErrorComponent = props.ErrorComponent, CustomLoadingComponent = props.LoadingComponent;
    // Custom components
    var _a = useDashboardComponentsContext({
        ErrorComponent: CustomErrorComponent,
        LoadingComponent: CustomLoadingComponent,
    }), ErrorComponent = _a.ErrorComponent, LoadingComponent = _a.LoadingComponent;
    // Context
    var effectiveBackend = useBackendStrict(backend);
    var effectiveWorkspace = useWorkspaceStrict(workspace);
    var dispatchEvent = useDashboardEventDispatch();
    var executionsHandler = useWidgetExecutionsHandler(widgetRef(widget));
    // State props
    var _b = useDashboardSelector(selectCommonDashboardInsightProps), locale = _b.locale, settings = _b.settings, colorPalette = _b.colorPalette;
    var enableKDWidgetCustomHeight = useDashboardSelector(selectSettings).enableKDWidgetCustomHeight;
    var chartConfig = useDashboardSelector(selectChartConfig);
    // Loading and rendering
    var _c = __read(useState(false), 2), isVisualizationLoading = _c[0], setIsVisualizationLoading = _c[1];
    var _d = __read(useState(), 2), visualizationError = _d[0], setVisualizationError = _d[1];
    var _e = useDashboardAsyncRender(objRefToString(widgetRef(widget))), onRequestAsyncRender = _e.onRequestAsyncRender, onResolveAsyncRender = _e.onResolveAsyncRender;
    var handleLoadingChanged = useCallback(function (_a) {
        var isLoading = _a.isLoading;
        if (isLoading) {
            onRequestAsyncRender();
            // if we started loading, any previous vis error is obsolete at this point, get rid of it
            setVisualizationError(undefined);
        }
        else {
            onResolveAsyncRender();
        }
        executionsHandler.onLoadingChanged({ isLoading: isLoading });
        setIsVisualizationLoading(isLoading);
        onLoadingChanged === null || onLoadingChanged === void 0 ? void 0 : onLoadingChanged({ isLoading: isLoading });
    }, [onLoadingChanged, executionsHandler.onLoadingChanged]);
    /// Filtering
    var _f = useWidgetFilters(widget), filtersForInsight = _f.result, filtersStatus = _f.status, filtersError = _f.error;
    var insightWithAddedFilters = useMemo(function () { return insightSetFilters(insight, filtersForInsight); }, [
        insight,
        /**
         * We use stringified value to avoid setting equal filters. This prevents cascading cache invalidation
         * and expensive re-renders down the line. The stringification is worth it as the filters are usually
         * pretty small thus saving more time than it is taking.
         */
        stringify(filtersForInsight),
    ]);
    var insightWithAddedWidgetProperties = useResolveDashboardInsightProperties({
        insight: insightWithAddedFilters !== null && insightWithAddedFilters !== void 0 ? insightWithAddedFilters : insight,
        widget: widget,
    });
    var _g = useDashboardInsightDrills({
        widget: widget,
        insight: insight,
        onDrill: onDrillFn,
    }), drillableItems = _g.drillableItems, onDrill = _g.onDrill, onPushData = _g.onPushData;
    var handlePushData = useCallback(function (data) {
        onPushData(data);
        executionsHandler.onPushData(data);
    }, [onPushData, executionsHandler.onPushData]);
    var isPositionRelative = insight &&
        insightVisualizationUrl(insight).includes("headline") &&
        clientWidth &&
        clientWidth < DASHBOARD_LAYOUT_RESPONSIVE_SMALL_WIDTH &&
        !enableKDWidgetCustomHeight;
    // CSS
    var insightPositionStyle = useMemo(function () {
        return {
            width: "100%",
            height: "100%",
            position: 
            // Headline violates the layout contract.
            // It should fit parent height and adapt to it as other visualizations.
            // Now, it works differently for the Headline - parent container adapts to Headline size.
            isPositionRelative ? "relative" : "absolute",
        };
    }, [isPositionRelative]);
    var insightWrapperStyle = useMemo(function () {
        return isVisualizationLoading ? { height: 0 } : undefined;
    }, [isVisualizationLoading]);
    // Error handling
    var handleError = useCallback(function (error) {
        setVisualizationError(error);
        onError === null || onError === void 0 ? void 0 : onError(error);
        executionsHandler.onError(error);
    }, [onError, dispatchEvent, executionsHandler.onError]);
    var error = filtersError !== null && filtersError !== void 0 ? filtersError : visualizationError;
    return (React.createElement("div", { className: "visualization-content" },
        React.createElement("div", { className: "gd-visualization-content", style: insightPositionStyle },
            React.createElement(IntlWrapper, { locale: locale },
                (filtersStatus === "running" || isVisualizationLoading) && React.createElement(LoadingComponent, null),
                error && (React.createElement(CustomError, { error: error, isCustomWidgetHeightEnabled: !!(settings === null || settings === void 0 ? void 0 : settings.enableKDWidgetCustomHeight), height: clientHeight, width: clientWidth })),
                filtersStatus === "success" && (React.createElement("div", { className: "insight-view-visualization", style: insightWrapperStyle },
                    React.createElement(InsightRenderer, { insight: insightWithAddedWidgetProperties, backend: effectiveBackend, workspace: effectiveWorkspace, drillableItems: drillableItems, onDrill: onDrill, config: chartConfig, onLoadingChanged: handleLoadingChanged, locale: locale, settings: settings, colorPalette: colorPalette, onError: handleError, pushData: handlePushData, ErrorComponent: ErrorComponent, LoadingComponent: LoadingComponent, onExportReady: onExportReady })))))));
};
//# sourceMappingURL=DashboardInsight.js.map
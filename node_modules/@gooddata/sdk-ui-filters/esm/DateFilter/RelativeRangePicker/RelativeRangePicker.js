import { __assign, __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import cx from "classnames";
import { DynamicSelect } from "../DynamicSelect/DynamicSelect";
import { getRelativeDateFilterItems } from "../DynamicSelect/utils";
import { injectIntl } from "react-intl";
import { defaultVisibleItemsRange } from "../Select/VirtualizedSelectMenu";
var RelativeRangePickerComponent = /** @class */ (function (_super) {
    __extends(RelativeRangePickerComponent, _super);
    function RelativeRangePickerComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toFieldRef = React.createRef();
        _this.isTouchDevice = function () {
            return "ontouchstart" in window || navigator.msMaxTouchPoints;
        };
        _this.focusToField = function () {
            var isTouchDevice = _this.isTouchDevice();
            if (_this.toFieldRef.current) {
                /**
                 * Prevents hover style from persisting after switching to another field on
                 * touchscreen devices.
                 */
                isTouchDevice
                    ? setTimeout(function () {
                        _this.toFieldRef.current.focus();
                    }, 0)
                    : _this.toFieldRef.current.focus();
            }
        };
        _this.blurToField = function () {
            var isTouchDevice = _this.isTouchDevice();
            if (_this.toFieldRef.current) {
                isTouchDevice
                    ? setTimeout(function () {
                        _this.toFieldRef.current.blur();
                    }, 0)
                    : _this.toFieldRef.current.blur();
            }
        };
        _this.handleFromChange = function (from) {
            _this.props.onSelectedFilterOptionChange(__assign(__assign({}, _this.props.selectedFilterOption), { from: from }));
            if (from !== undefined) {
                _this.focusToField();
            }
        };
        _this.handleToChange = function (to) {
            _this.props.onSelectedFilterOptionChange(__assign(__assign({}, _this.props.selectedFilterOption), { to: to }));
            _this.blurToField();
        };
        return _this;
    }
    RelativeRangePickerComponent.prototype.render = function () {
        var _a = this, handleFromChange = _a.handleFromChange, handleToChange = _a.handleToChange;
        var _b = this.props, selectedFilterOption = _b.selectedFilterOption, intl = _b.intl, isMobile = _b.isMobile;
        var mobileVisibleItemsRange = 5;
        var commonProps = {
            visibleItemsRange: isMobile ? mobileVisibleItemsRange : defaultVisibleItemsRange,
            optionClassName: "s-relative-date-filter-option s-do-not-close-dropdown-on-click",
            getItems: function (value) {
                var items = getRelativeDateFilterItems(value, selectedFilterOption.granularity, intl);
                // separators are not needed in mobile as all the items have borders
                return isMobile ? items.filter(function (item) { return item.type !== "separator"; }) : items;
            },
        };
        return (React.createElement("div", { className: "gd-relative-range-picker s-relative-range-picker" },
            React.createElement(DynamicSelect, __assign({ value: selectedFilterOption.from, onChange: handleFromChange, placeholder: intl.formatMessage({ id: "filters.from" }), className: cx("gd-relative-range-picker-picker", "s-relative-range-picker-from", isMobile && "gd-relative-range-picker-picker-mobile") }, commonProps)),
            React.createElement("span", { className: "gd-relative-range-picker-dash" }, "\u2014"),
            React.createElement(DynamicSelect, __assign({ value: selectedFilterOption.to, onChange: handleToChange, placeholder: intl.formatMessage({ id: "filters.to" }), className: cx("gd-relative-range-picker-picker", "s-relative-range-picker-to", isMobile && "gd-relative-range-picker-picker-mobile") }, commonProps, { ref: this.toFieldRef }))));
    };
    return RelativeRangePickerComponent;
}(React.Component));
export var RelativeRangePicker = injectIntl(RelativeRangePickerComponent);
//# sourceMappingURL=RelativeRangePicker.js.map
// (C) 2021 GoodData Corporation
import { __extends } from "tslib";
import { PluggableColumnChart } from "./PluggableColumnChart";
import { BaseChartDescriptor } from "../baseChart/BaseChartDescriptor";
import { bucketIsEmpty, insightBucket } from "@gooddata/sdk-model";
import { addIntersectionFiltersToInsight, modifyBucketsAttributesForDrillDown } from "../drillDownUtil";
import { BucketNames, getIntersectionPartAfter, } from "@gooddata/sdk-ui";
import { arrayUtils } from "@gooddata/util";
import { drillDownFromAttributeLocalId } from "../../../utils/ImplicitDrillDownHelper";
var ColumnChartDescriptor = /** @class */ (function (_super) {
    __extends(ColumnChartDescriptor, _super);
    function ColumnChartDescriptor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnChartDescriptor.prototype.getFactory = function () {
        return function (params) { return new PluggableColumnChart(params); };
    };
    ColumnChartDescriptor.prototype.applyDrillDown = function (insight, drillDownContext) {
        var withFilters = this.addFiltersForColumnBar(insight, drillDownContext.drillDefinition, drillDownContext.event);
        return modifyBucketsAttributesForDrillDown(withFilters, drillDownContext.drillDefinition);
    };
    ColumnChartDescriptor.prototype.adjustIntersectionForColumnBar = function (insight, event) {
        var stackBucket = insightBucket(insight, BucketNames.STACK);
        var hasStackByAttributes = stackBucket && !bucketIsEmpty(stackBucket);
        var intersection = event.drillContext.intersection;
        return hasStackByAttributes ? arrayUtils.shiftArrayRight(intersection) : intersection;
    };
    ColumnChartDescriptor.prototype.addFiltersForColumnBar = function (insight, drillConfig, event) {
        var clicked = drillDownFromAttributeLocalId(drillConfig);
        var reorderedIntersection = this.adjustIntersectionForColumnBar(insight, event);
        var cutIntersection = getIntersectionPartAfter(reorderedIntersection, clicked);
        return addIntersectionFiltersToInsight(insight, cutIntersection);
    };
    return ColumnChartDescriptor;
}(BaseChartDescriptor));
export { ColumnChartDescriptor };
//# sourceMappingURL=ColumnChartDescriptor.js.map
import { __assign } from "tslib";
// (C) 2007-2021 GoodData Corporation
import partial from "lodash/partial";
import merge from "lodash/merge";
import includes from "lodash/includes";
import isNil from "lodash/isNil";
import set from "lodash/set";
import isArray from "lodash/isArray";
import { formatAsPercent, getLabelStyle, getLabelsVisibilityConfig } from "./dataLabelsHelpers";
import { getPrimaryChartType, isInvertedChartType, isColumnChart, isComboChart, isLineChart, } from "../_util/common";
import { canComboChartBeStackedInPercent } from "../comboChart/comboChartOptions";
import { isPrimaryYAxis } from "./isPrimaryYAxis";
import { supportedStackingAttributesChartTypes } from "../_chartOptions/chartCapabilities";
/**
 * Set 'normal' stacking config to single series which will overwrite config in 'plotOptions.series'
 * @param stackMeasures
 * @param seriesItem
 */
function handleStackMeasure(stackMeasures, seriesItem) {
    return stackMeasures
        ? __assign(__assign({}, seriesItem), { stacking: "normal", stack: seriesItem.yAxis }) : seriesItem;
}
/**
 * Set 'percent' stacking config to single series which will overwrite config in 'plotOptions.series'
 * @param stackMeasuresToPercent
 * @param seriesItem
 */
function handleStackMeasuresToPercent(stackMeasuresToPercent, seriesItem) {
    return stackMeasuresToPercent
        ? __assign(__assign({}, seriesItem), { stacking: "percent", stack: seriesItem.yAxis }) : seriesItem;
}
function getStackingValue(chartOptions, seriesItem) {
    var yAxes = chartOptions.yAxes, type = chartOptions.type;
    var stacking = seriesItem.stacking, yAxis = seriesItem.yAxis;
    var seriesChartType = seriesItem.type || type;
    var defaultStackingValue = isComboChart(type) ? null : "normal";
    return isPrimaryYAxis(yAxes[yAxis]) && !isLineChart(seriesChartType) ? stacking : defaultStackingValue;
}
function handleDualAxis(chartOptions, seriesItem) {
    var yAxes = chartOptions.yAxes, type = chartOptions.type;
    var isDualAxis = yAxes.length === 2;
    if (!isDualAxis && !isComboChart(type)) {
        return seriesItem;
    }
    var stacking = seriesItem.stacking;
    // highcharts stack config
    // percent stack is only applied to primary Y axis
    var hcStackingConfig = stacking ? { stacking: getStackingValue(chartOptions, seriesItem) } : {};
    return __assign(__assign({}, seriesItem), hcStackingConfig);
}
function handleLabelStyle(chartOptions, seriesItem) {
    if (!isComboChart(chartOptions.type)) {
        return seriesItem;
    }
    var type = seriesItem.type, stacking = seriesItem.stacking;
    return __assign(__assign({}, seriesItem), { dataLabels: {
            style: getLabelStyle(type, stacking),
        } });
}
function countMeasuresInSeries(series) {
    return series.reduce(function (result, seriesItem) {
        result[seriesItem.yAxis] += 1;
        return result;
    }, [0, 0]);
}
/**
 * For y axis having one series, this series should be removed stacking config
 * @param series
 */
export function getSanitizedStackingForSeries(series) {
    var _a = countMeasuresInSeries(series), primaryMeasuresNum = _a[0], secondaryMeasuresNum = _a[1];
    /**
     * stackMeasures is applied for both measures in each axis
     * stackMeasuresToPercent is applied for
     * - [measures on primary   y-axis only] or
     * - [measures on secondary y-axis only] or
     * - [applied for measures on primary y-axis + ignore for measures on secondary y-axis]
     */
    // has measures on both [primary y-axis] and [secondary y-axis]
    if (primaryMeasuresNum > 0 && secondaryMeasuresNum > 0) {
        return series.map(function (seriesItem) {
            // seriesItem is on [secondary y-axis]
            if (seriesItem.yAxis === 1) {
                return __assign(__assign({}, seriesItem), { stack: null, 
                    // reset stackMeasuresToPercent in this case (stacking: PERCENT_STACK)
                    stacking: seriesItem.stacking ? "normal" : null });
            }
            else {
                return seriesItem;
            }
        });
    }
    // has [measures on primary y-axis only] or [measures on secondary y-axis only]
    return series;
}
function getSeriesConfiguration(chartOptions, config, stackMeasures, stackMeasuresToPercent) {
    var series = config.series;
    var handlers = [
        partial(handleStackMeasure, stackMeasures),
        partial(handleStackMeasuresToPercent, stackMeasuresToPercent),
        partial(handleDualAxis, chartOptions),
        partial(handleLabelStyle, chartOptions),
    ];
    // get series with stacking config
    var seriesWithStackingConfig = series.map(function (seriesItem) {
        return handlers.reduce(function (result, handler) { return handler(result); }, seriesItem);
    });
    return {
        series: getSanitizedStackingForSeries(seriesWithStackingConfig),
    };
}
export function getYAxisConfiguration(chartOptions, config, chartConfig) {
    var _a;
    var type = getPrimaryChartType(chartOptions);
    var yAxis;
    yAxis = config.yAxis;
    if (!isArray(yAxis)) {
        yAxis = [yAxis];
    }
    var _b = chartConfig.stackMeasuresToPercent, stackMeasuresToPercent = _b === void 0 ? false : _b;
    // only support column char
    // bar chart disables stack labels by default
    if (!isColumnChart(type)) {
        return {};
    }
    var labelsVisible = (_a = chartConfig.dataLabels) === null || _a === void 0 ? void 0 : _a.visible;
    var dataLabelEnabled = getLabelsVisibilityConfig(labelsVisible).enabled;
    // enable by default or follow dataLabels.visible config
    var stackLabelConfig = isNil(dataLabelEnabled) || dataLabelEnabled;
    var yAxisWithStackLabel = yAxis.map(function (axis, index) {
        // disable stack labels for primary Y axis when there is 'Stack to 100%' on
        var stackLabelEnabled = (index !== 0 || !stackMeasuresToPercent) && stackLabelConfig;
        return __assign(__assign({}, axis), { stackLabels: {
                enabled: stackLabelEnabled,
            } });
    });
    return { yAxis: yAxisWithStackLabel };
}
/**
 * Set config to highchart for 'Stack Measures' and 'Stack to 100%'
 * @param chartOptions
 * @param config
 * @param chartConfig
 */
export function getStackMeasuresConfiguration(chartOptions, config, chartConfig) {
    var _a, _b;
    var _c = chartConfig.stackMeasures, stackMeasures = _c === void 0 ? false : _c, _d = chartConfig.stackMeasuresToPercent, stackMeasuresToPercent = _d === void 0 ? false : _d;
    var canStackInPercent = canComboChartBeStackedInPercent((_b = (_a = chartOptions.data) === null || _a === void 0 ? void 0 : _a.series) !== null && _b !== void 0 ? _b : []);
    if (!stackMeasures && !stackMeasuresToPercent) {
        return {};
    }
    return __assign(__assign({}, getSeriesConfiguration(chartOptions, config, stackMeasures, stackMeasuresToPercent && canStackInPercent)), getYAxisConfiguration(chartOptions, config, chartConfig));
}
/**
 * Add style to X axis in case of 'grouped-categories'
 * @param chartOptions
 * @param config
 */
export function getParentAttributeConfiguration(chartOptions, config) {
    var type = chartOptions.type;
    var xAxis = config.xAxis;
    var xAxisItem = xAxis[0]; // expect only one X axis
    // parent attribute in X axis
    var parentAttributeOptions = {};
    // only apply font-weight to parent label
    set(parentAttributeOptions, "style", {
        fontWeight: "bold",
    });
    if (isInvertedChartType(type)) {
        // distance more 5px for two groups of attributes for bar chart
        set(parentAttributeOptions, "x", -5);
    }
    // 'groupedOptions' is custom property in 'grouped-categories' plugin
    set(xAxisItem, "labels.groupedOptions", [parentAttributeOptions]);
    return { xAxis: [xAxisItem] };
}
export function setDrillConfigToXAxis(drillConfig) {
    return { xAxis: [{ drillConfig: drillConfig }] };
}
/**
 * Format labels in Y axis from '0 - 100' to '0% - 100%'
 * Only applied when measure/series in Y axis more than one
 * @param chartOptions
 * @param chartConfig
 * @param [config]
 */
export function getShowInPercentConfiguration(chartOptions, chartConfig, _config) {
    var _a;
    if (chartOptions === void 0) { chartOptions = {}; }
    if (_config === void 0) { _config = {}; }
    var _b = chartConfig.stackMeasuresToPercent, stackMeasuresToPercent = _b === void 0 ? false : _b, primaryChartType = chartConfig.primaryChartType;
    var canStackInPercent = canComboChartBeStackedInPercent((_a = chartOptions.data) === null || _a === void 0 ? void 0 : _a.series);
    if (!canStackInPercent || !stackMeasuresToPercent || isLineChart(primaryChartType)) {
        return {};
    }
    var _c = chartOptions.yAxes, yAxes = _c === void 0 ? [] : _c, type = chartOptions.type;
    var percentageFormatter = partial(formatAsPercent, 1);
    // suppose that max number of y axes is 2
    // percentage format only supports primary axis
    var yAxis = yAxes.map(function (axis, index) {
        if (index !== 0 || (isComboChart(type) && !isPrimaryYAxis(axis))) {
            return {};
        }
        return {
            labels: {
                formatter: percentageFormatter,
            },
        };
    });
    return { yAxis: yAxis };
}
/**
 * Convert [0, 1] to [0, 100], it's needed by highchart
 * Only applied to primary Y axis
 * @param _chartOptions
 * @param config
 * @param chartConfig
 */
export function convertMinMaxFromPercentToNumber(_chartOptions, config, chartConfig) {
    var _a = chartConfig.stackMeasuresToPercent, stackMeasuresToPercent = _a === void 0 ? false : _a;
    if (!stackMeasuresToPercent) {
        return {};
    }
    var yAxes;
    yAxes = config.yAxis;
    if (!isArray(yAxes)) {
        yAxes = [yAxes];
    }
    var yAxis = yAxes.map(function (axis, _, axes) {
        var min = axis.min, max = axis.max;
        var newAxis = {};
        if (!isNil(min)) {
            set(newAxis, "min", min * 100);
        }
        if (!isNil(max)) {
            set(newAxis, "max", max * 100);
        }
        var numberOfAxes = axes.length;
        if (numberOfAxes === 1) {
            return newAxis;
        }
        var _a = axis.opposite, opposite = _a === void 0 ? false : _a;
        return opposite ? {} : newAxis;
    });
    return { yAxis: yAxis };
}
export default function getOptionalStackingConfiguration(chartOptions, config, chartConfig, drillConfig) {
    if (chartConfig === void 0) { chartConfig = {}; }
    var type = chartOptions.type;
    return includes(supportedStackingAttributesChartTypes, type)
        ? merge({}, setDrillConfigToXAxis(drillConfig), getParentAttributeConfiguration(chartOptions, config), getStackMeasuresConfiguration(chartOptions, config, chartConfig), getShowInPercentConfiguration(chartOptions, chartConfig, config), convertMinMaxFromPercentToNumber(chartOptions, config, chartConfig))
        : {};
}
//# sourceMappingURL=getOptionalStackingConfiguration.js.map
import { __extends } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { Component, createRef } from "react";
import cx from "classnames";
import { injectIntl } from "react-intl";
import { stringUtils } from "@gooddata/util";
import { InsightListItemDate, getDateTimeConfig } from "./InsightListItemDate";
import { Button } from "../Button";
import { ShortenedText } from "../ShortenedText";
var VISUALIZATION_TYPE_UNKNOWN = "unknown";
var WIDGET_TYPE_KPI = "kpi";
var visualizationIconWidthAndPadding = 42;
var tooltipAlignPoints = [
    {
        align: "cr cl",
    },
    {
        align: "cl cr",
        offset: {
            x: -visualizationIconWidthAndPadding,
            y: 0,
        },
    },
];
/**
 * @internal
 */
var InsightListItemCore = /** @class */ (function (_super) {
    __extends(InsightListItemCore, _super);
    function InsightListItemCore() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.shortenedTextRef = createRef();
        _this.handleClickDelete = function (e) {
            e.stopPropagation();
            var onDelete = _this.props.onDelete;
            if (onDelete) {
                _this.props.onDelete();
            }
        };
        _this.renderLock = function () {
            if (_this.props.isLocked) {
                return React.createElement("i", { className: "gd-icon-lock" });
            }
            return false;
        };
        _this.renderUpdatedDateTime = function (date) {
            var type = _this.props.type;
            if (!date) {
                return false;
            }
            if (type === WIDGET_TYPE_KPI) {
                return React.createElement("span", null);
            }
            return React.createElement(InsightListItemDate, { config: getDateTimeConfig(date) });
        };
        _this.renderActions = function () {
            var onDelete = _this.props.onDelete;
            return (onDelete && (React.createElement("div", { className: "gd-visualizations-list-item-actions" },
                React.createElement(Button, { className: "gd-button-link gd-button-icon-only gd-button-small\n                        gd-icon-cross gd-visualizations-list-item-action-delete s-delete-item", onClick: _this.handleClickDelete }))));
        };
        return _this;
    }
    InsightListItemCore.prototype.render = function () {
        var _a = this.props, title = _a.title, updated = _a.updated, _b = _a.type, type = _b === void 0 ? VISUALIZATION_TYPE_UNKNOWN : _b, isSelected = _a.isSelected, isLoading = _a.isLoading, onClick = _a.onClick;
        var iconClassName = cx("gd-vis-type", "gd-vis-type-" + type);
        var visualizationListItemClassname = cx("gd-visualizations-list-item", "s-" + stringUtils.simplifyText(title), {
            "is-selected": isSelected,
        });
        return (React.createElement("div", { className: visualizationListItemClassname, onClick: onClick },
            React.createElement("div", { className: iconClassName }),
            React.createElement("div", { className: "gd-visualizations-list-item-content" },
                React.createElement("div", { className: "gd-visualizations-list-item-content-name" },
                    this.renderLock(),
                    React.createElement(ShortenedText, { ref: this.shortenedTextRef, tooltipAlignPoints: tooltipAlignPoints }, isLoading
                        ? this.props.intl.formatMessage({ id: "gs.visualizationsList.loading" })
                        : title)),
                React.createElement("div", { className: "gd-visualizations-list-item-content-date" }, this.renderUpdatedDateTime(updated))),
            this.renderActions()));
    };
    InsightListItemCore.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.width !== this.props.width && this.shortenedTextRef.current) {
            this.shortenedTextRef.current.recomputeShortening();
        }
    };
    return InsightListItemCore;
}(Component));
export { InsightListItemCore };
/**
 * @internal
 */
export var InsightListItem = injectIntl(InsightListItemCore);
//# sourceMappingURL=InsightListItem.js.map
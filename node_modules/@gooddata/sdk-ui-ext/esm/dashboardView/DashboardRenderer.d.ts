import React from "react";
import { FilterContextItem, IAnalyticalBackend, IFilterContext, ITempFilterContext, IWidget, IDashboardLayout } from "@gooddata/sdk-backend-spi";
import { ObjRef, IInsight } from "@gooddata/sdk-model";
import { ExplicitDrill, IErrorProps, ILoadingProps, OnError, VisType } from "@gooddata/sdk-ui";
import { IDashboardFilter, IDashboardWidgetRenderer, DashboardLayoutTransform, OnFiredDashboardViewDrillEvent } from "./types";
interface IDashboardRendererProps {
    dashboardRef: ObjRef;
    dashboardLayout: IDashboardLayout;
    backend?: IAnalyticalBackend;
    workspace?: string;
    filters?: FilterContextItem[];
    onFiltersChange?: (filters: IDashboardFilter[]) => void;
    filterContext?: IFilterContext | ITempFilterContext;
    drillableItems?: ExplicitDrill[];
    onDrill?: OnFiredDashboardViewDrillEvent;
    ErrorComponent: React.ComponentType<IErrorProps>;
    LoadingComponent: React.ComponentType<ILoadingProps>;
    onError?: OnError;
    className?: string;
    getVisType: (widget: IWidget) => VisType;
    getInsightByRef: (insightRef: ObjRef) => IInsight | undefined;
    widgetRenderer: IDashboardWidgetRenderer;
    areSectionHeadersEnabled?: boolean;
    transformLayout?: DashboardLayoutTransform<any>;
}
export declare const DashboardRenderer: React.FC<IDashboardRendererProps>;
export {};
//# sourceMappingURL=DashboardRenderer.d.ts.map
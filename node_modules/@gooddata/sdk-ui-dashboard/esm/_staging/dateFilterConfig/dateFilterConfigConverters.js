import { __assign } from "tslib";
// (C) 2019-2021 GoodData Corporation
import groupBy from "lodash/groupBy";
import isEmpty from "lodash/isEmpty";
import min from "lodash/min";
import max from "lodash/max";
import format from "date-fns/format";
import startOfDay from "date-fns/startOfDay";
import subMonths from "date-fns/subMonths";
// TODO: this import was coming from internal/esm and was wrecking tests
var PLATFORM_DATE_FORMAT = "yyyy-MM-dd";
/**
 * Converts date filter config - as stored on the backend - into the date filter options that are aimed for
 * consumption by the actual date filtering view components.
 *
 * @param config - date filter config from backend
 */
export function convertDateFilterConfigToDateFilterOptions(config) {
    var allTime = convertAllTime(config.allTime);
    var absoluteForm = convertAbsoluteForm(config.absoluteForm);
    var relativeForm = convertRelativeForm(config.relativeForm);
    var absolutePreset = convertAbsolutePresets(config.absolutePresets);
    var relativePreset = convertRelativePresets(config.relativePresets);
    return removeEmptyKeysFromDateFilterOptions({
        allTime: allTime,
        absoluteForm: absoluteForm,
        absolutePreset: absolutePreset,
        relativeForm: relativeForm,
        relativePreset: relativePreset,
    });
}
function convertAllTime(filter) {
    return (filter && __assign(__assign({}, filter), { type: "allTime" }));
}
function convertAbsoluteForm(filter) {
    return (filter && __assign(__assign({}, filter), { from: format(startOfDay(subMonths(new Date(), 1)), PLATFORM_DATE_FORMAT), to: format(startOfDay(new Date()), PLATFORM_DATE_FORMAT), type: "absoluteForm" }));
}
function convertRelativeForm(filter) {
    return (filter && {
        from: undefined,
        // we order the granularities anyway, this lets the user to config the default
        granularity: filter.availableGranularities[0],
        localIdentifier: filter.localIdentifier,
        name: filter.name,
        to: undefined,
        type: "relativeForm",
        visible: filter.visible,
    });
}
function convertAbsolutePresets(filters) {
    return (filters &&
        filters.map(function (preset) {
            return sanitizeDateFilterOption(__assign(__assign({}, preset), { type: "absolutePreset" }));
        }));
}
function convertRelativePresets(filters) {
    return (filters &&
        groupBy(filters.map(function (preset) {
            return sanitizeDateFilterOption(__assign(__assign({}, preset), { type: "relativePreset" }));
        }), function (preset) { return preset.granularity; }));
}
function removeEmptyKeysFromDateFilterOptions(dateFilterOptions) {
    var absoluteForm = dateFilterOptions.absoluteForm, absolutePreset = dateFilterOptions.absolutePreset, allTime = dateFilterOptions.allTime, relativeForm = dateFilterOptions.relativeForm, relativePreset = dateFilterOptions.relativePreset;
    return __assign(__assign(__assign(__assign(__assign({}, (allTime && { allTime: allTime })), (absoluteForm && { absoluteForm: absoluteForm })), (!isEmpty(absolutePreset) && { absolutePreset: absolutePreset })), (relativeForm && { relativeForm: relativeForm })), (!isEmpty(relativePreset) && { relativePreset: relativePreset }));
}
function sanitizeDateFilterOption(option) {
    return __assign(__assign({}, option), { from: min([option.from, option.to]), to: max([option.from, option.to]) });
}
//# sourceMappingURL=dateFilterConfigConverters.js.map
import { __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { newMeasureValueFilter, measureValueFilterCondition, isRangeCondition, isRangeConditionOperator, measureValueFilterOperator, isComparisonCondition, } from "@gooddata/sdk-model";
import { Dropdown } from "./Dropdown";
var getFilterValue = function (filter) {
    if (!filter) {
        return {};
    }
    var condition = measureValueFilterCondition(filter);
    if (!condition) {
        return {};
    }
    return isRangeCondition(condition)
        ? { from: condition.range.from, to: condition.range.to }
        : { value: condition.comparison.value };
};
var getTreatNullAsZeroValue = function (filter, treatNullAsZeroDefaultValue) {
    if (!filter || !measureValueFilterCondition(filter)) {
        return treatNullAsZeroDefaultValue !== undefined && treatNullAsZeroDefaultValue;
    }
    var condition = measureValueFilterCondition(filter);
    return ((isComparisonCondition(condition) && condition.comparison.treatNullValuesAs !== undefined) ||
        (isRangeCondition(condition) && condition.range.treatNullValuesAs !== undefined) ||
        false);
};
/**
 * @beta
 */
var MeasureValueFilterDropdown = /** @class */ (function (_super) {
    __extends(MeasureValueFilterDropdown, _super);
    function MeasureValueFilterDropdown() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onApply = function (operator, value, treatNullValuesAsZero) {
            var _a, _b, _c;
            var _d = _this.props, filter = _d.filter, measureIdentifier = _d.measureIdentifier, onApply = _d.onApply;
            if (operator === null || operator === "ALL") {
                onApply(null);
            }
            else {
                if (isRangeConditionOperator(operator)) {
                    onApply(newMeasureValueFilter({ localIdentifier: measureIdentifier } || filter.measureValueFilter.measure, operator, (_a = value.from) !== null && _a !== void 0 ? _a : 0, (_b = value.to) !== null && _b !== void 0 ? _b : 0, treatNullValuesAsZero ? 0 : undefined));
                }
                else {
                    onApply(newMeasureValueFilter({ localIdentifier: measureIdentifier } || filter.measureValueFilter.measure, operator, (_c = value.value) !== null && _c !== void 0 ? _c : 0, treatNullValuesAsZero ? 0 : undefined));
                }
            }
        };
        return _this;
    }
    MeasureValueFilterDropdown.prototype.render = function () {
        var _a = this.props, filter = _a.filter, onCancel = _a.onCancel, usePercentage = _a.usePercentage, warningMessage = _a.warningMessage, locale = _a.locale, anchorEl = _a.anchorEl, separators = _a.separators, displayTreatNullAsZeroOption = _a.displayTreatNullAsZeroOption, treatNullAsZeroDefaultValue = _a.treatNullAsZeroDefaultValue, enableOperatorSelection = _a.enableOperatorSelection;
        return (React.createElement(Dropdown, { onApply: this.onApply, onCancel: onCancel, operator: (filter && measureValueFilterOperator(filter)) || null, value: (filter && getFilterValue(filter)) || null, usePercentage: usePercentage, warningMessage: warningMessage, locale: locale, anchorEl: anchorEl, separators: separators, displayTreatNullAsZeroOption: displayTreatNullAsZeroOption, treatNullAsZeroValue: getTreatNullAsZeroValue(filter, treatNullAsZeroDefaultValue), enableOperatorSelection: enableOperatorSelection }));
    };
    MeasureValueFilterDropdown.defaultProps = {
        displayTreatNullAsZeroOption: false,
        treatNullAsZeroDefaultValue: false,
        enableOperatorSelection: true,
    };
    return MeasureValueFilterDropdown;
}(React.PureComponent));
export { MeasureValueFilterDropdown };
//# sourceMappingURL=MeasureValueFilterDropdown.js.map
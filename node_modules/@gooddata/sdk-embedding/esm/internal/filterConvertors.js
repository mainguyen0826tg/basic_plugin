import { __assign } from "tslib";
// (C) 2020 GoodData Corporation
import isEmpty from "lodash/isEmpty";
import isNumber from "lodash/isNumber";
import isString from "lodash/isString";
import { EmbeddedGdc } from "../iframe/common";
import { GdcExecuteAFM } from "@gooddata/api-model-bear";
export var EXTERNAL_DATE_FILTER_FORMAT = "YYYY-MM-DD";
var DATE_FORMAT_REGEX = /^\d{4}-\d{2}-\d{2}$/;
export var ALL_TIME_GRANULARITY = "ALL_TIME_GRANULARITY";
function validateDataSet(dataSet) {
    if (!dataSet) {
        return false;
    }
    var _a = getObjectUriIdentifier(dataSet), uri = _a.uri, identifier = _a.identifier;
    return isString(uri) || isString(identifier);
}
export function isValidDateFilterFormat(filterItem, shouldValidateDataSet) {
    if (shouldValidateDataSet === void 0) { shouldValidateDataSet = true; }
    if (EmbeddedGdc.isAbsoluteDateFilter(filterItem)) {
        var _a = filterItem.absoluteDateFilter, from = _a.from, to = _a.to, dataSet = _a.dataSet;
        var isValidDataSet = shouldValidateDataSet ? validateDataSet(dataSet) : true;
        return (isValidDataSet &&
            isString(from) &&
            isString(to) &&
            DATE_FORMAT_REGEX.test(from) &&
            DATE_FORMAT_REGEX.test(to));
    }
    else {
        var _b = filterItem.relativeDateFilter, from = _b.from, to = _b.to, dataSet = _b.dataSet;
        var isValidDataSet = shouldValidateDataSet ? validateDataSet(dataSet) : true;
        return isValidDataSet && isNumber(from) && isNumber(to);
    }
}
function isValidAttributeFilterFormat(filterItem) {
    if (!EmbeddedGdc.isAttributeFilter(filterItem)) {
        return false;
    }
    if (EmbeddedGdc.isPositiveAttributeFilter(filterItem)) {
        var _a = filterItem.positiveAttributeFilter, displayForm = _a.displayForm, attributeElements = _a.in;
        var _b = getObjectUriIdentifier(displayForm), uri = _b.uri, identifier = _b.identifier;
        return ((isString(uri) || isString(identifier)) &&
            Array.isArray(attributeElements) &&
            attributeElements.length !== 0);
    }
    else {
        var _c = filterItem.negativeAttributeFilter, displayForm = _c.displayForm, attributeElements = _c.notIn;
        var _d = getObjectUriIdentifier(displayForm), uri = _d.uri, identifier = _d.identifier;
        // attributeElements could be empty in case of setting All Value
        return (isString(uri) || isString(identifier)) && Array.isArray(attributeElements);
    }
}
function isValidRankingFilterOperator(operator) {
    return operator === "TOP" || operator === "BOTTOM";
}
function isValidRankingFilterValue(value) {
    return typeof value === "number" && value > 0 && value <= 99999 && value % 1 === 0;
}
function isValidLocalIdentifier(localIdentifier) {
    return (GdcExecuteAFM.isLocalIdentifierQualifier(localIdentifier) &&
        typeof localIdentifier.localIdentifier === "string");
}
function isValidRankingFilterAttributes(attributes) {
    return (!attributes ||
        (Array.isArray(attributes) && attributes.length > 0 && attributes.every(isValidLocalIdentifier)));
}
function isValidRankingFilterFormat(rankingFilterItem) {
    var _a = rankingFilterItem.rankingFilter, measure = _a.measure, attributes = _a.attributes, value = _a.value, operator = _a.operator;
    return (isValidLocalIdentifier(measure) &&
        isValidRankingFilterAttributes(attributes) &&
        isValidRankingFilterOperator(operator) &&
        isValidRankingFilterValue(value));
}
// `dataSet` is required in AD only.
// In AD, we call this function with `shouldValidateDataSet = true`
// In KD, we call this function with `shouldValidateDataSet = false`
export function isValidFilterItemFormat(filterItem, shouldValidateDataSet) {
    if (shouldValidateDataSet === void 0) { shouldValidateDataSet = true; }
    if (EmbeddedGdc.isDateFilter(filterItem)) {
        return isValidDateFilterFormat(filterItem, shouldValidateDataSet);
    }
    else if (EmbeddedGdc.isAttributeFilter(filterItem)) {
        return isValidAttributeFilterFormat(filterItem);
    }
    else if (EmbeddedGdc.isRankingFilter(filterItem)) {
        return isValidRankingFilterFormat(filterItem);
    }
    return false;
}
export function isValidRemoveFilterItemFormat(filterItem) {
    if (EmbeddedGdc.isRemoveDateFilter(filterItem)) {
        var dataSet = filterItem.dataSet;
        var _a = getObjectUriIdentifier(dataSet), uri = _a.uri, identifier = _a.identifier;
        return isString(uri) || isString(identifier);
    }
    else if (EmbeddedGdc.isRemoveAttributeFilter(filterItem)) {
        var displayForm = filterItem.displayForm;
        var _b = getObjectUriIdentifier(displayForm), uri = _b.uri, identifier = _b.identifier;
        return isString(uri) || isString(identifier);
    }
    else if (EmbeddedGdc.isRemoveRankingFilter(filterItem)) {
        return true;
    }
    return false;
}
export function isValidRemoveFiltersFormat(filters) {
    return !isEmpty(filters) && filters.every(isValidRemoveFilterItemFormat);
}
export function isValidFiltersFormat(filters, shouldValidateDataSet) {
    if (shouldValidateDataSet === void 0) { shouldValidateDataSet = true; }
    return (!isEmpty(filters) && filters.every(function (filter) { return isValidFilterItemFormat(filter, shouldValidateDataSet); }));
}
export function getObjectUriIdentifier(obj) {
    if (!obj) {
        return {};
    }
    return {
        uri: EmbeddedGdc.isObjectUriQualifier(obj) ? obj.uri : undefined,
        identifier: EmbeddedGdc.isObjIdentifierQualifier(obj) ? obj.identifier : undefined,
    };
}
function transformDateFilterItem(dateFilterItem) {
    if (EmbeddedGdc.isAbsoluteDateFilter(dateFilterItem)) {
        var _a = dateFilterItem.absoluteDateFilter, dataSet = _a.dataSet, from = _a.from, to = _a.to;
        var _b = getObjectUriIdentifier(dataSet), datasetUri = _b.uri, datasetIdentifier = _b.identifier;
        return {
            to: to,
            from: from,
            datasetUri: datasetUri,
            datasetIdentifier: datasetIdentifier,
        };
    }
    else {
        var _c = dateFilterItem.relativeDateFilter, granularity = _c.granularity, dataSet = _c.dataSet, from = _c.from, to = _c.to;
        var _d = getObjectUriIdentifier(dataSet), datasetUri = _d.uri, datasetIdentifier = _d.identifier;
        return {
            to: to,
            from: from,
            granularity: granularity,
            datasetUri: datasetUri,
            datasetIdentifier: datasetIdentifier,
        };
    }
}
function transformAttributeFilterItem(attributeFilterItem) {
    if (EmbeddedGdc.isPositiveAttributeFilter(attributeFilterItem)) {
        var _a = attributeFilterItem.positiveAttributeFilter, attributeElements = _a.in, displayForm = _a.displayForm;
        var _b = getObjectUriIdentifier(displayForm), dfUri = _b.uri, dfIdentifier = _b.identifier;
        return {
            negativeSelection: false,
            attributeElements: attributeElements,
            dfIdentifier: dfIdentifier,
            dfUri: dfUri,
        };
    }
    else {
        var _c = attributeFilterItem.negativeAttributeFilter, attributeElements = _c.notIn, displayForm = _c.displayForm;
        var _d = getObjectUriIdentifier(displayForm), dfUri = _d.uri, dfIdentifier = _d.identifier;
        return {
            negativeSelection: true,
            attributeElements: attributeElements,
            dfIdentifier: dfIdentifier,
            dfUri: dfUri,
        };
    }
}
function transformRankingFilterItem(rankingFilterItem) {
    var _a = rankingFilterItem.rankingFilter, measure = _a.measure, attributes = _a.attributes, value = _a.value, operator = _a.operator;
    var attributesProp = attributes
        ? { attributeLocalIdentifiers: attributes.map(function (attribute) { return attribute.localIdentifier; }) }
        : {};
    return __assign(__assign({ measureLocalIdentifier: measure.localIdentifier }, attributesProp), { value: value,
        operator: operator });
}
export function transformFilterContext(filters) {
    var defaultFiltersObject = {
        attributeFilters: [],
        dateFilters: [],
    };
    if (isEmpty(filters)) {
        return defaultFiltersObject;
    }
    return filters.reduce(function (externalFilters, filterItem) {
        if (EmbeddedGdc.isDateFilter(filterItem)) {
            var dateFilter = transformDateFilterItem(filterItem);
            externalFilters.dateFilters.push(dateFilter);
        }
        else if (EmbeddedGdc.isAttributeFilter(filterItem)) {
            var attributeFilter = transformAttributeFilterItem(filterItem);
            externalFilters.attributeFilters.push(attributeFilter);
        }
        else if (EmbeddedGdc.isRankingFilter(filterItem)) {
            var rankingFilter = transformRankingFilterItem(filterItem);
            externalFilters.rankingFilter = rankingFilter;
        }
        return externalFilters;
    }, defaultFiltersObject);
}
export function isTransformedDateFilterItem(filterItem) {
    var _a = filterItem, from = _a.from, to = _a.to;
    return !isEmpty(filterItem) && from !== undefined && to !== undefined;
}
export function isTransformedAttributeFilterItem(filterItem) {
    var attributeElements = filterItem.attributeElements;
    return !isEmpty(filterItem) && attributeElements !== undefined;
}
export function isAllTimeDateFilterItem(filterItem) {
    return (!isEmpty(filterItem) &&
        filterItem.granularity === ALL_TIME_GRANULARITY);
}
export function isAllValueAttributeFilterItem(filterItem) {
    return (!isEmpty(filterItem) &&
        isTransformedAttributeFilterItem(filterItem) &&
        !filterItem.attributeElements.length);
}
//# sourceMappingURL=filterConvertors.js.map
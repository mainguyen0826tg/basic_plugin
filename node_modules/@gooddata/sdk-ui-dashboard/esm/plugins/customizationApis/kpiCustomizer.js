import { __read, __spread, __values } from "tslib";
import { DefaultDashboardKpi } from "../../presentation";
import { InvariantError } from "ts-invariant";
var DefaultKpiRendererProvider = function () {
    return DefaultDashboardKpi;
};
var DefaultKpiCustomizerState = /** @class */ (function () {
    function DefaultKpiCustomizerState(defaultProvider) {
        var _this = this;
        /*
         * Core provider encapsulates resolution using the chain of core providers.
         */
        this.coreProvider = function (kpi, widget) {
            var e_1, _a;
            var providerStack = __spread(_this.coreProviderChain).reverse();
            try {
                for (var providerStack_1 = __values(providerStack), providerStack_1_1 = providerStack_1.next(); !providerStack_1_1.done; providerStack_1_1 = providerStack_1.next()) {
                    var provider = providerStack_1_1.value;
                    var Component = provider(kpi, widget);
                    if (Component) {
                        return Component;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (providerStack_1_1 && !providerStack_1_1.done && (_a = providerStack_1.return)) _a.call(providerStack_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // if this happens then the provider chain got messed up. by default the chain contains the default
            // provider which never returns undefined
            throw new InvariantError();
        };
        /*
         * Root provider is THE provider that should be used in the dashboard extension properties. The
         * provider function included here will reflect the setup where there may be N registered decorators
         * sitting on top of a chain of core providers.
         *
         * In the initial state the root provider IS the core provider - meaning no decorations. As the
         * decorators get registered, the rootProvider changes.
         */
        this.rootProvider = this.coreProvider;
        this.coreProviderChain = [defaultProvider];
    }
    DefaultKpiCustomizerState.prototype.addCustomProvider = function (provider) {
        this.coreProviderChain.push(provider);
    };
    DefaultKpiCustomizerState.prototype.getRootProvider = function () {
        return this.rootProvider;
    };
    DefaultKpiCustomizerState.prototype.switchRootProvider = function (provider) {
        this.rootProvider = provider;
    };
    return DefaultKpiCustomizerState;
}());
/**
 * Sealed customizer state will not allow to perform any modifications of the state. Sealing the state
 * is essential to make the customization more defensive: during the registration, the plugin can hang
 * onto the dashboard customizer - stash it somewhere. And then after registration try to use the customizer
 * and try to do additional 'ad-hoc' customizations.
 *
 * Such a thing is not supported by the lifecycle and this sealing is in place to prevent plugins going into
 * that dangerous territory.
 */
var SealedKpiCustomizerState = /** @class */ (function () {
    function SealedKpiCustomizerState(logger, state) {
        var _this = this;
        this.logger = logger;
        this.state = state;
        this.addCustomProvider = function (_provider) {
            // eslint-disable-next-line no-console
            _this.logger.warn("Attempting to customize KPI rendering outside of plugin registration. Ignoring.");
        };
        // eslint-disable-next-line sonarjs/no-identical-functions
        this.switchRootProvider = function (_provider) {
            // eslint-disable-next-line no-console
            _this.logger.warn("Attempting to customize KPI rendering outside of plugin registration. Ignoring.");
        };
        this.getRootProvider = function () {
            return _this.state.getRootProvider();
        };
    }
    return SealedKpiCustomizerState;
}());
/**
 * Default implementation of the KPI rendering customizer. Notice that the state of the customizations
 * is kept separate from this class.
 *
 * This code is responsible for creation of the providers (if needed) and then updating the state
 * accordingly. The customizer state methods are responsible for doing correct updates of the state itself. This
 * decoupling is in place so that it is possible to seal the state and prevent write operations from some point
 * onward. See {@link SealedKpiCustomizerState} for more motivation behind this.
 *
 * @internal
 */
var DefaultKpiCustomizer = /** @class */ (function () {
    function DefaultKpiCustomizer(logger, defaultProvider) {
        var _this = this;
        if (defaultProvider === void 0) { defaultProvider = DefaultKpiRendererProvider; }
        this.withCustomProvider = function (provider) {
            _this.state.addCustomProvider(provider);
            return _this;
        };
        this.withCustomDecorator = function (providerFactory) {
            // snapshot current root provider
            var rootSnapshot = _this.state.getRootProvider();
            // call user's factory in order to obtain the actual provider - pass the current root so that user's
            // code can use it to obtain component to decorate
            var decoratorProvider = providerFactory(rootSnapshot);
            // construct new root provider; this will be using user's provider with a fallback to root provider
            // in case user's code does not return anything
            var newRootProvider = function (kpi, widget) {
                var Component = decoratorProvider(kpi, widget);
                if (Component) {
                    return Component;
                }
                return rootSnapshot(kpi, widget);
            };
            // finally modify the root provider; next time someone registers decorator, it will be on top of
            // this currently registered one
            _this.state.switchRootProvider(newRootProvider);
            return _this;
        };
        this.getKpiProvider = function () {
            return _this.state.getRootProvider();
        };
        this.sealCustomizer = function () {
            _this.state = new SealedKpiCustomizerState(_this.logger, _this.state);
        };
        this.logger = logger;
        this.state = new DefaultKpiCustomizerState(defaultProvider);
    }
    return DefaultKpiCustomizer;
}());
export { DefaultKpiCustomizer };
//# sourceMappingURL=kpiCustomizer.js.map
import { __extends } from "tslib";
import React from "react";
import HeaderCell, { ALIGN_LEFT, ALIGN_RIGHT } from "./HeaderCell";
import { isEmptyScopeCol, isSliceCol } from "../tableDescriptorTypes";
var ColumnHeader = /** @class */ (function (_super) {
    __extends(ColumnHeader, _super);
    function ColumnHeader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            sorting: undefined,
        };
        _this.getCurrentSortDirection = function () {
            var currentSort = _this.props.column.getSort();
            _this.setState({
                sorting: currentSort,
            });
        };
        _this.onSortRequested = function (sortDir) {
            var multiSort = false; // Enable support for multisort with CMD key with 'event.shiftKey';
            _this.props.setSort(sortDir, multiSort);
        };
        return _this;
    }
    ColumnHeader.prototype.UNSAFE_componentWillMount = function () {
        this.props.column.addEventListener("sortChanged", this.getCurrentSortDirection);
        this.setState({
            sorting: this.props.column.getSort(),
        });
    };
    ColumnHeader.prototype.componentWillUnmount = function () {
        this.props.column.removeEventListener("sortChanged", this.getCurrentSortDirection);
    };
    ColumnHeader.prototype.getDefaultSortDirection = function () {
        return isSliceCol(this.getColDescriptor()) ? "asc" : "desc";
    };
    ColumnHeader.prototype.render = function () {
        var _a = this.props, displayName = _a.displayName, enableSorting = _a.enableSorting, menu = _a.menu, column = _a.column;
        var col = this.getColDescriptor();
        var textAlign = isSliceCol(col) || isEmptyScopeCol(col) ? ALIGN_LEFT : ALIGN_RIGHT;
        var isColumnAttribute = isEmptyScopeCol(col);
        return (React.createElement(HeaderCell, { className: "s-pivot-table-column-header", textAlign: textAlign, displayText: displayName, enableSorting: !isColumnAttribute && enableSorting, sortDirection: this.state.sorting, defaultSortDirection: this.getDefaultSortDirection(), onSortClick: this.onSortRequested, onMenuAggregationClick: this.props.onMenuAggregationClick, menu: menu === null || menu === void 0 ? void 0 : menu(), colId: column.getColDef().field, getTableDescriptor: this.props.getTableDescriptor, getExecutionDefinition: this.props.getExecutionDefinition, getColumnTotals: this.props.getColumnTotals, intl: this.props.intl }));
    };
    ColumnHeader.prototype.getColDescriptor = function () {
        return this.props.getTableDescriptor().getCol(this.props.column);
    };
    return ColumnHeader;
}(React.Component));
export default ColumnHeader;
//# sourceMappingURL=ColumnHeader.js.map
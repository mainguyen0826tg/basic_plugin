import isEmpty from "lodash/isEmpty";
/**
 * @public
 */
export var GdcVisualizationObject;
(function (GdcVisualizationObject) {
    function isObjUriQualifier(objQualifier) {
        return !isEmpty(objQualifier) && objQualifier.uri !== undefined;
    }
    GdcVisualizationObject.isObjUriQualifier = isObjUriQualifier;
    function isObjIdentifierQualifier(objQualifier) {
        return !isEmpty(objQualifier) && objQualifier.identifier !== undefined;
    }
    GdcVisualizationObject.isObjIdentifierQualifier = isObjIdentifierQualifier;
    function isVisualization(obj) {
        return !isEmpty(obj) && obj.visualizationObject !== undefined;
    }
    GdcVisualizationObject.isVisualization = isVisualization;
    function isMeasure(bucketItem) {
        return !isEmpty(bucketItem) && bucketItem.measure !== undefined;
    }
    GdcVisualizationObject.isMeasure = isMeasure;
    function isAttribute(bucketItem) {
        return !isEmpty(bucketItem) && bucketItem.visualizationAttribute !== undefined;
    }
    GdcVisualizationObject.isAttribute = isAttribute;
    function isMeasureDefinition(definition) {
        return !isEmpty(definition) && definition.measureDefinition !== undefined;
    }
    GdcVisualizationObject.isMeasureDefinition = isMeasureDefinition;
    function isArithmeticMeasureDefinition(definition) {
        return (!isEmpty(definition) &&
            definition.arithmeticMeasure !== undefined);
    }
    GdcVisualizationObject.isArithmeticMeasureDefinition = isArithmeticMeasureDefinition;
    function isPopMeasureDefinition(definition) {
        return (!isEmpty(definition) && definition.popMeasureDefinition !== undefined);
    }
    GdcVisualizationObject.isPopMeasureDefinition = isPopMeasureDefinition;
    function isPreviousPeriodMeasureDefinition(definition) {
        return (!isEmpty(definition) &&
            definition.previousPeriodMeasure !== undefined);
    }
    GdcVisualizationObject.isPreviousPeriodMeasureDefinition = isPreviousPeriodMeasureDefinition;
    function isAttributeFilter(filter) {
        return (!isEmpty(filter) &&
            (filter.positiveAttributeFilter !== undefined ||
                filter.negativeAttributeFilter !== undefined));
    }
    GdcVisualizationObject.isAttributeFilter = isAttributeFilter;
    function isDateFilter(filter) {
        return (!isEmpty(filter) &&
            (filter.absoluteDateFilter !== undefined ||
                filter.relativeDateFilter !== undefined));
    }
    GdcVisualizationObject.isDateFilter = isDateFilter;
    function isPositiveAttributeFilter(filter) {
        return !isEmpty(filter) && filter.positiveAttributeFilter !== undefined;
    }
    GdcVisualizationObject.isPositiveAttributeFilter = isPositiveAttributeFilter;
    function isNegativeAttributeFilter(filter) {
        return !isEmpty(filter) && filter.negativeAttributeFilter !== undefined;
    }
    GdcVisualizationObject.isNegativeAttributeFilter = isNegativeAttributeFilter;
    function isMeasureValueFilter(filter) {
        return !isEmpty(filter) && filter.measureValueFilter !== undefined;
    }
    GdcVisualizationObject.isMeasureValueFilter = isMeasureValueFilter;
    function isRankingFilter(filter) {
        return !isEmpty(filter) && filter.rankingFilter !== undefined;
    }
    GdcVisualizationObject.isRankingFilter = isRankingFilter;
    function isAbsoluteDateFilter(filter) {
        return !isEmpty(filter) && filter.absoluteDateFilter !== undefined;
    }
    GdcVisualizationObject.isAbsoluteDateFilter = isAbsoluteDateFilter;
    function isRelativeDateFilter(filter) {
        return !isEmpty(filter) && filter.relativeDateFilter !== undefined;
    }
    GdcVisualizationObject.isRelativeDateFilter = isRelativeDateFilter;
    function isLocalIdentifierQualifier(objectQualifier) {
        return (!isEmpty(objectQualifier) &&
            objectQualifier.localIdentifier !== undefined);
    }
    GdcVisualizationObject.isLocalIdentifierQualifier = isLocalIdentifierQualifier;
    function isComparisonCondition(condition) {
        return !isEmpty(condition) && condition.comparison !== undefined;
    }
    GdcVisualizationObject.isComparisonCondition = isComparisonCondition;
    function isRangeCondition(condition) {
        return !isEmpty(condition) && condition.range !== undefined;
    }
    GdcVisualizationObject.isRangeCondition = isRangeCondition;
})(GdcVisualizationObject || (GdcVisualizationObject = {}));
//# sourceMappingURL=GdcVisualizationObject.js.map
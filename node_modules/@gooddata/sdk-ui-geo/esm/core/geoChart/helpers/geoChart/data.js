import { __assign, __spreadArrays } from "tslib";
import { BucketNames } from "@gooddata/sdk-ui";
import { dataValueAsFloat, getFormatFromExecutionResponse, getGeoAttributeHeaderItems, getMinMax, } from "./common";
import { attributeDisplayFormRef, attributeLocalId, isAttribute, isIdentifierRef, measureItem, measureLocalId, } from "@gooddata/sdk-model";
import { isResultAttributeHeader, resultHeaderName, } from "@gooddata/sdk-backend-spi";
import findIndex from "lodash/findIndex";
export function getLocation(latlng) {
    if (!latlng) {
        return null;
    }
    var _a = latlng.split(";").map(dataValueAsFloat), latitude = _a[0], longitude = _a[1];
    if (isNaN(latitude) || isNaN(longitude)) {
        // eslint-disable-next-line no-console
        console.warn("UI-SDK: geoChartDataSource - getLocation: invalid location", latlng);
        return null;
    }
    return {
        lat: latitude,
        lng: longitude
    };
}
export function getGeoData(dv) {
    var _a, _b, _c, _d, _e;
    var geoData = getBucketItemNameAndDataIndex(dv);
    var attributeHeaderItems = getGeoAttributeHeaderItems(dv, geoData);
    var locationIndex = (_a = geoData.location) === null || _a === void 0 ? void 0 : _a.index;
    var segmentIndex = (_b = geoData === null || geoData === void 0 ? void 0 : geoData.segment) === null || _b === void 0 ? void 0 : _b.index;
    var tooltipTextIndex = (_c = geoData === null || geoData === void 0 ? void 0 : geoData.tooltipText) === null || _c === void 0 ? void 0 : _c.index;
    var sizeIndex = (_d = geoData === null || geoData === void 0 ? void 0 : geoData.size) === null || _d === void 0 ? void 0 : _d.index;
    var colorIndex = (_e = geoData === null || geoData === void 0 ? void 0 : geoData.color) === null || _e === void 0 ? void 0 : _e.index;
    if (locationIndex !== undefined) {
        var locationData = getAttributeData(attributeHeaderItems, locationIndex);
        geoData[BucketNames.LOCATION].data = locationData.map(getLocation);
    }
    if (segmentIndex !== undefined) {
        var _f = getSegmentDataAndUris(attributeHeaderItems, segmentIndex), data = _f.data, uris = _f.uris;
        geoData[BucketNames.SEGMENT].data = data;
        geoData[BucketNames.SEGMENT].uris = uris;
    }
    if (tooltipTextIndex !== undefined) {
        geoData[BucketNames.TOOLTIP_TEXT].data = getAttributeData(attributeHeaderItems, tooltipTextIndex);
    }
    if (sizeIndex !== undefined) {
        geoData[BucketNames.SIZE].data = getMeasureData(dv, sizeIndex);
        geoData[BucketNames.SIZE].format = getFormatFromExecutionResponse(dv, sizeIndex);
    }
    if (colorIndex !== undefined) {
        geoData[BucketNames.COLOR].data = getMeasureData(dv, colorIndex);
        geoData[BucketNames.COLOR].format = getFormatFromExecutionResponse(dv, colorIndex);
    }
    return geoData;
}
function getSegmentDataAndUris(attributeHeaderItems, dataIndex) {
    var headerItems = attributeHeaderItems[dataIndex];
    return headerItems.reduce(function (result, headerItem) {
        if (headerItem && isResultAttributeHeader(headerItem)) {
            var _a = headerItem.attributeHeaderItem, uri = _a.uri, name_1 = _a.name;
            return { uris: __spreadArrays(result.uris, [uri]), data: __spreadArrays(result.data, [name_1]) };
        }
        return result;
    }, { uris: [], data: [] });
}
function getMeasureData(dv, dataIndex) {
    var twoDimData = dv.rawData().twoDimData();
    var measureValues = twoDimData[dataIndex];
    return measureValues.map(dataValueAsFloat);
}
function getAttributeData(attributeHeaderItems, dataIndex) {
    var headerItems = attributeHeaderItems[dataIndex];
    return headerItems.map(resultHeaderName);
}
function getBucketItemNameAndDataIndex(dv) {
    var buckets = dv.def().buckets();
    var measureDescriptors = dv.meta().measureDescriptors();
    var attributeDescriptors = dv.meta().attributeDescriptors();
    var bucketItemInfos = buckets.reduce(function (result, bucket) {
        var _a;
        return (__assign(__assign({}, result), (_a = {}, _a[bucket.localIdentifier] = getBucketItemInfo(bucket.items[0]), _a)));
    }, {});
    // init data
    var result = {};
    [BucketNames.LOCATION, BucketNames.SEGMENT, BucketNames.TOOLTIP_TEXT].forEach(function (bucketName) {
        var bucketItemInfo = bucketItemInfos[bucketName];
        if (!bucketItemInfo) {
            return;
        }
        var index = findIndex(attributeDescriptors, function (desc) {
            return desc.attributeHeader.localIdentifier === bucketItemInfo.localIdentifier &&
                (desc.attributeHeader.uri === bucketItemInfo.uri ||
                    desc.attributeHeader.identifier === bucketItemInfo.identifier);
        });
        if (index !== -1) {
            var name_2 = attributeDescriptors[index].attributeHeader.formOf.name;
            result[bucketName] = { index: index, name: name_2 };
        }
    });
    [BucketNames.SIZE, BucketNames.COLOR].forEach(function (bucketName) {
        var bucketItemInfo = bucketItemInfos[bucketName];
        if (!bucketItemInfo) {
            return;
        }
        var index = findIndex(measureDescriptors, function (desc) {
            return desc.measureHeaderItem.localIdentifier === bucketItemInfo.localIdentifier &&
                (desc.measureHeaderItem.uri === bucketItemInfo.uri ||
                    desc.measureHeaderItem.identifier === bucketItemInfo.identifier);
        });
        if (index !== -1) {
            result[bucketName] = {
                index: index,
                name: measureDescriptors[index].measureHeaderItem.name
            };
        }
    });
    return result;
}
function getUriAndIdentifier(ref) {
    if (isIdentifierRef(ref)) {
        return {
            identifier: ref.identifier
        };
    }
    else {
        return {
            uri: ref.uri
        };
    }
}
function getBucketItemInfo(bucketItem) {
    if (!bucketItem) {
        return null;
    }
    // attribute item
    if (isAttribute(bucketItem)) {
        var localIdentifier_1 = attributeLocalId(bucketItem);
        var displayFormRef = attributeDisplayFormRef(bucketItem);
        return __assign({ localIdentifier: localIdentifier_1 }, getUriAndIdentifier(displayFormRef));
    }
    // measure item
    var localIdentifier = measureLocalId(bucketItem);
    var measureItemRef = measureItem(bucketItem);
    if (measureItemRef) {
        return __assign({ localIdentifier: localIdentifier }, getUriAndIdentifier(measureItemRef));
    }
    // non-simple-measures land here
    return {
        localIdentifier: localIdentifier
    };
}
export function getAvailableLegends(categoryItems, geoData) {
    var _a = geoData.color, _b = (_a === void 0 ? {} : _a).data, colorData = _b === void 0 ? [] : _b, _c = geoData.size, _d = (_c === void 0 ? {} : _c).data, sizeData = _d === void 0 ? [] : _d;
    var _e = getMinMax(colorData), minColor = _e.min, maxColor = _e.max;
    var _f = getMinMax(sizeData), minSize = _f.min, maxSize = _f.max;
    var hasCategoryLegend = Boolean(categoryItems && categoryItems.length);
    var hasColorLegend = Boolean(colorData.length) && minColor !== maxColor && !hasCategoryLegend;
    var hasSizeLegend = Boolean(sizeData.length) && minSize !== maxSize;
    return {
        hasCategoryLegend: hasCategoryLegend,
        hasColorLegend: hasColorLegend,
        hasSizeLegend: hasSizeLegend
    };
}
function parseGeoPropertyItem(item) {
    try {
        return JSON.parse(item);
    }
    catch (e) {
        return {};
    }
}
export function parseGeoProperties(properties) {
    var _a = properties || {}, _b = _a.locationName, locationName = _b === void 0 ? "{}" : _b, _c = _a.color, color = _c === void 0 ? "{}" : _c, _d = _a.size, size = _d === void 0 ? "{}" : _d, _e = _a.segment, segment = _e === void 0 ? "{}" : _e;
    return {
        locationName: parseGeoPropertyItem(locationName),
        size: parseGeoPropertyItem(size),
        color: parseGeoPropertyItem(color),
        segment: parseGeoPropertyItem(segment)
    };
}
export function findGeoAttributesInDimension(dv, geoData) {
    var _a;
    var color = geoData.color, location = geoData.location, segment = geoData.segment, size = geoData.size, tooltipText = geoData.tooltipText;
    var locationIndex = (_a = location === null || location === void 0 ? void 0 : location.index) !== null && _a !== void 0 ? _a : 0;
    var headers = dv.meta().allHeaders();
    var hasMeasure = size || color;
    var attrDimensionIndex = hasMeasure ? 1 : 0;
    var attributeDescriptors = dv.meta().attributeDescriptors();
    var attributeResultHeaderItems = headers[attrDimensionIndex];
    var locationAttribute = __assign(__assign({}, attributeDescriptors[locationIndex].attributeHeader), { items: attributeResultHeaderItems[locationIndex] });
    var segmentByAttribute = segment && segment.data.length
        ? __assign(__assign({}, attributeDescriptors[segment.index].attributeHeader), { items: attributeResultHeaderItems[segment.index] }) : undefined;
    var tooltipTextAttribute = tooltipText && tooltipText.data.length
        ? __assign(__assign({}, attributeDescriptors[tooltipText.index].attributeHeader), { items: attributeResultHeaderItems[tooltipText.index] }) : undefined;
    return {
        locationAttribute: locationAttribute,
        segmentByAttribute: segmentByAttribute,
        tooltipTextAttribute: tooltipTextAttribute
    };
}
//# sourceMappingURL=data.js.map
// (C) 2020 GoodData Corporation
import React, { useEffect, useMemo } from "react";
import { ErrorComponent as DefaultError, LoadingComponent as DefaultLoading } from "@gooddata/sdk-ui";
import { ThemeProvider, useThemeIsLoading } from "@gooddata/sdk-ui-theme-provider";
import { isDashboardLayoutEmpty } from "@gooddata/sdk-backend-spi";
import { idRef } from "@gooddata/sdk-model";
import { filterArrayToFilterContextItems } from "../internal";
import { useDashboard, useDashboardAlerts } from "./hooks";
import { useAttributesWithDrillDown, useColorPalette, useDashboardLayoutData, useUserWorkspaceSettings, } from "./hooks/internal";
import { ScheduledMailDialog } from "./ScheduledMailDialog";
import { defaultDashboardThemeModifier } from "./defaultDashboardThemeModifier";
import { DashboardRenderer } from "./DashboardRenderer";
import { EmptyDashboardError } from "./EmptyDashboardError";
import { DashboardViewProvider } from "./DashboardViewProvider";
var defaultEmptyLayout = {
    type: "IDashboardLayout",
    sections: [],
};
export var DashboardView = function (_a) {
    var _b, _c, _d, _e, _f, _g;
    var dashboard = _a.dashboard, filters = _a.filters, onFiltersChange = _a.onFiltersChange, theme = _a.theme, _h = _a.disableThemeLoading, disableThemeLoading = _h === void 0 ? false : _h, _j = _a.themeModifier, themeModifier = _j === void 0 ? defaultDashboardThemeModifier : _j, backend = _a.backend, workspace = _a.workspace, onDrill = _a.onDrill, drillableItems = _a.drillableItems, onError = _a.onError, onDashboardLoaded = _a.onDashboardLoaded, config = _a.config, isScheduledMailDialogVisible = _a.isScheduledMailDialogVisible, _k = _a.applyFiltersToScheduledMail, applyFiltersToScheduledMail = _k === void 0 ? true : _k, onScheduledMailDialogCancel = _a.onScheduledMailDialogCancel, onScheduledMailDialogSubmit = _a.onScheduledMailDialogSubmit, onScheduledMailSubmitError = _a.onScheduledMailSubmitError, onScheduledMailSubmitSuccess = _a.onScheduledMailSubmitSuccess, _l = _a.ErrorComponent, ErrorComponent = _l === void 0 ? DefaultError : _l, _m = _a.LoadingComponent, LoadingComponent = _m === void 0 ? DefaultLoading : _m, widgetRenderer = _a.widgetRenderer, transformLayout = _a.transformLayout, _o = _a.isReadOnly, isReadOnly = _o === void 0 ? false : _o, execConfig = _a.execConfig;
    var dashboardRef = typeof dashboard === "string" ? idRef(dashboard, "analyticalDashboard") : dashboard;
    var _p = useDashboard({
        dashboard: dashboardRef,
        backend: backend,
        workspace: workspace,
    }), dashboardError = _p.error, dashboardData = _p.result, dashboardStatus = _p.status;
    var _q = useDashboardAlerts({
        dashboard: dashboardRef,
        backend: backend,
        workspace: workspace,
    }), alertsError = _q.error, alertsData = _q.result, alertsStatus = _q.status;
    var _r = useUserWorkspaceSettings({
        backend: backend,
        workspace: workspace,
    }), userWorkspaceSettingsError = _r.error, userWorkspaceSettings = _r.result, userWorkspaceSettingsStatus = _r.status;
    var _s = useColorPalette({
        backend: backend,
        workspace: workspace,
    }), colorPaletteError = _s.error, colorPalette = _s.result, colorPaletteStatus = _s.status;
    var _t = useAttributesWithDrillDown({
        hasDrillingEnabled: !!onDrill,
        backend: backend,
        workspace: workspace,
    }), drillDownAttributesError = _t.error, drillDownAttributes = _t.result, drillDownAttributesStatus = _t.status;
    var _u = useDashboardLayoutData({
        // With new delete insight functionality, dashboards layout can now be empty.
        // Use an empty layout to avoid the permanent 'pending' status.
        dashboardLayout: (_b = dashboardData === null || dashboardData === void 0 ? void 0 : dashboardData.layout) !== null && _b !== void 0 ? _b : defaultEmptyLayout,
        backend: backend,
        workspace: workspace,
    }), dashboardLayoutError = _u.error, dashboardLayoutResult = _u.result, dashboardLayoutStatus = _u.status;
    var error = (_f = (_e = (_d = (_c = dashboardError !== null && dashboardError !== void 0 ? dashboardError : alertsError) !== null && _c !== void 0 ? _c : userWorkspaceSettingsError) !== null && _d !== void 0 ? _d : colorPaletteError) !== null && _e !== void 0 ? _e : drillDownAttributesError) !== null && _f !== void 0 ? _f : dashboardLayoutError;
    var isThemeLoading = useThemeIsLoading();
    var hasThemeProvider = isThemeLoading !== undefined;
    useEffect(function () {
        if (dashboardData &&
            alertsData &&
            userWorkspaceSettings &&
            colorPalette &&
            drillDownAttributes &&
            dashboardLayoutResult) {
            onDashboardLoaded === null || onDashboardLoaded === void 0 ? void 0 : onDashboardLoaded({
                alerts: alertsData,
                dashboard: dashboardData,
            });
        }
    }, [
        onDashboardLoaded,
        dashboardData,
        alertsData,
        userWorkspaceSettings,
        colorPalette,
        drillDownAttributes,
        dashboardLayoutResult,
    ]);
    useEffect(function () {
        if (error && onError) {
            onError(error);
        }
    }, [onError, error]);
    var effectiveLocale = (_g = config === null || config === void 0 ? void 0 : config.locale) !== null && _g !== void 0 ? _g : userWorkspaceSettings === null || userWorkspaceSettings === void 0 ? void 0 : userWorkspaceSettings.locale;
    var effectiveConfig = useMemo(function () {
        var _a;
        if (!config && !userWorkspaceSettings) {
            return undefined;
        }
        return {
            mapboxToken: config === null || config === void 0 ? void 0 : config.mapboxToken,
            separators: (_a = config === null || config === void 0 ? void 0 : config.separators) !== null && _a !== void 0 ? _a : userWorkspaceSettings === null || userWorkspaceSettings === void 0 ? void 0 : userWorkspaceSettings.separators,
            disableKpiDrillUnderline: userWorkspaceSettings === null || userWorkspaceSettings === void 0 ? void 0 : userWorkspaceSettings.disableKpiDashboardHeadlineUnderline,
        };
    }, [config, userWorkspaceSettings]);
    var sanitizedFilters = useMemo(function () {
        return filters ? filterArrayToFilterContextItems(filters) : undefined;
    }, [filters]);
    var statuses = [
        dashboardStatus,
        alertsStatus,
        userWorkspaceSettingsStatus,
        colorPaletteStatus,
        drillDownAttributesStatus,
        dashboardLayoutStatus,
    ];
    if (error) {
        return React.createElement(ErrorComponent, { message: error.message });
    }
    if (statuses.includes("loading") || statuses.includes("pending")) {
        return React.createElement(LoadingComponent, null);
    }
    var dashboardRender = (React.createElement(DashboardViewProvider, { config: effectiveConfig, settings: userWorkspaceSettings, colorPalette: colorPalette, drillDownAttributes: drillDownAttributes, alerts: alertsData, isReadOnly: isReadOnly, locale: effectiveLocale, execConfig: execConfig },
        !isReadOnly && (React.createElement(ScheduledMailDialog, { backend: backend, workspace: workspace, locale: effectiveLocale, dashboard: dashboardRef, filters: applyFiltersToScheduledMail ? sanitizedFilters : undefined, onSubmit: onScheduledMailDialogSubmit, onSubmitSuccess: onScheduledMailSubmitSuccess, onSubmitError: onScheduledMailSubmitError, onCancel: onScheduledMailDialogCancel, onError: onError, isVisible: isScheduledMailDialogVisible })),
        !dashboardData.layout || isDashboardLayoutEmpty(dashboardData.layout) ? (React.createElement(EmptyDashboardError, { ErrorComponent: ErrorComponent })) : (React.createElement(DashboardRenderer, { transformLayout: transformLayout, backend: backend, workspace: workspace, dashboardRef: dashboardRef, dashboardLayout: dashboardData === null || dashboardData === void 0 ? void 0 : dashboardData.layout, filters: sanitizedFilters, onFiltersChange: onFiltersChange, filterContext: dashboardData.filterContext, onDrill: onDrill, drillableItems: drillableItems, ErrorComponent: ErrorComponent, LoadingComponent: LoadingComponent, className: "gd-dashboards-root gd-dashboard-view", getVisType: dashboardLayoutResult.getVisType, getInsightByRef: dashboardLayoutResult.getInsightByRef, widgetRenderer: widgetRenderer, areSectionHeadersEnabled: userWorkspaceSettings === null || userWorkspaceSettings === void 0 ? void 0 : userWorkspaceSettings.enableSectionHeaders }))));
    if (theme || (!hasThemeProvider && !disableThemeLoading)) {
        dashboardRender = (React.createElement(ThemeProvider, { theme: theme, backend: backend, workspace: workspace, modifier: themeModifier }, dashboardRender));
    }
    return dashboardRender;
};
//# sourceMappingURL=DashboardView.js.map
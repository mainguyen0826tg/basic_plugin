import { eventGuard } from "./util";
export function insightWidgetHeaderChanged(ctx, ref, header, correlationId) {
    return {
        type: "GDC.DASH/EVT.INSIGHT_WIDGET.HEADER_CHANGED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            ref: ref,
            header: header,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetHeaderChanged}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardInsightWidgetHeaderChanged = eventGuard("GDC.DASH/EVT.INSIGHT_WIDGET.HEADER_CHANGED");
export function insightWidgetFilterSettingsChanged(ctx, ref, ignoredAttributeFilters, dateDatasetForFiltering, correlationId) {
    return {
        type: "GDC.DASH/EVT.INSIGHT_WIDGET.FILTER_SETTINGS_CHANGED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            ref: ref,
            ignoredAttributeFilters: ignoredAttributeFilters,
            dateDatasetForFiltering: dateDatasetForFiltering,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetFilterSettingsChanged}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardInsightWidgetFilterSettingsChanged = eventGuard("GDC.DASH/EVT.INSIGHT_WIDGET.FILTER_SETTINGS_CHANGED");
export function insightWidgetVisPropertiesChanged(ctx, ref, properties, correlationId) {
    return {
        type: "GDC.DASH/EVT.INSIGHT_WIDGET.PROPERTIES_CHANGED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            ref: ref,
            properties: properties,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetVisPropertiesChanged}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardInsightWidgetVisPropertiesChanged = eventGuard("GDC.DASH/EVT.INSIGHT_WIDGET.PROPERTIES_CHANGED");
export function insightWidgetInsightChanged(ctx, ref, insight, correlationId) {
    return {
        type: "GDC.DASH/EVT.INSIGHT_WIDGET.INSIGHT_SWITCHED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            ref: ref,
            insight: insight,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetInsightSwitched}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardInsightWidgetInsightSwitched = eventGuard("GDC.DASH/EVT.INSIGHT_WIDGET.INSIGHT_SWITCHED");
export function insightWidgetDrillsModified(ctx, ref, added, updated, correlationId) {
    return {
        type: "GDC.DASH/EVT.INSIGHT_WIDGET.DRILLS_MODIFIED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            ref: ref,
            added: added,
            updated: updated,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetDrillsModified}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardInsightWidgetDrillsModified = eventGuard("GDC.DASH/EVT.INSIGHT_WIDGET.DRILLS_MODIFIED");
export function insightWidgetDrillsRemoved(ctx, ref, removed, correlationId) {
    return {
        type: "GDC.DASH/EVT.INSIGHT_WIDGET.DRILLS_REMOVED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            ref: ref,
            removed: removed,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetDrillsRemoved}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardInsightWidgetDrillsRemoved = eventGuard("GDC.DASH/EVT.INSIGHT_WIDGET.DRILLS_REMOVED");
export function insightWidgetChanged(ctx, insightWidget, correlationId) {
    return {
        type: "GDC.DASH/EVT.INSIGHT_WIDGET.WIDGET_CHANGED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            insightWidget: insightWidget,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetChanged}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardInsightWidgetChanged = eventGuard("GDC.DASH/EVT.INSIGHT_WIDGET.WIDGET_CHANGED");
/**
 * @alpha
 */
export function insightWidgetExportRequested(ctx, ref, config, correlationId) {
    return {
        type: "GDC.DASH/EVT.INSIGHT_WIDGET.EXPORT_REQUESTED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            ref: ref,
            config: config,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetExportRequested}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardInsightWidgetExportRequested = eventGuard("GDC.DASH/EVT.INSIGHT_WIDGET.EXPORT_REQUESTED");
/**
 * @alpha
 */
export function insightWidgetExportResolved(ctx, resultUri, correlationId) {
    return {
        type: "GDC.DASH/EVT.INSIGHT_WIDGET.EXPORT_RESOLVED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            resultUri: resultUri,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardInsightWidgetExportResolved}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardInsightWidgetExportResolved = eventGuard("GDC.DASH/EVT.INSIGHT_WIDGET.EXPORT_RESOLVED");
//# sourceMappingURL=insight.js.map
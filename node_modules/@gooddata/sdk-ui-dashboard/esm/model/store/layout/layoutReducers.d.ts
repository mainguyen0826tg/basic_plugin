import { CaseReducer } from "@reduxjs/toolkit";
import { LayoutState } from "./layoutState";
import { IDashboardFilterReference, IDashboardLayout, IDashboardLayoutSectionHeader, ILegacyKpiComparisonDirection, ILegacyKpiComparisonTypeComparison, InsightDrillDefinition } from "@gooddata/sdk-backend-spi";
import { ExtendedDashboardItem, ExtendedDashboardLayoutSection, ExtendedDashboardWidget, RelativeIndex, StashedDashboardItemsId } from "../../types/layoutTypes";
import { ObjRef, VisualizationProperties } from "@gooddata/sdk-model";
import { WidgetHeader } from "../../types/widgetTypes";
import { Draft } from "immer";
import { ObjRefMap } from "../../../_staging/metadata/objRefMap";
import { IdentityMapping } from "../../../_staging/dashboard/dashboardLayout";
declare type AddSectionActionPayload = {
    section: ExtendedDashboardLayoutSection;
    index: RelativeIndex;
    usedStashes: StashedDashboardItemsId[];
};
declare type RemoveSectionActionPayload = {
    index: RelativeIndex;
    stashIdentifier?: StashedDashboardItemsId;
};
declare type ChangeSectionActionPayload = {
    index: number;
    header: IDashboardLayoutSectionHeader;
};
declare type MoveSectionActionPayload = {
    sectionIndex: number;
    toIndex: RelativeIndex;
};
declare type AddSectionItemsActionPayload = {
    sectionIndex: number;
    itemIndex: number;
    items: ExtendedDashboardItem[];
    usedStashes: StashedDashboardItemsId[];
};
declare type MoveSectionItemActionPayload = {
    sectionIndex: number;
    itemIndex: number;
    toSectionIndex: number;
    toItemIndex: RelativeIndex;
};
declare type RemoveSectionItemActionPayload = {
    sectionIndex: number;
    itemIndex: number;
    stashIdentifier?: StashedDashboardItemsId;
};
declare type ReplaceSectionItemActionPayload = {
    sectionIndex: number;
    itemIndex: number;
    newItems: ExtendedDashboardItem[];
    stashIdentifier?: StashedDashboardItemsId;
    usedStashes: StashedDashboardItemsId[];
};
declare type ReplaceWidgetHeader = {
    ref: ObjRef;
    header: WidgetHeader;
};
declare type ReplaceWidgetDrillDefinitions = {
    ref: ObjRef;
    drillDefinitions: InsightDrillDefinition[];
};
declare type ReplaceWidgetVisProperties = {
    ref: ObjRef;
    properties: VisualizationProperties | undefined;
};
declare type ReplaceWidgetFilterSettings = {
    ref: ObjRef;
    ignoreDashboardFilters?: IDashboardFilterReference[];
    dateDataSet?: ObjRef;
};
declare type RemoveIgnoredAttributeFilter = {
    displayFormRefs: ObjRef[];
};
declare type ReplaceWidgetDateDataset = {
    ref: ObjRef;
    dateDataSet?: ObjRef;
};
declare type ReplaceKpiWidgetMeasure = {
    ref: ObjRef;
    measureRef: ObjRef;
};
declare type ReplaceKpiWidgetComparison = {
    ref: ObjRef;
    comparisonType: ILegacyKpiComparisonTypeComparison;
    comparisonDirection?: ILegacyKpiComparisonDirection;
};
export declare const layoutReducers: {
    setLayout: CaseReducer<LayoutState, {
        payload: IDashboardLayout<ExtendedDashboardWidget>;
        type: string;
    }>;
    updateWidgetIdentities: CaseReducer<LayoutState, {
        payload: ObjRefMap<IdentityMapping>;
        type: string;
    }>;
    removeIgnoredAttributeFilter: CaseReducer<LayoutState, {
        payload: RemoveIgnoredAttributeFilter;
        type: string;
    }>;
    addSection: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & AddSectionActionPayload;
        type: string;
    }>;
    removeSection: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & RemoveSectionActionPayload;
        type: string;
    }>;
    moveSection: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & MoveSectionActionPayload;
        type: string;
    }>;
    changeSectionHeader: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & ChangeSectionActionPayload;
        type: string;
    }>;
    addSectionItems: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & AddSectionItemsActionPayload;
        type: string;
    }>;
    moveSectionItem: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & MoveSectionItemActionPayload;
        type: string;
    }>;
    removeSectionItem: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & RemoveSectionItemActionPayload;
        type: string;
    }>;
    replaceSectionItem: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & ReplaceSectionItemActionPayload;
        type: string;
    }>;
    replaceWidgetHeader: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & ReplaceWidgetHeader;
        type: string;
    }>;
    replaceWidgetDrills: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & ReplaceWidgetDrillDefinitions;
        type: string;
    }>;
    replaceInsightWidgetVisProperties: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & ReplaceWidgetVisProperties;
        type: string;
    }>;
    replaceWidgetFilterSettings: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & ReplaceWidgetFilterSettings;
        type: string;
    }>;
    replaceWidgetDateDataset: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & ReplaceWidgetDateDataset;
        type: string;
    }>;
    replaceKpiWidgetMeasure: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & ReplaceKpiWidgetMeasure;
        type: string;
    }>;
    replaceKpiWidgetComparison: CaseReducer<LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & ReplaceKpiWidgetComparison;
        type: string;
    }>;
    undoLayout: <TState extends import("../_infra/undoEnhancer").UndoEnhancedState<import("../..").IDashboardCommand>>(state: Draft<TState>, action: {
        payload: import("../_infra/undoEnhancer").UndoActionPayload;
        type: string;
    }) => TState;
    clearLayoutHistory: <TState_1 extends import("../_infra/undoEnhancer").UndoEnhancedState<import("../..").IDashboardCommand>>(state: Draft<TState_1>) => void;
};
export {};
//# sourceMappingURL=layoutReducers.d.ts.map
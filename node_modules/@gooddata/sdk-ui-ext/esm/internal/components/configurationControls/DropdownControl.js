import { __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { injectIntl } from "react-intl";
import { Dropdown, DropdownList, DropdownButton, SingleSelectListItem } from "@gooddata/sdk-ui-kit";
import cloneDeep from "lodash/cloneDeep";
import set from "lodash/set";
import DisabledBubbleMessage from "../DisabledBubbleMessage";
import { getTranslation } from "../../utils/translations";
var alignPoints = ["bl tl", "tl bl", "br tr", "tr br"];
var DROPDOWN_ALIGNMENTS = alignPoints.map(function (align) { return ({ align: align, offset: { x: 1, y: 0 } }); });
var DropdownControl = /** @class */ (function (_super) {
    __extends(DropdownControl, _super);
    function DropdownControl(props) {
        var _this = _super.call(this, props) || this;
        _this.onSelect = _this.onSelect.bind(_this);
        _this.getSelectedItem = _this.getSelectedItem.bind(_this);
        return _this;
    }
    DropdownControl.prototype.render = function () {
        var _this = this;
        var _a = this.props, disabled = _a.disabled, labelText = _a.labelText, value = _a.value, width = _a.width, items = _a.items, showDisabledMessage = _a.showDisabledMessage, intl = _a.intl;
        var selectedItem = this.getSelectedItem(value) || {};
        return (React.createElement(DisabledBubbleMessage, { showDisabledMessage: showDisabledMessage },
            React.createElement("div", { className: "adi-properties-dropdown-container" },
                React.createElement("span", { className: "input-label-text" }, getTranslation(labelText, intl)),
                React.createElement("label", { className: "adi-bucket-inputfield gd-input gd-input-small" },
                    React.createElement(Dropdown, { renderButton: function (_a) {
                            var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
                            return _this.getDropdownButton(selectedItem, disabled, isOpen, toggleDropdown);
                        }, closeOnParentScroll: true, closeOnMouseDrag: true, alignPoints: DROPDOWN_ALIGNMENTS, renderBody: function (_a) {
                            var closeDropdown = _a.closeDropdown, isMobile = _a.isMobile;
                            return (React.createElement(DropdownList, { width: width, isMobile: isMobile, items: items, renderItem: function (_a) {
                                    var item = _a.item;
                                    return (React.createElement(SingleSelectListItem, { title: item.title, isSelected: item.value === selectedItem.value, onClick: function () {
                                            _this.onSelect(item);
                                            closeDropdown();
                                        }, type: item.type, icon: item.icon, info: item.info }));
                                } }));
                        }, className: "adi-bucket-dropdown" })))));
    };
    DropdownControl.prototype.getDropdownButton = function (selectedItem, disabled, isOpen, toggleDropdown) {
        var icon = selectedItem.icon, title = selectedItem.title;
        return (React.createElement(DropdownButton, { value: title, iconLeft: icon, isOpen: isOpen, onClick: toggleDropdown, disabled: disabled }));
    };
    DropdownControl.prototype.onSelect = function (selectedItem) {
        var _a = this.props, valuePath = _a.valuePath, properties = _a.properties, pushData = _a.pushData;
        // we must not change the properties at any cost, so deep clone for now.
        // ideally we should use st. like immer with copy on write to not clone everything all the time
        var clonedProperties = cloneDeep(properties);
        set(clonedProperties, "controls." + valuePath, selectedItem.value);
        pushData({ properties: clonedProperties });
    };
    DropdownControl.prototype.getSelectedItem = function (value) {
        if (this.props.items) {
            return this.props.items.find(function (item) { return item.value === value; });
        }
        return undefined;
    };
    DropdownControl.defaultProps = {
        value: "",
        items: [],
        disabled: false,
        width: 117,
        showDisabledMessage: false,
    };
    return DropdownControl;
}(React.PureComponent));
export default injectIntl(DropdownControl);
//# sourceMappingURL=DropdownControl.js.map
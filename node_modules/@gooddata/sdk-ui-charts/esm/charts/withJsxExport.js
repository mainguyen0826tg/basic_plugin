import { __assign, __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import isFunction from "lodash/isFunction";
import isString from "lodash/isString";
import toPairs from "lodash/toPairs";
import hoistNonReactStatics from "hoist-non-react-statics";
import { factoryNotationFor } from "@gooddata/sdk-model";
var getDisplayName = function (WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || "Component";
};
/**
 * @internal
 */
export var withJsxExport = function (Component) {
    var _a;
    var result = (_a = /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.toJsx = function () {
                    var stringifiedProps = toPairs(_this.props)
                        // we ignore functions as there is no bullet-proof to serialize them
                        .filter(function (_a) {
                        var _ = _a[0], value = _a[1];
                        return !isFunction(value);
                    })
                        .map(function (_a) {
                        var key = _a[0], value = _a[1];
                        return isString(value) ? key + "=\"" + value + "\"" : key + "={" + factoryNotationFor(value) + "}";
                    });
                    var paddedPropDeclarations = stringifiedProps.join("\n").replace(/^/gm, "    ");
                    return "<" + getDisplayName(Component) + "\n" + paddedPropDeclarations + "\n/>";
                };
                return _this;
            }
            class_1.prototype.render = function () {
                return React.createElement(Component, __assign({}, this.props));
            };
            return class_1;
        }(React.Component)),
        _a.displayName = "WithJsxExport(" + getDisplayName(Component) + ")",
        _a);
    hoistNonReactStatics(result, Component);
    return result;
};
//# sourceMappingURL=withJsxExport.js.map
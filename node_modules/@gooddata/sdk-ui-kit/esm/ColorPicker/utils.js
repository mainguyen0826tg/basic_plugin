// (C) 2007-2021 GoodData Corporation
import tinycolor from "tinycolor2";
export var SATURATION_ARRAY = [0.1, 0.3, 0.4, 0.5, 0.65, 0.8, 0.9, 1];
var HEX_LENGTH_WITH_HASH = 7;
var HEX_LENGTH_WITHOUT_HASH = 6;
export function getHexFromHslColor(hsl) {
    var color = tinycolor("hsl(" + hsl.h + ", " + hsl.s * 100 + "%, " + hsl.l * 100 + "% )");
    return color.toHexString();
}
export function getRgbFromHslColor(hsl) {
    var color = tinycolor("hsl(" + hsl.h + ", " + hsl.s * 100 + "%, " + hsl.l * 100 + "% )");
    var _a = color.toRgb(), r = _a.r, g = _a.g, b = _a.b;
    return { r: r, g: g, b: b };
}
export function getHslFromRgbColor(rgb) {
    var color = tinycolor("rgb " + rgb.r + " " + rgb.g + " " + rgb.b);
    var _a = color.toHsl(), h = _a.h, s = _a.s, l = _a.l;
    return { h: h, s: s, l: l };
}
export function getHslFromHexColor(hex) {
    var color = tinycolor(hex);
    var _a = color.toHsl(), h = _a.h, s = _a.s, l = _a.l;
    return { h: h, s: s, l: l };
}
function getHslColorString(hue, saturation, lightness) {
    return "hsl(" + hue + ", " + Math.round(saturation * 100) + "%, " + Math.round(lightness * 100) + "%)";
}
export function getColorStyle(hslColor) {
    return {
        backgroundColor: getHslColorString(hslColor.h, hslColor.s, hslColor.l),
        borderColor: hslColor.l > 0.95 ? "#ccc" : null,
    };
}
function hasHexStringValidLength(hexColorString) {
    return ((hexColorString.startsWith("#") && hexColorString.length === HEX_LENGTH_WITH_HASH) ||
        hexColorString.length === HEX_LENGTH_WITHOUT_HASH);
}
export function isHexColorValid(hexColorString) {
    return hasHexStringValidLength(hexColorString) && tinycolor(hexColorString).isValid();
}
export function isHslColorBlackOrWhite(hslColor) {
    return hslColor.l === 1 || hslColor.l === 0;
}
function getX(e) {
    return e instanceof TouchEvent ? e.touches[0].pageX : e.pageX;
}
export function calculateHueChange(e, hue, container) {
    e.preventDefault();
    var containerWidth = container.clientWidth;
    var x = getX(e);
    var left = x - (container.getBoundingClientRect().left + window.pageXOffset);
    var h;
    if (left < 0) {
        h = 0;
    }
    else if (left > containerWidth) {
        h = 359;
    }
    else {
        var percent = (left * 100) / containerWidth;
        h = (360 * percent) / 100;
    }
    if (hue !== h) {
        return {
            h: h,
            s: 0.5,
            l: 0.5,
        };
    }
    return null;
}
//# sourceMappingURL=utils.js.map
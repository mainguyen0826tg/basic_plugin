import { __assign } from "tslib";
// (C) 2007-2020 GoodData Corporation
import cloneDeep from "lodash/cloneDeep";
import isEmpty from "lodash/isEmpty";
import isNumber from "lodash/isNumber";
import invariant from "ts-invariant";
import { DataViewFacade, isSomeHeaderPredicateMatched, VisualizationTypes, } from "@gooddata/sdk-ui";
function createHeadlineDataItem(executionDataItem) {
    if (!executionDataItem) {
        return null;
    }
    return {
        localIdentifier: executionDataItem.measureHeaderItem.localIdentifier,
        title: executionDataItem.measureHeaderItem.name,
        value: executionDataItem.value ? String(executionDataItem.value) : null,
        format: executionDataItem.measureHeaderItem.format,
        isDrillable: false,
    };
}
function createTertiaryItem(executionData, intl) {
    var _a, _b, _c;
    var secondaryHeaderItem = (_a = executionData === null || executionData === void 0 ? void 0 : executionData[1]) === null || _a === void 0 ? void 0 : _a.measureHeaderItem;
    if (!secondaryHeaderItem) {
        return null;
    }
    var primaryValueString = (_b = executionData === null || executionData === void 0 ? void 0 : executionData[0]) === null || _b === void 0 ? void 0 : _b.value;
    var primaryValue = primaryValueString !== null ? Number(primaryValueString) : null;
    var secondaryValueString = (_c = executionData === null || executionData === void 0 ? void 0 : executionData[1]) === null || _c === void 0 ? void 0 : _c.value;
    var secondaryValue = secondaryValueString !== null ? Number(secondaryValueString) : null;
    var tertiaryTitle = intl.formatMessage({ id: "visualizations.headline.tertiary.title" });
    var isCountableValue = isNumber(primaryValue) && isNumber(secondaryValue);
    var tertiaryValue = isCountableValue && secondaryValue !== 0
        ? ((primaryValue - secondaryValue) / secondaryValue) * 100
        : null;
    return {
        localIdentifier: "tertiaryIdentifier",
        title: tertiaryTitle,
        value: tertiaryValue !== null ? String(tertiaryValue) : null,
        format: null,
        isDrillable: false,
    };
}
function getExecutionData(dv) {
    var headerItems = dv.meta().measureDescriptors();
    var data = dv.rawData().singleDimData();
    return headerItems.map(function (item, index) {
        var value = data[index];
        invariant(value !== undefined, "Undefined execution value data for headline transformation");
        invariant(item.measureHeaderItem, "Missing expected measureHeaderItem");
        return {
            measureHeaderItem: item.measureHeaderItem,
            value: value,
        };
    });
}
/**
 * Get {HeadlineData} used by the {Headline} component.
 *
 * @param dataView - data to visualize
 * @param intl - Required localization for compare item title
 * @returns {*}
 */
export function getHeadlineData(dataView, intl) {
    var dv = DataViewFacade.for(dataView);
    var executionData = getExecutionData(dv);
    var primaryItem = createHeadlineDataItem(executionData[0]);
    var secondaryItem = createHeadlineDataItem(executionData[1]);
    var secondaryItemProp = secondaryItem ? { secondaryItem: secondaryItem } : {};
    var tertiaryItem = createTertiaryItem(executionData, intl);
    var tertiaryItemProp = tertiaryItem ? { tertiaryItem: tertiaryItem } : {};
    return __assign(__assign({ primaryItem: primaryItem }, secondaryItemProp), tertiaryItemProp);
}
/**
 * Take headline data and apply list of drillable items.
 * The method will return copied collection of the headline data with altered drillable status.
 *
 * @param headlineData - The headline data that we want to change the drillable status.
 * @param drillableItems - list of drillable items {uri, identifier}
 * @param dataView - data visualized by the headline
 * @returns altered headlineData
 */
export function applyDrillableItems(headlineData, drillableItems, dataView) {
    var dv = DataViewFacade.for(dataView);
    var data = cloneDeep(headlineData);
    var primaryItem = data.primaryItem, secondaryItem = data.secondaryItem;
    var _a = dv.meta().measureDescriptors(), primaryItemHeader = _a[0], secondaryItemHeader = _a[1];
    if (!isEmpty(primaryItem) && !isEmpty(primaryItemHeader)) {
        primaryItem.isDrillable = isSomeHeaderPredicateMatched(drillableItems, primaryItemHeader, dv);
    }
    if (!isEmpty(secondaryItem) && !isEmpty(secondaryItemHeader)) {
        secondaryItem.isDrillable = isSomeHeaderPredicateMatched(drillableItems, secondaryItemHeader, dv);
    }
    return data;
}
/**
 * Build drill event data (object with execution and drill context) from the data obtained by clicking on the {Headline}
 * component an from the execution objects.
 *
 * @param itemContext - data received from the click on the {Headline} component.
 * @param dataView - data visualized by the headline
 * @returns {*}
 */
export function buildDrillEventData(itemContext, dataView) {
    var dv = DataViewFacade.for(dataView);
    var measureHeaderItem = dv.meta().measureDescriptor(itemContext.localIdentifier);
    if (!measureHeaderItem) {
        throw new Error("The metric uri has not been found in execution response!");
    }
    var intersectionElement = {
        header: measureHeaderItem,
    };
    var drillContext = {
        type: VisualizationTypes.HEADLINE,
        element: itemContext.element,
        value: itemContext.value,
        intersection: [intersectionElement],
    };
    return {
        dataView: dataView,
        drillContext: drillContext,
    };
}
//# sourceMappingURL=HeadlineTransformationUtils.js.map
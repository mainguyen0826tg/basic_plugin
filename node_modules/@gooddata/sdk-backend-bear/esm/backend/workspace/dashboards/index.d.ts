import { IWorkspaceDashboardsService, IDashboard, IListedDashboard, IDashboardDefinition, IWidget, IFilterContextDefinition, IWidgetAlert, IWidgetAlertDefinition, IWidgetAlertCount, IScheduledMailDefinition, IScheduledMail, FilterContextItem, SupportedWidgetReferenceTypes, IWidgetReferences, IDashboardWithReferences, IGetDashboardOptions, SupportedDashboardReferenceTypes, IDashboardPlugin, IDashboardPluginDefinition, IDashboardReferences } from "@gooddata/sdk-backend-spi";
import { IFilter, ObjRef } from "@gooddata/sdk-model";
import { BearAuthenticatedCallGuard } from "../../../types/auth";
export declare class BearWorkspaceDashboards implements IWorkspaceDashboardsService {
    private readonly authCall;
    readonly workspace: string;
    private insights;
    constructor(authCall: BearAuthenticatedCallGuard, workspace: string);
    getDashboards: (options?: IGetDashboardOptions) => Promise<IListedDashboard[]>;
    getDashboard: (dashboardRef: ObjRef, exportFilterContextRef?: import("@gooddata/sdk-model").UriRef | import("@gooddata/sdk-model").IdentifierRef | undefined, options?: IGetDashboardOptions) => Promise<IDashboard>;
    createDashboard: (dashboard: IDashboardDefinition) => Promise<IDashboard>;
    updateDashboard: (originalDashboard: IDashboard, updatedDashboard: IDashboard | IDashboardDefinition) => Promise<IDashboard>;
    deleteDashboard: (dashboardRef: ObjRef) => Promise<void>;
    exportDashboardToPdf: (dashboardRef: ObjRef, filters?: FilterContextItem[] | undefined) => Promise<string>;
    createScheduledMail: (scheduledMailDefinition: IScheduledMailDefinition, exportFilterContextDefinition?: IFilterContextDefinition | undefined) => Promise<IScheduledMail>;
    getScheduledMailsCountForDashboard: (dashboardRef: ObjRef) => Promise<number>;
    getAllWidgetAlertsForCurrentUser: () => Promise<IWidgetAlert[]>;
    getDashboardWidgetAlertsForCurrentUser: (ref: ObjRef) => Promise<IWidgetAlert[]>;
    getWidgetAlertsCountForWidgets: (refs: ObjRef[]) => Promise<IWidgetAlertCount[]>;
    createWidgetAlert: (alert: IWidgetAlertDefinition) => Promise<IWidgetAlert>;
    updateWidgetAlert: (updatedAlert: IWidgetAlert) => Promise<IWidgetAlert>;
    deleteWidgetAlert: (ref: ObjRef) => Promise<void>;
    deleteWidgetAlerts: (refs: ObjRef[]) => Promise<void>;
    getWidgetReferencedObjects: (widget: IWidget, types?: SupportedWidgetReferenceTypes[]) => Promise<IWidgetReferences>;
    getResolvedFiltersForWidget: (widget: IWidget, filters: IFilter[]) => Promise<IFilter[]>;
    private createBearWidgetAlert;
    private updateBearWidgetAlert;
    private createOrUpdateWidgetAlertFilterContext;
    private getBearWidgetAlertsForWidget;
    private getBearDashboard;
    private createBearDashboard;
    private updateBearDashboard;
    private updateLayoutAndWidgets;
    private updateFilterContext;
    private getBearExportFilterContext;
    private createBearFilterContext;
    private updateBearFilterContext;
    private sanitizeFilterContext;
    private createBearWidget;
    private updateBearWidget;
    private deleteBearWidgets;
    private collectCreatedWidgetsWithLayoutPaths;
    private collectUpdatedWidgetsWithLayoutPaths;
    private collectDeletedWidgets;
    private getAllBearKpiAlertsForCurrentUser;
    private getDashboardBearKpiAlertsForCurrentUser;
    private getConvertedAlerts;
    private getBearKpiAlertsFilterContexts;
    private updateBearMetadataObject;
    private deleteBearMetadataObject;
    private getBearVisualizationClasses;
    private getBearDashboardDependencies;
    private getBearDashboardReferences;
    getDashboardWithReferences(ref: ObjRef, filterContextRef?: ObjRef, options?: IGetDashboardOptions, types?: SupportedDashboardReferenceTypes[]): Promise<IDashboardWithReferences>;
    getDashboardReferencedObjects: (dashboard: IDashboard, types?: SupportedDashboardReferenceTypes[]) => Promise<IDashboardReferences>;
    createDashboardPlugin: (plugin: IDashboardPluginDefinition) => Promise<IDashboardPlugin>;
    deleteDashboardPlugin: (ref: ObjRef) => Promise<void>;
    getDashboardPlugin: (ref: ObjRef) => Promise<IDashboardPlugin>;
    getDashboardPlugins: () => Promise<IDashboardPlugin[]>;
    private ensureDashboardPluginLinksHaveUris;
}
//# sourceMappingURL=index.d.ts.map
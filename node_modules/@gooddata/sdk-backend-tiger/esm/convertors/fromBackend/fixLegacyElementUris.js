import { __assign } from "tslib";
// (C) 2019-2021 GoodData Corporation
import { isInsightWidget } from "@gooddata/sdk-backend-spi";
import { isAttributeLocator, isMeasureSort, } from "@gooddata/sdk-model";
import isEmpty from "lodash/isEmpty";
import flow from "lodash/flow";
/**
 * Purpose of methods in this file is to remove & replace legacy element uris in the visualization properties & sorts
 * in favor of label text values (primary keys on Tiger).
 * In the past, we generated fake uris for attribute elements on Tiger to workaround some PivotTable internals,
 * but these uris are used in AD to pair attribute elements with custom colors/sortItems/columnWidths of the visualization.
 * Now, we don't need to fake these uris anymore and label text values are used directly for this on Tiger
 * so strip the fake uris and keep only label text values for the element ids.
 */
var FAKE_ELEMENT_URI_REGEX = /\/obj\/\d+\/elements\?id=(.*)/;
function fixColorMapping(colorMapping) {
    var _a;
    var _b = (_a = colorMapping.id.match(FAKE_ELEMENT_URI_REGEX)) !== null && _a !== void 0 ? _a : [], uri = _b[0], labelValue = _b[1];
    if (uri) {
        return __assign(__assign({}, colorMapping), { id: labelValue });
    }
    return colorMapping;
}
function fixVisualizationPropertiesColorMapping(properties) {
    var _a;
    if (properties === void 0) { properties = {}; }
    var colorMapping = (_a = properties.controls) === null || _a === void 0 ? void 0 : _a.colorMapping;
    if (colorMapping) {
        return __assign(__assign({}, properties), { controls: __assign(__assign({}, properties.controls), { colorMapping: colorMapping.map(fixColorMapping) }) });
    }
    return properties;
}
// Fix sorts
/**
 * We need to clone sortItems to visualizationProperties as we are not storing them on the backend,
 * but AD depends on them (and it's hard refactor).
 */
function addVisualizationPropertiesSortItems(properties, sortItems) {
    if (properties === void 0) { properties = {}; }
    if (sortItems === void 0) { sortItems = []; }
    return __assign(__assign({}, properties), { sortItems: sortItems });
}
function fixSortItems(sortItems) {
    if (sortItems === void 0) { sortItems = []; }
    return sortItems.map(function (s) {
        if (isMeasureSort(s)) {
            return {
                measureSortItem: __assign(__assign({}, s.measureSortItem), { locators: s.measureSortItem.locators.map(fixLocatorItem) }),
            };
        }
        return s;
    });
}
function fixLocatorItem(locator) {
    var _a;
    if (isAttributeLocator(locator)) {
        var _b = (_a = locator.attributeLocatorItem.element.match(FAKE_ELEMENT_URI_REGEX)) !== null && _a !== void 0 ? _a : [], uri = _b[0], labelValue = _b[1];
        if (uri) {
            return __assign(__assign({}, locator), { attributeLocatorItem: __assign(__assign({}, locator.attributeLocatorItem), { element: labelValue }) });
        }
    }
    return locator;
}
/**
 * @internal
 */
function isAttributeColumnLocator(obj) {
    return !isEmpty(obj) && obj.attributeLocatorItem !== undefined;
}
/**
 * @internal
 */
function isMeasureColumnWidthItem(obj) {
    return (!isEmpty(obj) &&
        obj.measureColumnWidthItem !== undefined &&
        obj.measureColumnWidthItem.locators !== undefined);
}
function fixColumnLocator(locator) {
    var _a, _b;
    if (isAttributeColumnLocator(locator)) {
        var _c = (_b = (_a = locator.attributeLocatorItem.element) === null || _a === void 0 ? void 0 : _a.match(FAKE_ELEMENT_URI_REGEX)) !== null && _b !== void 0 ? _b : [], uri = _c[0], labelValue = _c[1];
        if (uri) {
            return __assign(__assign({}, locator), { attributeLocatorItem: __assign(__assign({}, locator.attributeLocatorItem), { element: labelValue }) });
        }
    }
    return locator;
}
function fixVisualizationPropertiesColumnWidths(properties) {
    var _a;
    if (properties === void 0) { properties = {}; }
    var columnWidths = (_a = properties.controls) === null || _a === void 0 ? void 0 : _a.columnWidths;
    if (columnWidths) {
        return __assign(__assign({}, properties), { controls: __assign(__assign({}, properties.controls), { columnWidths: columnWidths.map(function (c) {
                    if (isMeasureColumnWidthItem(c)) {
                        return {
                            measureColumnWidthItem: __assign(__assign({}, c.measureColumnWidthItem), { locators: c.measureColumnWidthItem.locators.map(fixColumnLocator) }),
                        };
                    }
                    return c;
                }) }) });
    }
    return properties;
}
export function fixInsightLegacyElementUris(insight) {
    var fixedSortItems = fixSortItems(insight.insight.sorts);
    var fixedProperties = flow(fixVisualizationPropertiesColorMapping, fixVisualizationPropertiesColumnWidths, function (properties) { return addVisualizationPropertiesSortItems(properties, fixedSortItems); })(insight.insight.properties);
    return __assign(__assign({}, insight), { insight: __assign(__assign({}, insight.insight), { sorts: fixedSortItems, properties: fixedProperties }) });
}
export function fixWidgetLegacyElementUris(widget) {
    if (isInsightWidget(widget)) {
        var fixedProperties = fixVisualizationPropertiesColumnWidths(widget.properties);
        return __assign(__assign({}, widget), { properties: fixedProperties });
    }
    return widget;
}
//# sourceMappingURL=fixLegacyElementUris.js.map
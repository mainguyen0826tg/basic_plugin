import { __assign, __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { BucketNames, VisualizationTypes } from "@gooddata/sdk-ui";
import { TOP } from "@gooddata/sdk-ui-charts";
import { render } from "react-dom";
import { BUCKETS } from "../../../constants/bucket";
import { DASHBOARDS_ENVIRONMENT } from "../../../constants/properties";
import { PIECHART_SUPPORTED_PROPERTIES } from "../../../constants/supportedProperties";
import { DEFAULT_PIE_UICONFIG, PIE_UICONFIG_WITH_MULTIPLE_METRICS, PIE_UICONFIG_WITH_ONE_METRIC, UICONFIG, } from "../../../constants/uiConfig";
import { configureOverTimeComparison, configurePercent } from "../../../utils/bucketConfig";
import { getAttributeItems, getMeasureItems, limitNumberOfMeasuresInBuckets, removeAllArithmeticMeasuresFromDerived, removeAllDerivedMeasures, sanitizeFilters, } from "../../../utils/bucketHelper";
import { getReferencePointWithSupportedProperties } from "../../../utils/propertiesHelper";
import { removeSort } from "../../../utils/sort";
import { setPieChartUiConfig } from "../../../utils/uiConfigHelpers/pieChartUiConfigHelper";
import PieChartConfigurationPanel from "../../configurationPanels/PieChartConfigurationPanel";
import { PluggableBaseChart } from "../baseChart/PluggableBaseChart";
import cloneDeep from "lodash/cloneDeep";
import set from "lodash/set";
var PluggablePieChart = /** @class */ (function (_super) {
    __extends(PluggablePieChart, _super);
    function PluggablePieChart(props) {
        var _this = _super.call(this, props) || this;
        _this.type = VisualizationTypes.PIE;
        _this.supportedPropertiesList = PIECHART_SUPPORTED_PROPERTIES;
        _this.initializeProperties(props.visualizationProperties);
        return _this;
    }
    PluggablePieChart.prototype.getExtendedReferencePoint = function (referencePoint) {
        var _a;
        var clonedReferencePoint = cloneDeep(referencePoint);
        var newReferencePoint = __assign(__assign({}, clonedReferencePoint), { uiConfig: cloneDeep(DEFAULT_PIE_UICONFIG) });
        newReferencePoint = removeAllArithmeticMeasuresFromDerived(newReferencePoint);
        newReferencePoint = removeAllDerivedMeasures(newReferencePoint);
        var buckets = (_a = clonedReferencePoint === null || clonedReferencePoint === void 0 ? void 0 : clonedReferencePoint.buckets) !== null && _a !== void 0 ? _a : [];
        var attributes = getAttributeItems(buckets);
        if (attributes.length) {
            var limitedBuckets = limitNumberOfMeasuresInBuckets(buckets, 1);
            var limitedMeasures = getMeasureItems(limitedBuckets);
            set(newReferencePoint, BUCKETS, [
                {
                    localIdentifier: BucketNames.MEASURES,
                    items: limitedMeasures,
                },
                {
                    localIdentifier: BucketNames.VIEW,
                    items: attributes.slice(0, 1),
                },
            ]);
        }
        else {
            var measures = getMeasureItems(buckets);
            if (measures.length > 1) {
                set(newReferencePoint, UICONFIG, cloneDeep(PIE_UICONFIG_WITH_MULTIPLE_METRICS));
            }
            else {
                set(newReferencePoint, UICONFIG, cloneDeep(PIE_UICONFIG_WITH_ONE_METRIC));
            }
            set(newReferencePoint, BUCKETS, [
                {
                    localIdentifier: BucketNames.MEASURES,
                    items: measures,
                },
                {
                    localIdentifier: BucketNames.VIEW,
                    items: [],
                },
            ]);
        }
        newReferencePoint = setPieChartUiConfig(newReferencePoint, this.intl, this.type);
        newReferencePoint = configurePercent(newReferencePoint, false);
        newReferencePoint = configureOverTimeComparison(newReferencePoint, !!this.featureFlags["enableWeekFilters"]);
        newReferencePoint = getReferencePointWithSupportedProperties(newReferencePoint, this.supportedPropertiesList);
        newReferencePoint = removeSort(newReferencePoint);
        return Promise.resolve(sanitizeFilters(newReferencePoint));
    };
    PluggablePieChart.prototype.renderConfigurationPanel = function (insight) {
        if (document.querySelector(this.configPanelElement)) {
            render(React.createElement(PieChartConfigurationPanel, { locale: this.locale, properties: this.visualizationProperties, propertiesMeta: this.propertiesMeta, insight: insight, pushData: this.handlePushData, colors: this.colors, type: this.type, isError: this.getIsError(), isLoading: this.isLoading, featureFlags: this.featureFlags, references: this.references }), document.querySelector(this.configPanelElement));
        }
    };
    PluggablePieChart.prototype.buildVisualizationConfig = function (options, supportedControls) {
        var baseVisualizationConfig = _super.prototype.buildVisualizationConfig.call(this, options, supportedControls);
        if (this.environment === DASHBOARDS_ENVIRONMENT) {
            return __assign(__assign({}, baseVisualizationConfig), { chart: {
                    verticalAlign: TOP,
                } });
        }
        return baseVisualizationConfig;
    };
    return PluggablePieChart;
}(PluggableBaseChart));
export { PluggablePieChart };
//# sourceMappingURL=PluggablePieChart.js.map
import { __assign } from "tslib";
import { isPositiveAttributeFilter, filterAttributeElements, isAttributeElementsByRef, filterObjRef, isNegativeAttributeFilter, isAbsoluteDateFilter, isMeasureValueFilter, measureValueFilterMeasure, measureValueFilterCondition, isIdentifierRef, relativeDateFilterValues, absoluteDateFilterValues, isRankingFilter, } from "@gooddata/sdk-model";
import { toBearRef } from "./ObjRefConverter";
var convertObjRefInScopeToRefWithoutIdentifier = function (ref) {
    if (isIdentifierRef(ref)) {
        throw new Error("Cannot convert ref specified by identifier");
    }
    return ref;
};
var convertMeasureValueFilter = function (filter) {
    var measureObjQualifier = measureValueFilterMeasure(filter);
    if (isIdentifierRef(measureObjQualifier)) {
        throw new Error("Cannot convert measure value filter for measure specified by identifier");
    }
    return {
        measureValueFilter: {
            measure: measureObjQualifier,
            condition: measureValueFilterCondition(filter),
        },
    };
};
var convertRankingFilter = function (filter) {
    var _a = filter.rankingFilter, measure = _a.measure, attributes = _a.attributes, operator = _a.operator, value = _a.value;
    return {
        rankingFilter: {
            measures: [convertObjRefInScopeToRefWithoutIdentifier(measure)],
            attributes: attributes === null || attributes === void 0 ? void 0 : attributes.map(convertObjRefInScopeToRefWithoutIdentifier),
            operator: operator,
            value: value,
        },
    };
};
var convertRelativeDateFilter = function (filter) {
    return {
        relativeDateFilter: __assign({ dataSet: toBearRef(filterObjRef(filter)) }, relativeDateFilterValues(filter)),
    };
};
var convertAbsoluteDateFilter = function (filter) {
    return {
        absoluteDateFilter: __assign({ dataSet: toBearRef(filterObjRef(filter)) }, absoluteDateFilterValues(filter)),
    };
};
var convertNegativeAttributeFilter = function (filter) {
    var elements = filterAttributeElements(filter);
    return {
        negativeAttributeFilter: {
            displayForm: toBearRef(filterObjRef(filter)),
            notIn: isAttributeElementsByRef(elements) ? elements.uris : elements.values,
        },
    };
};
var convertPositiveAttributeFilter = function (filter) {
    var elements = filterAttributeElements(filter);
    return {
        positiveAttributeFilter: {
            displayForm: toBearRef(filterObjRef(filter)),
            in: isAttributeElementsByRef(elements) ? elements.uris : elements.values,
        },
    };
};
export var convertExtendedFilter = function (filter) {
    if (isMeasureValueFilter(filter)) {
        return convertMeasureValueFilter(filter);
    }
    else if (isRankingFilter(filter)) {
        return convertRankingFilter(filter);
    }
    else {
        return convertFilter(filter);
    }
};
export var convertFilter = function (filter) {
    if (isPositiveAttributeFilter(filter)) {
        return convertPositiveAttributeFilter(filter);
    }
    else if (isNegativeAttributeFilter(filter)) {
        return convertNegativeAttributeFilter(filter);
    }
    else if (isAbsoluteDateFilter(filter)) {
        return convertAbsoluteDateFilter(filter);
    }
    else {
        return convertRelativeDateFilter(filter);
    }
};
//# sourceMappingURL=FilterConverter.js.map
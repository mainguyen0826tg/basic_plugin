import { __assign, __extends, __spreadArrays } from "tslib";
// (C) 2019 GoodData Corporation
import { BucketNames, VisualizationTypes } from "@gooddata/sdk-ui";
import React from "react";
import { render } from "react-dom";
import { BUCKETS, METRIC } from "../../../constants/bucket";
import { BUBBLE_CHART_SUPPORTED_PROPERTIES } from "../../../constants/supportedProperties";
import { DEFAULT_BUBBLE_CHART_CONFIG } from "../../../constants/uiConfig";
import { configureOverTimeComparison, configurePercent } from "../../../utils/bucketConfig";
import { getAllAttributeItems, getAllMeasures, getPreferredBucketItems, limitNumberOfMeasuresInBuckets, removeAllArithmeticMeasuresFromDerived, removeAllDerivedMeasures, sanitizeFilters, } from "../../../utils/bucketHelper";
import { getReferencePointWithSupportedProperties } from "../../../utils/propertiesHelper";
import { removeSort } from "../../../utils/sort";
import { setBubbleChartUiConfig } from "../../../utils/uiConfigHelpers/bubbleChartUiConfigHelper";
import BubbleChartConfigurationPanel from "../../configurationPanels/BubbleChartConfigurationPanel";
import { PluggableBaseChart } from "../baseChart/PluggableBaseChart";
import cloneDeep from "lodash/cloneDeep";
import includes from "lodash/includes";
import set from "lodash/set";
var PluggableBubbleChart = /** @class */ (function (_super) {
    __extends(PluggableBubbleChart, _super);
    function PluggableBubbleChart(props) {
        var _this = _super.call(this, props) || this;
        _this.type = VisualizationTypes.BUBBLE;
        _this.supportedPropertiesList = BUBBLE_CHART_SUPPORTED_PROPERTIES;
        _this.initializeProperties(props.visualizationProperties);
        return _this;
    }
    PluggableBubbleChart.prototype.getExtendedReferencePoint = function (referencePoint) {
        var clonedReferencePoint = cloneDeep(referencePoint);
        var newReferencePoint = __assign(__assign({}, clonedReferencePoint), { uiConfig: cloneDeep(DEFAULT_BUBBLE_CHART_CONFIG) });
        newReferencePoint = removeAllArithmeticMeasuresFromDerived(newReferencePoint);
        newReferencePoint = removeAllDerivedMeasures(newReferencePoint);
        var buckets = limitNumberOfMeasuresInBuckets(clonedReferencePoint.buckets, 3);
        // limit number of measures in the ref point here?
        // Check if there are three measure buckets
        var measuresBucketItems = getPreferredBucketItems(buckets, [BucketNames.MEASURES], [METRIC]);
        var secondaryMeasuresBucketItems = getPreferredBucketItems(buckets, [BucketNames.SECONDARY_MEASURES], [METRIC]);
        var tertiaryMeasuresBucketItems = getPreferredBucketItems(buckets, [BucketNames.TERTIARY_MEASURES], [METRIC]);
        var allMeasures = getAllMeasures(buckets);
        // skip first to reserve first items to be picked later
        var secondaryAndTertiaryItems = __spreadArrays(secondaryMeasuresBucketItems.slice(0, 1), tertiaryMeasuresBucketItems.slice(0, 1));
        var measures = measuresBucketItems.length > 0
            ? measuresBucketItems.slice(0, 1)
            : allMeasures.filter(function (measure) { return !includes(secondaryAndTertiaryItems, measure); }).slice(0, 1);
        var secondaryMeasures = secondaryMeasuresBucketItems.length > 0
            ? secondaryMeasuresBucketItems.slice(0, 1)
            : allMeasures
                .filter(function (measure) {
                return !includes(__spreadArrays(measures, tertiaryMeasuresBucketItems.slice(0, 1)), measure);
            })
                .slice(0, 1);
        var tertiaryMeasures = tertiaryMeasuresBucketItems.length > 0
            ? tertiaryMeasuresBucketItems.slice(0, 1)
            : allMeasures
                .filter(function (measure) { return !includes(__spreadArrays(measures, secondaryMeasures), measure); })
                .slice(0, 1);
        set(newReferencePoint, BUCKETS, [
            {
                localIdentifier: BucketNames.MEASURES,
                items: measures,
            },
            {
                localIdentifier: BucketNames.SECONDARY_MEASURES,
                items: secondaryMeasures,
            },
            {
                localIdentifier: BucketNames.TERTIARY_MEASURES,
                items: tertiaryMeasures,
            },
            {
                localIdentifier: BucketNames.VIEW,
                items: getAllAttributeItems(buckets).slice(0, 1),
            },
        ]);
        newReferencePoint = setBubbleChartUiConfig(newReferencePoint, this.intl, this.type);
        newReferencePoint = configurePercent(newReferencePoint, true);
        newReferencePoint = configureOverTimeComparison(newReferencePoint, !!this.featureFlags["enableWeekFilters"]);
        newReferencePoint = getReferencePointWithSupportedProperties(newReferencePoint, this.supportedPropertiesList);
        newReferencePoint = removeSort(newReferencePoint);
        return Promise.resolve(sanitizeFilters(newReferencePoint));
    };
    PluggableBubbleChart.prototype.renderConfigurationPanel = function (insight) {
        if (document.querySelector(this.configPanelElement)) {
            render(React.createElement(BubbleChartConfigurationPanel, { locale: this.locale, references: this.references, properties: this.visualizationProperties, propertiesMeta: this.propertiesMeta, insight: insight, colors: this.colors, pushData: this.handlePushData, type: this.type, isError: this.getIsError(), isLoading: this.isLoading, featureFlags: this.featureFlags }), document.querySelector(this.configPanelElement));
        }
        return null;
    };
    return PluggableBubbleChart;
}(PluggableBaseChart));
export { PluggableBubbleChart };
//# sourceMappingURL=PluggableBubbleChart.js.map
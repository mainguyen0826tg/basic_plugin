/**
 * This package provides the Analytical Backend implementation for the GoodData platform.
 *
 * @remarks
 * You can use this package to communicate with the GoodData platform in a convenient way without concerning
 * yourself with low-level details. The functionality includes but is not limited to:
 * setting and creating metadata objects, running executions, getting settings, getting available workspaces, and more.
 *
 * For the similar package for GoodData.CN, see `@gooddata/sdk-backend-tiger`.
 *
 * @packageDocumentation
 */
import { IAnalyticalBackendConfig, IAnalyticalBackend } from "@gooddata/sdk-backend-spi";
import { BearBackendConfig } from "./backend";
import { FixedLoginAndPasswordAuthProvider, ContextDeferredAuthProvider, BearAuthProviderBase } from "./auth";
/**
 * Returns function which creates instances of Analytical Backend implementation which works with the 'bear'
 * version of the GoodData platform.
 *
 * @param config - analytical backend configuration, may be omitted and provided later
 * @param implConfig - bear client specific configuration, may be omitted at this point but it cannot be provided later
 * @public
 */
declare function bearFactory(config?: IAnalyticalBackendConfig, implConfig?: any): IAnalyticalBackend;
export { BearBackendConfig, FixedLoginAndPasswordAuthProvider, ContextDeferredAuthProvider, BearAuthProviderBase, };
export { AnonymousAuthProvider } from "@gooddata/sdk-backend-base";
export default bearFactory;
/**
 * Some of the convertors from bear types are exported through this so that they can be used by our
 * applications that were using bear-specific types in their state.
 *
 * All of these exports are marked as internal and can break at any time.
 *
 * @internal
 */
export declare const BearToBackendConvertors: {
    convertInsight: (insight: import("@gooddata/sdk-model").IInsight) => import("@gooddata/api-model-bear").GdcVisualizationObject.IVisualizationObject;
    convertInsightDefinition: (insight: import("@gooddata/sdk-model").IInsightDefinition) => import("@gooddata/api-model-bear").GdcVisualizationObject.IVisualizationObject;
    toAfmExecution: (def: import("@gooddata/sdk-model").IExecutionDefinition) => import("@gooddata/api-model-bear").GdcExecuteAFM.IExecution;
    convertScheduledMail: (scheduledMail: import("@gooddata/sdk-backend-spi").IScheduledMailDefinition | import("@gooddata/sdk-backend-spi").IScheduledMail) => import("@gooddata/api-model-bear").GdcScheduledMail.IWrappedScheduledMail;
    convertWidget: (widget: import("@gooddata/sdk-backend-spi").IKpiWidget | import("@gooddata/sdk-backend-spi").IKpiWidgetDefinition | import("@gooddata/sdk-backend-spi").IInsightWidget | import("@gooddata/sdk-backend-spi").IInsightWidgetDefinition) => import("@gooddata/api-model-bear").GdcVisualizationWidget.IWrappedVisualizationWidget | import("@gooddata/api-model-bear").GdcKpi.IWrappedKPI;
    convertLayoutSize: (size: import("@gooddata/sdk-backend-spi").IDashboardLayoutSize) => import("@gooddata/api-model-bear").GdcDashboardLayout.IFluidLayoutSize;
    convertLayoutItemSize: (column: import("@gooddata/sdk-backend-spi").IDashboardLayoutSizeByScreenSize) => import("@gooddata/api-model-bear").GdcDashboardLayout.IFluidLayoutColSize;
};
/**
 * Some of the convertors to bear types are exported through this so that they can be used by our
 * applications that were using bear-specific types in their state.
 *
 * All of these exports are marked as internal and can break at any time.
 *
 * @internal
 */
export declare const BackendToBearConvertors: {
    convertVisualization: (visualization: import("@gooddata/api-model-bear").GdcVisualizationObject.IVisualization, visualizationClassUri: string, userMap?: Map<string, import("@gooddata/sdk-model").IUser> | undefined) => import("@gooddata/sdk-model").IInsight;
    convertReferencesToUris: import("./convertors/fromBackend/ReferenceConverter").ReferenceConverter;
    convertFilterContext: (filterContext: import("@gooddata/api-model-bear").GdcFilterContext.IWrappedFilterContext) => import("@gooddata/sdk-backend-spi").IFilterContextDefinition | import("@gooddata/sdk-backend-spi").IFilterContext;
    convertFilterContextItem: (filterContextItem: import("@gooddata/api-model-bear").GdcFilterContext.FilterContextItem) => import("@gooddata/sdk-backend-spi").FilterContextItem;
    convertFilterReference: (filterReference: import("@gooddata/api-model-bear").GdcExtendedDateFilters.IDateFilterReference | import("@gooddata/api-model-bear").GdcExtendedDateFilters.IAttributeFilterReference) => import("@gooddata/sdk-backend-spi").IDashboardFilterReference;
    convertKpiDrill: (kpi: import("@gooddata/api-model-bear").GdcKpi.IWrappedKPI) => import("@gooddata/sdk-backend-spi").IDrillToLegacyDashboard;
    convertInsight: (insight: import("@gooddata/sdk-model").IInsight) => import("@gooddata/api-model-bear").GdcVisualizationObject.IVisualizationObject;
    convertVisualizationWidgetDrill: (drill: import("@gooddata/api-model-bear").GdcVisualizationWidget.IDrillDefinition) => import("@gooddata/sdk-backend-spi").InsightDrillDefinition;
    convertScheduledMail: (scheduledMail: import("@gooddata/api-model-bear").GdcScheduledMail.IWrappedScheduledMail) => import("@gooddata/sdk-backend-spi").IScheduledMailDefinition | import("@gooddata/sdk-backend-spi").IScheduledMail;
    convertDashboardDateFilterConfig: (dateFilterConfig: import("@gooddata/api-model-bear").GdcDashboard.IDashboardDateFilterConfig) => import("@gooddata/sdk-backend-spi").IDashboardDateFilterConfig;
    convertUrisToReferences: import("./convertors/fromBackend/ReferenceConverter").ReferenceConverter;
    serializeProperties: (properties: import("@gooddata/sdk-model").VisualizationProperties) => string;
    deserializeProperties: (properties: string | undefined) => import("@gooddata/sdk-model").VisualizationProperties;
    convertLayoutSize: (size: import("@gooddata/api-model-bear").GdcDashboardLayout.IFluidLayoutSize) => import("@gooddata/sdk-backend-spi").IDashboardLayoutSize;
    convertLayoutItemSize: (column: import("@gooddata/api-model-bear").GdcDashboardLayout.IFluidLayoutColSize) => import("@gooddata/sdk-backend-spi").IDashboardLayoutSizeByScreenSize;
};
export { ReferenceConverter, IConversionData, IdGenerator, } from "./convertors/fromBackend/ReferenceConverter";
//# sourceMappingURL=index.d.ts.map
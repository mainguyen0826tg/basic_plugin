import { __assign, __extends } from "tslib";
// (C) 2007-2019 GoodData Corporation
import React from "react";
import { injectIntl } from "react-intl";
import cx from "classnames";
import capitalize from "lodash/capitalize";
import { Button } from "@gooddata/sdk-ui-kit";
import { stringUtils } from "@gooddata/util";
import OperatorDropdownBody from "./OperatorDropdownBody";
import { getOperatorTranslationKey, getOperatorIcon } from "./helpers/measureValueFilterOperator";
var OperatorDropdown = /** @class */ (function (_super) {
    __extends(OperatorDropdown, _super);
    function OperatorDropdown() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            opened: false,
        };
        _this.handleOperatorSelected = function (operator) {
            _this.closeOperatorDropdown();
            _this.props.onSelect(operator);
        };
        _this.closeOperatorDropdown = function () { return _this.setState({ opened: false }); };
        _this.handleOperatorDropdownButtonClick = function () {
            return _this.setState(function (state) { return (__assign(__assign({}, state), { opened: !state.opened })); });
        };
        return _this;
    }
    OperatorDropdown.prototype.render = function () {
        return (React.createElement(React.Fragment, null,
            this.renderDropdownButton(),
            this.state.opened ? (React.createElement(OperatorDropdownBody, { alignTo: ".gd-mvf-operator-dropdown-button", onSelect: this.handleOperatorSelected, selectedOperator: this.props.operator, onClose: this.closeOperatorDropdown })) : null));
    };
    OperatorDropdown.prototype.renderDropdownButton = function () {
        var _a = this.props, intl = _a.intl, operator = _a.operator, isDisabled = _a.isDisabled;
        var opened = this.state.opened;
        var title = capitalize(intl.formatMessage({ id: getOperatorTranslationKey(operator) }));
        var buttonClasses = cx("gd-mvf-operator-dropdown-button", "s-mvf-operator-dropdown-button", "s-mvf-operator-dropdown-button-" + stringUtils.simplifyText(operator), "gd-button-primary", "gd-button-small", {
            "button-dropdown": true,
            "is-dropdown-open": opened,
            "is-active": opened,
        });
        return (React.createElement(Button, { title: title, className: buttonClasses, value: title, onClick: this.handleOperatorDropdownButtonClick, iconLeft: "gd-icon-" + getOperatorIcon(operator), iconRight: opened ? "gd-icon-navigateup" : "gd-icon-navigatedown", disabled: isDisabled }));
    };
    return OperatorDropdown;
}(React.PureComponent));
export { OperatorDropdown };
export default injectIntl(OperatorDropdown);
//# sourceMappingURL=OperatorDropdown.js.map
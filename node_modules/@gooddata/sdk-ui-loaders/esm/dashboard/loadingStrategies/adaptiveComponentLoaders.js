import isEmpty from "lodash/isEmpty";
import { noopDashboardBeforeLoad, noopDashboardPluginLoader, staticDashboardEngineLoader, } from "./staticComponentLoaders";
import { dynamicDashboardBeforeLoad, dynamicDashboardEngineLoader, dynamicDashboardPluginLoader, } from "./dynamicComponentLoaders";
/**
 * Adaptive loader will check if there are any plugins linked with the dashboard. If so, it will use the
 * dynamic loading to get the engine. Otherwise will use the static loading.
 *
 * @param moduleFederationIntegration - configuration related to the Module Federation
 * @param dashboard - loaded dashboard
 * @internal
 */
export var adaptiveDashboardEngineLoaderFactory = function (moduleFederationIntegration) {
    return function (dashboard) {
        if (!isEmpty(dashboard.references.plugins)) {
            return dynamicDashboardEngineLoader(dashboard, moduleFederationIntegration);
        }
        return staticDashboardEngineLoader(dashboard);
    };
};
/**
 * Adaptive loader will check if there are any plugins linked with the dashboard. If so, it will use
 * the dynamic loading to get the plugins. Otherwise will not load any plugins.
 *
 * @param moduleFederationIntegration - configuration related to the Module Federation
 * @param ctx - context in which the dashboard operates
 * @param dashboard - loaded dashboard
 * @internal
 */
export var adaptiveDashboardPluginLoaderFactory = function (moduleFederationIntegration) {
    return function (ctx, dashboard) {
        if (!isEmpty(dashboard.references.plugins)) {
            return dynamicDashboardPluginLoader(ctx, dashboard, moduleFederationIntegration);
        }
        return noopDashboardPluginLoader(ctx, dashboard);
    };
};
/**
 * Adaptive loader will check if there are any plugins linked with the dashboard. If so, it will use
 * the dynamic loading to get the common data. Otherwise will not do anything.
 *
 * @param _moduleFederationIntegration - configuration related to the Module Federation
 * @param ctx - context in which the dashboard operates
 * @param dashboard - loaded dashboard
 * @internal
 */
export var adaptiveDashboardBeforeLoadFactory = function (_moduleFederationIntegration) {
    return function (ctx, dashboard) {
        if (!isEmpty(dashboard.references.plugins)) {
            return dynamicDashboardBeforeLoad(ctx, dashboard);
        }
        return noopDashboardBeforeLoad(ctx, dashboard);
    };
};
//# sourceMappingURL=adaptiveComponentLoaders.js.map
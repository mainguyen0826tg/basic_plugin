import { GoodDataSdkError } from "@gooddata/sdk-ui";
import { DashboardQueries, IDashboardQueryResult } from "../queries";
import { DashboardQueryFailed, DashboardQueryRejected } from "../events";
/**
 * @internal
 */
export declare type QueryProcessingStatus = "running" | "success" | "error" | "rejected";
/**
 * @internal
 */
export declare const useDashboardQueryProcessing: <TQuery extends DashboardQueries, TQueryCreatorArgs extends any[]>({ queryCreator, onSuccess, onError, onRejected, onBeforeRun, }: {
    queryCreator: (...args: TQueryCreatorArgs) => TQuery;
    onSuccess?: ((result: IDashboardQueryResult<TQuery>) => void) | undefined;
    onError?: ((event: DashboardQueryFailed) => void) | undefined;
    onRejected?: ((event: DashboardQueryRejected) => void) | undefined;
    onBeforeRun?: ((query: TQuery) => void) | undefined;
}) => {
    run: (...args: TQueryCreatorArgs) => void;
    status?: "running" | "error" | "success" | "rejected" | undefined;
    result?: IDashboardQueryResult<TQuery> | undefined;
    error?: GoodDataSdkError | undefined;
};
//# sourceMappingURL=useDashboardQueryProcessing.d.ts.map
// (C) 2019 GoodData Corporation
import { __assign, __extends } from "tslib";
import { bucketIsEmpty, insightBucket, insightHasDataDefined } from "@gooddata/sdk-model";
import { BucketNames } from "@gooddata/sdk-ui";
import { CoreHeadline, updateConfigWithSettings } from "@gooddata/sdk-ui-charts";
import React from "react";
import { render } from "react-dom";
import { METRIC } from "../../../constants/bucket";
import { InvalidBucketsSdkError, } from "../../../interfaces/Visualization";
import { configureOverTimeComparison, configurePercent } from "../../../utils/bucketConfig";
import { findDerivedBucketItem, getAllItemsByType, hasDerivedBucketItems, isDerivedBucketItem, limitNumberOfMeasuresInBuckets, removeAllArithmeticMeasuresFromDerived, removeAllDerivedMeasures, sanitizeFilters, } from "../../../utils/bucketHelper";
import { hasGlobalDateFilter } from "../../../utils/bucketRules";
import { unmountComponentsAtNodes } from "../../../utils/domHelper";
import { getReferencePointWithSupportedProperties, getSupportedProperties, } from "../../../utils/propertiesHelper";
import { removeSort } from "../../../utils/sort";
import { getDefaultHeadlineUiConfig, getHeadlineUiConfig, } from "../../../utils/uiConfigHelpers/headlineUiConfigHelper";
import UnsupportedConfigurationPanel from "../../configurationPanels/UnsupportedConfigurationPanel";
import { AbstractPluggableVisualization } from "../AbstractPluggableVisualization";
import { findComplementaryOverTimeComparisonMeasure, findSecondMasterMeasure, setHeadlineRefPointBuckets, tryToMapForeignBuckets, } from "./headlineBucketHelper";
import cloneDeep from "lodash/cloneDeep";
var PluggableHeadline = /** @class */ (function (_super) {
    __extends(PluggableHeadline, _super);
    function PluggableHeadline(props) {
        var _this = _super.call(this, props) || this;
        //  this.projectId = props.projectId;
        _this.settings = props.featureFlags;
        _this.renderFun = props.renderFun;
        return _this;
    }
    PluggableHeadline.prototype.unmount = function () {
        unmountComponentsAtNodes([this.element, this.configPanelElement]);
    };
    PluggableHeadline.prototype.getExtendedReferencePoint = function (referencePoint) {
        var _a;
        var referencePointCloned = cloneDeep(referencePoint);
        var newReferencePoint = __assign(__assign({}, referencePointCloned), { uiConfig: getDefaultHeadlineUiConfig() });
        if (!hasGlobalDateFilter(referencePoint.filters)) {
            newReferencePoint = removeAllArithmeticMeasuresFromDerived(newReferencePoint);
            newReferencePoint = removeAllDerivedMeasures(newReferencePoint);
        }
        var mappedReferencePoint = tryToMapForeignBuckets(newReferencePoint);
        if (mappedReferencePoint) {
            newReferencePoint = mappedReferencePoint;
        }
        else {
            var limitedBuckets = limitNumberOfMeasuresInBuckets(newReferencePoint.buckets, 2, true);
            var allMeasures = getAllItemsByType(limitedBuckets, [METRIC]);
            var primaryMeasure = allMeasures.length > 0 ? allMeasures[0] : null;
            var secondaryMeasure = findComplementaryOverTimeComparisonMeasure(primaryMeasure, allMeasures) ||
                findSecondMasterMeasure(allMeasures);
            newReferencePoint = setHeadlineRefPointBuckets(newReferencePoint, primaryMeasure, secondaryMeasure);
        }
        configurePercent(newReferencePoint, true);
        configureOverTimeComparison(newReferencePoint, !!((_a = this.settings) === null || _a === void 0 ? void 0 : _a["enableWeekFilters"]));
        newReferencePoint.uiConfig = getHeadlineUiConfig(newReferencePoint, this.intl);
        newReferencePoint = getReferencePointWithSupportedProperties(newReferencePoint, this.supportedPropertiesList);
        newReferencePoint = removeSort(newReferencePoint);
        return Promise.resolve(sanitizeFilters(newReferencePoint));
    };
    PluggableHeadline.prototype.checkBeforeRender = function (insight) {
        _super.prototype.checkBeforeRender.call(this, insight);
        var measureBucket = insightBucket(insight, BucketNames.MEASURES);
        if (!measureBucket || bucketIsEmpty(measureBucket)) {
            // unmount on error because currently AD cannot recover in certain cases (RAIL-2625)
            this.unmount();
            throw new InvalidBucketsSdkError();
        }
        return true;
    };
    PluggableHeadline.prototype.renderVisualization = function (options, insight, executionFactory) {
        if (!insightHasDataDefined(insight)) {
            return;
        }
        var locale = options.locale, dateFormat = options.dateFormat, _a = options.custom, custom = _a === void 0 ? {} : _a, config = options.config, customVisualizationConfig = options.customVisualizationConfig, executionConfig = options.executionConfig;
        var drillableItems = custom.drillableItems;
        var execution = executionFactory
            .forInsight(insight)
            .withDimensions({ itemIdentifiers: ["measureGroup"] })
            .withDateFormat(dateFormat)
            .withExecConfig(executionConfig);
        this.renderFun(React.createElement(CoreHeadline, { execution: execution, drillableItems: drillableItems, onDrill: this.onDrill, locale: locale, config: updateConfigWithSettings(__assign(__assign({}, config), customVisualizationConfig), this.settings), afterRender: this.afterRender, onLoadingChanged: this.onLoadingChanged, pushData: this.pushData, onError: this.onError, LoadingComponent: null, ErrorComponent: null }), document.querySelector(this.element));
    };
    PluggableHeadline.prototype.renderConfigurationPanel = function () {
        var _a;
        if (document.querySelector(this.configPanelElement)) {
            var properties = (_a = this.visualizationProperties) !== null && _a !== void 0 ? _a : {};
            render(React.createElement(UnsupportedConfigurationPanel, { locale: this.locale, pushData: this.pushData, properties: getSupportedProperties(properties, this.supportedPropertiesList) }), document.querySelector(this.configPanelElement));
        }
    };
    PluggableHeadline.prototype.mergeDerivedBucketItems = function (referencePoint, bucket, newDerivedBucketItems) {
        return bucket.items.reduce(function (resultItems, bucketItem) {
            var newDerivedBucketItem = findDerivedBucketItem(bucketItem, newDerivedBucketItems);
            var shouldAddItem = newDerivedBucketItem &&
                !isDerivedBucketItem(bucketItem) &&
                !hasDerivedBucketItems(bucketItem, referencePoint.buckets);
            var shouldAddAfterMasterItem = bucket.localIdentifier === BucketNames.MEASURES;
            if (shouldAddItem && !shouldAddAfterMasterItem) {
                resultItems.push(newDerivedBucketItem);
            }
            resultItems.push(bucketItem);
            if (shouldAddItem && shouldAddAfterMasterItem) {
                resultItems.push(newDerivedBucketItem);
            }
            return resultItems;
        }, []);
    };
    return PluggableHeadline;
}(AbstractPluggableVisualization));
export { PluggableHeadline };
//# sourceMappingURL=PluggableHeadline.js.map
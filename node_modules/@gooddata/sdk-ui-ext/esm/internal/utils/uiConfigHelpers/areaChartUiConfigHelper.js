// (C) 2019-2021 GoodData Corporation
import cloneDeep from "lodash/cloneDeep";
import set from "lodash/set";
import { BucketNames } from "@gooddata/sdk-ui";
import { UICONFIG } from "../../constants/uiConfig";
import { ATTRIBUTE, BUCKETS, DATE } from "../../constants/bucket";
import { getMasterMeasuresCount, hasNoStacksWithDate } from "../bucketRules";
import { getItemsCount, getStackItems, getViewItems, setBucketTitles } from "../bucketHelper";
import areaMeasuresIcon from "../../assets/area/bucket-title-measures.svg";
import areaViewIcon from "../../assets/area/bucket-title-view.svg";
import areaStackIcon from "../../assets/area/bucket-title-stack.svg";
import { getBucketItemsWarningMessage } from "./baseChartUiConfigHelper";
import { getTranslation } from "../translations";
function getWarningMessageForMeasuresBucket(intl, categoriesCount, stackItems, viewItems) {
    return categoriesCount > 1
        ? getBucketItemsWarningMessage("dashboard.bucket.metric_view_by_warning", intl, viewItems)
        : getBucketItemsWarningMessage("dashboard.bucket.metric_stack_by_warning", intl, stackItems);
}
function getWarningMessageForViewByBucket(intl, measuresCount, stackItems) {
    return measuresCount > 1
        ? getTranslation("dashboard.bucket.category_view_by_warning", intl)
        : getBucketItemsWarningMessage("dashboard.bucket.view_stack_by_warning", intl, stackItems);
}
function getWarningMessageForStackByBucket(intl, categoriesCount) {
    return categoriesCount > 1
        ? getTranslation("dashboard.bucket.stack_view_by_warning", intl)
        : getTranslation("dashboard.bucket.measure_stack_by_warning", intl);
}
function setAreaChartBucketWarningMessages(referencePoint, messageConfig) {
    var _a;
    var buckets = (_a = referencePoint === null || referencePoint === void 0 ? void 0 : referencePoint.buckets) !== null && _a !== void 0 ? _a : [];
    var updatedUiConfig = referencePoint === null || referencePoint === void 0 ? void 0 : referencePoint.uiConfig;
    return buckets.reduce(function (uiConfig, bucket) {
        var _a, _b, _c;
        var localIdentifier = (_a = bucket === null || bucket === void 0 ? void 0 : bucket.localIdentifier) !== null && _a !== void 0 ? _a : "";
        var bucketUiConfig = (_b = uiConfig === null || uiConfig === void 0 ? void 0 : uiConfig.buckets) === null || _b === void 0 ? void 0 : _b[localIdentifier];
        var isEnabled = (_c = bucketUiConfig === null || bucketUiConfig === void 0 ? void 0 : bucketUiConfig.enabled) !== null && _c !== void 0 ? _c : false;
        var canAddItem = bucketUiConfig === null || bucketUiConfig === void 0 ? void 0 : bucketUiConfig.canAddItems;
        // skip disabled buckets
        if (canAddItem || !isEnabled) {
            return uiConfig;
        }
        var warningMessage = messageConfig[localIdentifier];
        return set(uiConfig, [BUCKETS, localIdentifier, "warningMessage"], warningMessage);
    }, updatedUiConfig);
}
export function setAreaChartUiConfig(referencePoint, intl, visualizationType) {
    var _a;
    var _b;
    var referencePointConfigured = cloneDeep(referencePoint);
    var buckets = (_b = referencePointConfigured === null || referencePointConfigured === void 0 ? void 0 : referencePointConfigured.buckets) !== null && _b !== void 0 ? _b : [];
    var categoriesCount = getItemsCount(buckets, BucketNames.VIEW);
    var stackItems = getStackItems(buckets, [ATTRIBUTE, DATE]);
    var viewItems = getViewItems(buckets, [ATTRIBUTE, DATE]);
    var measuresCount = getMasterMeasuresCount(buckets, BucketNames.MEASURES);
    var isStackEmpty = hasNoStacksWithDate(buckets);
    var canAddMeasuresItems = !measuresCount || (categoriesCount <= 1 && isStackEmpty);
    var canAddViewItems = !categoriesCount || (measuresCount <= 1 && isStackEmpty);
    var canAddStackItems = categoriesCount <= 1 && measuresCount <= 1;
    var messageConfig = (_a = {},
        _a[BucketNames.MEASURES] = getWarningMessageForMeasuresBucket(intl, categoriesCount, stackItems, viewItems),
        _a[BucketNames.VIEW] = getWarningMessageForViewByBucket(intl, measuresCount, stackItems),
        _a[BucketNames.STACK] = getWarningMessageForStackByBucket(intl, categoriesCount),
        _a);
    set(referencePointConfigured, UICONFIG, setBucketTitles(referencePoint, visualizationType, intl));
    set(referencePointConfigured, [UICONFIG, BUCKETS, BucketNames.MEASURES, "canAddItems"], canAddMeasuresItems);
    set(referencePointConfigured, [UICONFIG, BUCKETS, BucketNames.VIEW, "canAddItems"], canAddViewItems);
    set(referencePointConfigured, [UICONFIG, BUCKETS, BucketNames.STACK, "canAddItems"], canAddStackItems);
    setAreaChartBucketWarningMessages(referencePointConfigured, messageConfig);
    set(referencePointConfigured, [UICONFIG, BUCKETS, BucketNames.MEASURES, "icon"], areaMeasuresIcon);
    set(referencePointConfigured, [UICONFIG, BUCKETS, BucketNames.VIEW, "icon"], areaViewIcon);
    set(referencePointConfigured, [UICONFIG, BUCKETS, BucketNames.STACK, "icon"], areaStackIcon);
    return referencePointConfigured;
}
//# sourceMappingURL=areaChartUiConfigHelper.js.map
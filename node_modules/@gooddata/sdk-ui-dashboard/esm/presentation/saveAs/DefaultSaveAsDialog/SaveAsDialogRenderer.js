import { __assign, __extends } from "tslib";
// (C) 2020-2021 GoodData Corporation
import React from "react";
import { injectIntl } from "react-intl";
import { ConfirmDialog, Input, Message, Typography } from "@gooddata/sdk-ui-kit";
import compact from "lodash/compact";
import first from "lodash/first";
import { IntlWrapper } from "../../localization";
import noop from "lodash/noop";
import { DASHBOARD_TITLE_MAX_LENGTH } from "../../constants/dashboard";
/**
 * @internal
 */
var SaveAsNewDashboardDialog = /** @class */ (function (_super) {
    __extends(SaveAsNewDashboardDialog, _super);
    function SaveAsNewDashboardDialog(props) {
        var _this = _super.call(this, props) || this;
        _this.handleTitleFocus = function (e) {
            e.target.select();
        };
        _this.handleTitleBlur = function (e) {
            var dashboardTitle = e.target.value.trim();
            _this.setState({
                dashboardTitle: dashboardTitle === "" ? _this.getDefaultDashboardTitle() : dashboardTitle,
            });
        };
        _this.handleTitleChange = function (value) {
            _this.setState({
                dashboardTitle: value,
            });
        };
        _this.onSubmit = function () {
            var title = _this.state.dashboardTitle.trim();
            if (_this.canCreateDashboard() && title !== "") {
                _this.props.onSubmit(title, true, true);
            }
        };
        _this.getNoteText = function () {
            var _a = _this.props, isKpiWidgetEnabled = _a.isKpiWidgetEnabled, isScheduleEmailsEnabled = _a.isScheduleEmailsEnabled, intl = _a.intl;
            var messageId = first(compact([
                isKpiWidgetEnabled && isScheduleEmailsEnabled && "dialogs.save.as.new.alertsAndEmailsMessage",
                isKpiWidgetEnabled && !isScheduleEmailsEnabled && "dialogs.save.as.new.alertsMessage",
                !isKpiWidgetEnabled && isScheduleEmailsEnabled && "dialogs.save.as.new.emailsMessage",
            ]));
            return messageId ? intl.formatMessage({ id: messageId }) : "";
        };
        var defaultDashboardTitle = _this.getDefaultDashboardTitle();
        _this.state = {
            dashboardTitle: defaultDashboardTitle,
        };
        return _this;
    }
    SaveAsNewDashboardDialog.prototype.getDefaultDashboardTitle = function () {
        return this.props.intl.formatMessage({ id: "dialogs.save.as.new.default.title" }, {
            title: this.props.dashboardTitle,
        });
    };
    SaveAsNewDashboardDialog.prototype.canCreateDashboard = function () {
        var _a = this.props, isDashboardLoaded = _a.isDashboardLoaded, isDashboardSaving = _a.isDashboardSaving;
        return isDashboardLoaded && !isDashboardSaving;
    };
    SaveAsNewDashboardDialog.prototype.render = function () {
        var _a = this.props, formatMessage = _a.intl.formatMessage, _b = _a.onCancel, onCancel = _b === void 0 ? noop : _b, isDashboardSaving = _a.isDashboardSaving;
        var dashboardTitle = this.state.dashboardTitle;
        var noteText = this.getNoteText();
        return (React.createElement(ConfirmDialog, { onCancel: onCancel, onSubmit: this.onSubmit, isPositive: true, className: "s-dialog save-as-new-dialog", headline: formatMessage({ id: "dialogs.save.as.new.title" }), cancelButtonText: formatMessage({ id: "cancel" }), submitButtonText: formatMessage({ id: "create.dashboard" }), isSubmitDisabled: isDashboardSaving || dashboardTitle.trim() === "" },
            React.createElement(Typography, { tagName: "p", className: "dashboard-note" }, formatMessage({ id: "dialogs.save.as.new.desc" })),
            React.createElement("div", { className: "dashboard-title" },
                React.createElement(Input, { autofocus: true, maxlength: DASHBOARD_TITLE_MAX_LENGTH, onFocus: this.handleTitleFocus, onBlur: this.handleTitleBlur, value: dashboardTitle, placeholder: this.getDefaultDashboardTitle(), onChange: this.handleTitleChange })),
            noteText && React.createElement(Message, { type: "progress" }, noteText)));
    };
    return SaveAsNewDashboardDialog;
}(React.PureComponent));
export { SaveAsNewDashboardDialog };
export var SaveAsDialogRendererIntl = injectIntl(SaveAsNewDashboardDialog);
export var SaveAsDialogRenderer = function (props) { return (React.createElement(IntlWrapper, { locale: props.locale },
    React.createElement(SaveAsDialogRendererIntl, __assign({}, props)))); };
//# sourceMappingURL=SaveAsDialogRenderer.js.map
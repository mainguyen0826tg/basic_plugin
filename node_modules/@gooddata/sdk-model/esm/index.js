// (C) 2019-2021 GoodData Corporation
/**
 * This package provides domain models for GoodData.UI.
 *
 * @remarks
 * These domain models are backend-agnostic. This makes them reusable across different Analytical Backend implementations.
 * The package includes TypeScript type definitions, factory functions, functions to get or set certain
 * properties of the objects in an immutable way, and more.
 * These are used in both the `@gooddata/sdk-backend-*` and `@gooddata/sdk-ui*` packages.
 *
 * @packageDocumentation
 */
export { DateGranularity } from "./base/dateGranularities";
export { isAttribute, attributeLocalId, anyAttribute, idMatchAttribute, attributesFind, attributeUri, attributeIdentifier, attributeAlias, attributeDisplayFormRef, } from "./execution/attribute";
export { newAttribute, modifyAttribute, AttributeBuilder, } from "./execution/attribute/factory";
export { isUriRef, isIdentifierRef, objRefToString, isLocalIdRef, areObjRefsEqual, isObjRef, serializeObjRef, deserializeObjRef, } from "./objRef";
export { isDimension, dimensionTotals, newTwoDimensional, newDimension, MeasureGroupIdentifier, dimensionSetTotals, dimensionsFindItem, } from "./execution/base/dimension";
export { idRef, uriRef, localIdRef } from "./objRef/factory";
export { isTotal, newTotal, totalIsNative } from "./execution/base/totals";
export { isMeasureLocator, isAttributeLocator, isMeasureSort, isAttributeSort, isAttributeAreaSort, newMeasureSort, newAttributeSort, newAttributeAreaSort, newAttributeLocator, sortEntityIds, sortDirection, sortMeasureLocators, attributeLocatorElement, attributeLocatorIdentifier, measureLocatorIdentifier, } from "./execution/base/sort";
export { isRankingFilter, isAbsoluteDateFilter, isRelativeDateFilter, isAllTimeDateFilter, attributeElementsIsEmpty, attributeElementsCount, isPositiveAttributeFilter, isNegativeAttributeFilter, isDateFilter, isMeasureValueFilter, isAttributeFilter, isAttributeElementsByRef, isAttributeElementsByValue, isComparisonCondition, isComparisonConditionOperator, isFilter, isRangeCondition, isRangeConditionOperator, filterIsEmpty, filterAttributeElements, filterMeasureRef, filterObjRef, absoluteDateFilterValues, relativeDateFilterValues, measureValueFilterCondition, measureValueFilterMeasure, measureValueFilterOperator, } from "./execution/filter";
export { newAbsoluteDateFilter, newNegativeAttributeFilter, newPositiveAttributeFilter, newRelativeDateFilter, newAllTimeFilter, newMeasureValueFilter, newRankingFilter, } from "./execution/filter/factory";
export { mergeFilters } from "./execution/filter/filterMerge";
export { isMeasure, isSimpleMeasure, isAdhocMeasure, isPoPMeasure, isPreviousPeriodMeasure, isArithmeticMeasure, isMeasureDefinition, isPoPMeasureDefinition, isPreviousPeriodMeasureDefinition, isArithmeticMeasureDefinition, measureLocalId, anyMeasure, idMatchMeasure, measureDoesComputeRatio, measureItem, measureUri, measureIdentifier, measureMasterIdentifier, measureArithmeticOperands, measureAlias, measureTitle, measureArithmeticOperator, measureFormat, isMeasureFormatInPercent, measureAggregation, measureFilters, measurePopAttribute, measurePreviousPeriodDateDataSets, } from "./execution/measure";
export { ArithmeticMeasureBuilder, MeasureBuilder, PoPMeasureBuilder, PreviousPeriodMeasureBuilder, MeasureBuilderBase, newMeasure, modifyMeasure, modifySimpleMeasure, modifyPopMeasure, modifyPreviousPeriodMeasure, newArithmeticMeasure, newPopMeasure, newPreviousPeriodMeasure, } from "./execution/measure/factory";
export { isBucket, idMatchBucket, anyBucket, newBucket, bucketIsEmpty, bucketAttributes, bucketAttribute, bucketAttributeIndex, bucketMeasure, bucketMeasureIndex, bucketMeasures, bucketTotals, bucketSetTotals, bucketItems, applyRatioRule, ComputeRatioRule, disableComputeRatio, bucketModifyItems, bucketItemReduce, } from "./execution/buckets";
export { bucketsFind, bucketsMeasures, bucketsIsEmpty, bucketsAttributes, bucketsFindMeasure, bucketsById, bucketsFindAttribute, bucketsItems, bucketsTotals, bucketsModifyItem, bucketsReduceItem, } from "./execution/buckets/bucketArray";
export { bucketItemLocalId } from "./execution/buckets/bucketItem";
export { defWithFilters, defFingerprint, defSetDimensions, defSetSorts, defTotals, defSetExecConfig, defSetPostProcessing, } from "./execution/executionDefinition";
export { newDefForItems, newDefForBuckets, newDefForInsight, defWithDimensions, defWithSorting, defWithPostProcessing, defWithDateFormat, defWithExecConfig, defaultDimensionsGenerator, emptyDef, } from "./execution/executionDefinition/factory";
export { isColorFromPalette, isRgbColor, colorPaletteItemToRgb, colorPaletteToColors, } from "./colors";
export { isInsight, insightRef, insightId, insightItems, insightMeasures, insightHasMeasures, insightAttributes, insightHasAttributes, insightHasDataDefined, insightProperties, insightBuckets, insightSorts, insightBucket, insightTags, insightTitle, insightUri, insightIsLocked, insightCreated, insightCreatedBy, insightUpdated, insightUpdatedBy, insightTotals, insightFilters, insightVisualizationUrl, insightSetFilters, insightSetBuckets, insightSetProperties, insightSetSorts, insightModifyItems, insightReduceItems, insightDisplayFormUsage, visClassUrl, visClassId, visClassUri, } from "./insight";
export { userFullName } from "./user";
export { insightCreatedComparator, insightCreatedByComparator, insightTitleComparator, insightUpdatedComparator, insightUpdatedByComparator, } from "./insight/comparators";
export { newInsightDefinition, InsightDefinitionBuilder } from "./insight/factory";
export { insightSanitize } from "./insight/sanitization";
export { factoryNotationFor } from "./execution/objectFactoryNotation";
//# sourceMappingURL=index.js.map
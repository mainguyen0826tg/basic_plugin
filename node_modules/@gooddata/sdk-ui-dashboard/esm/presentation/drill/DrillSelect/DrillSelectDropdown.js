// (C) 2020-2021 GoodData Corporation
import React, { useMemo } from "react";
import stringify from "json-stable-stringify";
import { useIntl } from "react-intl";
import invariant from "ts-invariant";
import { UnexpectedSdkError } from "@gooddata/sdk-ui";
import { isDrillToInsight, isDrillToDashboard, isDrillToLegacyDashboard, isDrillFromAttribute, } from "@gooddata/sdk-backend-spi";
import { Overlay } from "@gooddata/sdk-ui-kit";
import { isDrillDownDefinition } from "../../../types";
import { insightTitle } from "@gooddata/sdk-model";
import { isDrillToUrl } from "../types";
import { DrillSelectListBody } from "./DrillSelectListBody";
import { getDrillDownAttributeTitle, getTotalDrillToUrlCount } from "../utils/drillDownUtils";
import { DrillType } from "./types";
import { useDashboardSelector, selectListedDashboards, selectInsightsMap } from "../../../model";
import { dashboardMatch } from "../utils/dashboardPredicate";
import { selectDashboardTitle } from "../../../model";
import { DRILL_SELECT_DROPDOWN_Z_INDEX } from "../../constants";
import { getDrillOriginLocalIdentifier } from "../../../_staging/drills/drillingUtils";
export var DrillSelectDropdown = function (props) {
    var isOpen = props.isOpen, dropDownAnchorClass = props.dropDownAnchorClass, onClose = props.onClose, onSelect = props.onSelect, drillDefinitions = props.drillDefinitions, drillEvent = props.drillEvent;
    var intl = useIntl();
    var listedDashboards = useDashboardSelector(selectListedDashboards);
    var dashboardTitle = useDashboardSelector(selectDashboardTitle);
    var insights = useDashboardSelector(selectInsightsMap);
    var drillSelectItems = useMemo(function () {
        return createDrillSelectItems(drillDefinitions, drillEvent, insights, listedDashboards, dashboardTitle, intl);
    }, [drillDefinitions, drillEvent, insights, listedDashboards, dashboardTitle, intl]);
    return isOpen ? (React.createElement("div", { className: "gd-drill-modal-picker-overlay-mask" },
        React.createElement(Overlay, { closeOnOutsideClick: true, closeOnEscape: true, alignTo: "." + dropDownAnchorClass, zIndex: DRILL_SELECT_DROPDOWN_Z_INDEX, onClose: onClose },
            React.createElement(DrillSelectListBody, { items: drillSelectItems, onSelect: onSelect })))) : null;
};
var getDashboardTitle = function (dashboardRef, dashboardList) {
    var dashboard = dashboardList.find(function (dashboard) {
        return dashboardMatch(dashboard.identifier, dashboard.ref, dashboardRef);
    });
    return dashboard ? dashboard.title : null;
};
export var createDrillSelectItems = function (drillDefinitions, drillEvent, insights, dashboardList, dashboardTitle, intl) {
    var totalDrillToUrls = getTotalDrillToUrlCount(drillDefinitions);
    return drillDefinitions.map(function (drillDefinition) {
        invariant(!isDrillToLegacyDashboard(drillDefinition), "Drill to pixel perfect dashboards from insight is not supported.");
        if (isDrillDownDefinition(drillDefinition)) {
            var drillDownOrigin = getDrillOriginLocalIdentifier(drillDefinition);
            var title = getDrillDownAttributeTitle(drillDownOrigin, drillEvent);
            return {
                type: DrillType.DRILL_DOWN,
                name: title,
                drillDefinition: drillDefinition,
                id: stringify(drillDefinition),
            };
        }
        if (isDrillToInsight(drillDefinition)) {
            var targetInsight = insights.get(drillDefinition.target);
            var title = targetInsight && insightTitle(targetInsight);
            return {
                type: DrillType.DRILL_TO_INSIGHT,
                name: title,
                drillDefinition: drillDefinition,
                id: stringify(drillDefinition),
            };
        }
        if (isDrillToDashboard(drillDefinition)) {
            var title = drillDefinition.target
                ? getDashboardTitle(drillDefinition.target, dashboardList)
                : dashboardTitle;
            return {
                type: DrillType.DRILL_TO_DASHBOARD,
                name: title,
                drillDefinition: drillDefinition,
                id: stringify(drillDefinition),
            };
        }
        if (isDrillToUrl(drillDefinition)) {
            var drillToUrlOrigin = getDrillOriginLocalIdentifier(drillDefinition);
            var attributeValue = isDrillFromAttribute(drillDefinition.origin) && totalDrillToUrls > 1
                ? getDrillDownAttributeTitle(drillToUrlOrigin, drillEvent)
                : undefined;
            return {
                type: DrillType.DRILL_TO_URL,
                name: intl.formatMessage({ id: "drill_modal_picker.more.details" }),
                drillDefinition: drillDefinition,
                attributeValue: attributeValue,
                id: stringify(drillDefinition),
            };
        }
        var unhandledDefinition = drillDefinition;
        throw new UnexpectedSdkError("Unhandled drill definition: " + JSON.stringify(unhandledDefinition));
    });
};
//# sourceMappingURL=DrillSelectDropdown.js.map
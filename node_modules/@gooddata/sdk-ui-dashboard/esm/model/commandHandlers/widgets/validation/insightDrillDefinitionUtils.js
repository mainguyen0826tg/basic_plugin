import { __assign } from "tslib";
// (C) 2021 GoodData Corporation
import flatMap from "lodash/flatMap";
import { isDrillFromAttribute, isDrillFromMeasure, isDrillToAttributeUrl, isDrillToCustomUrl, isDrillToDashboard, isDrillToInsight, } from "@gooddata/sdk-backend-spi";
import { idRef, objRefToString } from "@gooddata/sdk-model";
import { typesUtils } from "@gooddata/util";
import { getAttributeIdentifiersPlaceholdersFromUrl, getDrillOriginLocalIdentifier, getLocalIdentifierOrDie, } from "../../../../_staging/drills/drillingUtils";
export function validateDrillDefinitionOrigin(drillDefinition, drillTargets) {
    var origin = drillDefinition.origin;
    if (isDrillFromMeasure(origin)) {
        var originMeasureIdentifier_1 = getDrillOriginLocalIdentifier(drillDefinition);
        var measureItems = drillTargets.measures || [];
        var measureIsValidTarget = measureItems.some(function (i) { return i.measure.measureHeaderItem.localIdentifier === originMeasureIdentifier_1; });
        if (!measureIsValidTarget) {
            throw new Error("InsightDrillDefinition origin is not valid measure drillTarget");
        }
    }
    if (isDrillFromAttribute(origin)) {
        var originAttributeIdentifier_1 = getDrillOriginLocalIdentifier(drillDefinition);
        var attributeItems = drillTargets.attributes || [];
        var attributeIsValidTarget = attributeItems.some(function (i) { return i.attribute.attributeHeader.localIdentifier === originAttributeIdentifier_1; });
        if (!attributeIsValidTarget) {
            throw new Error("InsightDrillDefinition origin is not valid attribute drillTarget");
        }
    }
    return drillDefinition;
}
export function existsDrillDefinitionInArray(drillDefinition, drillDefinitionArray) {
    if (drillDefinitionArray === void 0) { drillDefinitionArray = []; }
    var drillId = getDrillOriginLocalIdentifier(drillDefinition);
    return drillDefinitionArray.some(function (x) {
        return drillId === getDrillOriginLocalIdentifier(x);
    });
}
export function validateDrillDefinitionByLocalIdentifier(ref, drillDefinitionArray) {
    if (drillDefinitionArray === void 0) { drillDefinitionArray = []; }
    var localIdentifier = getLocalIdentifierOrDie(ref);
    var result = drillDefinitionArray.find(function (item) {
        return localIdentifier === getDrillOriginLocalIdentifier(item);
    });
    if (!result) {
        throw new Error("Cannot find drill definition specified by local identifier");
    }
    return result;
}
export function extractInsightRefs(items) {
    return items.filter(isDrillToInsight).map(function (item) { return item.target; });
}
export function extractDisplayFormIdentifiers(drillDefinitions) {
    return flatMap(drillDefinitions
        .filter(typesUtils.combineGuards(isDrillToCustomUrl, isDrillToAttributeUrl))
        .map(function (drillItem) {
        if (isDrillToCustomUrl(drillItem)) {
            var params = getAttributeIdentifiersPlaceholdersFromUrl(drillItem.target.url);
            var ids = params.map(function (param) {
                return idRef(param.identifier);
            });
            return ids;
        }
        else {
            return [drillItem.target.displayForm, drillItem.target.hyperlinkDisplayForm];
        }
    }));
}
export var hyperlinkDisplayFormType = "GDC.link";
export function validateInsightDrillDefinition(drillDefinition, validationContext) {
    if (isDrillToDashboard(drillDefinition)) {
        return validateDrillToDashboardDefinition(drillDefinition, validationContext);
    }
    if (isDrillToInsight(drillDefinition)) {
        return validateDrillToInsightDefinition(drillDefinition, validationContext);
    }
    if (isDrillToCustomUrl(drillDefinition)) {
        return validateDrillToCustomURLDefinition(drillDefinition, validationContext);
    }
    if (isDrillToAttributeUrl(drillDefinition)) {
        return validateDrillToAttributeUrlDefinition(drillDefinition, validationContext);
    }
    throw new Error("Can not validate unknown drillDefinition");
}
function validateDrillToDashboardDefinition(drillDefinition, validationContext) {
    var target = drillDefinition.target;
    if (target) {
        var result = undefined;
        var targetDashboard = validationContext.dashboardsMap.get(target);
        if (targetDashboard) {
            // normalize ref take the value from state ...
            // md object has to be identifer
            result = __assign(__assign({}, drillDefinition), { target: idRef(targetDashboard.identifier) });
        }
        if (result) {
            return result;
        }
    }
    else {
        return drillDefinition;
    }
    throw Error("Unknown target dashboard");
}
function validateDrillToInsightDefinition(drillDefinition, validationContext) {
    var target = drillDefinition.target;
    var result = undefined;
    if (target) {
        var targetInsights = validationContext.insightsMap.get(target);
        if (targetInsights) {
            // normalize ref take the value from state ...
            result = __assign(__assign({}, drillDefinition), { target: __assign({}, targetInsights.insight.ref) });
        }
    }
    if (result) {
        return result;
    }
    throw Error("Unknown target Insight");
}
export function validateDrillToCustomURLDefinition(drillDefinition, validationContext) {
    var ids = extractDisplayFormIdentifiers([drillDefinition]);
    ids.forEach(function (identifer) {
        var displayForms = validationContext.displayFormsMap.get(identifer);
        if (!displayForms) {
            throw new Error("Cannot find AttributeDisplayForm definition specified by identifier: " + objRefToString(identifer));
        }
    });
    return drillDefinition;
}
export function validateDrillToAttributeUrlDefinition(drillDefinition, validationContext) {
    var displayForms = validationContext.displayFormsMap.get(drillDefinition.target.displayForm);
    if (!displayForms) {
        throw new Error("Cannot find target displayForm: " + objRefToString(drillDefinition.target.displayForm));
    }
    var hyperlinkDisplayForm = validationContext.displayFormsMap.get(drillDefinition.target.hyperlinkDisplayForm);
    if (!hyperlinkDisplayForm) {
        throw new Error("Cannot find target hyperlinkDisplayForm: " + objRefToString(drillDefinition.target.hyperlinkDisplayForm));
    }
    if (hyperlinkDisplayForm.displayFormType !== hyperlinkDisplayFormType) {
        throw new Error("DisplayFormType of target hyperlinkDisplayForm type has to be GDC.link");
    }
    return drillDefinition;
}
//# sourceMappingURL=insightDrillDefinitionUtils.js.map
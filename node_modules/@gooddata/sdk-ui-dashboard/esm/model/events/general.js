// (C) 2021 GoodData Corporation
import { eventGuard } from "./util";
export function dashboardCommandStarted(ctx, command) {
    return {
        type: "GDC.DASH/EVT.COMMAND.STARTED",
        ctx: ctx,
        correlationId: command.correlationId,
        payload: {
            command: command,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardCommandStarted}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardCommandStarted = eventGuard("GDC.DASH/EVT.COMMAND.STARTED");
export function internalErrorOccurred(ctx, command, message, error) {
    return {
        type: "GDC.DASH/EVT.COMMAND.FAILED",
        ctx: ctx,
        correlationId: command.correlationId,
        payload: {
            reason: "INTERNAL_ERROR",
            command: command,
            message: message,
            error: error,
        },
    };
}
export function invalidArgumentsProvided(ctx, command, message) {
    return {
        type: "GDC.DASH/EVT.COMMAND.FAILED",
        ctx: ctx,
        correlationId: command.correlationId,
        payload: {
            reason: "USER_ERROR",
            command: command,
            message: message,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardCommandFailed}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardCommandFailed = eventGuard("GDC.DASH/EVT.COMMAND.FAILED");
export function commandRejected(ctx, correlationId) {
    return {
        type: "GDC.DASH/EVT.COMMAND.REJECTED",
        ctx: ctx,
        correlationId: correlationId,
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardCommandRejected}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardCommandRejected = eventGuard("GDC.DASH/EVT.COMMAND.REJECTED");
export function queryRejected(ctx, correlationId) {
    return {
        type: "GDC.DASH/EVT.QUERY.REJECTED",
        ctx: ctx,
        correlationId: correlationId,
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardQueryRejected}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardQueryRejected = eventGuard("GDC.DASH/EVT.QUERY.REJECTED");
export function internalQueryErrorOccurred(ctx, message, error, correlationId) {
    return {
        type: "GDC.DASH/EVT.QUERY.FAILED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            reason: "INTERNAL_ERROR",
            message: message,
            error: error,
        },
    };
}
export function invalidQueryArguments(ctx, message, correlationId) {
    return {
        type: "GDC.DASH/EVT.QUERY.FAILED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            reason: "USER_ERROR",
            message: message,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardCommandFailed}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardQueryFailed = eventGuard("GDC.DASH/EVT.QUERY.FAILED");
export function queryStarted(ctx, query, correlationId) {
    return {
        type: "GDC.DASH/EVT.QUERY.STARTED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            query: query,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardQueryStarted}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardQueryStarted = eventGuard("GDC.DASH/EVT.QUERY.STARTED");
export function queryCompleted(ctx, query, result, correlationId) {
    return {
        type: "GDC.DASH/EVT.QUERY.COMPLETED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            query: query,
            result: result,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardQueryCompleted}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardQueryCompleted = eventGuard("GDC.DASH/EVT.QUERY.COMPLETED");
//# sourceMappingURL=general.js.map
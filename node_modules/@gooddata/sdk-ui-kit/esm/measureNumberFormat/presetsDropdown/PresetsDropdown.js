import { __extends } from "tslib";
// (C) 2020 GoodData Corporation
import React from "react";
import { PresetsDropdownItem } from "./PresetsDropdownItem";
import { SnapPoint } from "../../typings/positioning";
import { positioningToAlignPoints } from "../../utils/positioning";
import { Overlay } from "../../Overlay";
var PresetsDropdown = /** @class */ (function (_super) {
    __extends(PresetsDropdown, _super);
    function PresetsDropdown() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PresetsDropdown.prototype.render = function () {
        var _this = this;
        var _a = this.props, presets = _a.presets, anchorEl = _a.anchorEl, onClose = _a.onClose, positioning = _a.positioning;
        return (React.createElement(Overlay, { closeOnOutsideClick: true, closeOnParentScroll: true, closeOnMouseDrag: true, alignTo: anchorEl, alignPoints: positioningToAlignPoints(positioning), onClose: onClose },
            React.createElement("div", { className: "gd-dropdown overlay" },
                React.createElement("div", { className: "gd-measure-number-format-dropdown-body s-measure-number-format-dropdown-body" },
                    presets.map(function (preset, index) { return _this.renderPresetOption(preset, index); }),
                    this.renderCustomFormatItem()))));
    };
    PresetsDropdown.prototype.renderPresetOption = function (preset, index) {
        var _a = this.props, selectedPreset = _a.selectedPreset, separators = _a.separators, onSelect = _a.onSelect;
        return (React.createElement(PresetsDropdownItem, { key: preset.localIdentifier + "_" + index, preset: preset, separators: separators, onClick: onSelect, isSelected: selectedPreset && preset.localIdentifier === selectedPreset.localIdentifier }));
    };
    PresetsDropdown.prototype.renderCustomFormatItem = function () {
        var _a = this.props, customPreset = _a.customPreset, presets = _a.presets;
        return this.renderPresetOption(customPreset, presets.length);
    };
    PresetsDropdown.defaultProps = {
        positioning: [
            { snapPoints: { parent: SnapPoint.BottomLeft, child: SnapPoint.TopLeft } },
            { snapPoints: { parent: SnapPoint.TopLeft, child: SnapPoint.BottomLeft } },
        ],
    };
    return PresetsDropdown;
}(React.PureComponent));
export { PresetsDropdown };
//# sourceMappingURL=PresetsDropdown.js.map
// (C) 2020-2021 GoodData Corporation
import { isDrillToLegacyDashboard } from "@gooddata/sdk-backend-spi";
import { isDrillIntersectionAttributeItem } from "@gooddata/sdk-ui";
import isEqual from "lodash/isEqual";
import compact from "lodash/compact";
import uniqWith from "lodash/uniqWith";
import { getDrillOriginLocalIdentifier, isDrillConfigured } from "../../../_staging/drills/drillingUtils";
import { isDrillToUrl } from "../types";
/**
 * @internal
 */
export function getDrillDownAttributeTitle(localIdentifier, drillEvent) {
    return (drillEvent.drillContext.intersection || [])
        .map(function (intersectionElement) { return intersectionElement.header; })
        .filter(isDrillIntersectionAttributeItem)
        .filter(function (intersectionAttributeItem) {
        return intersectionAttributeItem.attributeHeader.localIdentifier === localIdentifier;
    })
        .map(function (intersectionAttributeItem) { return intersectionAttributeItem.attributeHeaderItem.name; })[0];
}
/**
 * Get total number of IDrillToUrl
 * @internal
 */
export function getTotalDrillToUrlCount(drillDefinition) {
    return drillDefinition.filter(isDrillToUrl).length;
}
/**
 * Implicit drill (currently IDrillDownDefinition and implicit IDrillToAttributeUrl) has lower priority,
 * so needs to be removed when other drill config exists for the same attribute
 *
 * @internal
 */
export function filterDrillFromAttributeByPriority(drillDefinitions, configuredDrills) {
    if (configuredDrills === void 0) { configuredDrills = []; }
    // need create deep equal unique drills array because we can get same two drills that are configured and implicit e.g. IDrillToAttributeUrl
    // and is not able to configure more drills on one origin
    // configured once has higher priority
    var uniqueDrillDefinitions = uniqWith(drillDefinitions, isEqual);
    var drillOriginsWithoutImplicitDrills = compact(uniqueDrillDefinitions.map(function (drill) {
        if (!isDrillToLegacyDashboard(drill) && isDrillConfigured(drill, configuredDrills)) {
            return getDrillOriginLocalIdentifier(drill);
        }
    }));
    return uniqueDrillDefinitions.filter(function (drill) {
        if (isDrillToLegacyDashboard(drill)) {
            return true;
        }
        if (!isDrillConfigured(drill, configuredDrills)) {
            return !drillOriginsWithoutImplicitDrills.includes(getDrillOriginLocalIdentifier(drill));
        }
        return true;
    });
}
//# sourceMappingURL=drillDownUtils.js.map
// (C) 2007-2020 GoodData Corporation
import React from "react";
import moment from "moment-timezone";
import { FormattedMessage, FormattedTime, FormattedDate } from "react-intl";
/**
 * @internal
 */
export var InsightListItemDate = function (_a) {
    var config = _a.config;
    var relativeDate = config.isToday ? "gs.date.today" : "gs.date.yesterday";
    if (config.isToday || config.isYesterday) {
        return (React.createElement("span", null,
            React.createElement(FormattedMessage, { id: relativeDate }),
            "\u00A0",
            React.createElement(FormattedMessage, { id: "gs.date.at" }),
            "\u00A0",
            React.createElement(FormattedTime, { value: config.date, format: "hhmm" })));
    }
    else if (config.isCurrentYear) {
        return React.createElement(FormattedDate, { value: config.date, format: "shortWithoutYear" });
    }
    return React.createElement(FormattedDate, { value: config.date, format: "shortWithYear" });
};
export var META_DATA_TIMEZONE = "Europe/Prague";
var FORMAT_DATE = "YYYY-MM-DD";
var FORMAT_YEAR = "YYYY";
/**
 * @internal
 */
var sameFormatted = function (firstDate, secondDate, format) {
    return firstDate.format(format) === secondDate.format(format);
};
/**
 * Build date time config for InsightListItemDate component.
 *
 * @param date - string ISO date
 * @param options - optional options object
 * @returns date time config
 *
 * @internal
 */
export function getDateTimeConfig(date, options) {
    if (options === void 0) { options = {}; }
    var _a = options.dateTimezone, dateTimezone = _a === void 0 ? META_DATA_TIMEZONE : _a, _b = options.now, now = _b === void 0 ? new Date() : _b;
    var dateWithTimezone = moment.tz(date, dateTimezone);
    var dateWithTimezoneInLocal = dateWithTimezone.clone().local();
    var NOW = moment(now);
    var TODAY = moment(now);
    var YESTERDAY = moment(now).subtract(1, "days");
    var isToday = sameFormatted(dateWithTimezoneInLocal, TODAY, FORMAT_DATE);
    var isYesterday = sameFormatted(dateWithTimezoneInLocal, YESTERDAY, FORMAT_DATE);
    var isCurrentYear = sameFormatted(dateWithTimezoneInLocal, NOW, FORMAT_YEAR);
    return {
        date: dateWithTimezone.toDate(),
        isToday: isToday,
        isYesterday: isYesterday,
        isCurrentYear: isCurrentYear,
    };
}
//# sourceMappingURL=InsightListItemDate.js.map
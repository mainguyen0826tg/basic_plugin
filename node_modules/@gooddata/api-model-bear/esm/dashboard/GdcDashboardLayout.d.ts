import { GdcVisualizationObject } from "../visualizationObject/GdcVisualizationObject";
/**
 * @public
 */
export declare namespace GdcDashboardLayout {
    type Layout = IFluidLayout;
    type Widget = IPersistedWidget;
    type LayoutContent = Widget | Layout;
    interface IPersistedWidget {
        widget: {
            qualifier: GdcVisualizationObject.ObjQualifier;
        };
    }
    interface IFluidLayout {
        fluidLayout: {
            rows: IFluidLayoutRow[];
            size?: IFluidLayoutSize;
            style?: string;
        };
    }
    interface IFluidLayoutRow {
        columns: IFluidLayoutColumn[];
        style?: string;
        header?: SectionHeader;
    }
    interface IFluidLayoutColumn {
        content?: LayoutContent;
        size: IFluidLayoutColSize;
        style?: string;
    }
    interface IFluidLayoutColSize {
        xl: IFluidLayoutSize;
        xs?: IFluidLayoutSize;
        sm?: IFluidLayoutSize;
        md?: IFluidLayoutSize;
        lg?: IFluidLayoutSize;
    }
    interface IFluidLayoutSize {
        width: number;
        height?: number;
        heightAsRatio?: number;
    }
    type SectionHeader = ISectionHeader | ISectionDescription;
    interface ISectionHeader {
        title: string;
        description?: string;
    }
    interface ISectionDescription {
        description: string;
    }
    function isFluidLayout(obj: unknown): obj is IFluidLayout;
    function isLayoutWidget(obj: unknown): obj is IPersistedWidget;
}
//# sourceMappingURL=GdcDashboardLayout.d.ts.map
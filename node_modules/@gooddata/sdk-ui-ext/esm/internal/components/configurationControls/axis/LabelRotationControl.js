import { __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { injectIntl } from "react-intl";
import DropdownControl from "../DropdownControl";
import { getTranslatedDropdownItems } from "../../../utils/translations";
import { rotationDropdownItems } from "../../../constants/dropdowns";
var LabelRotationControl = /** @class */ (function (_super) {
    __extends(LabelRotationControl, _super);
    function LabelRotationControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LabelRotationControl.prototype.render = function () {
        var _a = this.getControlProperties(), axisVisible = _a.axisVisible, axisLabelsEnabled = _a.axisLabelsEnabled, axisRotation = _a.axisRotation;
        var isDisabled = this.props.disabled || !axisVisible || !axisLabelsEnabled;
        return (React.createElement(DropdownControl, { value: axisRotation, valuePath: this.props.axis + ".rotation", labelText: "properties.axis.rotation", disabled: isDisabled, showDisabledMessage: !this.props.configPanelDisabled && isDisabled, properties: this.props.properties, pushData: this.props.pushData, items: getTranslatedDropdownItems(rotationDropdownItems, this.props.intl) }));
    };
    LabelRotationControl.prototype.getControlProperties = function () {
        var _a, _b, _c, _d, _e;
        var axisProperties = (_b = (_a = this.props.properties) === null || _a === void 0 ? void 0 : _a.controls) === null || _b === void 0 ? void 0 : _b[this.props.axis];
        var axisVisible = (_c = axisProperties === null || axisProperties === void 0 ? void 0 : axisProperties.visible) !== null && _c !== void 0 ? _c : true;
        var axisLabelsEnabled = (_d = axisProperties === null || axisProperties === void 0 ? void 0 : axisProperties.labelsEnabled) !== null && _d !== void 0 ? _d : true;
        var axisRotation = (_e = axisProperties === null || axisProperties === void 0 ? void 0 : axisProperties.rotation) !== null && _e !== void 0 ? _e : "auto";
        return {
            axisVisible: axisVisible,
            axisLabelsEnabled: axisLabelsEnabled,
            axisRotation: axisRotation,
        };
    };
    return LabelRotationControl;
}(React.PureComponent));
export default injectIntl(LabelRotationControl);
//# sourceMappingURL=LabelRotationControl.js.map
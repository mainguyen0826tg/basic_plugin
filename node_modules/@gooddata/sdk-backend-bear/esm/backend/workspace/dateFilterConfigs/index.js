import { __awaiter, __generator } from "tslib";
import invariant from "ts-invariant";
import { convertDateFilterConfig } from "../../../convertors/fromBackend/DateFilterConfigConverter";
import { enhanceWithAll } from "@gooddata/sdk-backend-base";
var BearWorkspaceDateFilterConfigsQuery = /** @class */ (function () {
    function BearWorkspaceDateFilterConfigsQuery(authCall, workspace) {
        this.authCall = authCall;
        this.workspace = workspace;
    }
    BearWorkspaceDateFilterConfigsQuery.prototype.withLimit = function (limit) {
        invariant(limit > 0, "limit must be a positive number, got: " + limit);
        this.limit = limit;
        return this;
    };
    BearWorkspaceDateFilterConfigsQuery.prototype.withOffset = function (offset) {
        this.offset = offset;
        return this;
    };
    BearWorkspaceDateFilterConfigsQuery.prototype.query = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.queryWorker(this.offset, this.limit)];
            });
        });
    };
    BearWorkspaceDateFilterConfigsQuery.prototype.queryWorker = function (offset, limit) {
        if (offset === void 0) { offset = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var data, items, _a, totalCount, serverOffset, count, hasNextPage, goTo, emptyResult;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.authCall(function (sdk) {
                            return sdk.md.getObjectsByQueryWithPaging(_this.workspace, {
                                offset: offset,
                                limit: limit,
                                category: "dateFilterConfig",
                                getTotalCount: true,
                            });
                        })];
                    case 1:
                        data = _b.sent();
                        items = data.items, _a = data.paging, totalCount = _a.totalCount, serverOffset = _a.offset, count = _a.count;
                        hasNextPage = serverOffset + count < totalCount;
                        goTo = function (index) {
                            return index * count < totalCount
                                ? _this.queryWorker(index * count, limit)
                                : Promise.resolve(emptyResult);
                        };
                        emptyResult = enhanceWithAll({
                            items: [],
                            limit: count,
                            offset: totalCount,
                            totalCount: totalCount,
                            next: function () { return Promise.resolve(emptyResult); },
                            goTo: goTo,
                        });
                        return [2 /*return*/, enhanceWithAll({
                                items: items.map(convertDateFilterConfig),
                                limit: count,
                                offset: serverOffset,
                                totalCount: totalCount,
                                next: hasNextPage
                                    ? function () { return _this.queryWorker(offset + count, limit); }
                                    : function () { return Promise.resolve(emptyResult); },
                                goTo: goTo,
                            })];
                }
            });
        });
    };
    return BearWorkspaceDateFilterConfigsQuery;
}());
export { BearWorkspaceDateFilterConfigsQuery };
//# sourceMappingURL=index.js.map
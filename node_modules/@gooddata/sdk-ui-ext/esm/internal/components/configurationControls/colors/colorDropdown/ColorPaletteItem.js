import { __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import cx from "classnames";
var ITEM_MARGIN = 5;
var ColorPaletteItem = /** @class */ (function (_super) {
    __extends(ColorPaletteItem, _super);
    function ColorPaletteItem(props) {
        var _this = _super.call(this, props) || this;
        _this.onColorSelected = function () {
            var selectedItem = {
                type: "guid",
                value: _this.props.paletteItem.guid,
            };
            _this.props.onColorSelected(selectedItem);
        };
        _this.itemRef = React.createRef();
        return _this;
    }
    ColorPaletteItem.prototype.render = function () {
        return (React.createElement("div", { ref: this.itemRef, onClick: this.onColorSelected, style: {
                backgroundColor: this.getRgbStringFromPaletteItem(),
            }, className: this.getClassNames() }));
    };
    ColorPaletteItem.prototype.componentDidMount = function () {
        this.scrollSelectedItemIntoParent();
    };
    ColorPaletteItem.prototype.scrollSelectedItemIntoParent = function () {
        if (this.props.selected &&
            this.itemRef.current &&
            this.itemRef.current.parentNode &&
            this.isItemVisible()) {
            var target = this.itemRef.current;
            target.parentNode.scrollTop = target.offsetTop - target.parentNode.offsetTop - ITEM_MARGIN;
        }
    };
    ColorPaletteItem.prototype.isItemVisible = function () {
        var target = this.itemRef.current;
        var offset = target.offsetTop - target.parentNode.offsetTop;
        var itemHeight = target.clientHeight;
        var parentHeight = target.parentNode.clientHeight;
        return parentHeight < offset + itemHeight;
    };
    ColorPaletteItem.prototype.getClassNames = function () {
        return cx("gd-color-list-item", "s-color-list-item-" + this.props.paletteItem.guid, {
            "gd-color-list-item-active": this.props.selected,
        });
    };
    ColorPaletteItem.prototype.getRgbStringFromPaletteItem = function () {
        var _a = this.props.paletteItem.fill, r = _a.r, g = _a.g, b = _a.b;
        return "rgb(" + r + "," + g + "," + b + ")";
    };
    return ColorPaletteItem;
}(React.PureComponent));
export default ColorPaletteItem;
//# sourceMappingURL=ColorPaletteItem.js.map
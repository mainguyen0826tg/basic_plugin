import { __assign } from "tslib";
// (C) 2007-2021 GoodData Corporation
import flatten from "lodash/flatten";
import pick from "lodash/pick";
import map from "lodash/map";
import zip from "lodash/zip";
import unzip from "lodash/unzip";
import initial from "lodash/initial";
import tail from "lodash/tail";
import isEmpty from "lodash/isEmpty";
import maxBy from "lodash/maxBy";
import minBy from "lodash/minBy";
import min from "lodash/min";
import max from "lodash/max";
import isNil from "lodash/isNil";
import compact from "lodash/compact";
import { VisualizationTypes } from "@gooddata/sdk-ui";
import { isInvertedChartType } from "../_util/common";
import { BOTTOM, MIDDLE, TOP } from "../../constants/alignments";
// https://silentmatt.com/rectangle-intersection/
export var rectanglesAreOverlapping = function (r1, r2, padding) {
    if (padding === void 0) { padding = 0; }
    return r1.left - padding < r2.right + padding &&
        r1.right + padding > r2.left - padding &&
        r1.top - padding < r2.bottom + padding &&
        r1.bottom + padding > r2.top - padding;
};
export var isIntersecting = function (r1, r2) {
    return r1.x < r2.x + r2.width && r1.x + r1.width > r2.x && r1.y < r2.y + r2.height && r1.y + r1.height > r2.y;
};
export var toNeighbors = function (array) { return zip(initial(array), tail(array)); };
export var getVisibleSeries = function (chart) {
    return chart.series && chart.series.filter(function (s) { return s.visible; });
};
export var getHiddenSeries = function (chart) {
    return chart.series && chart.series.filter(function (s) { return !s.visible; });
};
export var getDataPoints = function (series) {
    return compact(flatten(unzip(map(series, function (s) { return s.points; }))));
};
export var getDataPointsOfVisibleSeries = function (chart) {
    return getDataPoints(getVisibleSeries(chart));
};
export var getChartType = function (chart) { var _a; return (_a = chart.options.chart) === null || _a === void 0 ? void 0 : _a.type; };
export var isStacked = function (chart) {
    var _a, _b, _c, _d, _e, _f;
    var chartType = getChartType(chart);
    if (((_c = (_b = (_a = chart.userOptions) === null || _a === void 0 ? void 0 : _a.plotOptions) === null || _b === void 0 ? void 0 : _b[chartType]) === null || _c === void 0 ? void 0 : _c.stacking) &&
        chart.axes.some(function (axis) { var _a; return !isEmpty((_a = axis === null || axis === void 0 ? void 0 : axis.stacking) === null || _a === void 0 ? void 0 : _a.stacks); })) {
        return true;
    }
    if (((_f = (_e = (_d = chart.userOptions) === null || _d === void 0 ? void 0 : _d.plotOptions) === null || _e === void 0 ? void 0 : _e.series) === null || _f === void 0 ? void 0 : _f.stacking) &&
        chart.axes.some(function (axis) { var _a; return !isEmpty((_a = axis === null || axis === void 0 ? void 0 : axis.stacking) === null || _a === void 0 ? void 0 : _a.stacks); })) {
        return true;
    }
    return false;
};
export function getChartProperties(config, type) {
    var isInvertedType = isInvertedChartType(type);
    var chartProps = {
        xAxisProps: isInvertedType ? __assign({}, config.yaxis) : __assign({}, config.xaxis),
        yAxisProps: isInvertedType ? __assign({}, config.xaxis) : __assign({}, config.yaxis),
    };
    var secondaryXAxisProps = isInvertedType
        ? __assign({}, config.secondary_yaxis) : __assign({}, config.secondary_xaxis);
    var secondaryYAxisProps = isInvertedType
        ? __assign({}, config.secondary_xaxis) : __assign({}, config.secondary_yaxis);
    if (!isEmpty(secondaryXAxisProps)) {
        chartProps.secondary_xAxisProps = secondaryXAxisProps;
    }
    if (!isEmpty(secondaryYAxisProps)) {
        chartProps.secondary_yAxisProps = secondaryYAxisProps;
    }
    return chartProps;
}
export var getPointPositions = function (
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
point) {
    var dataLabel = point.dataLabel, graphic = point.graphic;
    var labelRect = dataLabel.element.getBoundingClientRect();
    var shapeRect = graphic.element.getBoundingClientRect();
    return {
        shape: shapeRect,
        label: labelRect,
        labelPadding: dataLabel.padding,
        show: function () { return dataLabel.show(); },
        hide: function () { return dataLabel.hide(); },
    };
};
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export function getShapeAttributes(point) {
    var series = point.series, shapeArgs = point.shapeArgs;
    var _a = series.chart, plotSizeX = _a.plotSizeX, plotSizeY = _a.plotSizeY, options = _a.options;
    if (options.chart.type === VisualizationTypes.BAR) {
        return {
            x: Math.floor(plotSizeY - (shapeArgs.y - series.group.translateX) - shapeArgs.height),
            y: Math.ceil(plotSizeX + series.group.translateY - shapeArgs.x - shapeArgs.width),
            width: shapeArgs.height,
            height: shapeArgs.width,
        };
    }
    else if (options.chart.type === VisualizationTypes.COLUMN) {
        return {
            x: shapeArgs.x + series.group.translateX,
            y: shapeArgs.y + series.group.translateY,
            width: shapeArgs.width,
            height: shapeArgs.height,
        };
    }
    return {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
    };
}
function getExtremeOnAxis(min, max) {
    var axisMin = min >= 0 ? 0 : min;
    var axisMax = max < 0 ? 0 : max;
    return { axisMin: axisMin, axisMax: axisMax };
}
export function shouldFollowPointerForDualAxes(chartOptions) {
    var _a, _b, _c, _d, _e;
    var yAxes = (_a = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.yAxes) !== null && _a !== void 0 ? _a : [];
    if (yAxes.length <= 1) {
        return false;
    }
    var hasMinMaxValue = [
        (_b = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.yAxisProps) === null || _b === void 0 ? void 0 : _b.min,
        (_c = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.yAxisProps) === null || _c === void 0 ? void 0 : _c.max,
        (_d = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.secondary_yAxisProps) === null || _d === void 0 ? void 0 : _d.min,
        (_e = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.secondary_yAxisProps) === null || _e === void 0 ? void 0 : _e.max,
    ].some(function (item) { return !isEmpty(item); });
    return yAxes.length > 1 && hasMinMaxValue;
}
function isMinMaxLimitData(chartOptions, key) {
    var _a, _b, _c, _d;
    var yMin = parseFloat((_b = (_a = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions[key]) === null || _a === void 0 ? void 0 : _a.min) !== null && _b !== void 0 ? _b : "");
    var yMax = parseFloat((_d = (_c = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions[key]) === null || _c === void 0 ? void 0 : _c.max) !== null && _d !== void 0 ? _d : "");
    if (isNaN(yMin) && isNaN(yMax)) {
        return false;
    }
    var _e = getDataExtremeDataValues(chartOptions), minDataValue = _e.minDataValue, maxDataValue = _e.maxDataValue;
    var _f = getExtremeOnAxis(minDataValue, maxDataValue), axisMin = _f.axisMin, axisMax = _f.axisMax;
    return (!isNaN(yMax) && axisMax > yMax) || (!isNaN(yMin) && axisMin < yMin);
}
export function shouldFollowPointer(chartOptions) {
    if (shouldFollowPointerForDualAxes(chartOptions)) {
        return true;
    }
    return (isMinMaxLimitData(chartOptions, "yAxisProps") ||
        isMinMaxLimitData(chartOptions, "secondary_yAxisProps"));
}
function isSerieVisible(serie) {
    return serie.visible === undefined || serie.visible;
}
function getNonStackedMaxValue(series) {
    return series.reduce(function (maxValue, serie) {
        if (isSerieVisible(serie)) {
            var maxSerieValue = getSerieMaxDataValue(serie.data);
            return maxValue > maxSerieValue ? maxValue : maxSerieValue;
        }
        return maxValue;
    }, Number.MIN_SAFE_INTEGER);
}
function getNonStackedMinValue(series) {
    return series.reduce(function (minValue, serie) {
        if (isSerieVisible(serie)) {
            var minSerieValue = getSerieMinDataValue(serie.data);
            return minValue < minSerieValue ? minValue : minSerieValue;
        }
        return minValue;
    }, Number.MAX_SAFE_INTEGER);
}
function getDataExtremeDataValues(chartOptions) {
    var _a;
    var series = (_a = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.data) === null || _a === void 0 ? void 0 : _a.series;
    var maxDataValue = chartOptions.hasStackByAttribute
        ? getStackedMaxValue(series)
        : getNonStackedMaxValue(series);
    var minDataValue = chartOptions.hasStackByAttribute
        ? getStackedMinValue(series)
        : getNonStackedMinValue(series);
    return { minDataValue: minDataValue, maxDataValue: maxDataValue };
}
function getSerieMaxDataValue(serieData) {
    var max = maxBy(serieData, function (item) { return (item && item.y ? item.y : null); });
    return max ? max.y : Number.MIN_SAFE_INTEGER;
}
function getSerieMinDataValue(serieData) {
    var min = minBy(serieData, function (item) { return (item && item.y ? item.y : null); });
    return min ? min.y : Number.MAX_SAFE_INTEGER;
}
export function getStackedMaxValue(series) {
    var maximumPerColumn = getColumnExtremeValue(series, getMaxFromPositiveNegativeStacks);
    var maxValue = max(maximumPerColumn);
    return !isNil(maxValue) ? maxValue : Number.MIN_SAFE_INTEGER;
}
export function getStackedMinValue(series) {
    var minimumPerColumn = getColumnExtremeValue(series, getMinFromPositiveNegativeStacks);
    var minValue = min(minimumPerColumn);
    return !isNil(minValue) ? minValue : Number.MAX_SAFE_INTEGER;
}
function getColumnExtremeValue(series, extremeColumnGetter) {
    var seriesDataPerColumn = zip.apply(void 0, series.filter(isSerieVisible).map(function (serie) { return serie.data; }));
    var seriesDataYValue = seriesDataPerColumn.map(function (data) { return data.map(function (x) { return x.y; }); });
    return seriesDataYValue.map(extremeColumnGetter);
}
function getMaxFromPositiveNegativeStacks(data) {
    return data.reduce(function (acc, current) {
        if (isNil(current)) {
            return acc;
        }
        if (current < 0 || acc < 0) {
            return Math.max(acc, current);
        }
        return acc + current;
    }, Number.MIN_SAFE_INTEGER);
}
function getMinFromPositiveNegativeStacks(data) {
    return data.reduce(function (acc, current) {
        if (isNil(current)) {
            return acc;
        }
        if (current > 0 || acc > 0) {
            return Math.min(acc, current);
        }
        return acc + current;
    }, Number.MAX_SAFE_INTEGER);
}
export function shouldStartOnTick(chartOptions, axisPropsKey) {
    var _a, _b, _c, _d, _e;
    if (axisPropsKey === void 0) { axisPropsKey = "yAxisProps"; }
    var min = parseFloat((_b = (_a = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions[axisPropsKey]) === null || _a === void 0 ? void 0 : _a.min) !== null && _b !== void 0 ? _b : "");
    var max = parseFloat((_d = (_c = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions[axisPropsKey]) === null || _c === void 0 ? void 0 : _c.max) !== null && _d !== void 0 ? _d : "");
    if (isNaN(min) && isNaN(max)) {
        return true;
    }
    if (!isNaN(min) && !isNaN(max)) {
        return min > max;
    }
    var series = (_e = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.data) === null || _e === void 0 ? void 0 : _e.series;
    var minDataValue = chartOptions.hasStackByAttribute
        ? getStackedMinValue(series)
        : getNonStackedMinValue(series);
    var hasIncorrectMax = !isNaN(max) && max <= minDataValue;
    if (hasIncorrectMax) {
        return true;
    }
    return false;
}
export function shouldEndOnTick(chartOptions, axisPropsKey) {
    var _a, _b, _c, _d, _e;
    if (axisPropsKey === void 0) { axisPropsKey = "yAxisProps"; }
    var min = parseFloat((_b = (_a = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions[axisPropsKey]) === null || _a === void 0 ? void 0 : _a.min) !== null && _b !== void 0 ? _b : "");
    var max = parseFloat((_d = (_c = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions[axisPropsKey]) === null || _c === void 0 ? void 0 : _c.max) !== null && _d !== void 0 ? _d : "");
    if (isNaN(min) && isNaN(max)) {
        return true;
    }
    if (!isNaN(min) && !isNaN(max)) {
        return min > max;
    }
    var series = (_e = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.data) === null || _e === void 0 ? void 0 : _e.series;
    var maxDataValue = chartOptions.hasStackByAttribute
        ? getStackedMaxValue(series)
        : getNonStackedMaxValue(series);
    var hasIncorrectMin = !isNaN(min) && min >= maxDataValue;
    if (hasIncorrectMin) {
        return true;
    }
    return false;
}
export function shouldXAxisStartOnTickOnBubbleScatter(chartOptions) {
    var _a, _b;
    var min = parseFloat((_b = (_a = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.xAxisProps) === null || _a === void 0 ? void 0 : _a.min) !== null && _b !== void 0 ? _b : "");
    return isNaN(min) ? true : false;
}
export function shouldYAxisStartOnTickOnBubbleScatter(chartOptions) {
    var _a, _b, _c;
    var min = parseFloat((_b = (_a = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.yAxisProps) === null || _a === void 0 ? void 0 : _a.min) !== null && _b !== void 0 ? _b : "");
    var series = (_c = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.data) === null || _c === void 0 ? void 0 : _c.series;
    var maxDataValue = getNonStackedMaxValue(series);
    return isNaN(min) || min > maxDataValue ? true : false;
}
export function getAxisRangeForAxes(chart) {
    var yAxis = chart.yAxis;
    // note: accessing 'opposite' prop which is not part of the public API; min & max is
    return yAxis
        .map(function (axis) { return pick(axis, ["opposite", "min", "max"]); })
        .map(function (_a) {
        var opposite = _a.opposite, min = _a.min, max = _a.max;
        return ({ axis: opposite ? "second" : "first", min: min, max: max });
    })
        .reduce(function (result, _a) {
        var axis = _a.axis, min = _a.min, max = _a.max;
        result[axis] = {
            minAxisValue: min,
            maxAxisValue: max,
        };
        return result;
    }, {});
}
export function pointInRange(pointValue, axisRange) {
    return axisRange.minAxisValue <= pointValue && pointValue <= axisRange.maxAxisValue;
}
export function alignChart(chart, verticalAlign) {
    if (verticalAlign === void 0) { verticalAlign = "middle"; }
    var container = chart.container;
    if (!container) {
        return;
    }
    var _a = container.getBoundingClientRect(), chartWidth = _a.width, chartHeight = _a.height;
    var margin = chartHeight - chartWidth;
    var isVerticalRectContainer = margin > 0;
    var isAlignedToTop = verticalAlign === TOP;
    var isAlignedToBottom = verticalAlign === BOTTOM;
    var type = getChartType(chart);
    var className = "s-highcharts-" + type + "-aligned-to-" + verticalAlign;
    var chartOptions = {};
    if (isVerticalRectContainer && verticalAlign !== MIDDLE) {
        chartOptions = {
            spacingTop: isAlignedToTop ? 0 : undefined,
            spacingBottom: isAlignedToBottom ? 0 : undefined,
            marginTop: isAlignedToBottom ? margin : undefined,
            marginBottom: isAlignedToTop ? margin : undefined,
            className: className,
        };
    }
    else {
        chartOptions = {
            spacingTop: undefined,
            spacingBottom: undefined,
            marginTop: undefined,
            marginBottom: undefined,
            className: className,
        };
    }
    chart.update({
        chart: chartOptions,
    }, false, false, false);
}
//# sourceMappingURL=helpers.js.map
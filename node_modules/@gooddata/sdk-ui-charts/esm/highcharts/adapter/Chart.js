import { __assign, __extends } from "tslib";
// (C) 2007-2018 GoodData Corporation
import isEqual from "lodash/isEqual";
import noop from "lodash/noop";
import React from "react";
import { initChartPlugins } from "./chartPlugins";
import Highcharts from "../lib";
import HighchartsMore from "highcharts/highcharts-more";
import drillmodule from "highcharts/modules/drilldown";
import treemapModule from "highcharts/modules/treemap";
import bulletModule from "highcharts/modules/bullet";
import funnelModule from "highcharts/modules/funnel";
import heatmap from "highcharts/modules/heatmap";
import patternFill from "highcharts/modules/pattern-fill";
drillmodule(Highcharts);
treemapModule(Highcharts);
bulletModule(Highcharts);
funnelModule(Highcharts);
heatmap(Highcharts);
HighchartsMore(Highcharts);
patternFill(Highcharts);
initChartPlugins(Highcharts);
/**
 * @internal
 */
var Chart = /** @class */ (function (_super) {
    __extends(Chart, _super);
    function Chart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.setChartRef = function (ref) {
            _this.chartRef = ref;
        };
        return _this;
    }
    Chart.prototype.componentDidMount = function () {
        this.createChart(this.props.config);
    };
    Chart.prototype.shouldComponentUpdate = function (nextProps) {
        if (isEqual(this.props.config, nextProps.config)) {
            return false;
        }
        return true;
    };
    Chart.prototype.componentDidUpdate = function () {
        this.createChart(this.props.config);
    };
    Chart.prototype.componentWillUnmount = function () {
        this.chart.destroy();
    };
    Chart.prototype.getHighchartRef = function () {
        return this.chartRef;
    };
    Chart.prototype.getChart = function () {
        if (!this.chart) {
            throw new Error("getChart() should not be called before the component is mounted");
        }
        return this.chart;
    };
    Chart.prototype.createChart = function (config) {
        var chartConfig = config.chart;
        this.chart = new Highcharts.Chart(__assign(__assign({}, config), { chart: __assign(__assign({}, chartConfig), { renderTo: this.chartRef }) }), this.props.callback);
    };
    Chart.prototype.render = function () {
        return React.createElement("div", __assign({}, this.props.domProps, { ref: this.setChartRef }));
    };
    Chart.defaultProps = {
        callback: noop,
        domProps: {},
    };
    return Chart;
}(React.Component));
export { Chart };
//# sourceMappingURL=Chart.js.map
// (C) 2007-2020 GoodData Corporation
import React from "react";
import { injectIntl } from "react-intl";
import cx from "classnames";
import { HeaderWorkspacePickerButton } from "./HeaderWorkspacePickerButton";
import { HeaderWorkspacePickerItem } from "./HeaderWorkspacePickerItem";
import { Dropdown, DropdownList } from "../Dropdown";
import { NoData } from "../NoData";
var renderProjectPickerFooter = function (projectPickerFooter) {
    var comp = function (closeDropdown) {
        return projectPickerFooter ? (React.createElement("div", { className: "gd-header-project-picker-footer" },
            React.createElement("span", { onClick: closeDropdown }, projectPickerFooter))) : (false);
    };
    comp.displayName = "ProjectPickerFooter";
    return comp;
};
export var CoreHeaderWorkspacePicker = function (_a) {
    var _b;
    var intl = _a.intl, isLoading = _a.isLoading, workspaces = _a.workspaces, selectedWorkspace = _a.selectedWorkspace, totalWorkspacesCount = _a.totalWorkspacesCount, searchString = _a.searchString, showSearch = _a.showSearch, onOpen = _a.onOpen, onSelect = _a.onSelect, onSearch = _a.onSearch, onScrollEnd = _a.onScrollEnd, projectPickerFooter = _a.projectPickerFooter, className = _a.className, isRenamingProjectToWorkspaceEnabled = _a.isRenamingProjectToWorkspaceEnabled;
    var t = intl.formatMessage;
    var dropdownClassNames = cx((_b = {
            "gd-header-project-wrapper": true,
            "gd-header-measure": true
        },
        _b[className] = !!className,
        _b));
    var noMatchingWorkspacesId = isRenamingProjectToWorkspaceEnabled
        ? "gs.header.projectPicker.noMatchingWorkspaces"
        : "gs.header.projectPicker.noMatchingProjects";
    return (React.createElement(Dropdown, { className: dropdownClassNames, closeOnParentScroll: true, closeOnMouseDrag: true, onOpenStateChanged: function (isOpen) {
            if (isOpen && onOpen) {
                onOpen();
            }
        }, renderButton: function (_a) {
            var isOpen = _a.isOpen, toggleDropdown = _a.toggleDropdown;
            return (React.createElement(HeaderWorkspacePickerButton, { title: selectedWorkspace && selectedWorkspace.title, isOpen: isOpen, onClick: toggleDropdown }));
        }, renderBody: function (_a) {
            var closeDropdown = _a.closeDropdown, isMobile = _a.isMobile;
            return (React.createElement(DropdownList, { footer: renderProjectPickerFooter(projectPickerFooter), closeDropdown: closeDropdown, className: "project-picker-dropdown", width: 350, isMobile: isMobile, showSearch: showSearch, searchString: searchString, items: workspaces, itemsCount: totalWorkspacesCount, isLoading: isLoading, onSearch: onSearch, searchFieldSize: "normal", searchPlaceholder: t({ id: "gs.header.projectPicker.searchPlaceholder" }), renderNoData: function (_a) {
                    var hasNoMatchingData = _a.hasNoMatchingData;
                    return (React.createElement(NoData, { className: "s-noMatchingProjects", noDataLabel: t({ id: "gs.noData.noDataAvailable" }), notFoundLabel: t({ id: noMatchingWorkspacesId }), hasNoMatchingData: hasNoMatchingData }));
                }, renderItem: function (_a) {
                    var item = _a.item;
                    var title = item === null || item === void 0 ? void 0 : item.title;
                    var isDemo = item === null || item === void 0 ? void 0 : item.isDemo;
                    var isSelected = selectedWorkspace && item && selectedWorkspace.id === item.id;
                    return (React.createElement(HeaderWorkspacePickerItem, { title: title, isDemo: isDemo, isSelected: isSelected, isLoading: !item, onClick: function () {
                            if (item && onSelect) {
                                onSelect(item);
                                closeDropdown();
                            }
                        } }));
                }, onScrollEnd: onScrollEnd }));
        } }));
};
/**
 * @internal
 */
export var HeaderWorkspacePicker = injectIntl(CoreHeaderWorkspacePicker);
//# sourceMappingURL=HeaderWorkspacePicker.js.map
import { __assign } from "tslib";
// (C) 2019-2021 GoodData Corporation
import { GdcFilterContext } from "@gooddata/api-model-bear";
import { uriRef } from "@gooddata/sdk-model";
import { isDashboardDateFilter, } from "@gooddata/sdk-backend-spi";
function isNotTemporaryAllTimeDateFilter(filter) {
    if (isDashboardDateFilter(filter)) {
        return filter.dateFilter.from !== undefined || filter.dateFilter.to !== undefined;
    }
    return true;
}
// Remove the temporary "All Time" date filter from filter context when exporting the dashboard
export var sanitizeExportFilterContext = function (exportFilterContext) {
    return __assign(__assign({}, exportFilterContext), { filters: exportFilterContext.filters.filter(isNotTemporaryAllTimeDateFilter) });
};
export var convertFilterContextItem = function (filterContextItem) {
    if (GdcFilterContext.isAttributeFilter(filterContextItem)) {
        var _a = filterContextItem.attributeFilter, attributeElements = _a.attributeElements, displayForm = _a.displayForm, negativeSelection = _a.negativeSelection, localIdentifier = _a.localIdentifier, _b = _a.filterElementsBy, filterElementsBy = _b === void 0 ? [] : _b;
        var convertedFilterElementsBy = filterElementsBy.map(function (filterBy) {
            return {
                filterLocalIdentifier: filterBy.filterLocalIdentifier,
                over: {
                    attributes: filterBy.over.attributes.map(uriRef),
                },
            };
        });
        return {
            attributeFilter: {
                attributeElements: { uris: attributeElements },
                displayForm: uriRef(displayForm),
                negativeSelection: negativeSelection,
                localIdentifier: localIdentifier,
                filterElementsBy: convertedFilterElementsBy,
            },
        };
    }
    var _c = filterContextItem.dateFilter, granularity = _c.granularity, type = _c.type, attribute = _c.attribute, dataSet = _c.dataSet, from = _c.from, to = _c.to;
    var convertedFilterContextItem = {
        dateFilter: {
            granularity: granularity,
            type: type,
            from: from,
            to: to,
        },
    };
    if (attribute) {
        convertedFilterContextItem.dateFilter.attribute = uriRef(attribute);
    }
    if (dataSet) {
        convertedFilterContextItem.dateFilter.dataSet = uriRef(dataSet);
    }
    return convertedFilterContextItem;
};
export var convertFilterContext = function (filterContext) {
    var _a = filterContext.filterContext, filters = _a.content.filters, _b = _a.meta, identifier = _b.identifier, uri = _b.uri, summary = _b.summary, title = _b.title;
    return __assign(__assign({ description: summary }, (uri
        ? {
            identifier: identifier,
            uri: uri,
            ref: uriRef(uri),
        }
        : {})), { title: title, filters: filters.map(convertFilterContextItem) });
};
export var convertTempFilterContext = function (filterContext) {
    var _a = filterContext.tempFilterContext, created = _a.created, filters = _a.filters, uri = _a.uri;
    return {
        uri: uri,
        ref: uriRef(uri),
        filters: filters.map(convertFilterContextItem),
        created: created,
    };
};
//# sourceMappingURL=filterContext.js.map
import { __read, __spread } from "tslib";
// (C) 2020-2021 GoodData Corporation
import compact from "lodash/compact";
import { isDrillFromAttribute, isDrillFromMeasure, UnexpectedError, isDrillToLegacyDashboard, isMeasureDescriptor, } from "@gooddata/sdk-backend-spi";
import { isLocalIdRef, isIdentifierRef, isUriRef, areObjRefsEqual, localIdRef, } from "@gooddata/sdk-model";
import { HeaderPredicates, getMappingHeaderLocalIdentifier, } from "@gooddata/sdk-ui";
import first from "lodash/first";
import last from "lodash/last";
import isEqual from "lodash/isEqual";
function widgetDrillToDrillPredicates(drill) {
    var origin;
    if (isDrillFromMeasure(drill.origin)) {
        origin = drill.origin.measure;
    }
    else if (isDrillFromAttribute(drill.origin)) {
        origin = drill.origin.attribute;
    }
    else {
        throw new UnexpectedError("Unknown drill origin!");
    }
    // add drillable items for all three types of objRefs that the origin measure can be
    return compact([
        isLocalIdRef(origin) && HeaderPredicates.localIdentifierMatch(origin.localIdentifier),
        isIdentifierRef(origin) && HeaderPredicates.identifierMatch(origin.identifier),
        isUriRef(origin) && HeaderPredicates.uriMatch(origin.uri),
    ]);
}
function insightWidgetImplicitDrills(insightWidgetDrills) {
    return insightWidgetDrills.map(function (drill) {
        return {
            drillDefinition: drill,
            predicates: widgetDrillToDrillPredicates(drill),
        };
    });
}
function insightDrillDownImplicitDrills(possibleDrills, attributesWithDrillDown) {
    var drillsWitDrillDown = possibleDrills.filter(function (candidate) {
        return attributesWithDrillDown.some(function (attr) {
            return areObjRefsEqual(attr.attribute.ref, candidate.attribute.attributeHeader.formOf.ref);
        });
    });
    return drillsWitDrillDown.map(function (drill) {
        var matchingCatalogAttribute = attributesWithDrillDown.find(function (attr) {
            return areObjRefsEqual(attr.attribute.ref, drill.attribute.attributeHeader.formOf.ref);
        });
        return {
            drillDefinition: {
                type: "drillDown",
                origin: localIdRef(drill.attribute.attributeHeader.localIdentifier),
                target: matchingCatalogAttribute.attribute.drillDownStep,
            },
            predicates: [
                HeaderPredicates.localIdentifierMatch(drill.attribute.attributeHeader.localIdentifier),
            ],
        };
    });
}
/**
 * Returns a collection of pairs consisting of a drill definition and all its predicates.
 *
 * @param insightWidgetDrills - drills from the insight widget itself
 * @param possibleDrills - possible drill targets returned by pushData (this contains all attributes in the visualization)
 * @param attributesWithDrillDown - all the attributes in the catalog that have drill down step defined
 */
export function getImplicitDrillsWithPredicates(insightWidgetDrills, possibleDrills, attributesWithDrillDown, disableWidgetDrills) {
    var drills = insightDrillDownImplicitDrills(possibleDrills, attributesWithDrillDown);
    if (!disableWidgetDrills) {
        drills = __spread(drills, insightWidgetImplicitDrills(insightWidgetDrills));
    }
    return drills;
}
export function getDrillsBySourceLocalIdentifiers(widgetDrillDefinition, drillSourceLocalIdentifiers) {
    return widgetDrillDefinition.filter(function (d) {
        return isDrillToLegacyDashboard(d) ||
            drillSourceLocalIdentifiers.includes(getDrillOriginLocalIdentifier(d));
    });
}
export function getLocalIdentifiersFromEvent(drillEvent) {
    var drillIntersection = (drillEvent && drillEvent.drillContext && drillEvent.drillContext.intersection) || [];
    return drillIntersection.map(function (x) { return x.header; }).map(getMappingHeaderLocalIdentifier);
}
var getMeasureLocalIdentifier = function (drillEvent) {
    return first(((drillEvent && drillEvent.drillContext.intersection) || [])
        .map(function (intersection) { return intersection.header; })
        .filter(isMeasureDescriptor)
        .map(getMappingHeaderLocalIdentifier));
};
export function getDrillSourceLocalIdentifierFromEvent(drillEvent) {
    var localIdentifiersFromEvent = getLocalIdentifiersFromEvent(drillEvent);
    if (drillEvent.drillContext.type === "table") {
        /*
        For tables, the event is always triggered on the individual column and there is no hierarchy involved.
        */
        var measureLocalIdentifier = getMeasureLocalIdentifier(drillEvent);
        return [measureLocalIdentifier ? measureLocalIdentifier : last(localIdentifiersFromEvent)];
    }
    return localIdentifiersFromEvent;
}
export function filterDrillsByDrillEvent(drillDefinitions, drillEvent) {
    if (!drillDefinitions || !drillEvent) {
        return [];
    }
    var drillSourceLocalIdentifiers = getDrillSourceLocalIdentifierFromEvent(drillEvent);
    return getDrillsBySourceLocalIdentifiers(drillDefinitions, drillSourceLocalIdentifiers);
}
function matchAll(regex, text) {
    var matches = [];
    var match = null;
    while ((match = regex.exec(text)) !== null) {
        matches.push(match);
    }
    return matches;
}
export var getAttributeIdentifiersPlaceholdersFromUrl = function (url) {
    return matchAll(/{attribute_title\((.*?)\)}/g, url).map(function (match) { return ({
        placeholder: match[0],
        identifier: match[1],
        toBeEncoded: match.index !== 0,
    }); });
};
export function getDrillOriginLocalIdentifier(drillDefinition) {
    var origin = drillDefinition.origin;
    if (isLocalIdRef(origin)) {
        return origin.localIdentifier;
    }
    if (isDrillFromMeasure(origin)) {
        return getLocalIdentifierOrDie(origin.measure);
    }
    if (isDrillFromAttribute(origin)) {
        return getLocalIdentifierOrDie(origin.attribute);
    }
    throw new Error("InsightDrillDefinition has invalid drill origin");
}
export function getLocalIdentifierOrDie(ref) {
    if (isLocalIdRef(ref)) {
        return ref.localIdentifier;
    }
    throw new Error("Invalid ObjRef invariant expecting LocalIdRef");
}
export function isDrillConfigured(drill, configuredDrills) {
    if (isDrillToLegacyDashboard(drill)) {
        return false;
    }
    return configuredDrills.some(function (configDrill) {
        if (isDrillToLegacyDashboard(configDrill)) {
            return false;
        }
        return isEqual(drill, configDrill);
    });
}
//# sourceMappingURL=drillingUtils.js.map
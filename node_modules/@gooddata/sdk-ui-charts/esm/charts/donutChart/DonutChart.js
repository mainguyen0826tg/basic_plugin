import { __assign, __spreadArrays } from "tslib";
// (C) 2007-2018 GoodData Corporation
import React from "react";
import { newBucket } from "@gooddata/sdk-model";
import { BucketNames, useResolveValuesWithPlaceholders, } from "@gooddata/sdk-ui";
import { roundChartDimensions } from "../_commons/dimensions";
import { CoreDonutChart } from "./CoreDonutChart";
import { withChart } from "../_base/withChart";
//
// Internals
//
var donutChartDefinition = {
    chartName: "DonutChart",
    bucketPropsKeys: ["measures", "viewBy", "filters", "sortBy"],
    bucketsFactory: function (props) {
        var measures = (Array.isArray(props.measures) ? props.measures : [props.measures]);
        return [
            newBucket.apply(void 0, __spreadArrays([BucketNames.MEASURES], measures)),
            newBucket(BucketNames.VIEW, props.viewBy),
        ];
    },
    executionFactory: function (props, buckets) {
        var _a;
        var backend = props.backend, workspace = props.workspace, execConfig = props.execConfig;
        return (_a = backend
            .withTelemetry("DonutChart", props)
            .workspace(workspace)
            .execution()
            .forBuckets(buckets, props.filters))
            .withSorting.apply(_a, props.sortBy).withDimensions(roundChartDimensions)
            .withExecConfig(execConfig);
    },
};
var WrappedDonutChart = withChart(donutChartDefinition)(CoreDonutChart);
/**
 * [DonutChart](http://sdk.gooddata.com/gooddata-ui/docs/donut_chart_component.html)
 *
 * Donut chart shows data as proportional segments of a disc and has a hollowed out center.
 * Donut charts can be segmented by either multiple measures or an attribute, and allow viewers to visualize
 * component parts of a whole.
 *
 * Note: the donut chart slices are by default sorted from largest to smallest. There is also a limit on the
 * number of slices that will be charted.
 *
 * @public
 */
export var DonutChart = function (props) {
    var _a = useResolveValuesWithPlaceholders([props.measures, props.viewBy, props.filters, props.sortBy], props.placeholdersResolutionContext), measures = _a[0], viewBy = _a[1], filters = _a[2], sortBy = _a[3];
    return (React.createElement(WrappedDonutChart, __assign({}, props, {
        measures: measures,
        viewBy: viewBy,
        filters: filters,
        sortBy: sortBy,
    })));
};
//# sourceMappingURL=DonutChart.js.map
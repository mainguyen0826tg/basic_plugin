import React from "react";
import { WrappedComponentProps } from "react-intl";
import { ObjRef } from "@gooddata/sdk-model";
import { IAnalyticalBackend, IAttributeElement, IElementsQueryAttributeFilter } from "@gooddata/sdk-backend-spi";
import { ITranslationsComponentProps } from "@gooddata/sdk-ui";
import { AttributeListItem, IElementQueryResultWithEmptyItems } from "./types";
export interface IAttributeDropdownOwnProps {
    title: string;
    backend: IAnalyticalBackend;
    workspace: string;
    displayForm: ObjRef;
    selectedItems?: Array<Partial<IAttributeElement>>;
    isInverted?: boolean;
    onApply: (selectedItems: IAttributeElement[], isInverted: boolean) => void;
    fullscreenOnMobile?: boolean;
    isMobile?: boolean;
    titleWithSelection?: boolean;
    FilterLoading?: React.ComponentType;
    isLoading?: boolean;
    translationProps: ITranslationsComponentProps;
    parentFilters?: IElementsQueryAttributeFilter[];
    parentFilterTitles?: string[];
}
declare type IAttributeDropdownProps = IAttributeDropdownOwnProps & WrappedComponentProps;
export interface IAttributeDropdownState {
    validElements?: IElementQueryResultWithEmptyItems;
    selectedItems: Array<IAttributeElement>;
    isInverted: boolean;
    prevSelectedItems: Array<IAttributeElement>;
    prevIsInverted: boolean;
    firstLoad: boolean;
    isLoading: boolean;
    error?: any;
    searchString: string;
    offset: number;
    limit: number;
    totalCount: number;
    items: AttributeListItem[];
}
export declare class AttributeDropdownCore extends React.PureComponent<IAttributeDropdownProps, IAttributeDropdownState> {
    static defaultProps: Pick<IAttributeDropdownProps, "fullscreenOnMobile" | "isMobile" | "titleWithSelection" | "FilterLoading" | "isLoading">;
    private getBackend;
    constructor(props: IAttributeDropdownProps);
    componentDidUpdate(prevProps: IAttributeDropdownProps, prevState: IAttributeDropdownState): void;
    getElementTotalCount: () => Promise<number>;
    getElements: () => Promise<void>;
    private onSearch;
    private clearSearchString;
    private loadElements;
    private getTitle;
    render(): React.ReactNode;
    private backupSelection;
    private restoreSelection;
    private onDropdownOpenStateChanged;
    private onApplyButtonClicked;
    private onSelect;
    private onRangeChange;
    private emptyValueItems;
    private renderDropdownBody;
}
export declare const AttributeDropdown: React.ForwardRefExoticComponent<Pick<IAttributeDropdownProps, "title" | "displayForm" | "isLoading" | "backend" | "workspace" | "isMobile" | "isInverted" | "selectedItems" | "parentFilterTitles" | "onApply" | "fullscreenOnMobile" | "titleWithSelection" | "FilterLoading" | "translationProps" | "parentFilters"> & {
    forwardedRef?: React.Ref<any>;
} & React.RefAttributes<any>> & {
    WrappedComponent: React.ComponentType<IAttributeDropdownProps>;
};
export {};
//# sourceMappingURL=AttributeDropdown.d.ts.map
import { __extends } from "tslib";
import React from "react";
import { injectIntl } from "react-intl";
import { convertDrillableItemsToPredicates, fireDrillEvent, } from "@gooddata/sdk-ui";
import Headline from "./Headline";
import { applyDrillableItems, buildDrillEventData, getHeadlineData, } from "./utils/HeadlineTransformationUtils";
import noop from "lodash/noop";
/**
 * The React component that handles the transformation of the execution objects into the data accepted by the {Headline}
 * React component that this components wraps. It also handles the propagation of the drillable items to the component
 * and drill events out of it.
 */
var HeadlineTransformation = /** @class */ (function (_super) {
    __extends(HeadlineTransformation, _super);
    function HeadlineTransformation(props) {
        var _this = _super.call(this, props) || this;
        _this.handleFiredDrillEvent = _this.handleFiredDrillEvent.bind(_this);
        return _this;
    }
    HeadlineTransformation.prototype.render = function () {
        var _a = this.props, intl = _a.intl, drillableItems = _a.drillableItems, dataView = _a.dataView, config = _a.config, onAfterRender = _a.onAfterRender;
        var data = getHeadlineData(dataView, intl);
        var drillablePredicates = convertDrillableItemsToPredicates(drillableItems);
        var dataWithUpdatedDrilling = applyDrillableItems(data, drillablePredicates, dataView);
        var disableDrillUnderline = this.getDisableDrillUnderlineFromConfig();
        return (React.createElement(Headline, { data: dataWithUpdatedDrilling, config: config, onDrill: this.handleFiredDrillEvent, onAfterRender: onAfterRender, disableDrillUnderline: disableDrillUnderline }));
    };
    HeadlineTransformation.prototype.getDisableDrillUnderlineFromConfig = function () {
        if (this.props.config) {
            return this.props.config.disableDrillUnderline;
        }
    };
    HeadlineTransformation.prototype.handleFiredDrillEvent = function (item, target) {
        var _a = this.props, onDrill = _a.onDrill, dataView = _a.dataView;
        var drillEventData = buildDrillEventData(item, dataView);
        fireDrillEvent(onDrill, drillEventData, target);
    };
    HeadlineTransformation.defaultProps = {
        drillableItems: [],
        onDrill: function () { return true; },
        onAfterRender: noop,
    };
    return HeadlineTransformation;
}(React.Component));
export default injectIntl(HeadlineTransformation);
//# sourceMappingURL=HeadlineTransformation.js.map
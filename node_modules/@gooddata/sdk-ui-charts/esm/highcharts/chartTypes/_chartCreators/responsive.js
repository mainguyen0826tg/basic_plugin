// (C) 2007-2021 GoodData Corporation
import range from "lodash/range";
import cloneDeep from "lodash/cloneDeep";
var UPPER_LIMIT_RATIO = 35;
var BOTTOM_LIMIT_HEIGHT_RATIO = 15;
var BOTTOM_LIMIT_WIDTH_RATIO = 20;
var PIE_UPPER_LIMIT_WIDTH_PX = 360;
var PIE_BOTTOM_LIMIT_WIDTH_PX = 260;
var PIE_UPPER_LIMIT_HEIGHT_PX = 324;
var PIE_BOTTOM_LIMIT_HEIGHT_PX = 224;
var getRatio = function (chartDimension, plotDimension) { return (plotDimension * 100) / chartDimension; };
var xAxisLabelsDisabledOption = {
    labels: {
        enabled: false,
    },
};
var xAxisTitleDisabledOption = {
    title: {
        text: undefined,
    },
};
var yAxisLabelsDisabledOption = {
    labels: {
        enabled: false,
    },
};
var yAxisTitleDisabledOption = {
    title: {
        text: undefined,
    },
};
function forMultipleAxes(count, options) {
    return range(count).map(function () { return cloneDeep(options); });
}
var getResponsiveConfigOptions = function (inverted, xAxesCount, yAxesCount) {
    var _a, _b, _c, _d, _e;
    var axisKeyX = inverted ? "yAxis" : "xAxis";
    var axisKeyY = inverted ? "xAxis" : "yAxis";
    return {
        rules: [
            /**
             * It is here because of the edge case - someone would have to render the chart in a very small container
             */
            {
                condition: {
                    callback: function () {
                        var heightRatio = Math.round(getRatio(this.chartHeight, this.plotHeight));
                        var widthRatio = Math.round(getRatio(this.chartWidth, this.plotWidth));
                        var isZeroRatio = (heightRatio === 0 && widthRatio < BOTTOM_LIMIT_WIDTH_RATIO) ||
                            (widthRatio === 0 && heightRatio < BOTTOM_LIMIT_HEIGHT_RATIO);
                        if (isZeroRatio) {
                            // eslint-disable-next-line no-console
                            console.warn("container is very small and chart might not be render correctly");
                        }
                        return isZeroRatio;
                    },
                },
                chartOptions: (_a = {},
                    _a[axisKeyX] = forMultipleAxes(xAxesCount, xAxisLabelsDisabledOption),
                    _a[axisKeyY] = forMultipleAxes(yAxesCount, yAxisLabelsDisabledOption),
                    _a),
            },
            {
                condition: {
                    callback: function () {
                        var ratio = Math.round(getRatio(this.chartHeight, this.plotHeight));
                        return ratio < BOTTOM_LIMIT_HEIGHT_RATIO;
                    },
                },
                chartOptions: (_b = {},
                    _b[axisKeyX] = forMultipleAxes(xAxesCount, xAxisLabelsDisabledOption),
                    _b),
            },
            {
                condition: {
                    callback: function () {
                        var ratio = Math.round(getRatio(this.chartHeight, this.plotHeight));
                        return ratio > BOTTOM_LIMIT_HEIGHT_RATIO && ratio < UPPER_LIMIT_RATIO;
                    },
                },
                chartOptions: (_c = {},
                    _c[axisKeyX] = forMultipleAxes(xAxesCount, xAxisTitleDisabledOption),
                    _c),
            },
            {
                condition: {
                    callback: function () {
                        var ratio = Math.round(getRatio(this.chartWidth, this.plotWidth));
                        return ratio < BOTTOM_LIMIT_WIDTH_RATIO;
                    },
                },
                chartOptions: (_d = {},
                    _d[axisKeyY] = forMultipleAxes(yAxesCount, yAxisLabelsDisabledOption),
                    _d),
            },
            {
                condition: {
                    callback: function () {
                        var ratio = Math.round(getRatio(this.chartWidth, this.plotWidth));
                        return ratio > BOTTOM_LIMIT_WIDTH_RATIO && ratio < UPPER_LIMIT_RATIO;
                    },
                },
                chartOptions: (_e = {},
                    _e[axisKeyY] = forMultipleAxes(yAxesCount, yAxisTitleDisabledOption),
                    _e),
            },
        ],
    };
};
/**
 * Responsive config for multiple charts.
 * Some charts (e.g. bar chart) have inverted axes - the x-axis stands for the y-axis and vice versa,
 * therefore is possible to use the boolean parameter "inverted" to get inverted config.
 * @param {boolean} [inverted]
 */
export var getCommonResponsiveConfig = function (inverted, xAxesCount, yAxesCount) {
    if (inverted === void 0) { inverted = false; }
    if (xAxesCount === void 0) { xAxesCount = 1; }
    if (yAxesCount === void 0) { yAxesCount = 1; }
    return getResponsiveConfigOptions(inverted, xAxesCount, yAxesCount);
};
/**
 * Special responsive config is applicable for Pie chart and Donut chart.
 * Pie chart config is implicitly called from Donut chart config, therefore these configs are same.
 */
export var getPieResponsiveConfig = function () { return ({
    rules: [
        {
            condition: {
                callback: function () {
                    return ((this.chartWidth > PIE_BOTTOM_LIMIT_WIDTH_PX &&
                        this.chartWidth < PIE_UPPER_LIMIT_WIDTH_PX) ||
                        (this.chartHeight > PIE_BOTTOM_LIMIT_HEIGHT_PX &&
                            this.chartHeight < PIE_UPPER_LIMIT_HEIGHT_PX));
                },
            },
            chartOptions: {
                plotOptions: {
                    gdcOptions: {
                        dataLabels: {
                            visible: "auto",
                        },
                    },
                },
            },
        },
        {
            condition: {
                callback: function () {
                    return (this.chartWidth < PIE_BOTTOM_LIMIT_WIDTH_PX ||
                        this.chartHeight < PIE_BOTTOM_LIMIT_HEIGHT_PX);
                },
            },
            chartOptions: {
                plotOptions: {
                    pie: {
                        dataLabels: {
                            enabled: false,
                        },
                    },
                },
            },
        },
    ],
}); };
//# sourceMappingURL=responsive.js.map
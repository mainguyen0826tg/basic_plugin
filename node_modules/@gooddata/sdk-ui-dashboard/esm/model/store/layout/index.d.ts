export declare const layoutSliceReducer: import("@reduxjs/toolkit").Reducer<import("./layoutState").LayoutState, import("@reduxjs/toolkit").AnyAction>;
export declare const layoutActions: import("@reduxjs/toolkit").CaseReducerActions<{
    setLayout: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("@gooddata/sdk-backend-spi").IDashboardLayout<import("../..").ExtendedDashboardWidget>;
        type: string;
    }>;
    updateWidgetIdentities: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../../..").ObjRefMap<import("../../../_staging/dashboard/dashboardLayout").IdentityMapping>;
        type: string;
    }>;
    removeIgnoredAttributeFilter: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: {
            displayFormRefs: import("@gooddata/sdk-model").ObjRef[];
        };
        type: string;
    }>;
    addSection: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            section: import("../..").ExtendedDashboardLayoutSection;
            index: number;
            usedStashes: string[];
        };
        type: string;
    }>;
    removeSection: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            index: number;
            stashIdentifier?: string | undefined;
        };
        type: string;
    }>;
    moveSection: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            sectionIndex: number;
            toIndex: number;
        };
        type: string;
    }>;
    changeSectionHeader: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            index: number;
            header: import("@gooddata/sdk-backend-spi").IDashboardLayoutSectionHeader;
        };
        type: string;
    }>;
    addSectionItems: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            sectionIndex: number;
            itemIndex: number;
            items: import("../..").ExtendedDashboardItem<import("../..").ExtendedDashboardWidget>[];
            usedStashes: string[];
        };
        type: string;
    }>;
    moveSectionItem: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            sectionIndex: number;
            itemIndex: number;
            toSectionIndex: number;
            toItemIndex: number;
        };
        type: string;
    }>;
    removeSectionItem: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            sectionIndex: number;
            itemIndex: number;
            stashIdentifier?: string | undefined;
        };
        type: string;
    }>;
    replaceSectionItem: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            sectionIndex: number;
            itemIndex: number;
            newItems: import("../..").ExtendedDashboardItem<import("../..").ExtendedDashboardWidget>[];
            stashIdentifier?: string | undefined;
            usedStashes: string[];
        };
        type: string;
    }>;
    replaceWidgetHeader: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            ref: import("@gooddata/sdk-model").ObjRef;
            header: import("../..").WidgetHeader;
        };
        type: string;
    }>;
    replaceWidgetDrills: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            ref: import("@gooddata/sdk-model").ObjRef;
            drillDefinitions: import("@gooddata/sdk-backend-spi").InsightDrillDefinition[];
        };
        type: string;
    }>;
    replaceInsightWidgetVisProperties: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            ref: import("@gooddata/sdk-model").ObjRef;
            properties: import("@gooddata/sdk-model").VisualizationProperties | undefined;
        };
        type: string;
    }>;
    replaceWidgetFilterSettings: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            ref: import("@gooddata/sdk-model").ObjRef;
            ignoreDashboardFilters?: import("@gooddata/sdk-backend-spi").IDashboardFilterReference[] | undefined;
            dateDataSet?: import("@gooddata/sdk-model").UriRef | import("@gooddata/sdk-model").IdentifierRef | undefined;
        };
        type: string;
    }>;
    replaceWidgetDateDataset: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            ref: import("@gooddata/sdk-model").ObjRef;
            dateDataSet?: import("@gooddata/sdk-model").UriRef | import("@gooddata/sdk-model").IdentifierRef | undefined;
        };
        type: string;
    }>;
    replaceKpiWidgetMeasure: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            ref: import("@gooddata/sdk-model").ObjRef;
            measureRef: import("@gooddata/sdk-model").ObjRef;
        };
        type: string;
    }>;
    replaceKpiWidgetComparison: import("@reduxjs/toolkit").CaseReducer<import("./layoutState").LayoutState, {
        payload: import("../_infra/undoEnhancer").UndoPayload<import("../..").IDashboardCommand> & {
            ref: import("@gooddata/sdk-model").ObjRef;
            comparisonType: import("@gooddata/sdk-backend-spi").ILegacyKpiComparisonTypeComparison;
            comparisonDirection?: "growIsGood" | "growIsBad" | undefined;
        };
        type: string;
    }>;
    undoLayout: <TState extends import("..").UndoEnhancedState<import("../..").IDashboardCommand>>(state: import("@reduxjs/toolkit").Draft<TState>, action: {
        payload: import("../_infra/undoEnhancer").UndoActionPayload;
        type: string;
    }) => TState;
    clearLayoutHistory: <TState_1 extends import("..").UndoEnhancedState<import("../..").IDashboardCommand>>(state: import("@reduxjs/toolkit").Draft<TState_1>) => void;
}>;
//# sourceMappingURL=index.d.ts.map
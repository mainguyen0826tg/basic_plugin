import { AnalyticalBackendError, IAnalyticalBackend } from "@gooddata/sdk-backend-spi";
import { ObjRef } from "@gooddata/sdk-model";
import { UseCancelablePromiseCallbacks, UseCancelablePromiseState } from "@gooddata/sdk-ui";
import { IDashboardFilter } from "../../types";
interface IUseExportDashboardToPdfConfig extends UseCancelablePromiseCallbacks<string, AnalyticalBackendError> {
    /**
     * Reference to the dashboard to export.
     */
    dashboard?: ObjRef;
    /**
     * Optionally, specify filters to be applied to all the widgets in the dashboard.
     * This will override any filters set on the dashboard itself.
     */
    filters?: IDashboardFilter[];
    /**
     * Backend to work with.
     *
     * Note: the backend must come either from this property or from BackendContext. If you do not specify
     * backend here, then the hook MUST be called within an existing BackendContext.
     */
    backend?: IAnalyticalBackend;
    /**
     * Workspace to work with.
     *
     * Note: the workspace must come either from this property or from WorkspaceContext. If you do not specify
     * workspace here, then the hook MUST be called within an existing WorkspaceContext.
     */
    workspace?: string;
}
/**
 * Hook allowing to export a dashboard to a PDF
 * @param config - configuration of the hook
 * @internal
 */
export declare function useExportDashboardToPdf({ dashboard, filters, backend, workspace, onCancel, onError, onLoading, onPending, onSuccess, }: IUseExportDashboardToPdfConfig): UseCancelablePromiseState<string, AnalyticalBackendError>;
export {};
//# sourceMappingURL=useExportDashboardToPdf.d.ts.map
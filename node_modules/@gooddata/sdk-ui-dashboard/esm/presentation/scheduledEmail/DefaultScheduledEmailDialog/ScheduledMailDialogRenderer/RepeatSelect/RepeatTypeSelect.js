import { __extends } from "tslib";
// (C) 2019-2020 GoodData Corporation
import * as React from "react";
import { injectIntl } from "react-intl";
import { Dropdown, DropdownList, DropdownButton, SingleSelectListItem } from "@gooddata/sdk-ui-kit";
import invariant from "ts-invariant";
import { DEFAULT_DROPDOWN_ALIGN_POINTS, DEFAULT_DROPDOWN_ZINDEX, REPEAT_TYPES } from "../../constants";
import { getDayName, getWeek } from "../../utils/datetime";
var DROPDOWN_WIDTH = 199;
var RenderRepeatTypeSelect = /** @class */ (function (_super) {
    __extends(RenderRepeatTypeSelect, _super);
    function RenderRepeatTypeSelect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isRepeatTypeItemSelected = function (item) {
            return item.id === _this.props.repeatType;
        };
        _this.getRepeatTypeItem = function (repeatType) {
            var _a = _this.props, intl = _a.intl, startDate = _a.startDate;
            return {
                id: repeatType,
                title: intl.formatMessage({ id: "dialogs.schedule.email.repeats.types." + repeatType }, {
                    day: getDayName(startDate),
                    week: getWeek(startDate),
                }),
            };
        };
        _this.getRepeatTypeItems = function () {
            return [REPEAT_TYPES.DAILY, REPEAT_TYPES.WEEKLY, REPEAT_TYPES.MONTHLY, REPEAT_TYPES.CUSTOM].map(_this.getRepeatTypeItem);
        };
        _this.onRepeatTypeChange = function (item) {
            _this.props.onChange(item.id);
        };
        return _this;
    }
    RenderRepeatTypeSelect.prototype.render = function () {
        var _this = this;
        var repeatItems = this.getRepeatTypeItems();
        var repeatTypeItem = repeatItems.find(this.isRepeatTypeItemSelected);
        invariant(repeatTypeItem, "Inconsistent state in RepeatTypeSelect");
        return (React.createElement(Dropdown, { alignPoints: DEFAULT_DROPDOWN_ALIGN_POINTS, className: "gd-schedule-email-dialog-repeat-type s-gd-schedule-email-dialog-repeat-type", renderButton: function (_a) {
                var toggleDropdown = _a.toggleDropdown;
                return (React.createElement(DropdownButton, { value: repeatTypeItem.title, onClick: toggleDropdown }));
            }, renderBody: function (_a) {
                var closeDropdown = _a.closeDropdown, isMobile = _a.isMobile;
                return (React.createElement(DropdownList, { width: DROPDOWN_WIDTH, items: repeatItems, isMobile: isMobile, renderItem: function (_a) {
                        var item = _a.item;
                        return (React.createElement(SingleSelectListItem, { title: item.title, onClick: function () {
                                _this.onRepeatTypeChange(item);
                                closeDropdown();
                            }, isSelected: repeatTypeItem.id === item.id }));
                    } }));
            }, overlayPositionType: "sameAsTarget", overlayZIndex: DEFAULT_DROPDOWN_ZINDEX }));
    };
    return RenderRepeatTypeSelect;
}(React.PureComponent));
export var RepeatTypeSelect = injectIntl(RenderRepeatTypeSelect);
//# sourceMappingURL=RepeatTypeSelect.js.map
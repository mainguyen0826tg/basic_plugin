import { eventGuard } from "./util";
export function layoutSectionAdded(ctx, section, index, correlationId) {
    return {
        type: "GDC.DASH/EVT.FLUID_LAYOUT.SECTION_ADDED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            section: section,
            index: index,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardLayoutSectionAdded}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardLayoutSectionAdded = eventGuard("GDC.DASH/EVT.FLUID_LAYOUT.SECTION_ADDED");
export function layoutSectionMoved(ctx, section, fromIndex, toIndex, correlationId) {
    return {
        type: "GDC.DASH/EVT.FLUID_LAYOUT.SECTION_MOVED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            section: section,
            fromIndex: fromIndex,
            toIndex: toIndex,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardLayoutSectionMoved}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardLayoutSectionMoved = eventGuard("GDC.DASH/EVT.FLUID_LAYOUT.SECTION_MOVED");
export function layoutSectionRemoved(ctx, section, index, eagerRemoval, stashIdentifier, correlationId) {
    return {
        type: "GDC.DASH/EVT.FLUID_LAYOUT.SECTION_REMOVED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            section: section,
            index: index,
            eagerRemoval: eagerRemoval,
            stashIdentifier: stashIdentifier,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardLayoutSectionRemoved}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardLayoutSectionRemoved = eventGuard("GDC.DASH/EVT.FLUID_LAYOUT.SECTION_REMOVED");
export function layoutSectionHeaderChanged(ctx, newHeader, sectionIndex, correlationId) {
    return {
        type: "GDC.DASH/EVT.FLUID_LAYOUT.SECTION_HEADER_CHANGED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            newHeader: newHeader,
            sectionIndex: sectionIndex,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardLayoutSectionHeaderChanged}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardLayoutSectionHeaderChanged = eventGuard("GDC.DASH/EVT.FLUID_LAYOUT.SECTION_HEADER_CHANGED");
export function layoutSectionItemsAdded(ctx, sectionIndex, startIndex, itemsAdded, stashesUsed, correlationId) {
    return {
        type: "GDC.DASH/EVT.FLUID_LAYOUT.ITEMS_ADDED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            sectionIndex: sectionIndex,
            startIndex: startIndex,
            itemsAdded: itemsAdded,
            stashesUsed: stashesUsed,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardLayoutSectionItemsAdded}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardLayoutSectionItemsAdded = eventGuard("GDC.DASH/EVT.FLUID_LAYOUT.ITEMS_ADDED");
export function layoutSectionItemReplaced(ctx, sectionIndex, itemIndex, items, previousItem, stashIdentifier, correlationId) {
    return {
        type: "GDC.DASH/EVT.FLUID_LAYOUT.ITEM_REPLACED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            sectionIndex: sectionIndex,
            itemIndex: itemIndex,
            items: items,
            previousItem: previousItem,
            stashIdentifier: stashIdentifier,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardLayoutSectionItemReplaced}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardLayoutSectionItemReplaced = eventGuard("GDC.DASH/EVT.FLUID_LAYOUT.ITEM_REPLACED");
export function layoutSectionItemMoved(ctx, item, fromSectionIndex, toSectionIndex, fromIndex, toIndex, correlationId) {
    return {
        type: "GDC.DASH/EVT.FLUID_LAYOUT.ITEM_MOVED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            item: item,
            fromSectionIndex: fromSectionIndex,
            toSectionIndex: toSectionIndex,
            fromIndex: fromIndex,
            toIndex: toIndex,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardLayoutSectionItemMoved}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardLayoutSectionItemMoved = eventGuard("GDC.DASH/EVT.FLUID_LAYOUT.ITEM_MOVED");
export function layoutSectionItemRemoved(ctx, item, itemIndex, section, stashIdentifier, correlationId) {
    return {
        type: "GDC.DASH/EVT.FLUID_LAYOUT.ITEM_REMOVED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            item: item,
            itemIndex: itemIndex,
            section: section,
            stashIdentifier: stashIdentifier,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardLayoutSectionItemRemoved}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardLayoutSectionItemRemoved = eventGuard("GDC.DASH/EVT.FLUID_LAYOUT.ITEM_REMOVED");
export function layoutChanged(ctx, layout, correlationId) {
    return {
        type: "GDC.DASH/EVT.FLUID_LAYOUT.LAYOUT_CHANGED",
        ctx: ctx,
        correlationId: correlationId,
        payload: {
            layout: layout,
        },
    };
}
/**
 * Tests whether the provided object is an instance of {@link DashboardLayoutChanged}.
 *
 * @param obj - object to test
 * @alpha
 */
export var isDashboardLayoutChanged = eventGuard("GDC.DASH/EVT.FLUID_LAYOUT.LAYOUT_CHANGED");
//# sourceMappingURL=layout.js.map
import { XhrModule } from "./xhr";
import { ExecutionModule } from "./execution";
import { GdcCatalog, GdcDataSetsCsv, GdcDateDataSets, GdcVisualizationObject } from "@gooddata/api-model-bear";
export declare class CatalogueModule {
    private xhr;
    private execution;
    constructor(xhr: XhrModule, execution: ExecutionModule);
    /**
     * Load all catalog items
     * @param projectId string
     * @param options GdcCatalog.ILoadCatalogItemsParams
     */
    loadAllItems(projectId: string, options?: GdcCatalog.ILoadCatalogItemsParams): Promise<GdcCatalog.CatalogItem[]>;
    /**
     * Load catalog groups
     * @param projectId string
     * @param options GdcCatalog.ILoadCatalogGroupsParams
     */
    loadGroups(projectId: string, options?: GdcCatalog.ILoadCatalogGroupsParams): Promise<GdcCatalog.ICatalogGroup[]>;
    /**
     * Load available item uris by already used uris and expressions
     * @param projectId string
     * @param options GdcCatalog.ILoadAvailableCatalogItemsParams
     */
    loadAvailableItemUris(projectId: string, options: GdcCatalog.ILoadAvailableCatalogItemsParams): Promise<string[]>;
    loadItems(projectId: string, options?: any): Promise<any>;
    loadDateDataSets(projectId: string, options: GdcCatalog.ILoadDateDataSetsParams): Promise<{
        dateDataSets: GdcDateDataSets.IDateDataSet[];
        unavailableDateDataSetsCount?: number | undefined;
    }>;
    /**
     * Loads item description objects and returns them
     *
     * @internal
     * @private
     *
     * @param projectId {string}
     * @param mdObj metadata object containing buckets, visualization class, properties etc.
     * @param attributesMap contains map of attributes where the keys are the attributes display forms URIs
     * @param removeDateItems {boolean} skip date items
     * @return ItemDescription which is either `{ uri: string }` or `{ expression: string }`
     */
    loadItemDescriptionObjects(projectId: string, mdObj: GdcVisualizationObject.IVisualizationObjectContent, attributesMap?: any, removeDateItems?: boolean): Promise<GdcCatalog.ItemDescription[]>;
    /**
     * ItemDescription is either URI or MAQL expression
     * https://github.com/gooddata/gdc-bear/blob/185.4/resources/specification/md/obj.res#L284
     *
     * @param projectId {string}
     * @param mdObj metadata object containing buckets, visualization class, properties etc.
     * @param attributesMap contains map of attributes where the keys are the attributes display forms URIs
     * @param removeDateItems {boolean} skip date items
     * @deprecated
     */
    loadItemDescriptions(projectId: string, mdObj: any, attributesMap: Record<string, unknown>, removeDateItems?: boolean): Promise<string[]>;
    /**
     * Loads all available data sets.
     * @param projectId
     */
    loadDataSets(projectId: string): Promise<GdcDataSetsCsv.IDataset[]>;
    private requestDateDataSets;
    private loadCatalog;
}

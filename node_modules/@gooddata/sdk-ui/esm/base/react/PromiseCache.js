// (C) 2007-2020 GoodData Corporation
import { makeCancelable } from "./CancelablePromise";
import values from "lodash/values";
/**
 * Simple promise cache, that allows promise canceling
 * After reset() call, it cancels pending promises
 * @internal
 */
var PromiseCache = /** @class */ (function () {
    function PromiseCache(handler, getCacheKey) {
        var _this = this;
        if (getCacheKey === void 0) { getCacheKey = JSON.stringify; }
        this.handler = handler;
        this.getCacheKey = getCacheKey;
        this.promises = {};
        this.params = {};
        this.results = {};
        this.errors = {};
        this.getResult = function (params) {
            var cacheKey = _this.getCacheKey(params);
            return _this.results[cacheKey];
        };
        this.getError = function (params) {
            var cacheKey = _this.getCacheKey(params);
            return _this.errors[cacheKey];
        };
        this.getPromise = function (params) {
            var cacheKey = _this.getCacheKey(params);
            var cachedPromise = _this.promises[cacheKey];
            if (cachedPromise) {
                return cachedPromise.promise;
            }
        };
        this.reset = function () {
            values(_this.params).forEach(_this.cancel);
            _this.params = {};
            _this.promises = {};
            _this.results = {};
            _this.errors = {};
        };
        this.cancel = function (params) {
            var cacheKey = _this.getCacheKey(params);
            var cancelablePromise = _this.promises[cacheKey];
            if (cancelablePromise) {
                cancelablePromise.cancel();
            }
        };
        this.load = function (params) {
            var cacheKey = _this.getCacheKey(params);
            var cachedPromise = _this.promises[cacheKey];
            if (cachedPromise) {
                return cachedPromise.promise;
            }
            var cancelablePromise = makeCancelable(_this.handler(params));
            cancelablePromise.promise
                .then(function (result) { return (_this.results[cacheKey] = result); })
                .catch(function (error) { return (_this.errors[cacheKey] = error); });
            _this.promises[cacheKey] = cancelablePromise;
            return cancelablePromise.promise;
        };
    }
    return PromiseCache;
}());
export { PromiseCache };
//# sourceMappingURL=PromiseCache.js.map
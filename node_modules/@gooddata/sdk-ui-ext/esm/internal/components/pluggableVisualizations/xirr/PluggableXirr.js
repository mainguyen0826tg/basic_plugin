// (C) 2019 GoodData Corporation
import { __assign, __awaiter, __extends, __generator, __spreadArrays } from "tslib";
import { attributeLocalId, bucketAttributes, insightBucket, MeasureGroupIdentifier, newDimension, } from "@gooddata/sdk-model";
import { BucketNames } from "@gooddata/sdk-ui";
import { CoreXirr, updateConfigWithSettings } from "@gooddata/sdk-ui-charts";
import React from "react";
import { render } from "react-dom";
import { removeAllArithmeticMeasuresFromDerived, removeAllDerivedMeasures, sanitizeFilters, } from "../../../utils/bucketHelper";
import { hasGlobalDateFilter } from "../../../utils/bucketRules";
import { unmountComponentsAtNodes } from "../../../utils/domHelper";
import { getReferencePointWithSupportedProperties, getSupportedProperties, } from "../../../utils/propertiesHelper";
import { removeSort } from "../../../utils/sort";
import { getDefaultXirrUiConfig, getXirrUiConfig } from "../../../utils/uiConfigHelpers/xirrUiConfigHelper";
import UnsupportedConfigurationPanel from "../../configurationPanels/UnsupportedConfigurationPanel";
import { AbstractPluggableVisualization } from "../AbstractPluggableVisualization";
import { getXirrBuckets } from "./xirrBucketHelper";
import cloneDeep from "lodash/cloneDeep";
var PluggableXirr = /** @class */ (function (_super) {
    __extends(PluggableXirr, _super);
    function PluggableXirr(props) {
        var _this = _super.call(this, props) || this;
        _this.getExtendedReferencePoint = function (referencePoint) { return __awaiter(_this, void 0, void 0, function () {
            var referencePointCloned, newReferencePoint, buckets;
            return __generator(this, function (_a) {
                referencePointCloned = cloneDeep(referencePoint);
                newReferencePoint = __assign(__assign({}, referencePointCloned), { uiConfig: getDefaultXirrUiConfig() });
                if (!hasGlobalDateFilter(referencePoint.filters)) {
                    newReferencePoint = removeAllArithmeticMeasuresFromDerived(newReferencePoint);
                    newReferencePoint = removeAllDerivedMeasures(newReferencePoint);
                }
                buckets = getXirrBuckets(referencePoint);
                newReferencePoint.buckets = buckets;
                newReferencePoint.uiConfig = getXirrUiConfig(newReferencePoint, this.intl);
                newReferencePoint = removeSort(newReferencePoint);
                newReferencePoint = getReferencePointWithSupportedProperties(newReferencePoint, this.supportedPropertiesList);
                return [2 /*return*/, sanitizeFilters(newReferencePoint)];
            });
        }); };
        // This is effectively calling super.pushData()
        // https://stackoverflow.com/questions/31088947/inheritance-method-call-triggers-typescript-compiler-error
        // https://github.com/basarat/typescript-book/blob/master/docs/arrow-functions.md#tip-arrow-functions-and-inheritance
        _this.superPushData = _this.pushData;
        _this.pushData = function (data, options) {
            // For xirr chart we do not support drilling from attributes.
            var filterAtrributes = _this.withEmptyAttributeTargets(data);
            _this.superPushData(filterAtrributes, options);
        };
        _this.settings = props.featureFlags;
        _this.renderFun = props.renderFun;
        return _this;
    }
    PluggableXirr.prototype.unmount = function () {
        unmountComponentsAtNodes([this.element, this.configPanelElement]);
    };
    PluggableXirr.prototype.renderVisualization = function (options, insight, executionFactory) {
        var _a;
        var locale = options.locale, dateFormat = options.dateFormat, _b = options.custom, custom = _b === void 0 ? {} : _b, config = options.config;
        var drillableItems = custom.drillableItems;
        var execution = (_a = executionFactory
            .forInsight(insight))
            .withDimensions.apply(_a, this.getXirrDimensions(insight)).withDateFormat(dateFormat);
        this.renderFun(React.createElement(CoreXirr, { execution: execution, drillableItems: drillableItems, onDrill: this.onDrill, locale: locale, config: updateConfigWithSettings(config, this.settings), afterRender: this.afterRender, onLoadingChanged: this.onLoadingChanged, pushData: this.pushData, onError: this.onError, LoadingComponent: null, ErrorComponent: null }), document.querySelector(this.element));
    };
    PluggableXirr.prototype.renderConfigurationPanel = function () {
        var _a;
        if (document.querySelector(this.configPanelElement)) {
            var properties = (_a = this.visualizationProperties) !== null && _a !== void 0 ? _a : {};
            render(React.createElement(UnsupportedConfigurationPanel, { locale: this.locale, pushData: this.pushData, properties: getSupportedProperties(properties, this.supportedPropertiesList) }), document.querySelector(this.configPanelElement));
        }
    };
    PluggableXirr.prototype.getXirrDimensions = function (insight) {
        var attribute = insightBucket(insight, BucketNames.ATTRIBUTE);
        if (attribute && attribute.items.length) {
            return [
                newDimension(__spreadArrays([MeasureGroupIdentifier], bucketAttributes(attribute).map(attributeLocalId))),
            ];
        }
        return [newDimension([MeasureGroupIdentifier])];
    };
    PluggableXirr.prototype.withEmptyAttributeTargets = function (data) {
        return __assign(__assign({}, data), { availableDrillTargets: __assign(__assign({}, data === null || data === void 0 ? void 0 : data.availableDrillTargets), { attributes: [] }) });
    };
    return PluggableXirr;
}(AbstractPluggableVisualization));
export { PluggableXirr };
//# sourceMappingURL=PluggableXirr.js.map
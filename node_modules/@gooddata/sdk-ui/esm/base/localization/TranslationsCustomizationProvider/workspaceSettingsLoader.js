import LRUCache from "lru-cache";
var LOADER_CACHE_SIZE = 20;
var WorkspaceSettingsLoader = /** @class */ (function () {
    function WorkspaceSettingsLoader() {
        this.settingsCache = new LRUCache({ max: LOADER_CACHE_SIZE });
    }
    WorkspaceSettingsLoader.prototype.load = function (backend, workspace) {
        var _this = this;
        var cacheKey = workspace;
        var settings = this.settingsCache.get(cacheKey);
        if (!settings) {
            settings = backend
                .workspace(workspace)
                .settings()
                .getSettings()
                .catch(function (error) {
                // do not cache errors
                _this.settingsCache.del(cacheKey);
                throw error;
            });
            this.settingsCache.set(cacheKey, settings);
        }
        return settings;
    };
    return WorkspaceSettingsLoader;
}());
var workspaceSettingsLoaderInstance;
/**
 * Gets a loader object for loading workspace settings data efficiently.
 */
export function getWorkspaceSettingsLoader() {
    if (!workspaceSettingsLoaderInstance) {
        workspaceSettingsLoaderInstance = new WorkspaceSettingsLoader();
    }
    return workspaceSettingsLoaderInstance;
}
/**
 * Resets the cached loader object for loading workspace settings data efficiently.
 */
export function resetWorkspaceSettingsLoader() {
    workspaceSettingsLoaderInstance = undefined;
}
//# sourceMappingURL=workspaceSettingsLoader.js.map
import React from "react";
import { IScheduledMailDefinition, IScheduledMail, IAnalyticalBackend, FilterContextItem } from "@gooddata/sdk-backend-spi";
import { ObjRef } from "@gooddata/sdk-model";
import { GoodDataSdkError } from "@gooddata/sdk-ui";
export declare type ScheduledMailDialogProps = {
    /**
     * Reference of the dashboard to be attached to the scheduled email.
     */
    dashboard: ObjRef;
    /**
     * Locale to use for localization of texts appearing in the scheduled email dialog.
     */
    locale?: string;
    /**
     * Filters to apply to the exported dashboard attached to the scheduled email.
     *
     * Note: By default, exported dashboard in the scheduled mail will use the original stored dashboard filter context,
     * with this prop, you can override it.
     */
    filters?: FilterContextItem[];
    /**
     * Backend to work with.
     *
     * Note: the backend must come either from this property or from BackendContext. If you do not specify
     * backend here, then the component MUST be rendered within an existing BackendContext.
     */
    backend?: IAnalyticalBackend;
    /**
     * Workspace to work with.
     *
     * Note: the workspace must come either from this property or from WorkspaceContext. If you do not specify
     * workspace here, then the component MUST be rendered within an existing WorkspaceContext.
     */
    workspace?: string;
    /**
     * Callback to be called, when user submit the scheduled email dialog.
     */
    onSubmit?: (scheduledEmailDefinition: IScheduledMailDefinition) => void;
    /**
     * Callback to be called, when submitting of the scheduled email was successful.
     */
    onSubmitSuccess?: (scheduledEmail: IScheduledMail) => void;
    /**
     * Callback to be called, when submitting of the scheduled email failed.
     */
    onSubmitError?: (error: GoodDataSdkError) => void;
    /**
     * Callback to be called, when user close the scheduled email dialog.
     */
    onCancel?: () => void;
    /**
     * Callback to be called, when error occurs.
     */
    onError?: (error: GoodDataSdkError) => void;
    /**
     * Is scheduled e-mail dialog visible?
     * This is used to control the visibility of the dialog without unmounting it.
     * Note: We want to avoid unmounting of the component to ensure
     * that all necessary hooks are called when saving the e-mail - this property
     * affects only rendering part of the dialog.
     */
    isVisible?: boolean;
};
export declare const ScheduledMailDialog: React.FC<ScheduledMailDialogProps>;
//# sourceMappingURL=ScheduledMailDialog.d.ts.map
import { __awaiter, __generator, __spreadArrays } from "tslib";
import compact from "lodash/compact";
import includes from "lodash/includes";
import isArray from "lodash/isArray";
import uniq from "lodash/uniq";
var getUriFromPairByIdentifier = function (identifier, uriIdentifierPairs, excludeUris) {
    var resolvedPair = uriIdentifierPairs
        .filter(function (result) { return !includes(excludeUris, result.uri); })
        .find(function (result) { return result.identifier === identifier; });
    return resolvedPair === null || resolvedPair === void 0 ? void 0 : resolvedPair.uri;
};
/**
 * @internal
 */
export var sanitizeDrillingActivationPostMessageData = function (workspace, postMessageData, idToUriConverter) { return __awaiter(void 0, void 0, void 0, function () {
    var uris, identifiers, composedFrom, simpleUris, simpleIdentifiers, composedFromUris, composedFromIdentifiers, allIdentifiers, urisFromIdentifiers, _a, allUris, allComposedFromUris;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                uris = postMessageData.uris, identifiers = postMessageData.identifiers, composedFrom = postMessageData.composedFrom;
                simpleUris = isArray(uris) ? uris : [];
                simpleIdentifiers = isArray(identifiers) ? identifiers : [];
                composedFromUris = (composedFrom === null || composedFrom === void 0 ? void 0 : composedFrom.uris) && isArray(composedFrom.uris) ? composedFrom.uris : [];
                composedFromIdentifiers = (composedFrom === null || composedFrom === void 0 ? void 0 : composedFrom.identifiers) && isArray(composedFrom.identifiers) ? composedFrom.identifiers : [];
                allIdentifiers = uniq(__spreadArrays(simpleIdentifiers, composedFromIdentifiers));
                if (!allIdentifiers.length) return [3 /*break*/, 2];
                return [4 /*yield*/, idToUriConverter(workspace, allIdentifiers)];
            case 1:
                _a = _b.sent();
                return [3 /*break*/, 3];
            case 2:
                _a = [];
                _b.label = 3;
            case 3:
                urisFromIdentifiers = _a;
                allUris = uniq(__spreadArrays(simpleUris, compact(simpleIdentifiers.map(function (identifier) {
                    return getUriFromPairByIdentifier(identifier, urisFromIdentifiers, simpleUris);
                }))));
                allComposedFromUris = uniq(__spreadArrays(composedFromUris, compact(composedFromIdentifiers.map(function (identifier) {
                    return getUriFromPairByIdentifier(identifier, urisFromIdentifiers, composedFromUris);
                }))));
                return [2 /*return*/, { uris: allUris, composedFrom: { uris: allComposedFromUris } }];
        }
    });
}); };
//# sourceMappingURL=index.js.map
import { __assign } from "tslib";
var REMOVE_BRACKETS_REGEXP = /[[\]{}]/g;
var TOKEN_TYPE_REGEXP_PAIRS = [
    ["text", /^[^{}[\]"]+/],
    ["quoted_text", /^"(?:[^"\\]|\\"|\\\\.)*"/],
    ["fact", /^\{fact\/[^}]*\}/],
    ["metric", /^\{metric\/[^}]*\}/],
    ["label", /^\{label\/[^}]*\}/],
    ["attribute", /^\{attribute\/[^}]*\}/],
];
export var tokenizeExpression = function (expression) {
    var tokens = [];
    var _expression = expression;
    while (_expression.length) {
        var match = void 0;
        for (var _i = 0, TOKEN_TYPE_REGEXP_PAIRS_1 = TOKEN_TYPE_REGEXP_PAIRS; _i < TOKEN_TYPE_REGEXP_PAIRS_1.length; _i++) {
            var _a = TOKEN_TYPE_REGEXP_PAIRS_1[_i], type = _a[0], regExp = _a[1];
            match = _expression.match(regExp);
            if (match) {
                var value = match[0];
                tokens.push({ type: type, value: value });
                _expression = _expression.substr(value.length);
                break;
            }
        }
        if (!match) {
            throw new Error("Unable to match token, rest of output is: \"" + _expression + "\"");
        }
    }
    return tokens.map(function (token) { return (__assign(__assign({}, token), { value: token.value.replace(REMOVE_BRACKETS_REGEXP, "") })); });
};
//# sourceMappingURL=measureExpressionTokens.js.map
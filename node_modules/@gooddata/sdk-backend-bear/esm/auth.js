import { __awaiter, __extends, __generator } from "tslib";
import invariant from "ts-invariant";
import { NotAuthenticated, } from "@gooddata/sdk-backend-spi";
/**
 * Base for other IAuthenticationProvider implementations.
 *
 * @public
 */
var BearAuthProviderBase = /** @class */ (function () {
    function BearAuthProviderBase() {
    }
    BearAuthProviderBase.prototype.deauthenticate = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var sdk;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sdk = context.client;
                        // we do not return the promise to logout as we do not want to return the response
                        return [4 /*yield*/, sdk.user.logout()];
                    case 1:
                        // we do not return the promise to logout as we do not want to return the response
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BearAuthProviderBase.prototype.getCurrentPrincipal = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.principal) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.obtainCurrentPrincipal(context)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.principal || null];
                }
            });
        });
    };
    BearAuthProviderBase.prototype.obtainCurrentPrincipal = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var sdk, currentProfile;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sdk = context.client;
                        return [4 /*yield*/, sdk.user.getCurrentProfile()];
                    case 1:
                        currentProfile = _a.sent();
                        this.principal = {
                            userId: currentProfile.login,
                            userMeta: currentProfile,
                        };
                        return [2 /*return*/];
                }
            });
        });
    };
    return BearAuthProviderBase;
}());
export { BearAuthProviderBase };
/**
 * This implementation of authentication provider does login with fixed username and password.
 *
 * @public
 */
var FixedLoginAndPasswordAuthProvider = /** @class */ (function (_super) {
    __extends(FixedLoginAndPasswordAuthProvider, _super);
    function FixedLoginAndPasswordAuthProvider(username, password) {
        var _this = _super.call(this) || this;
        _this.username = username;
        _this.password = password;
        return _this;
    }
    FixedLoginAndPasswordAuthProvider.prototype.authenticate = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var sdk;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sdk = context.client;
                        return [4 /*yield*/, sdk.user.login(this.username, this.password)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.obtainCurrentPrincipal(context)];
                    case 2:
                        _a.sent();
                        invariant(this.principal, "Principal must be obtainable after login");
                        return [2 /*return*/, this.principal];
                }
            });
        });
    };
    return FixedLoginAndPasswordAuthProvider;
}(BearAuthProviderBase));
export { FixedLoginAndPasswordAuthProvider };
/**
 * This implementation of authentication provider defers the responsibility for performing authentication
 * to the context in which it exists. In other words it expects that the application will take care of driving
 * the authentication and creating a correct session in which the Bear backend can make authenticated calls.
 *
 * You may use the provider's ability to use passed `NotAuthenticatedHandler` function. This will be called
 * every time a NotAuthenticated error is raised by the backend. Your application can pass a custom handler of
 * this event - typically something that will start driving the authentication from a single place.
 *
 * Note: the not authenticated handler MAY be called many times in succession so you may want to wrap it in a
 * call guard or in a debounce.
 *
 * @public
 */
var ContextDeferredAuthProvider = /** @class */ (function (_super) {
    __extends(ContextDeferredAuthProvider, _super);
    function ContextDeferredAuthProvider(notAuthenticatedHandler) {
        var _this = _super.call(this) || this;
        _this.notAuthenticatedHandler = notAuthenticatedHandler;
        _this.onNotAuthenticated = function (context, error) {
            var _a;
            (_a = _this.notAuthenticatedHandler) === null || _a === void 0 ? void 0 : _a.call(_this, context, error);
        };
        return _this;
    }
    ContextDeferredAuthProvider.prototype.authenticate = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var sdk, isLoggedIn;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sdk = context.client;
                        return [4 /*yield*/, sdk.user.isLoggedIn()];
                    case 1:
                        isLoggedIn = _a.sent();
                        if (!isLoggedIn) {
                            throw new NotAuthenticated("Please make sure the context is already authenticated when using ContextDeferredAuthProvider");
                        }
                        return [4 /*yield*/, this.obtainCurrentPrincipal(context)];
                    case 2:
                        _a.sent();
                        invariant(this.principal, "Principal must be obtainable after login");
                        return [2 /*return*/, this.principal];
                }
            });
        });
    };
    return ContextDeferredAuthProvider;
}(BearAuthProviderBase));
export { ContextDeferredAuthProvider };
//# sourceMappingURL=auth.js.map
import { __assign, __read } from "tslib";
// (C) 2007-2020 GoodData Corporation
import React, { useState, useCallback, useEffect, useRef } from "react";
import uniqueId from "lodash/uniqueId";
import noop from "lodash/noop";
import { FullScreenOverlay, Overlay } from "../Overlay";
import { useMediaQuery } from "../responsive/useMediaQuery";
var SCROLLBAR_SELECTOR = ".fixedDataTableLayout_main .ScrollbarLayout_main";
var MOBILE_DROPDOWN_ALIGN_POINTS = [
    {
        align: "tl tl",
    },
];
/**
 * Element.matches is only supported via prefix in IE11 and Edge.
 */
function matches(element, selector) {
    var _a;
    var matchesImpl = (_a = element.matches) !== null && _a !== void 0 ? _a : element.msMatchesSelector;
    return matchesImpl.call(element, selector);
}
/**
 * Prevent the overlay from closing when scrolling and finishing
 * with a cursor position outside of the overlay.
 */
function shouldCloseOnClick(e) {
    var _a;
    var activeElement = (_a = document.activeElement) !== null && _a !== void 0 ? _a : e.target;
    if (!activeElement) {
        return false;
    }
    var hasScrolled = matches(activeElement, SCROLLBAR_SELECTOR);
    return !hasScrolled;
}
/**
 * @internal
 */
export var Dropdown = function (props) {
    var className = props.className, openOnInit = props.openOnInit, closeOnParentScroll = props.closeOnParentScroll, closeOnMouseDrag = props.closeOnMouseDrag, _a = props.closeOnOutsideClick, closeOnOutsideClick = _a === void 0 ? true : _a, overlayPositionType = props.overlayPositionType, _b = props.alignPoints, alignPoints = _b === void 0 ? [
        {
            align: "bl tl",
        },
    ] : _b, overlayZIndex = props.overlayZIndex, _c = props.ignoreClicksOnByClass, ignoreClicksOnByClass = _c === void 0 ? [] : _c, renderBody = props.renderBody, renderButton = props.renderButton, onOpenStateChanged = props.onOpenStateChanged, _d = props.fullscreenOnMobile, fullscreenOnMobile = _d === void 0 ? true : _d, _e = props.enableEventPropagation, enableEventPropagation = _e === void 0 ? false : _e;
    var _f = __read(useState({
        isOpen: !!openOnInit,
        dropdownId: uniqueId("dropdown-"),
    }), 2), _g = _f[0], isOpen = _g.isOpen, dropdownId = _g.dropdownId, setState = _f[1];
    var _renderButton = function (renderProps) { return (React.createElement("div", { className: dropdownId }, renderButton(renderProps))); };
    var toggleDropdown = useCallback(function () {
        setState(function (state) { return (__assign(__assign({}, state), { isOpen: !state.isOpen })); });
    }, []);
    var closeDropdown = useCallback(function () {
        setState(function (state) { return (__assign(__assign({}, state), { isOpen: false })); });
    }, []);
    var openDropdown = useCallback(function () {
        setState(function (state) { return (__assign(__assign({}, state), { isOpen: true })); });
    }, []);
    var mountRef = useRef(false);
    useEffect(function () {
        if (mountRef.current && onOpenStateChanged) {
            onOpenStateChanged(isOpen);
        }
        return function () {
            mountRef.current = true;
        };
    }, [isOpen]);
    var renderButtonProps = {
        isOpen: isOpen,
        openDropdown: openDropdown,
        closeDropdown: closeDropdown,
        toggleDropdown: toggleDropdown,
    };
    var isMobileDevice = useMediaQuery("mobileDevice");
    var renderDropdown = isOpen &&
        (fullscreenOnMobile && isMobileDevice ? (React.createElement(FullScreenOverlay, { alignTo: "body", alignPoints: MOBILE_DROPDOWN_ALIGN_POINTS },
            React.createElement("div", { className: "gd-mobile-dropdown-overlay overlay gd-flex-row-container" },
                React.createElement("div", { className: "gd-mobile-dropdown-header gd-flex-item" }, _renderButton(__assign(__assign({}, renderButtonProps), { isMobile: true }))),
                React.createElement("div", { className: "gd-mobile-dropdown-content gd-flex-item-stretch gd-flex-row-container" }, renderBody({
                    closeDropdown: closeDropdown,
                    isMobile: true,
                }))))) : (React.createElement(Overlay, { alignTo: "." + dropdownId, positionType: overlayPositionType, alignPoints: alignPoints, closeOnOutsideClick: closeOnOutsideClick, closeOnMouseDrag: closeOnMouseDrag, closeOnParentScroll: closeOnParentScroll, shouldCloseOnClick: shouldCloseOnClick, ignoreClicksOnByClass: ignoreClicksOnByClass, onClose: closeDropdown, 
            // Overlay prevents event propagation by default using defaultProps for these
            onClick: enableEventPropagation ? noop : undefined, onMouseOver: enableEventPropagation ? noop : undefined, onMouseUp: enableEventPropagation ? noop : undefined, zIndex: overlayZIndex },
            React.createElement("div", { className: "overlay dropdown-body" }, renderBody({
                closeDropdown: closeDropdown,
                isMobile: false,
            })))));
    return (React.createElement("div", { className: className },
        _renderButton(__assign(__assign({}, renderButtonProps), { isMobile: false })),
        renderDropdown));
};
//# sourceMappingURL=Dropdown.js.map
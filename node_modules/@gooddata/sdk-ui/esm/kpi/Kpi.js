import { __assign } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { RawExecute } from "../execution";
import { FormattedNumber } from "./FormattedNumber";
import { KpiError } from "./KpiError";
import { injectIntl } from "react-intl";
import isNil from "lodash/isNil";
import { IntlWrapper, LoadingComponent, withContexts, } from "../base";
import invariant from "ts-invariant";
//
// Internals
//
var KpiLoading = function () { return React.createElement(LoadingComponent, { inline: true }); };
var CoreKpi = function (props) {
    var backend = props.backend, workspace = props.workspace, measure = props.measure, filters = props.filters, separators = props.separators, _a = props.LoadingComponent, LoadingComponent = _a === void 0 ? KpiLoading : _a, _b = props.ErrorComponent, ErrorComponent = _b === void 0 ? KpiError : _b, onError = props.onError, onLoadingChanged = props.onLoadingChanged, onLoadingFinish = props.onLoadingFinish, onLoadingStart = props.onLoadingStart, intl = props.intl;
    invariant(backend && workspace, "backend and workspace must be either specified explicitly or be provided by context");
    var execution = backend
        .withTelemetry("KPI", props)
        .workspace(workspace)
        .execution()
        .forItems([measure], filters);
    return (React.createElement(RawExecute, { execution: execution, onLoadingStart: onLoadingStart, onLoadingChanged: onLoadingChanged, onLoadingFinish: onLoadingFinish, onError: onError }, function (_a) {
        var error = _a.error, isLoading = _a.isLoading, result = _a.result;
        if (error) {
            return (React.createElement(ErrorComponent, { code: error.message, message: intl.formatMessage({ id: "visualization.ErrorMessageKpi" }) }));
        }
        if (isLoading || !result) {
            return React.createElement(LoadingComponent, null);
        }
        var measureData = getMeasureData(result);
        var measureFormat = measure.measure.format || getMeasureFormat(result);
        return (React.createElement(FormattedNumber, { className: "gdc-kpi", value: measureData, format: measureFormat, separators: separators }));
    }));
};
var getMeasureData = function (result) {
    var _a;
    var data = result.rawData().data();
    var measure = (_a = data === null || data === void 0 ? void 0 : data[0]) === null || _a === void 0 ? void 0 : _a[0];
    if (isNil(measure)) {
        return "";
    }
    return parseFloat(measure);
};
var getMeasureFormat = function (result) {
    var _a, _b;
    var headerItems = result.meta().measureDescriptors();
    return (_b = (_a = headerItems === null || headerItems === void 0 ? void 0 : headerItems[0]) === null || _a === void 0 ? void 0 : _a.measureHeaderItem) === null || _b === void 0 ? void 0 : _b.format;
};
var IntlKpi = injectIntl(CoreKpi);
var RenderKpi = function (props) {
    var locale = props.locale;
    return (React.createElement(IntlWrapper, { locale: locale },
        React.createElement(IntlKpi, __assign({}, props))));
};
/**
 * Kpi is a simple component which calculates and renders a single formatted measure value. The the value
 * is rendered inside a <span> element.
 *
 * Kpi component is useful for instance for embedding data values into text paragraphs.
 *
 * See also the {@link @gooddata/sdk-ui-charts#Headline} component for a more 'chart-like' variant.
 *
 * @public
 */
export var Kpi = withContexts(RenderKpi);
//# sourceMappingURL=Kpi.js.map
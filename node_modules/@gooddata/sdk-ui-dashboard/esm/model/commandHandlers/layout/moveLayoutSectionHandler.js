import { __generator } from "tslib";
import { invalidArgumentsProvided } from "../../events/general";
import { selectLayout } from "../../store/layout/layoutSelectors";
import { put, select } from "redux-saga/effects";
import { validateSectionExists, validateSectionPlacement } from "./validation/layoutValidation";
import { layoutActions } from "../../store/layout";
import { layoutSectionMoved } from "../../events/layout";
import { resolveRelativeIndex } from "../../utils/arrayOps";
function validateAndResolve(commandCtx) {
    var ctx = commandCtx.ctx, _a = commandCtx.cmd.payload, sectionIndex = _a.sectionIndex, toIndex = _a.toIndex, layout = commandCtx.layout;
    if (!validateSectionExists(layout, sectionIndex)) {
        throw invalidArgumentsProvided(ctx, commandCtx.cmd, "Attempting to move non-existent section from index " + sectionIndex + ". There are only " + layout.sections.length + " sections.");
    }
    if (!validateSectionPlacement(layout, toIndex)) {
        throw invalidArgumentsProvided(ctx, commandCtx.cmd, "Attempting to move section to a wrong index " + toIndex + ". There are currently " + layout.sections.length + " sections.");
    }
    var absoluteIndex = resolveRelativeIndex(layout.sections, toIndex);
    if (sectionIndex === absoluteIndex) {
        throw invalidArgumentsProvided(ctx, commandCtx.cmd, "Attempting to move section to a same index where it already resides " + sectionIndex + ".");
    }
    return {
        absoluteIndex: absoluteIndex,
    };
}
export function moveLayoutSectionHandler(ctx, cmd) {
    var commandCtx, _a, absoluteIndex, _b, sectionIndex, toIndex, section;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = {
                    ctx: ctx,
                    cmd: cmd
                };
                return [4 /*yield*/, select(selectLayout)];
            case 1:
                commandCtx = (_a.layout = _c.sent(),
                    _a);
                absoluteIndex = validateAndResolve(commandCtx).absoluteIndex;
                _b = cmd.payload, sectionIndex = _b.sectionIndex, toIndex = _b.toIndex;
                return [4 /*yield*/, put(layoutActions.moveSection({
                        sectionIndex: sectionIndex,
                        toIndex: toIndex,
                        undo: {
                            cmd: cmd,
                        },
                    }))];
            case 2:
                _c.sent();
                section = commandCtx.layout.sections[sectionIndex];
                return [2 /*return*/, layoutSectionMoved(ctx, section, sectionIndex, absoluteIndex, cmd.correlationId)];
        }
    });
}
//# sourceMappingURL=moveLayoutSectionHandler.js.map
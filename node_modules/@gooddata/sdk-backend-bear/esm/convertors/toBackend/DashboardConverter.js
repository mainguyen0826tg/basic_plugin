import { __assign, __rest } from "tslib";
// (C) 2007-2021 GoodData Corporation
import { isDashboardLayout, layoutWidgets, isDashboardDateFilterReference, isLegacyKpiWithComparison, isWidget, isTempFilterContext, isDashboardDateFilter, isFilterContext, UnexpectedError, isDrillToInsight, isDrillToLegacyDashboard, isDrillToDashboard, isDrillToCustomUrl, isDrillToAttributeUrl, isWidgetDefinition, NotSupported, isDrillFromAttribute, isDrillFromMeasure, } from "@gooddata/sdk-backend-spi";
import { isUriRef, isAttributeElementsByValue, isIdentifierRef, isLocalIdRef, } from "@gooddata/sdk-model";
import invariant from "ts-invariant";
import { convertUrisToReferences } from "../fromBackend/ReferenceConverter";
import isEmpty from "lodash/isEmpty";
import omitBy from "lodash/omitBy";
import { serializeProperties } from "../fromBackend/PropertiesConverter";
var refToUri = function (ref) {
    invariant(isUriRef(ref));
    return ref.uri;
};
var refToIdentifier = function (ref) {
    invariant(isIdentifierRef(ref));
    return ref.identifier;
};
var refToLocalId = function (ref) {
    invariant(isLocalIdRef(ref));
    return ref.localIdentifier;
};
export var convertLayoutSize = function (size) {
    var converted = {
        width: size.gridWidth,
    };
    if (size.gridHeight) {
        converted.height = size.gridHeight;
    }
    if (size.heightAsRatio) {
        converted.heightAsRatio = size.heightAsRatio;
    }
    return converted;
};
export var convertLayoutItemSize = function (column) {
    var allScreens = ["xl", "md", "lg", "sm", "xs"];
    return allScreens.reduce(function (acc, el) {
        var _a;
        var size = column[el];
        if (size) {
            return __assign(__assign({}, acc), (_a = {}, _a[el] = convertLayoutSize(size), _a));
        }
        return acc;
    }, {});
};
var convertLayoutItem = function (column) {
    var size = column.size, widget = column.widget;
    if (isWidget(widget)) {
        return {
            size: convertLayoutItemSize(size),
            content: {
                widget: { qualifier: { uri: refToUri(widget.ref) } },
            },
        };
    }
    else if (isDashboardLayout(widget)) {
        return {
            size: convertLayoutItemSize(size),
            content: convertLayout(widget),
        };
    }
    else if (isWidgetDefinition(widget)) {
        // This should never happen -> widgets in the layout should be already saved
        throw new UnexpectedError("Cannot convert layout widget definition to bear model!");
    }
    return {
        size: convertLayoutItemSize(size),
    };
};
var convertLayoutSection = function (section) {
    var _a, _b;
    var convertedRow = {
        columns: section.items.map(function (column) { return convertLayoutItem(column); }),
    };
    if (section.header) {
        // Ignore empty strings in header
        var headerWithoutEmptyStrings = omitBy(section.header, function (x) { return !x; });
        var isEmptyHeader = isEmpty(headerWithoutEmptyStrings);
        if (!isEmptyHeader) {
            var header = {};
            if ((_a = section.header) === null || _a === void 0 ? void 0 : _a.title) {
                header.title = section.header.title;
            }
            if ((_b = section.header) === null || _b === void 0 ? void 0 : _b.description) {
                header.description = section.header.description;
            }
            convertedRow.header = header;
        }
    }
    return convertedRow;
};
var convertLayout = function (layout) {
    var sections = layout.sections;
    var convertedLayout = {
        fluidLayout: {
            rows: sections.map(convertLayoutSection),
        },
    };
    if (layout.size) {
        convertedLayout.fluidLayout.size = convertLayoutSize(layout.size);
    }
    return convertedLayout;
};
export var convertFilterContextItem = function (filterContextItem) {
    if (isDashboardDateFilter(filterContextItem)) {
        var _a = filterContextItem.dateFilter, granularity = _a.granularity, type = _a.type, attribute = _a.attribute, dataSet = _a.dataSet, from = _a.from, to = _a.to;
        var convertedDateFilter = {
            dateFilter: {
                granularity: granularity,
                type: type,
                from: from === null || from === void 0 ? void 0 : from.toString(),
                to: to === null || to === void 0 ? void 0 : to.toString(),
            },
        };
        if (attribute) {
            convertedDateFilter.dateFilter.attribute = refToUri(attribute);
        }
        if (dataSet) {
            convertedDateFilter.dateFilter.dataSet = refToUri(dataSet);
        }
        return convertedDateFilter;
    }
    var _b = filterContextItem.attributeFilter, attributeElements = _b.attributeElements, displayForm = _b.displayForm, negativeSelection = _b.negativeSelection, localIdentifier = _b.localIdentifier, _c = _b.filterElementsBy, filterElementsBy = _c === void 0 ? [] : _c;
    var displayFormUri = refToUri(displayForm);
    var convertedAttributeFilterParents = filterElementsBy.map(function (filterElementsByItem) {
        return {
            filterLocalIdentifier: filterElementsByItem.filterLocalIdentifier,
            over: {
                attributes: filterElementsByItem.over.attributes.map(refToUri),
            },
        };
    });
    if (isAttributeElementsByValue(attributeElements)) {
        throw new NotSupported("Bear backend does not support value attribute filters in analytical dashboards");
    }
    return {
        attributeFilter: {
            negativeSelection: negativeSelection,
            attributeElements: attributeElements.uris,
            displayForm: displayFormUri,
            localIdentifier: localIdentifier,
            filterElementsBy: convertedAttributeFilterParents,
        },
    };
};
export function convertFilterContext(filterContext) {
    if (isTempFilterContext(filterContext)) {
        var created = filterContext.created, filters_1 = filterContext.filters;
        return {
            tempFilterContext: __assign({ created: created, filters: filters_1.map(convertFilterContextItem) }, (filterContext
                ? {
                    uri: refToUri(filterContext.ref),
                }
                : {})),
        };
    }
    var description = filterContext.description, filters = filterContext.filters, title = filterContext.title;
    return {
        filterContext: {
            content: {
                filters: filters.map(convertFilterContextItem),
            },
            meta: __assign({ summary: description, title: title }, (isFilterContext(filterContext)
                ? {
                    uri: refToUri(filterContext),
                    identifier: filterContext.identifier,
                }
                : {})),
        },
    };
}
var convertFilterReference = function (filterReference) {
    if (isDashboardDateFilterReference(filterReference)) {
        return {
            dateFilterReference: {
                dataSet: refToUri(filterReference.dataSet),
            },
        };
    }
    return {
        attributeFilterReference: {
            displayForm: refToUri(filterReference.displayForm),
        },
    };
};
export function convertDrill(drill) {
    if (isDrillToLegacyDashboard(drill)) {
        var tab = drill.tab;
        return {
            projectDashboard: refToUri(drill.target),
            projectDashboardTab: tab,
        };
    }
    var origin = drill.origin;
    var drillFrom;
    if (isDrillFromMeasure(origin)) {
        var measure = origin.measure;
        drillFrom = {
            drillFromMeasure: {
                localIdentifier: refToLocalId(measure),
            },
        };
    }
    else if (isDrillFromAttribute(origin)) {
        var attribute = origin.attribute;
        drillFrom = {
            drillFromAttribute: {
                localIdentifier: refToLocalId(attribute),
            },
        };
    }
    else {
        throw new UnexpectedError("Unable to convert unknown drill origin!");
    }
    if (isDrillToDashboard(drill)) {
        return {
            drillToDashboard: {
                from: drillFrom,
                target: "in-place",
                toDashboard: drill.target !== undefined ? refToIdentifier(drill.target) : undefined,
            },
        };
    }
    else if (isDrillToInsight(drill)) {
        return {
            drillToVisualization: {
                from: drillFrom,
                target: "pop-up",
                toVisualization: {
                    uri: refToUri(drill.target),
                },
            },
        };
    }
    else if (isDrillToCustomUrl(drill)) {
        return {
            drillToCustomUrl: {
                from: drillFrom,
                target: "new-window",
                customUrl: drill.target.url,
            },
        };
    }
    else if (isDrillToAttributeUrl(drill)) {
        return {
            drillToAttributeUrl: {
                from: drillFrom,
                target: "new-window",
                drillToAttributeDisplayForm: { uri: refToUri(drill.target.hyperlinkDisplayForm) },
                insightAttributeDisplayForm: { uri: refToUri(drill.target.displayForm) },
            },
        };
    }
    throw new UnexpectedError("Unable to convert unknown drill!");
}
export var convertWidget = function (widget) {
    var ignoreDashboardFilters = widget.ignoreDashboardFilters, dateDataSet = widget.dateDataSet, title = widget.title, description = widget.description, drills = widget.drills;
    var meta = __assign(__assign({}, (isWidget(widget)
        ? {
            identifier: widget.identifier,
            uri: refToUri(widget.ref),
        }
        : {})), { title: title, summary: description });
    var convertedDateDataSet = dateDataSet && refToUri(dateDataSet);
    var convertedIgnoredDashboardFilters = ignoreDashboardFilters.map(convertFilterReference);
    if (widget.type === "kpi") {
        invariant(widget.kpi, "Widget type is kpi, but kpi props are not defined!");
        var kpi = widget.kpi;
        return {
            kpi: {
                content: __assign(__assign({}, (isLegacyKpiWithComparison(kpi)
                    ? {
                        comparisonDirection: kpi.comparisonDirection,
                        comparisonType: kpi.comparisonType,
                    }
                    : {
                        comparisonType: kpi.comparisonType,
                    })), { metric: refToUri(kpi.metric), ignoreDashboardFilters: convertedIgnoredDashboardFilters, dateDataSet: convertedDateDataSet, drillTo: drills.length > 0 ? convertDrill(drills[0]) : undefined }),
                meta: meta,
            },
        };
    }
    var insight = widget.insight, _a = widget.properties, widgetProperties = _a === void 0 ? {} : _a;
    var _b = convertUrisToReferences({
        properties: widgetProperties,
        references: {},
    }), properties = _b.properties, references = _b.references;
    var nonEmptyProperties = omitBy(properties, function (value, key) { return key !== "controls" && isEmpty(value); });
    return {
        visualizationWidget: {
            content: __assign(__assign({ visualization: refToUri(insight), ignoreDashboardFilters: convertedIgnoredDashboardFilters, dateDataSet: convertedDateDataSet, drills: drills
                    ? drills.map(convertDrill)
                    : [] }, (!isEmpty(nonEmptyProperties) && {
                properties: serializeProperties(nonEmptyProperties),
            })), (!isEmpty(references) && { references: references })),
            meta: meta,
        },
    };
};
var convertAbsoluteDateFilterPreset = function (preset) {
    var _ = preset.type, rest = __rest(preset, ["type"]);
    return rest;
};
var convertRelativeDateFilterPreset = function (preset) {
    var _ = preset.type, rest = __rest(preset, ["type"]);
    return rest;
};
var convertDateFilterConfig = function (config) {
    var _a, _b, _c, _d;
    var absolutePresets = (_b = (_a = config.addPresets) === null || _a === void 0 ? void 0 : _a.absolutePresets) === null || _b === void 0 ? void 0 : _b.map(convertAbsoluteDateFilterPreset);
    var relativePresets = (_d = (_c = config.addPresets) === null || _c === void 0 ? void 0 : _c.relativePresets) === null || _d === void 0 ? void 0 : _d.map(convertRelativeDateFilterPreset);
    var addPresets = absolutePresets || relativePresets
        ? __assign(__assign({}, (absolutePresets && { absolutePresets: absolutePresets })), (relativePresets && { relativePresets: relativePresets })) : undefined;
    return __assign(__assign({}, config), (addPresets && { addPresets: addPresets }));
};
export var convertPluginLink = function (pluginLink) {
    var plugin = pluginLink.plugin, parameters = pluginLink.parameters;
    return {
        type: refToUri(plugin),
        parameters: parameters,
    };
};
export var convertDashboard = function (dashboard) {
    var filterContext = dashboard.filterContext, layout = dashboard.layout, ref = dashboard.ref, identifier = dashboard.identifier, title = dashboard.title, description = dashboard.description, dateFilterConfig = dashboard.dateFilterConfig, isLocked = dashboard.isLocked, tags = dashboard.tags, plugins = dashboard.plugins, shareStatus = dashboard.shareStatus, isUnderStrictControl = dashboard.isUnderStrictControl;
    var convertedLayout = layout && convertLayout(layout);
    var widgets = layout && layoutWidgets(layout);
    var dashboardUri = ref && refToUri(ref);
    var filterContextUri = (filterContext === null || filterContext === void 0 ? void 0 : filterContext.ref) && refToUri(filterContext.ref);
    var convertedDateFilterConfig = dateFilterConfig && convertDateFilterConfig(dateFilterConfig);
    var convertedPlugins = plugins === null || plugins === void 0 ? void 0 : plugins.map(convertPluginLink);
    var sharedWithSomeoneProp = shareStatus === "shared"
        ? {
            sharedWithSomeone: 1,
        }
        : {};
    var flagsProp = {};
    if (isUnderStrictControl !== undefined) {
        flagsProp = isUnderStrictControl
            ? {
                flags: ["strictAccessControl"],
            }
            : {
                flags: [],
            };
    }
    return {
        analyticalDashboard: {
            content: __assign(__assign(__assign({}, (convertedDateFilterConfig && { dateFilterConfig: convertedDateFilterConfig })), (convertedPlugins && !isEmpty(convertedPlugins) && { plugins: convertedPlugins })), { filterContext: filterContextUri, widgets: widgets ? widgets.filter(isWidget).map(function (widget) { return refToUri(widget.ref); }) : [], layout: convertedLayout }),
            meta: __assign(__assign(__assign(__assign({}, (dashboardUri
                ? {
                    uri: dashboardUri,
                    identifier: identifier,
                }
                : {})), { title: title, summary: description, locked: isLocked, tags: tags === null || tags === void 0 ? void 0 : tags.join(" "), unlisted: shareStatus === "public" ? 0 : 1 }), sharedWithSomeoneProp), flagsProp),
        },
    };
};
export var convertWidgetAlert = function (alert) {
    var dashboard = alert.dashboard, widget = alert.widget, description = alert.description, isTriggered = alert.isTriggered, threshold = alert.threshold, title = alert.title, whenTriggered = alert.whenTriggered, ref = alert.ref, identifier = alert.identifier, filterContext = alert.filterContext;
    var alertUri = ref && refToUri(ref);
    return {
        kpiAlert: {
            content: {
                filterContext: (filterContext === null || filterContext === void 0 ? void 0 : filterContext.ref) && refToUri(filterContext.ref),
                dashboard: refToUri(dashboard),
                kpi: refToUri(widget),
                isTriggered: isTriggered,
                threshold: threshold,
                whenTriggered: whenTriggered,
            },
            meta: __assign(__assign({}, (alertUri
                ? {
                    uri: alertUri,
                    identifier: identifier,
                }
                : {})), { title: title, summary: description }),
        },
    };
};
export var convertScheduledMailAttachment = function (scheduledMailAttachment) {
    var dashboard = scheduledMailAttachment.dashboard, format = scheduledMailAttachment.format, filterContext = scheduledMailAttachment.filterContext;
    return {
        kpiDashboardAttachment: {
            uri: refToUri(dashboard),
            format: format,
            filterContext: filterContext && refToUri(filterContext),
        },
    };
};
export var convertScheduledMail = function (scheduledMail) {
    var title = scheduledMail.title, description = scheduledMail.description, uri = scheduledMail.uri, identifier = scheduledMail.identifier, body = scheduledMail.body, subject = scheduledMail.subject, to = scheduledMail.to, when = scheduledMail.when, bcc = scheduledMail.bcc, lastSuccessful = scheduledMail.lastSuccessful, unsubscribed = scheduledMail.unsubscribed, attachments = scheduledMail.attachments, unlisted = scheduledMail.unlisted;
    return {
        scheduledMail: {
            content: {
                attachments: attachments.map(convertScheduledMailAttachment),
                body: body,
                subject: subject,
                to: to,
                when: {
                    startDate: when.startDate,
                    endDate: when.endDate,
                    timeZone: when.timeZone,
                    recurrency: when.recurrence,
                },
                bcc: bcc,
                lastSuccessfull: lastSuccessful,
                unsubscribed: unsubscribed,
            },
            meta: __assign(__assign({ unlisted: unlisted ? 1 : 0 }, (uri
                ? {
                    uri: uri,
                    identifier: identifier,
                }
                : {})), { title: title, summary: description }),
        },
    };
};
export var convertDashboardPlugin = function (plugin) {
    var uri = plugin.uri, identifier = plugin.identifier, name = plugin.name, tags = plugin.tags, description = plugin.description, url = plugin.url;
    return {
        dashboardPlugin: {
            content: {
                url: url,
            },
            meta: __assign(__assign({}, (uri ? { uri: uri, identifier: identifier } : {})), { title: name, summary: description, tags: tags === null || tags === void 0 ? void 0 : tags.join(" ") }),
        },
    };
};
//# sourceMappingURL=DashboardConverter.js.map
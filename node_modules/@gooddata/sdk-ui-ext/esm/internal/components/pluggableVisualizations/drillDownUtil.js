import { __assign, __spreadArrays } from "tslib";
// (C) 2020-2021 GoodData Corporation
import { areObjRefsEqual, attributeLocalId, bucketItemLocalId, insightItems, insightModifyItems, insightProperties, insightReduceItems, insightSetFilters, insightSetProperties, isAttribute, modifyAttribute, newPositiveAttributeFilter, } from "@gooddata/sdk-model";
import { getIntersectionPartAfter, isDrillIntersectionAttributeItem, } from "@gooddata/sdk-ui";
import { drillDownDisplayForm, drillDownFromAttributeLocalId } from "../../utils/ImplicitDrillDownHelper";
import { isAttributeColumnWidthItem } from "@gooddata/sdk-ui-pivot";
function matchesDrillDownTargetAttribute(drillDefinition, attribute) {
    return attributeLocalId(attribute) === drillDownFromAttributeLocalId(drillDefinition);
}
var ENUM_PROPERTIES_TYPE;
(function (ENUM_PROPERTIES_TYPE) {
    ENUM_PROPERTIES_TYPE["CONTROLS"] = "controls";
})(ENUM_PROPERTIES_TYPE || (ENUM_PROPERTIES_TYPE = {}));
export function modifyBucketsAttributesForDrillDown(insight, drillDefinition) {
    var removedLeftAttributes = insightReduceItems(insight, function (acc, cur) {
        if (isAttribute(cur) && matchesDrillDownTargetAttribute(drillDefinition, cur)) {
            return [cur];
        }
        return __spreadArrays(acc, [cur]);
    });
    var replacedDrill = insightModifyItems(removedLeftAttributes, function (bucketItem) {
        if (isAttribute(bucketItem) && matchesDrillDownTargetAttribute(drillDefinition, bucketItem)) {
            var displayForm_1 = drillDownDisplayForm(drillDefinition);
            return modifyAttribute(bucketItem, function (a) { return a.displayForm(displayForm_1).noAlias(); });
        }
        return bucketItem;
    });
    // remove duplicate attributes
    return insightReduceItems(replacedDrill, function (acc, cur) {
        if (isAttribute(cur)) {
            var alreadyContainsTarget = acc
                .filter(isAttribute)
                .find(function (attr) { return areObjRefsEqual(cur.attribute.displayForm, attr.attribute.displayForm); });
            return alreadyContainsTarget ? acc : __spreadArrays(acc, [cur]);
        }
        return __spreadArrays(acc, [cur]);
    });
}
function removePropertiesForRemovedAttributes(insight) {
    var properties = insightProperties(insight);
    if (!properties) {
        return insight;
    }
    var identifiers = insightItems(insight).map(function (bucketItem) {
        return bucketItemLocalId(bucketItem);
    });
    var result = Object.entries(properties).reduce(function (acc, _a) {
        var _b;
        var key = _a[0], value = _a[1];
        if (key === ENUM_PROPERTIES_TYPE.CONTROLS && value.columnWidths) {
            var columns = value.columnWidths.filter(function (columnWidth) {
                if (isAttributeColumnWidthItem(columnWidth)) {
                    return identifiers.includes(columnWidth.attributeColumnWidthItem.attributeIdentifier);
                }
                return true;
            });
            return __assign(__assign({}, acc), (_b = {}, _b[key] = {
                columnWidths: columns,
            }, _b));
        }
        return __assign({}, acc);
    }, properties);
    return insightSetProperties(insight, result);
}
export function sanitizeTableProperties(insight) {
    return removePropertiesForRemovedAttributes(insight);
}
export function convertIntersectionToFilters(intersections) {
    return intersections
        .map(function (intersection) { return intersection.header; })
        .filter(isDrillIntersectionAttributeItem)
        .map(function (header) {
        return newPositiveAttributeFilter(header.attributeHeader.ref, {
            uris: [header.attributeHeaderItem.uri],
        });
    });
}
export function reverseAndTrimIntersection(drillConfig, intersection) {
    if (!intersection || intersection.length === 0) {
        return intersection;
    }
    var clicked = drillDownFromAttributeLocalId(drillConfig);
    var reorderedIntersection = intersection.slice().reverse();
    return getIntersectionPartAfter(reorderedIntersection, clicked);
}
/**
 * @internal
 */
export function addIntersectionFiltersToInsight(source, intersection) {
    var filters = convertIntersectionToFilters(intersection);
    var resultFilters = __spreadArrays(source.insight.filters, filters);
    return insightSetFilters(source, resultFilters);
}
//# sourceMappingURL=drillDownUtil.js.map
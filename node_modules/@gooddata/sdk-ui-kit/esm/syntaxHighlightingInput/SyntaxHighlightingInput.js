import { __assign } from "tslib";
// (C) 2020 GoodData Corporation
import React from "react";
import cx from "classnames";
import { UnControlled as CodeMirrorInput } from "react-codemirror2";
import CodeMirror from "codemirror";
import "codemirror/lib/codemirror.css";
import "codemirror/addon/mode/simple";
import "codemirror/addon/edit/matchbrackets";
import "codemirror/addon/display/placeholder";
var CODE_MIRROR_EOL = "\n";
var defaultOptions = {
    autofocus: false,
    lineWrapping: true,
    matchBrackets: true,
};
var findCursorIndexAcrossMultipleLines = function (text, cursorLineIndex, cursorLineCharacterIndex) {
    var getLineLengthToCursor = function (line, lineIndex) {
        if (lineIndex > cursorLineIndex) {
            return 0;
        }
        return lineIndex < cursorLineIndex ? line.length + CODE_MIRROR_EOL.length : cursorLineCharacterIndex;
    };
    return text
        .split(CODE_MIRROR_EOL)
        .map(getLineLengthToCursor)
        .reduce(function (sum, lineLength) { return sum + lineLength; }, 0);
};
/**
 * @internal
 */
export var SyntaxHighlightingInput = function (props) {
    var value = props.value, onChange = props.onChange, onCursor = props.onCursor, formatting = props.formatting, customOptions = props.customOptions, className = props.className;
    var reportCursorPosition = function (editor) {
        if (onCursor) {
            var from = editor.getCursor("from");
            var to = editor.getCursor("to");
            var currentValue = editor.getValue();
            onCursor(findCursorIndexAcrossMultipleLines(currentValue, from.line, from.ch), findCursorIndexAcrossMultipleLines(currentValue, to.line, to.ch));
        }
    };
    var handleOnChange = function (_editor, _change, value) {
        onChange(value);
    };
    var modeOptions = formatting && {
        name: "format",
        fn: CodeMirror.defineSimpleMode("syntaxHighlight", formatting),
    };
    return (React.createElement(CodeMirrorInput, { className: cx(className, "gd-input-syntax-highlighting-input"), value: value, defineMode: modeOptions, onChange: handleOnChange, onCursorActivity: reportCursorPosition, autoCursor: false, options: __assign(__assign({}, defaultOptions), customOptions) }));
};
//# sourceMappingURL=SyntaxHighlightingInput.js.map
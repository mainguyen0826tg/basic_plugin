import React from "react";
import { WrappedComponentProps } from "react-intl";
import { IAnalyticalBackend, IKpiWidget, IKpiWidgetDefinition, ISeparators, IWidgetAlert } from "@gooddata/sdk-backend-spi";
import { IMeasure, IPoPMeasureDefinition, IPreviousPeriodMeasureDefinition, ObjRef } from "@gooddata/sdk-model";
import { ExplicitDrill, IErrorProps, ILoadingProps, OnError } from "@gooddata/sdk-ui";
import { OnFiredDashboardViewDrillEvent, IDashboardFilter } from "../../types";
interface IKpiExecutorProps {
    dashboardRef: ObjRef;
    kpiWidget: IKpiWidget | IKpiWidgetDefinition;
    primaryMeasure: IMeasure;
    secondaryMeasure?: IMeasure<IPoPMeasureDefinition> | IMeasure<IPreviousPeriodMeasureDefinition>;
    alert?: IWidgetAlert;
    /**
     * Filters that should be used for the execution
     */
    effectiveFilters?: IDashboardFilter[];
    /**
     * All filters that are currently set (this is useful for broken alert filters, where we need even
     * the filters ignored for execution)
     */
    allFilters?: IDashboardFilter[];
    onFiltersChange?: (filters: IDashboardFilter[]) => void;
    drillableItems?: ExplicitDrill[];
    onDrill?: OnFiredDashboardViewDrillEvent;
    onError?: OnError;
    backend: IAnalyticalBackend;
    workspace: string;
    separators: ISeparators;
    disableDrillUnderline?: boolean;
    isReadOnly?: boolean;
    ErrorComponent: React.ComponentType<IErrorProps>;
    LoadingComponent: React.ComponentType<ILoadingProps>;
}
/**
 * Executes the given measures and displays them as KPI
 * @internal
 */
export declare const KpiExecutor: React.ForwardRefExoticComponent<Pick<IKpiExecutorProps & WrappedComponentProps<"intl">, "alert" | "onError" | "separators" | "drillableItems" | "ErrorComponent" | "LoadingComponent" | "onDrill" | "workspace" | "backend" | "kpiWidget" | "isReadOnly" | "disableDrillUnderline" | "dashboardRef" | "primaryMeasure" | "secondaryMeasure" | "allFilters" | "effectiveFilters" | "onFiltersChange"> & {
    forwardedRef?: React.Ref<any>;
} & React.RefAttributes<any>> & {
    WrappedComponent: React.ComponentType<IKpiExecutorProps & WrappedComponentProps<"intl">>;
};
export {};
//# sourceMappingURL=KpiExecutor.d.ts.map
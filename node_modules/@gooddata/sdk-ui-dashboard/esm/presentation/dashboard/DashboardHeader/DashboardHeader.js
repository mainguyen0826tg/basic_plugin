// (C) 2021 GoodData Corporation
import React, { useCallback, useMemo, useRef } from "react";
import { useIntl } from "react-intl";
import { isProtectedDataError, } from "@gooddata/sdk-backend-spi";
import { ToastMessages, useToastMessage } from "@gooddata/sdk-ui-kit";
import { changeAttributeFilterSelection, changeDateFilterSelection, clearDateFilterSelection, exportDashboardToPdf, renameDashboard, selectDashboardRef, selectDashboardTitle, selectFilterContextFilters, selectIsLayoutEmpty, selectIsReadOnly, selectIsSaveAsDialogOpen, selectIsScheduleEmailDialogOpen, uiActions, useDashboardCommandProcessing, useDashboardDispatch, useDashboardSelector, } from "../../../model";
import { ExportDialogProvider } from "../../dialogs";
import { downloadFile } from "../../../_staging/fileUtils/downloadFile";
import { DefaultButtonBar, DefaultMenuButton, DefaultTopBar, TopBar } from "../../topBar";
import { ScheduledEmailDialog } from "../../scheduledEmail";
import { SaveAsDialog } from "../../saveAs";
import { DefaultFilterBar, FilterBar } from "../../filterBar";
import { ShareDialogDashboardHeader } from "./ShareDialogDashboardHeader";
var useFilterBar = function () {
    var filters = useDashboardSelector(selectFilterContextFilters);
    var dispatch = useDashboardDispatch();
    var onAttributeFilterChanged = useCallback(function (filter) {
        var _a = filter.attributeFilter, attributeElements = _a.attributeElements, negativeSelection = _a.negativeSelection, localIdentifier = _a.localIdentifier;
        dispatch(changeAttributeFilterSelection(localIdentifier, attributeElements, negativeSelection ? "NOT_IN" : "IN"));
    }, [dispatch]);
    var onDateFilterChanged = useCallback(function (filter, dateFilterOptionLocalId) {
        if (!filter) {
            // all time filter
            dispatch(clearDateFilterSelection());
        }
        else {
            var _a = filter.dateFilter, type = _a.type, granularity = _a.granularity, from = _a.from, to = _a.to;
            dispatch(changeDateFilterSelection(type, granularity, from, to, dateFilterOptionLocalId));
        }
    }, [dispatch]);
    return { filters: filters, onAttributeFilterChanged: onAttributeFilterChanged, onDateFilterChanged: onDateFilterChanged };
};
var useTopBar = function () {
    var dispatch = useDashboardDispatch();
    var title = useDashboardSelector(selectDashboardTitle);
    var isReadOnly = useDashboardSelector(selectIsReadOnly);
    var onTitleChanged = useCallback(function (title) {
        dispatch(renameDashboard(title));
    }, [dispatch]);
    var onShareButtonClick = useCallback(function () { return dispatch(uiActions.openShareDialog()); }, [dispatch]);
    return {
        title: title,
        onTitleChanged: isReadOnly ? undefined : onTitleChanged,
        onShareButtonClick: onShareButtonClick,
    };
};
// split the header parts of the dashboard so that changes to their state
// (e.g. opening email dialog) do not re-render the dashboard body
export var DashboardHeader = function () {
    var intl = useIntl();
    var dashboardRef = useDashboardSelector(selectDashboardRef);
    var isEmptyLayout = useDashboardSelector(selectIsLayoutEmpty);
    var _a = useFilterBar(), filters = _a.filters, onAttributeFilterChanged = _a.onAttributeFilterChanged, onDateFilterChanged = _a.onDateFilterChanged;
    var _b = useTopBar(), title = _b.title, onTitleChanged = _b.onTitleChanged, onShareButtonClick = _b.onShareButtonClick;
    var _c = useToastMessage(), addSuccess = _c.addSuccess, addError = _c.addError, addProgress = _c.addProgress, removeMessage = _c.removeMessage;
    var dispatch = useDashboardDispatch();
    var isScheduleEmailingDialogOpen = useDashboardSelector(selectIsScheduleEmailDialogOpen);
    var openScheduleEmailingDialog = function () { return dispatch(uiActions.openScheduleEmailDialog()); };
    var closeScheduleEmailingDialog = function () { return dispatch(uiActions.closeScheduleEmailDialog()); };
    var isSaveAsDialogOpen = useDashboardSelector(selectIsSaveAsDialogOpen);
    var openSaveAsDialog = function () { return dispatch(uiActions.openSaveAsDialog()); };
    var closeSaveAsDialog = function () { return dispatch(uiActions.closeSaveAsDialog()); };
    var lastExportMessageId = useRef("");
    var exportDashboard = useDashboardCommandProcessing({
        commandCreator: exportDashboardToPdf,
        successEvent: "GDC.DASH/EVT.EXPORT.PDF.RESOLVED",
        errorEvent: "GDC.DASH/EVT.COMMAND.FAILED",
        onBeforeRun: function () {
            lastExportMessageId.current = addProgress({ id: "messages.exportResultStart" }, 
            // make sure the message stays there until removed by either success or error
            { duration: 0 });
        },
        onSuccess: function (e) {
            if (lastExportMessageId.current) {
                removeMessage(lastExportMessageId.current);
            }
            addSuccess({ id: "messages.exportResultSuccess" });
            downloadFile(e.payload.resultUri);
        },
        onError: function (err) {
            if (lastExportMessageId.current) {
                removeMessage(lastExportMessageId.current);
            }
            if (isProtectedDataError(err)) {
                addError({ id: "messages.exportResultRestrictedError" });
            }
            else {
                addError({ id: "messages.exportResultError" });
            }
        },
    }).run;
    /*
     * exports and scheduling are not available when rendering a dashboard that is not persisted.
     * this can happen when a new dashboard is created and is being edited.
     *
     * the setup of menu items available in the menu needs to reflect this.
     */
    var defaultOnScheduleEmailing = useCallback(function () {
        if (!dashboardRef) {
            return;
        }
        openScheduleEmailingDialog();
    }, [dashboardRef]);
    var defaultOnSaveAs = useCallback(function () {
        if (!dashboardRef) {
            return;
        }
        openSaveAsDialog();
    }, [dashboardRef]);
    var defaultOnExportToPdf = useCallback(function () {
        if (!dashboardRef) {
            return;
        }
        exportDashboard();
    }, [exportDashboard, dashboardRef]);
    var isReadOnly = useDashboardSelector(selectIsReadOnly);
    var defaultMenuItems = useMemo(function () {
        if (!dashboardRef) {
            return [];
        }
        var isSaveAsDisabled = isEmptyLayout || !dashboardRef || isReadOnly;
        var isScheduledEmailingDisabled = isReadOnly;
        return [
            {
                type: "button",
                itemId: "save_as_menu_item",
                disabled: isSaveAsDisabled,
                itemName: intl.formatMessage({ id: "options.menu.save.as" }),
                tooltip: 
                // the tooltip is only relevant to non-read only states
                !isReadOnly && isSaveAsDisabled
                    ? intl.formatMessage({ id: "options.menu.save.as.tooltip" })
                    : undefined,
                onClick: defaultOnSaveAs,
            },
            {
                type: "button",
                itemId: "pdf-export-item",
                itemName: intl.formatMessage({ id: "options.menu.export.PDF" }),
                onClick: defaultOnExportToPdf,
            },
            {
                type: "button",
                itemId: "schedule-email-item",
                disabled: isScheduledEmailingDisabled,
                itemName: intl.formatMessage({ id: "options.menu.schedule.email" }),
                onClick: defaultOnScheduleEmailing,
            },
        ];
    }, [defaultOnScheduleEmailing, defaultOnExportToPdf, dashboardRef, isReadOnly]);
    var onScheduleEmailingError = useCallback(function () {
        closeScheduleEmailingDialog();
        addError({ id: "dialogs.schedule.email.submit.error" });
    }, []);
    var onScheduleEmailingSuccess = useCallback(function () {
        closeScheduleEmailingDialog();
        addSuccess({ id: "dialogs.schedule.email.submit.success" });
    }, []);
    var onScheduleEmailingCancel = useCallback(function () {
        closeScheduleEmailingDialog();
    }, []);
    var onSaveAsError = useCallback(function () {
        closeSaveAsDialog();
        addError({ id: "messages.dashboardSaveFailed" });
    }, []);
    var onSaveAsSuccess = useCallback(function () {
        closeSaveAsDialog();
        addSuccess({ id: "messages.dashboardSaveSuccess" });
    }, []);
    var onSaveAsCancel = useCallback(function () {
        closeSaveAsDialog();
    }, []);
    return (React.createElement(React.Fragment, null,
        React.createElement(ToastMessages, null),
        React.createElement(ExportDialogProvider, null),
        isScheduleEmailingDialogOpen && (React.createElement(ScheduledEmailDialog, { isVisible: isScheduleEmailingDialogOpen, onCancel: onScheduleEmailingCancel, onError: onScheduleEmailingError, onSuccess: onScheduleEmailingSuccess })),
        React.createElement(ShareDialogDashboardHeader, null),
        isSaveAsDialogOpen && (React.createElement(SaveAsDialog, { isVisible: isSaveAsDialogOpen, onCancel: onSaveAsCancel, onError: onSaveAsError, onSuccess: onSaveAsSuccess })),
        React.createElement(TopBar, { menuButtonProps: { menuItems: defaultMenuItems, DefaultMenuButton: DefaultMenuButton }, titleProps: { title: title, onTitleChanged: onTitleChanged }, buttonBarProps: {
                shareButtonProps: { onShareButtonClick: onShareButtonClick },
                DefaultButtonBar: DefaultButtonBar,
            }, DefaultTopBar: DefaultTopBar }),
        React.createElement(FilterBar, { filters: filters, onAttributeFilterChanged: onAttributeFilterChanged, onDateFilterChanged: onDateFilterChanged, DefaultFilterBar: DefaultFilterBar })));
};
//# sourceMappingURL=DashboardHeader.js.map
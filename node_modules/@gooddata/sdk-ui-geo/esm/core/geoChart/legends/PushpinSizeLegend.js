// (C) 2020 GoodData Corporation
import React from "react";
import cx from "classnames";
import { calculateAverage } from "../helpers/geoChart/common";
import { formatLegendLabel } from "@gooddata/sdk-ui-vis-commons";
export default function PushpinSizeLegend(props) {
    var _a = props.sizes, sizes = _a === void 0 ? [] : _a, format = props.format, _b = props.numericSymbols, numericSymbols = _b === void 0 ? [] : _b, measureName = props.measureName, isSmall = props.isSmall, showMiddleCircle = props.showMiddleCircle;
    var sizeData = getSizeData(sizes);
    if (!sizeData.length) {
        return null;
    }
    var min = getMin(sizeData);
    var max = getMax(sizeData);
    if (min === max) {
        return null;
    }
    var diff = max - min;
    var classNamesContainer = cx("pushpin-size-legend s-pushpin-size-legend", {
        "is-small-container": isSmall
    });
    var classNamesCircles = cx("pushpin-size-legend-circle-list", { "is-small-circles": isSmall });
    return (React.createElement("div", { className: classNamesContainer },
        measureName && (React.createElement("div", { className: "metric-name", title: measureName },
            measureName,
            ":")),
        React.createElement("div", { className: classNamesCircles },
            React.createElement("div", { className: "pushpin-size-legend-circle circle-min-value" },
                React.createElement("span", { className: "circle-min-icon" }),
                React.createElement("span", { className: "circle-value" }, formatLegendLabel(min, format, diff, numericSymbols))),
            showMiddleCircle && renderMiddleCircle(props),
            !measureName && React.createElement("div", { className: "circle-separator" }),
            React.createElement("div", { className: "pushpin-size-legend-circle circle-max-value" },
                React.createElement("span", { className: "circle-max-icon" }),
                React.createElement("span", { className: "circle-value" }, formatLegendLabel(max, format, diff, numericSymbols))))));
}
function renderMiddleCircle(props) {
    var _a = props.sizes, sizes = _a === void 0 ? [] : _a, format = props.format, _b = props.numericSymbols, numericSymbols = _b === void 0 ? [] : _b, measureName = props.measureName;
    var sizeData = getSizeData(sizes);
    var diff = getMax(sizeData) - getMin(sizeData);
    return (React.createElement(React.Fragment, null,
        !measureName && React.createElement("div", { className: "circle-separator" }),
        React.createElement("div", { className: "pushpin-size-legend-circle circle-average-value" },
            React.createElement("span", { className: "circle-average-icon" }),
            React.createElement("span", { className: "circle-value" }, formatLegendLabel(calculateAverage(sizeData), format, diff, numericSymbols)))));
}
function getSizeData(sizes) {
    return sizes.filter(function (value) { return value !== null && isFinite && !isNaN(value); });
}
function getMin(sizeData) {
    return Math.min.apply(Math, sizeData);
}
function getMax(sizeData) {
    return Math.max.apply(Math, sizeData);
}
//# sourceMappingURL=PushpinSizeLegend.js.map
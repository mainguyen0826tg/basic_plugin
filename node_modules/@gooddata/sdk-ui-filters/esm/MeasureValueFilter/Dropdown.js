import { __assign, __extends } from "tslib";
// (C) 2019 GoodData Corporation
import React from "react";
import { injectIntl } from "react-intl";
import { IntlWrapper } from "@gooddata/sdk-ui";
import { Overlay } from "@gooddata/sdk-ui-kit";
import { DropdownBody } from "./DropdownBody";
var alignPoints = ["bl tl", "tl bl", "br tr", "tr br"];
/*
 * TODO: same thing is in sdk-ui-ext .. but filters must not depend on it. we may be in need of some lower-level
 *  project on which both of filters and ext can depend. perhaps the purpose of the new project would be to provide
 *  thin layer on top of goodstrap (?)
 */
var DROPDOWN_ALIGNMENTS = alignPoints.map(function (align) { return ({ align: align, offset: { x: 1, y: 0 } }); });
var DropdownWrapped = /** @class */ (function (_super) {
    __extends(DropdownWrapped, _super);
    function DropdownWrapped() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onApply = function (operator, value, treatNullValuesAsZero) {
            _this.props.onApply(operator, value, treatNullValuesAsZero);
        };
        return _this;
    }
    DropdownWrapped.prototype.render = function () {
        var _a = this.props, operator = _a.operator, value = _a.value, usePercentage = _a.usePercentage, warningMessage = _a.warningMessage, locale = _a.locale, onCancel = _a.onCancel, anchorEl = _a.anchorEl, separators = _a.separators, displayTreatNullAsZeroOption = _a.displayTreatNullAsZeroOption, treatNullAsZeroValue = _a.treatNullAsZeroValue, enableOperatorSelection = _a.enableOperatorSelection;
        var selectedOperator = operator !== null ? operator : "ALL";
        return (React.createElement(Overlay, { alignTo: anchorEl, alignPoints: DROPDOWN_ALIGNMENTS, closeOnOutsideClick: true, closeOnParentScroll: true, closeOnMouseDrag: true, onClose: onCancel },
            React.createElement(DropdownBody, { operator: selectedOperator, value: value, usePercentage: usePercentage, warningMessage: warningMessage, locale: locale, onCancel: onCancel, onApply: this.onApply, separators: separators, displayTreatNullAsZeroOption: displayTreatNullAsZeroOption, treatNullAsZeroValue: treatNullAsZeroValue, enableOperatorSelection: enableOperatorSelection })));
    };
    DropdownWrapped.defaultProps = {
        value: {},
        operator: "ALL",
        displayTreatNullAsZeroOption: false,
        treatNullAsZeroValue: false,
    };
    return DropdownWrapped;
}(React.PureComponent));
export var DropdownWithIntl = injectIntl(DropdownWrapped);
var Dropdown = /** @class */ (function (_super) {
    __extends(Dropdown, _super);
    function Dropdown() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Dropdown.prototype.render = function () {
        return (React.createElement(IntlWrapper, { locale: this.props.locale },
            React.createElement(DropdownWithIntl, __assign({}, this.props))));
    };
    return Dropdown;
}(React.PureComponent));
export { Dropdown };
//# sourceMappingURL=Dropdown.js.map
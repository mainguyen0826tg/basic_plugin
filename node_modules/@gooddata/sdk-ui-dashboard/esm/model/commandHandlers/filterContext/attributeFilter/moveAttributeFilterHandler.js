import { __generator } from "tslib";
// (C) 2021 GoodData Corporation
import { call, put, select } from "redux-saga/effects";
import { invalidArgumentsProvided } from "../../../events/general";
import { attributeFilterMoved } from "../../../events/filters";
import { filterContextActions } from "../../../store/filterContext";
import { selectFilterContextAttributeFilterByLocalId, selectFilterContextAttributeFilterIndexByLocalId, selectFilterContextFilters, } from "../../../store/filterContext/filterContextSelectors";
import { dispatchFilterContextChanged } from "../common";
import { dispatchDashboardEvent } from "../../../store/_infra/eventDispatcher";
export function moveAttributeFilterHandler(ctx, cmd) {
    var _a, filterLocalId, index, affectedFilter, allFilters, maximalTargetIndex, originalIndex, finalIndex;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = cmd.payload, filterLocalId = _a.filterLocalId, index = _a.index;
                return [4 /*yield*/, select(selectFilterContextAttributeFilterByLocalId(filterLocalId))];
            case 1:
                affectedFilter = _b.sent();
                if (!affectedFilter) {
                    throw invalidArgumentsProvided(ctx, cmd, "Filter with filterLocalId " + filterLocalId + " not found.");
                }
                return [4 /*yield*/, select(selectFilterContextFilters)];
            case 2:
                allFilters = _b.sent();
                maximalTargetIndex = allFilters.length - 1;
                if (index > maximalTargetIndex || index < -1) {
                    throw invalidArgumentsProvided(ctx, cmd, "Invalid index (" + index + ") provided, it must be between -1 and " + maximalTargetIndex);
                }
                return [4 /*yield*/, select(selectFilterContextAttributeFilterIndexByLocalId(filterLocalId))];
            case 3:
                originalIndex = _b.sent();
                return [4 /*yield*/, put(filterContextActions.moveAttributeFilter({
                        filterLocalId: filterLocalId,
                        index: index,
                    }))];
            case 4:
                _b.sent();
                return [4 /*yield*/, select(selectFilterContextAttributeFilterIndexByLocalId(filterLocalId))];
            case 5:
                finalIndex = _b.sent();
                return [4 /*yield*/, dispatchDashboardEvent(attributeFilterMoved(ctx, affectedFilter, originalIndex, finalIndex, cmd.correlationId))];
            case 6:
                _b.sent();
                return [4 /*yield*/, call(dispatchFilterContextChanged, ctx, cmd)];
            case 7:
                _b.sent();
                return [2 /*return*/];
        }
    });
}
//# sourceMappingURL=moveAttributeFilterHandler.js.map
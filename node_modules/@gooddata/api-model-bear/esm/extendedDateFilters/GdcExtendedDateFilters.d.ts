import { GdcMetadata } from "../meta/GdcMetadata";
/**
 * @public
 */
export declare namespace GdcExtendedDateFilters {
    type GUID = string;
    type DateString = string;
    type RelativeGranularityOffset = number;
    type DateFilterGranularity = "GDC.time.date" | "GDC.time.week_us" | "GDC.time.month" | "GDC.time.quarter" | "GDC.time.year";
    interface IDateFilterBase {
        localIdentifier: GUID;
        name?: string;
        visible: boolean;
    }
    type IDateFilterAllTime = IDateFilterBase;
    type IDateFilterAbsoluteForm = IDateFilterBase;
    interface IDateFilterRelativeForm extends IDateFilterBase {
        granularities: DateFilterGranularity[];
    }
    interface IDateFilterAbsolutePreset extends IDateFilterBase {
        from: DateString;
        to: DateString;
    }
    interface IDateFilterRelativePreset extends IDateFilterBase {
        from: number;
        to: number;
        granularity: DateFilterGranularity;
    }
    interface IDateFilterConfigContent {
        selectedOption: GUID;
        allTime?: IDateFilterAllTime;
        absoluteForm?: IDateFilterAbsoluteForm;
        relativeForm?: IDateFilterRelativeForm;
        absolutePresets?: IDateFilterAbsolutePreset[];
        relativePresets?: IDateFilterRelativePreset[];
    }
    interface IDateFilterConfig {
        meta: GdcMetadata.IObjectMeta;
        content: IDateFilterConfigContent;
    }
    interface IWrappedDateFilterConfig {
        dateFilterConfig: IDateFilterConfig;
    }
    interface IDateFilterReference {
        dateFilterReference: {
            dataSet: string;
        };
    }
    const isDateFilterReference: (obj: unknown) => obj is IDateFilterReference;
    interface IAttributeFilterReference {
        attributeFilterReference: {
            displayForm: string;
        };
    }
    const isAttributeFilterReference: (obj: unknown) => obj is IAttributeFilterReference;
}
//# sourceMappingURL=GdcExtendedDateFilters.d.ts.map
import { __assign } from "tslib";
// (C) 2007-2021 GoodData Corporation
import memoizeOne from "memoize-one";
var getNewKey = function (key, stringToRemove) { return key.replace(stringToRemove, ""); };
var pickCorrectInsightWordingInner = function (translations, isEnabledInsightToReport) {
    var modifiedTranslations = {};
    Object.keys(translations).forEach(function (key) {
        if (key.includes("|report") || key.includes("|insight")) {
            var newKey = getNewKey(key, isEnabledInsightToReport ? "|report" : "|insight");
            modifiedTranslations[newKey] = translations[key];
        }
    });
    return __assign(__assign({}, translations), modifiedTranslations);
};
/**
 * Even this simple translations-reference-based cache is very effective as most of the time the 'translations'
 * objects come from some static constant.
 */
var memoizedPickCorrectInsightWordingInner = memoizeOne(pickCorrectInsightWordingInner);
/**
 * @beta
 */
export var pickCorrectInsightWording = function (translations, settings) {
    var isEnabledInsightToReport = !!(settings === null || settings === void 0 ? void 0 : settings.enableInsightToReport);
    return memoizedPickCorrectInsightWordingInner(translations, isEnabledInsightToReport);
};
/**
 * @beta
 */
export var removeAllInsightToReportTranslations = function (translations) {
    Object.keys(translations).forEach(function (key) {
        if (key.includes("|report") || key.includes("|insight")) {
            delete translations[key];
        }
    });
    return __assign({}, translations);
};
//# sourceMappingURL=utils.js.map
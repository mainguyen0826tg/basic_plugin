import { __awaiter, __generator } from "tslib";
import { useBackend, useWorkspace, useCancelablePromise, } from "@gooddata/sdk-ui";
import { filterContextItemsToFiltersForWidget, filterContextToFiltersForWidget } from "../../converters";
import { backendInvariant, workspaceInvariant } from "../utils";
/**
 * Hook allowing to get execution for particular insight widget.
 * @param config - configuration of the hook
 * @internal
 */
export function useDashboardInsightExecution(config) {
    var _this = this;
    var backend = config.backend, workspace = config.workspace, insightWidget = config.insightWidget, insight = config.insight, filters = config.filters, filterContext = config.filterContext;
    var effectiveBackend = useBackend(backend);
    var effectiveWorkspace = useWorkspace(workspace);
    backendInvariant(effectiveBackend, "useDashboardInsightExecution");
    workspaceInvariant(effectiveWorkspace, "useDashboardInsightExecution");
    var promise = insight && insightWidget
        ? function () { return __awaiter(_this, void 0, void 0, function () {
            var inputFilters, relevantFilters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        inputFilters = filters
                            ? filterContextItemsToFiltersForWidget(filters, insightWidget)
                            : filterContextToFiltersForWidget(filterContext, insightWidget);
                        return [4 /*yield*/, effectiveBackend
                                .workspace(effectiveWorkspace)
                                .dashboards()
                                .getResolvedFiltersForWidget(insightWidget, inputFilters)];
                    case 1:
                        relevantFilters = (_a.sent());
                        return [2 /*return*/, effectiveBackend
                                .workspace(effectiveWorkspace)
                                .execution()
                                .forInsight(insight, relevantFilters)];
                }
            });
        }); }
        : null;
    return useCancelablePromise({ promise: promise }, [
        effectiveBackend,
        effectiveWorkspace,
        insight,
        insightWidget,
        filters,
        filterContext,
    ]);
}
//# sourceMappingURL=useDashboardInsightExecution.js.map
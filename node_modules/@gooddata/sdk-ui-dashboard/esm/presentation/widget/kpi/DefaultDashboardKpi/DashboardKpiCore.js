// (C) 2020 GoodData Corporation
import React from "react";
import { useBackendStrict, useWorkspaceStrict } from "@gooddata/sdk-ui";
import invariant from "ts-invariant";
import { useDashboardComponentsContext } from "../../../dashboardContexts";
import { selectDashboardRef, selectFilterContextFilters, selectIsReadOnly, selectSeparators, selectSettings, useDashboardSelector, } from "../../../../model";
import { KpiExecutor } from "./KpiExecutor";
import { useKpiData } from "./useKpiData";
/**
 * @internal
 */
export var DashboardKpiCore = function (props) {
    var kpiWidget = props.kpiWidget, alert = props.alert, filters = props.filters, onFiltersChange = props.onFiltersChange, onDrill = props.onDrill, onError = props.onError, customBackend = props.backend, customWorkspace = props.workspace, CustomErrorComponent = props.ErrorComponent, CustomLoadingComponent = props.LoadingComponent;
    invariant(kpiWidget.kpi, "The provided widget is not a KPI widget.");
    var _a = useDashboardComponentsContext({
        ErrorComponent: CustomErrorComponent,
        LoadingComponent: CustomLoadingComponent,
    }), ErrorComponent = _a.ErrorComponent, LoadingComponent = _a.LoadingComponent;
    var backend = useBackendStrict(customBackend);
    var workspace = useWorkspaceStrict(customWorkspace);
    var dashboardRef = useDashboardSelector(selectDashboardRef);
    var dashboardFilters = useDashboardSelector(selectFilterContextFilters);
    var settings = useDashboardSelector(selectSettings);
    var separators = useDashboardSelector(selectSeparators);
    var isReadOnly = useDashboardSelector(selectIsReadOnly);
    var kpiData = useKpiData({
        kpiWidget: kpiWidget,
        backend: backend,
        filters: filters,
        dashboardFilters: dashboardFilters,
        workspace: workspace,
    });
    if (kpiData.status === "loading" || kpiData.status === "pending") {
        return React.createElement(LoadingComponent, null);
    }
    if (kpiData.status === "error") {
        return React.createElement(ErrorComponent, { message: kpiData.error.message });
    }
    return (React.createElement(KpiExecutor, { dashboardRef: dashboardRef, kpiWidget: kpiWidget, primaryMeasure: kpiData.result.primaryMeasure, secondaryMeasure: kpiData.result.secondaryMeasure, alert: alert, allFilters: kpiData.result.allFilters, effectiveFilters: kpiData.result.effectiveFilters, onFiltersChange: onFiltersChange, onDrill: onDrill, onError: onError, separators: separators, disableDrillUnderline: settings.disableKpiDashboardHeadlineUnderline, backend: backend, workspace: workspace, LoadingComponent: LoadingComponent, isReadOnly: isReadOnly }));
};
//# sourceMappingURL=DashboardKpiCore.js.map
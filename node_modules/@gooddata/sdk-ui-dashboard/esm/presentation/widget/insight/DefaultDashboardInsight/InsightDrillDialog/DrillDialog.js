// (C) 2019-2021 GoodData Corporation
import React from "react";
import { FormattedMessage } from "react-intl";
import { Button, Bubble, BubbleHoverTrigger, ShortenedText } from "@gooddata/sdk-ui-kit";
import { selectPermissions, selectSettings, useDashboardSelector } from "../../../../../model";
import { PoweredByGDLogo } from "./PoweredByGDLogo";
import { DrillModalFooter } from "./DrillModalFooter";
import { getTitleWithBreadcrumbs } from "./getTitleWithBreadcrumbs";
var tooltipAlignPoints = [{ align: "cc tc", offset: { x: -20, y: 10 } }];
var bubbleAlignPoints = [{ align: "bc tc", offset: { x: -5, y: -5 } }];
export var DrillDialog = function (_a) {
    var insightTitle = _a.insightTitle, breadcrumbs = _a.breadcrumbs, onCloseDialog = _a.onCloseDialog, onBackButtonClick = _a.onBackButtonClick, isBackButtonVisible = _a.isBackButtonVisible, children = _a.children, exportAvailable = _a.exportAvailable, exportXLSXEnabled = _a.exportXLSXEnabled, exportCSVEnabled = _a.exportCSVEnabled, onExportCSV = _a.onExportCSV, onExportXLSX = _a.onExportXLSX, isLoading = _a.isLoading;
    var settings = useDashboardSelector(selectSettings);
    var permissions = useDashboardSelector(selectPermissions);
    var shouldShowDrilledInsightExport = (settings === null || settings === void 0 ? void 0 : settings.enableDrilledInsightExport) && permissions.canExportReport;
    var titleWithBreadcrumbs = getTitleWithBreadcrumbs(insightTitle, breadcrumbs);
    return (React.createElement("div", { className: "gd-dialog gd-drill-modal-dialog s-drill-modal-dialog" },
        React.createElement("div", { className: "gd-dialog-header gd-dialog-header-with-border gd-drill-modal-dialog-header" },
            isBackButtonVisible && (React.createElement(BubbleHoverTrigger, null,
                React.createElement(Button, { className: "gd-button-primary gd-button-icon-only gd-icon-navigateleft s-drill-reset-button gd-drill-reset-button", onClick: onBackButtonClick }),
                React.createElement(Bubble, { className: "bubble-primary", alignPoints: bubbleAlignPoints },
                    React.createElement(FormattedMessage, { id: "drillModal.backToTop", tagName: "span" })))),
            React.createElement("div", { className: "gd-drill-title s-drill-title" },
                React.createElement(ShortenedText, { tagName: "div", tooltipAlignPoints: tooltipAlignPoints, tooltipVisibleOnMouseOver: false }, titleWithBreadcrumbs)),
            React.createElement(Button, { className: "gd-button-link gd-button-icon-only gd-icon-cross gd-drill-close-button s-drill-close-button", onClick: onCloseDialog })),
        React.createElement("div", { className: "gd-drill-modal-dialog-content visualization" },
            React.createElement("div", { className: "gd-drill-modal-dialog-content-base" }, children)),
        shouldShowDrilledInsightExport && (React.createElement("div", { className: "gd-drill-modal-dialog-footer gd-drill-modal-dialog-footer-with-border s-drill-modal-dialog-footer" },
            React.createElement(DrillModalFooter, { exportAvailable: exportAvailable, exportXLSXEnabled: exportXLSXEnabled, exportCSVEnabled: exportCSVEnabled, onExportXLSX: onExportXLSX, onExportCSV: onExportCSV, isLoading: isLoading }))),
        React.createElement(PoweredByGDLogo, { isSmall: true })));
};
//# sourceMappingURL=DrillDialog.js.map
import { __awaiter, __generator } from "tslib";
// (C) 2020-2021 GoodData Corporation
import { useMemo } from "react";
import { useBackend, useCancelablePromise, useWorkspace, } from "@gooddata/sdk-ui";
import { attributesWithDrillDownDataLoaderFactory } from "../../../dataLoaders";
import { backendInvariant, workspaceInvariant } from "../utils";
/**
 * Hook allowing to download attributes with drillDown of the given workspace
 * @param config - configuration of the hook
 * @internal
 */
export function useAttributesWithDrillDown(_a) {
    var _this = this;
    var backend = _a.backend, hasDrillingEnabled = _a.hasDrillingEnabled, onCancel = _a.onCancel, onError = _a.onError, onLoading = _a.onLoading, onPending = _a.onPending, onSuccess = _a.onSuccess, workspace = _a.workspace;
    var effectiveBackend = useBackend(backend);
    var effectiveWorkspace = useWorkspace(workspace);
    backendInvariant(effectiveBackend, "useAttributesWithDrillDown");
    workspaceInvariant(effectiveWorkspace, "useAttributesWithDrillDown");
    var promise = useMemo(function () {
        return function () { return __awaiter(_this, void 0, void 0, function () {
            var loader;
            return __generator(this, function (_a) {
                if (!hasDrillingEnabled) {
                    return [2 /*return*/, []];
                }
                loader = attributesWithDrillDownDataLoaderFactory.forWorkspace(effectiveWorkspace);
                return [2 /*return*/, loader.getAttributesWithDrillDown(effectiveBackend)];
            });
        }); };
    }, [hasDrillingEnabled, effectiveBackend, effectiveWorkspace]);
    return useCancelablePromise({ promise: promise, onCancel: onCancel, onError: onError, onLoading: onLoading, onPending: onPending, onSuccess: onSuccess }, [
        effectiveBackend,
        effectiveWorkspace,
        hasDrillingEnabled,
    ]);
}
//# sourceMappingURL=useAttributesWithDrillDown.js.map
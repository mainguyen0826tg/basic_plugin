import { __awaiter, __generator } from "tslib";
// (C) 2019-2021 GoodData Corporation
import { isUriRef, isIdentifierRef } from "@gooddata/sdk-model";
import { UnexpectedError } from "@gooddata/sdk-backend-spi";
/**
 * Converts ObjRef instance to URI. For UriRef returns the uri as is, for IdentifierRef calls the backend and gets the URI.
 * @param ref - ref to convert
 * @param workspace - workspace id to use
 * @param authCall - call guard to perform API calls through
 *
 * @internal
 */
export var objRefToUri = function (ref, workspace, authCall) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, isUriRef(ref) ? ref.uri : authCall(function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, "/" + workspace + "/" + ref.type + "/" + ref.identifier];
            }); }); })];
    });
}); };
/**
 * Converts ObjRef instance to identifier. For IdentifierRef returns the identifier as is,
 * otherwise converts the UriRef to the identifier.
 * @param ref - ref to convert
 * @param authCall - call guard to perform API calls through
 *
 * @internal
 */
export var objRefToIdentifier = function (ref, _authCall) { return __awaiter(void 0, void 0, void 0, function () {
    var regex, matches;
    return __generator(this, function (_a) {
        if (isIdentifierRef(ref)) {
            return [2 /*return*/, ref.identifier];
        }
        regex = /\/([^\/]+)\/?$/;
        matches = regex.exec(ref.uri);
        if (!matches) {
            throw new UnexpectedError("Unexpected URI: \"" + ref.uri + "\"");
        }
        return [2 /*return*/, matches[1]];
    });
}); };
/**
 * Converts ObjRef instances to identifiers. For IdentifierRef returns the identifier as is,
 * otherwise converts the UriRefs to the identifiers.
 * @param refs - refs to convert
 * @param authCall - call guard to perform API calls through
 *
 * @internal
 */
export var objRefsToIdentifiers = function (refs, authCall) {
    // there is no bulk api yet, so do it one by one
    return Promise.all(refs.map(function (ref) { return objRefToIdentifier(ref, authCall); }));
};
//# sourceMappingURL=api.js.map
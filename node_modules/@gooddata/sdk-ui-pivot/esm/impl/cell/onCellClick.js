import { invariant } from "ts-invariant";
import { isSomeTotal } from "../data/dataSourceUtils";
import { isSeriesCol, isSliceCol } from "../structure/tableDescriptorTypes";
import { convertDrillableItemsToPredicates, VisualizationTypes, } from "@gooddata/sdk-ui";
import { isCellDrillable } from "../drilling/cellDrillabilityPredicate";
import { createDrilledRow } from "../drilling/drilledRowFactory";
import { createDrillIntersection } from "../drilling/drillIntersectionFactory";
export function onCellClickedFactory(table, props) {
    return function (cellEvent) {
        var _a, _b;
        invariant(table.tableDescriptor);
        var row = cellEvent.data;
        invariant(row);
        if (isSomeTotal(row.type)) {
            return false;
        }
        var colDef = cellEvent.colDef, data = cellEvent.data, rowIndex = cellEvent.rowIndex;
        var col = table.tableDescriptor.getCol(colDef);
        // cells belong to either slice column or leaf data column; if cells belong to column of a different
        // type then there must be either something messed up with table construction or a new type of cell
        invariant(isSliceCol(col) || isSeriesCol(col));
        var onDrill = props.onDrill;
        var dv = table.getDrillDataContext();
        var drillablePredicates = convertDrillableItemsToPredicates(props.drillableItems);
        var areDrillableHeaders = isCellDrillable(col, cellEvent.data, dv, drillablePredicates);
        if (!areDrillableHeaders) {
            return false;
        }
        var drillContext = {
            type: VisualizationTypes.TABLE,
            element: "cell",
            columnIndex: table.tableDescriptor.getAbsoluteLeafColIndex(col),
            rowIndex: rowIndex,
            row: createDrilledRow(data, table.tableDescriptor),
            intersection: createDrillIntersection(cellEvent, table.tableDescriptor),
        };
        var drillEvent = {
            dataView: dv.dataView,
            drillContext: drillContext,
        };
        if (onDrill === null || onDrill === void 0 ? void 0 : onDrill(drillEvent)) {
            // This is needed for /analyze/embedded/ drilling with post message
            // More info: https://github.com/gooddata/gdc-analytical-designer/blob/develop/test/drillEventing/drillEventing_page.html
            var event_1 = new CustomEvent("drill", {
                detail: drillEvent,
                bubbles: true,
            });
            (_b = (_a = cellEvent.event) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.dispatchEvent(event_1);
            return true;
        }
        return false;
    };
}
//# sourceMappingURL=onCellClick.js.map
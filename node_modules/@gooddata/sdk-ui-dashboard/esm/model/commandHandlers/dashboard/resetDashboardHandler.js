import { __generator } from "tslib";
import { selectPersistedDashboard } from "../../store/meta/metaSelectors";
import { call, put, select } from "redux-saga/effects";
import { dashboardWasReset } from "../../events/dashboard";
import { selectInsights } from "../../store/insights/insightsSelectors";
import { selectEffectiveDateFilterConfig } from "../../store/dateFilterConfig/dateFilterConfigSelectors";
import { selectDateFilterConfig, selectSettings } from "../../store/config/configSelectors";
import { actionsToInitializeExistingDashboard, actionsToInitializeNewDashboard, } from "./common/stateInitializers";
import { batchActions } from "redux-batched-actions";
export function resetDashboardHandler(ctx, cmd) {
    var persistedDashboard, batch, insights, settings, effectiveConfig, dateFilterConfig;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, select(selectPersistedDashboard)];
            case 1:
                persistedDashboard = _a.sent();
                batch = [];
                if (!persistedDashboard) return [3 /*break*/, 6];
                return [4 /*yield*/, select(selectInsights)];
            case 2:
                insights = _a.sent();
                return [4 /*yield*/, select(selectSettings)];
            case 3:
                settings = _a.sent();
                return [4 /*yield*/, select(selectEffectiveDateFilterConfig)];
            case 4:
                effectiveConfig = _a.sent();
                return [4 /*yield*/, call(actionsToInitializeExistingDashboard, ctx, persistedDashboard, insights, settings, effectiveConfig)];
            case 5:
                batch = _a.sent();
                return [3 /*break*/, 8];
            case 6: return [4 /*yield*/, select(selectDateFilterConfig)];
            case 7:
                dateFilterConfig = _a.sent();
                batch = actionsToInitializeNewDashboard(dateFilterConfig);
                _a.label = 8;
            case 8: return [4 /*yield*/, put(batchActions(batch, "@@GDC.DASH/RESET"))];
            case 9:
                _a.sent();
                return [2 /*return*/, dashboardWasReset(ctx, persistedDashboard, cmd.correlationId)];
        }
    });
}
//# sourceMappingURL=resetDashboardHandler.js.map
import { isColorFromPalette } from "@gooddata/sdk-model";
import { getColorByGuid, getColorFromMapping, getRgbStringFromRGB } from "./color";
import uniqBy from "lodash/uniqBy";
/**
 * @internal
 */
var ColorStrategy = /** @class */ (function () {
    function ColorStrategy(colorPalette, colorMapping, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    viewByAttribute, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    stackByAttribute, dv, theme) {
        this.theme = theme;
        var _a = this.createColorAssignment(colorPalette, colorMapping, viewByAttribute, stackByAttribute, dv), fullColorAssignment = _a.fullColorAssignment, outputColorAssignment = _a.outputColorAssignment;
        this.fullColorAssignment = fullColorAssignment;
        this.outputColorAssignment = outputColorAssignment ? outputColorAssignment : fullColorAssignment;
        this.palette = this.createPalette(colorPalette, this.fullColorAssignment, viewByAttribute, stackByAttribute);
    }
    ColorStrategy.prototype.getColorByIndex = function (index) {
        return this.palette[index];
    };
    ColorStrategy.prototype.getColorAssignment = function () {
        return this.outputColorAssignment;
    };
    ColorStrategy.prototype.getFullColorAssignment = function () {
        return this.fullColorAssignment;
    };
    ColorStrategy.prototype.createPalette = function (colorPalette, colorAssignment, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    _viewByAttribute, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    _stackByAttribute) {
        return colorAssignment.map(function (map, index) {
            var color = isColorFromPalette(map.color)
                ? getColorByGuid(colorPalette, map.color.value, index)
                : map.color.value;
            return getRgbStringFromRGB(color);
        });
    };
    return ColorStrategy;
}());
export { ColorStrategy };
//
// These functions are often used when constructing custom strategies
//
/**
 * @internal
 */
export function isValidMappedColor(colorItem, colorPalette) {
    if (!colorItem) {
        return false;
    }
    if (colorItem.type === "guid") {
        return isColorItemInPalette(colorItem, colorPalette);
    }
    return true;
}
/**
 * @internal
 */
function isColorItemInPalette(colorItem, colorPalette) {
    return colorPalette.some(function (paletteItem) {
        return colorItem.type === "guid" && colorItem.value === paletteItem.guid;
    });
}
/**
 * @internal
 */
export function getAtributeColorAssignment(
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
attribute, colorPalette, colorMapping, dv) {
    var currentColorPaletteIndex = 0;
    var uniqItems = uniqBy(attribute.items, "attributeHeaderItem.uri");
    return uniqItems.map(function (headerItem) {
        var mappedColor = getColorFromMapping(headerItem, colorMapping, dv);
        var color = mappedColor && isValidMappedColor(mappedColor, colorPalette)
            ? mappedColor
            : {
                type: "guid",
                value: colorPalette[currentColorPaletteIndex % colorPalette.length].guid
            };
        currentColorPaletteIndex++;
        return {
            headerItem: headerItem,
            color: color
        };
    });
}
//# sourceMappingURL=base.js.map
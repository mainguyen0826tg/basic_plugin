import { __assign, __read } from "tslib";
// (C) 2020 GoodData Corporation
import React, { useCallback, useState } from "react";
import { idRef, insightTitle } from "@gooddata/sdk-model";
import { FullScreenOverlay, Overlay, useMediaQuery } from "@gooddata/sdk-ui-kit";
import { DOWNLOADER_ID } from "../../../../../_staging/fileUtils/downloadFile";
import { useInsightExport } from "../../../common";
import { WithDrillSelect } from "../../../../drill";
import { IntlWrapper } from "../../../../localization";
import { DrillDialog } from "./DrillDialog";
import { DrillDialogInsight } from "./DrillDialogInsight";
import { useWidgetExecutionsHandler } from "../../../../../model";
import { getTitleWithBreadcrumbs } from "./getTitleWithBreadcrumbs";
var overlayIgnoredClasses = [
    ".s-sort-direction-arrow",
    ".gd-export-dialog",
    ".options-menu-export-xlsx",
    ".options-menu-export-csv",
    "#" + DOWNLOADER_ID,
];
var DRILL_MODAL_EXECUTION_PSEUDO_REF = idRef("@@GDC_DRILL_MODAL");
export var InsightDrillDialog = function (props) {
    var widget = props.widget, locale = props.locale, breadcrumbs = props.breadcrumbs, insight = props.insight, onClose = props.onClose, onBackButtonClick = props.onBackButtonClick, onDrillDown = props.onDrillDown;
    var isMobileDevice = useMediaQuery("mobileDevice");
    var _a = __read(useState(false), 2), isLoading = _a[0], setIsLoading = _a[1];
    var executionsHandler = useWidgetExecutionsHandler(DRILL_MODAL_EXECUTION_PSEUDO_REF);
    var handleLoadingChanged = useCallback(function (_a) {
        var isLoading = _a.isLoading;
        setIsLoading(isLoading);
        executionsHandler.onLoadingChanged({ isLoading: isLoading });
    }, []);
    var baseInsightTitle = insightTitle(insight);
    var _b = useInsightExport({
        title: getTitleWithBreadcrumbs(baseInsightTitle, breadcrumbs),
        widgetRef: DRILL_MODAL_EXECUTION_PSEUDO_REF,
        insight: insight,
    }), exportCSVEnabled = _b.exportCSVEnabled, exportXLSXEnabled = _b.exportXLSXEnabled, onExportCSV = _b.onExportCSV, onExportXLSX = _b.onExportXLSX;
    var OverlayComponent = isMobileDevice ? FullScreenOverlay : Overlay;
    return (React.createElement(OverlayComponent, { className: "gd-drill-modal-overlay", isModal: true, closeOnEscape: true, closeOnOutsideClick: true, ignoreClicksOnByClass: overlayIgnoredClasses, onClose: onClose, positionType: "fixed" },
        React.createElement(IntlWrapper, { locale: locale },
            React.createElement(DrillDialog, { insightTitle: baseInsightTitle, isBackButtonVisible: breadcrumbs.length > 1, onBackButtonClick: onBackButtonClick, onCloseDialog: onClose, breadcrumbs: breadcrumbs, exportAvailable: exportXLSXEnabled || exportCSVEnabled, exportXLSXEnabled: exportXLSXEnabled, exportCSVEnabled: exportCSVEnabled, onExportXLSX: onExportXLSX, onExportCSV: onExportCSV, isLoading: isLoading },
                React.createElement(WithDrillSelect, { widgetRef: widget.ref, insight: props.insight, onDrillDownSuccess: onDrillDown }, function (_a) {
                    var onDrill = _a.onDrill;
                    return (React.createElement(DrillDialogInsight, __assign({}, props, { onDrill: onDrill, onLoadingChanged: handleLoadingChanged, onError: executionsHandler.onError, pushData: executionsHandler.onPushData })));
                })))));
};
//# sourceMappingURL=InsightDrillDialog.js.map
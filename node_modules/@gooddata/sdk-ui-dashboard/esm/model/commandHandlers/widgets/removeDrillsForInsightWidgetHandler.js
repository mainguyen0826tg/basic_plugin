// (C) 2021 GoodData Corporation
import { __generator } from "tslib";
import { put, select } from "redux-saga/effects";
import { insightWidgetDrillsRemoved } from "../../events/insight";
import { selectWidgetsMap } from "../../store/layout/layoutSelectors";
import { validateExistingInsightWidget } from "./validation/widgetValidations";
import { validateRemoveDrillsByOrigins } from "./validation/removeDrillsSelectorValidation";
import { layoutActions } from "../../store/layout";
import { existsDrillDefinitionInArray } from "./validation/insightDrillDefinitionUtils";
export function removeDrillsForInsightWidgetHandler(ctx, cmd) {
    var origins, correlationId, widgets, insightWidget, widgetRef, currentInsightDrills, drillToRemove, notModifiedDrillDefinition;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                origins = cmd.payload.origins, correlationId = cmd.correlationId;
                return [4 /*yield*/, select(selectWidgetsMap)];
            case 1:
                widgets = _a.sent();
                insightWidget = validateExistingInsightWidget(widgets, cmd, ctx);
                widgetRef = insightWidget.ref, currentInsightDrills = insightWidget.drills;
                drillToRemove = validateRemoveDrillsByOrigins(origins, currentInsightDrills, ctx, cmd);
                notModifiedDrillDefinition = currentInsightDrills.filter(function (drillItem) { return !existsDrillDefinitionInArray(drillItem, drillToRemove); });
                return [4 /*yield*/, put(layoutActions.replaceWidgetDrills({
                        ref: widgetRef,
                        drillDefinitions: notModifiedDrillDefinition,
                        undo: {
                            cmd: cmd,
                        },
                    }))];
            case 2:
                _a.sent();
                return [2 /*return*/, insightWidgetDrillsRemoved(ctx, widgetRef, drillToRemove, correlationId)];
        }
    });
}
//# sourceMappingURL=removeDrillsForInsightWidgetHandler.js.map
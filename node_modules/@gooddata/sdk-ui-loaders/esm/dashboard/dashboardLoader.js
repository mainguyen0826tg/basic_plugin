// (C) 2021 GoodData Corporation
import { __assign, __awaiter, __generator, __spreadArrays } from "tslib";
import { ResolvedClientWorkspaceProvider, resolveLCMWorkspaceIdentifiers, } from "@gooddata/sdk-ui";
import invariant from "ts-invariant";
import isEmpty from "lodash/isEmpty";
import React from "react";
import { noopDashboardPluginLoader, staticDashboardEngineLoader, } from "./loadingStrategies/staticComponentLoaders";
import { adaptiveDashboardBeforeLoadFactory, adaptiveDashboardEngineLoaderFactory, adaptiveDashboardPluginLoaderFactory, } from "./loadingStrategies/adaptiveComponentLoaders";
import { validatePluginsBeforeLoading } from "./beforeLoadPluginValidation";
var StaticLoadStrategies = {
    engineLoader: staticDashboardEngineLoader,
    pluginLoader: noopDashboardPluginLoader,
};
var AdaptiveLoadStrategies = function (moduleFederationIntegration) {
    return {
        engineLoader: adaptiveDashboardEngineLoaderFactory(moduleFederationIntegration),
        pluginLoader: adaptiveDashboardPluginLoaderFactory(moduleFederationIntegration),
        beforeLoad: adaptiveDashboardBeforeLoadFactory(moduleFederationIntegration),
    };
};
/**
 * Default implementation of the {@link IDashboardLoader} interface. This class implements all the
 * necessary functionality related to either static or dynamic dashboard loading.
 *
 * Note: you typically do not have to use this class directly and instead use the `useDashboardLoader`
 * hook or the `DashboardStub` component.
 *
 * @public
 */
var DashboardLoader = /** @class */ (function () {
    function DashboardLoader(config) {
        var _this = this;
        this.baseProps = {};
        this.embeddedPlugins = [];
        this.clientWorkspace = undefined;
        this.onBackend = function (backend) {
            _this.baseProps.backend = backend;
            return _this;
        };
        this.fromClientWorkspace = function (clientWorkspace) {
            _this.clientWorkspace = clientWorkspace;
            _this.baseProps.workspace = undefined;
            return _this;
        };
        this.fromWorkspace = function (workspace) {
            _this.baseProps.workspace = workspace;
            _this.clientWorkspace = undefined;
            return _this;
        };
        this.forDashboard = function (dashboardRef) {
            _this.baseProps.dashboard = dashboardRef;
            return _this;
        };
        this.withFilterContext = function (filterContextRef) {
            _this.baseProps.filterContextRef = filterContextRef;
            return _this;
        };
        this.withEmbeddedPlugins = function () {
            var plugins = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                plugins[_i] = arguments[_i];
            }
            _this.embeddedPlugins = plugins !== null && plugins !== void 0 ? plugins : [];
            return _this;
        };
        this.withBaseProps = function (props) {
            _this.baseProps = __assign({}, props);
            return _this;
        };
        this.resolveWorkspace = function (backend) { return __awaiter(_this, void 0, void 0, function () {
            var resolvedClientWorkspace;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.clientWorkspace) {
                            return [2 /*return*/, [this.baseProps.workspace, undefined]];
                        }
                        return [4 /*yield*/, resolveLCMWorkspaceIdentifiers(backend, this.clientWorkspace)];
                    case 1:
                        resolvedClientWorkspace = _a.sent();
                        invariant(!isEmpty(resolvedClientWorkspace), "DashboardLoader was not able to resolve LCM client workspace to actual workspace.");
                        return [2 /*return*/, [resolvedClientWorkspace.workspace, resolvedClientWorkspace]];
                }
            });
        }); };
        this.loadParts = function (ctx, dashboardWithPlugins, config) {
            if (config === void 0) { config = _this.config; }
            return __awaiter(_this, void 0, void 0, function () {
                var engineLoader, pluginLoader, beforeLoad, _a, engine, plugins, additionalPlugins, loadedPlugins, allPlugins;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            engineLoader = config.engineLoader, pluginLoader = config.pluginLoader, beforeLoad = config.beforeLoad;
                            // eslint-disable-next-line no-console
                            console.debug("Loading engine and plugins...");
                            if (!beforeLoad) return [3 /*break*/, 2];
                            return [4 /*yield*/, beforeLoad(ctx, dashboardWithPlugins)];
                        case 1:
                            _b.sent();
                            _b.label = 2;
                        case 2: return [4 /*yield*/, Promise.all([
                                engineLoader(dashboardWithPlugins),
                                pluginLoader(ctx, dashboardWithPlugins),
                            ])];
                        case 3:
                            _a = _b.sent(), engine = _a[0], plugins = _a[1];
                            // eslint-disable-next-line no-console
                            console.debug("Initializing the plugins...");
                            return [4 /*yield*/, initializeEmbeddedPlugins(ctx, this.embeddedPlugins)];
                        case 4:
                            additionalPlugins = _b.sent();
                            return [4 /*yield*/, initializeLoadedPlugins(ctx, plugins)];
                        case 5:
                            loadedPlugins = _b.sent();
                            allPlugins = __spreadArrays(loadedPlugins, additionalPlugins);
                            return [2 /*return*/, [engine, allPlugins]];
                    }
                });
            });
        };
        this.load = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, backend, dashboard, filterContextRef, _b, workspace, clientWorkspace, dashboardWithPlugins, ctx, pluginsAreValid, _c, engine, plugins, extensionProps, props, DashboardComponent;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = this.baseProps, backend = _a.backend, dashboard = _a.dashboard, filterContextRef = _a.filterContextRef;
                        invariant(backend, "DashboardLoader is not configured with an instance of Analytical Backend.");
                        invariant(dashboard, "DashboardLoader is not configured with a reference to dashboard that it should load.");
                        return [4 /*yield*/, this.resolveWorkspace(backend)];
                    case 1:
                        _b = _d.sent(), workspace = _b[0], clientWorkspace = _b[1];
                        invariant(workspace, "DashboardLoader is not configured with workspace to use and loader.");
                        // eslint-disable-next-line no-console
                        console.debug("Loading the dashboard...");
                        return [4 /*yield*/, backend
                                .workspace(workspace)
                                .dashboards()
                                .getDashboardWithReferences(dashboard, filterContextRef, { loadUserData: true }, [
                                "dashboardPlugin",
                            ])];
                    case 2:
                        dashboardWithPlugins = _d.sent();
                        ctx = {
                            backend: backend,
                            workspace: workspace,
                            dashboardRef: dashboard,
                            filterContextRef: filterContextRef,
                            dataProductId: clientWorkspace === null || clientWorkspace === void 0 ? void 0 : clientWorkspace.dataProduct,
                            clientId: clientWorkspace === null || clientWorkspace === void 0 ? void 0 : clientWorkspace.client,
                        };
                        // eslint-disable-next-line no-console
                        console.debug("Validating the plugins...");
                        return [4 /*yield*/, validatePluginsBeforeLoading(ctx, dashboardWithPlugins)];
                    case 3:
                        pluginsAreValid = _d.sent();
                        if (!pluginsAreValid) {
                            // eslint-disable-next-line no-console
                            console.error("Dashboard is configured with plugins that contain invalid URLs or " +
                                "are not located on allowed hosts. Loader is falling back to the " +
                                "statically linked dashboard without any external plugins.");
                        }
                        return [4 /*yield*/, this.loadParts(ctx, dashboardWithPlugins, !pluginsAreValid ? StaticLoadStrategies : this.config)];
                    case 4:
                        _c = _d.sent(), engine = _c[0], plugins = _c[1];
                        extensionProps = engine.initializePlugins(ctx, plugins);
                        props = __assign(__assign(__assign({}, this.baseProps), extensionProps), { workspace: workspace, dashboard: dashboardWithPlugins.dashboard });
                        DashboardComponent = !clientWorkspace
                            ? engine.getDashboardComponent()
                            : clientWorkspaceDashboardFactory(engine.getDashboardComponent(), clientWorkspace);
                        return [2 /*return*/, {
                                ctx: ctx,
                                engine: engine,
                                plugins: plugins,
                                DashboardComponent: DashboardComponent,
                                props: props,
                            }];
                }
            });
        }); };
        this.config = config;
    }
    /**
     * Create loader that will never do any dynamic loading and linking. The loader will expect that
     * the dashboard engine is statically linked in the context. Any plugins that require dynamic loading
     * from remote locations will be ignored. Only locally embedded plugins will be used.
     */
    DashboardLoader.staticOnly = function () {
        return new DashboardLoader(StaticLoadStrategies);
    };
    /**
     * Create loader that may dynamically load dashboard engine and plugins in case a Dashboard to load
     * is using them. Otherwise it will fall back to the dashboard engine statically linked to the context
     * and will only use locally embedded plugins.
     *
     * @param options - options for the adaptive load
     */
    DashboardLoader.adaptive = function (options) {
        return new DashboardLoader(AdaptiveLoadStrategies(options.moduleFederationIntegration));
    };
    return DashboardLoader;
}());
export { DashboardLoader };
function initializeEmbeddedPlugins(ctx, embeddedPlugins) {
    var plugins = embeddedPlugins.map(function (embedded) { return ({
        plugin: embedded.factory(),
        parameters: embedded.parameters,
    }); });
    return initializeLoadedPlugins(ctx, plugins);
}
function initializeLoadedPlugins(ctx, plugins) {
    return __awaiter(this, void 0, void 0, function () {
        var validPlugins, _i, plugins_1, loadedPlugin, plugin, parameters, loadPromise, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    validPlugins = [];
                    _i = 0, plugins_1 = plugins;
                    _a.label = 1;
                case 1:
                    if (!(_i < plugins_1.length)) return [3 /*break*/, 7];
                    loadedPlugin = plugins_1[_i];
                    plugin = loadedPlugin.plugin, parameters = loadedPlugin.parameters;
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 5, , 6]);
                    if (!plugin.onPluginLoaded) return [3 /*break*/, 4];
                    // eslint-disable-next-line no-console
                    console.debug("Calling onPluginLoaded on " + plugin.displayName + "...");
                    loadPromise = plugin.onPluginLoaded(ctx, parameters);
                    return [4 /*yield*/, loadPromise];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4:
                    validPlugins.push(plugin);
                    return [3 /*break*/, 6];
                case 5:
                    e_1 = _a.sent();
                    // eslint-disable-next-line no-console
                    console.error("The onPluginLoaded call for " + plugin.displayName + " failed: " + (e_1 === null || e_1 === void 0 ? void 0 : e_1.message) + ". Ignoring the plugin.");
                    return [3 /*break*/, 6];
                case 6:
                    _i++;
                    return [3 /*break*/, 1];
                case 7: return [2 /*return*/, validPlugins];
            }
        });
    });
}
function clientWorkspaceDashboardFactory(Component, clientWorkspace) {
    function ClientWorkspaceDashboardWrapper(props) {
        return (React.createElement(ResolvedClientWorkspaceProvider, __assign({}, clientWorkspace),
            React.createElement(Component, __assign({}, props))));
    }
    return ClientWorkspaceDashboardWrapper;
}
//# sourceMappingURL=dashboardLoader.js.map
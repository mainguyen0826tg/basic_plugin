import { __assign, __spreadArrays } from "tslib";
// (C) 2007-2018 GoodData Corporation
import React from "react";
import { bucketAttribute, bucketsFind, bucketsMeasures, newAttributeSort, newBucket, newMeasureSort, } from "@gooddata/sdk-model";
import { BucketNames, useResolveValuesWithPlaceholders, } from "@gooddata/sdk-ui";
import { treemapDimensions } from "../_commons/dimensions";
import { CoreTreemap } from "./CoreTreemap";
import { withChart } from "../_base/withChart";
//
// Internals
//
var treemapDefinition = {
    chartName: "Treemap",
    bucketPropsKeys: ["measures", "viewBy", "segmentBy", "filters"],
    bucketsFactory: function (props) {
        return [
            newBucket.apply(void 0, __spreadArrays([BucketNames.MEASURES], props.measures)),
            newBucket(BucketNames.VIEW, props.viewBy),
            newBucket(BucketNames.SEGMENT, props.segmentBy),
        ];
    },
    executionFactory: function (props, buckets) {
        var _a;
        var backend = props.backend, workspace = props.workspace, execConfig = props.execConfig;
        var sortBy = getDefaultTreemapSort(buckets);
        return (_a = backend
            .withTelemetry("Treemap", props)
            .workspace(workspace)
            .execution()
            .forBuckets(buckets, props.filters))
            .withSorting.apply(_a, sortBy).withDimensions(treemapDimensions)
            .withExecConfig(execConfig);
    },
};
var WrappedTreemap = withChart(treemapDefinition)(CoreTreemap);
/**
 * [Treemap](https://sdk.gooddata.com/gooddata-ui/docs/treemap_component.html)
 *
 * Treemap chart presents your data hierarchically as nested rectangles.
 * Treemaps are useful for comparing proportions within the hierarchy.
 *
 * @public
 */
export var Treemap = function (props) {
    var _a = useResolveValuesWithPlaceholders([props.measures, props.viewBy, props.segmentBy, props.filters], props.placeholdersResolutionContext), measures = _a[0], viewBy = _a[1], segmentBy = _a[2], filters = _a[3];
    return (React.createElement(WrappedTreemap, __assign({}, props, {
        measures: measures,
        viewBy: viewBy,
        segmentBy: segmentBy,
        filters: filters,
    })));
};
function getDefaultTreemapSort(buckets) {
    var viewBucket = bucketsFind(buckets, BucketNames.VIEW);
    var segmentBucket = bucketsFind(buckets, BucketNames.SEGMENT);
    var viewAttribute = viewBucket ? bucketAttribute(viewBucket) : undefined;
    var segmentAttribute = segmentBucket
        ? bucketAttribute(segmentBucket)
        : undefined;
    if (viewAttribute && segmentAttribute) {
        var measures = bucketsMeasures(buckets);
        return __spreadArrays([
            newAttributeSort(viewAttribute, "asc")
        ], measures.map(function (measure) { return newMeasureSort(measure, "desc"); }));
    }
    return [];
}
//# sourceMappingURL=Treemap.js.map
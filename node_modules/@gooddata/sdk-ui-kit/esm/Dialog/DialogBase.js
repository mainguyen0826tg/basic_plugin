import { __extends } from "tslib";
// (C) 2020 GoodData Corporation
import React, { PureComponent } from "react";
import cx from "classnames";
import { Button } from "../Button";
import { ENUM_KEY_CODE } from "../typings/utilities";
import noop from "lodash/noop";
var checkKeyHandler = function (event, keyCode, handler) {
    if (event.keyCode === keyCode && handler) {
        event.preventDefault();
        event.stopPropagation();
        handler();
    }
};
var shouldSubmitOnEnterPress = function (_a) {
    var target = _a.target;
    var _b = target, tagName = _b.tagName, type = _b.type;
    var tagNameInLowercase = tagName.toLowerCase();
    var typeInLowercase = type ? type.toLowerCase() : "";
    return (tagNameInLowercase === "textarea" ||
        (tagNameInLowercase === "input" && (typeInLowercase === "text" || typeInLowercase === "number")));
};
/**
 * @internal
 */
var DialogBase = /** @class */ (function (_super) {
    __extends(DialogBase, _super);
    function DialogBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onKeyDown = function (event) {
            var _a = _this.props, submitOnEnterKey = _a.submitOnEnterKey, onCancel = _a.onCancel, onSubmit = _a.onSubmit;
            // don't call onSubmit when pressing enter key on input fields
            var isEnterKeyDownOnInputField = event.keyCode === ENUM_KEY_CODE.KEY_CODE_ENTER && shouldSubmitOnEnterPress(event);
            if (submitOnEnterKey === false && isEnterKeyDownOnInputField) {
                return;
            }
            checkKeyHandler(event, ENUM_KEY_CODE.KEY_CODE_ENTER, onSubmit);
            checkKeyHandler(event, ENUM_KEY_CODE.KEY_CODE_ESCAPE, onCancel);
        };
        return _this;
    }
    DialogBase.prototype.getDialogClasses = function (additionalClassName) {
        return cx("overlay", "gd-dialog", additionalClassName, this.props.className);
    };
    DialogBase.prototype.renderCloseButton = function () {
        return (React.createElement("div", { className: "gd-dialog-close" },
            React.createElement(Button, { className: "gd-button-link gd-button-icon-only gd-icon-cross s-dialog-close-button", value: "", onClick: this.props.onClose || this.props.onCancel })));
    };
    DialogBase.prototype.render = function () {
        var dialogClasses = this.getDialogClasses();
        return (React.createElement("div", { tabIndex: 0, onKeyDown: this.onKeyDown },
            React.createElement("div", { className: dialogClasses },
                this.props.displayCloseButton && this.renderCloseButton(),
                this.props.children)));
    };
    DialogBase.defaultProps = {
        children: false,
        className: "",
        displayCloseButton: false,
        submitOnEnterKey: true,
        onCancel: noop,
        onSubmit: noop,
    };
    return DialogBase;
}(PureComponent));
export { DialogBase };
//# sourceMappingURL=DialogBase.js.map
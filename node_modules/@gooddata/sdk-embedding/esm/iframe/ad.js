// (C) 2020-2021 GoodData Corporation
import isObject from "lodash/isObject";
import { isCommandFailedData, getEventType, } from "./common";
/**
 * All interface, types, type-guard related to embedded Analytical Designer
 *
 * @public
 */
export var EmbeddedAnalyticalDesigner;
(function (EmbeddedAnalyticalDesigner) {
    /**
     * All AD command Types
     *
     * @public
     */
    var GdcAdCommandType;
    (function (GdcAdCommandType) {
        /**
         * The command set drillable items
         */
        GdcAdCommandType["DrillableItems"] = "drillableItems";
        /**
         * The command open an insight
         */
        GdcAdCommandType["OpenInsight"] = "openInsight";
        /**
         * The command save an insight
         */
        GdcAdCommandType["Save"] = "saveInsight";
        /**
         * The command save the insight as a new one
         */
        GdcAdCommandType["SaveAs"] = "saveAsInsight";
        /**
         * The command export an insight
         */
        GdcAdCommandType["Export"] = "exportInsight";
        /**
         * The command reset the insight editor to empty state
         */
        GdcAdCommandType["Clear"] = "clear";
        /**
         * The command empties insight buckets and filters but keeps title and ID in the URL
         */
        GdcAdCommandType["ClearInsight"] = "clearInsight";
        /**
         * The command undo to previous state
         */
        GdcAdCommandType["Undo"] = "undo";
        /**
         * The command redo to next state
         */
        GdcAdCommandType["Redo"] = "redo";
        /**
         * The command to add or update filter context
         */
        GdcAdCommandType["SetFilterContext"] = "setFilterContext";
        /**
         * The command to remove filter item from current filter context
         */
        GdcAdCommandType["RemoveFilterContext"] = "removeFilterContext";
        /**
         * The command to request cancellation
         */
        GdcAdCommandType["RequestCancellation"] = "requestCancellation";
    })(GdcAdCommandType = EmbeddedAnalyticalDesigner.GdcAdCommandType || (EmbeddedAnalyticalDesigner.GdcAdCommandType = {}));
    /**
     * All event types on AD
     *
     * @public
     */
    var GdcAdEventType;
    (function (GdcAdEventType) {
        /**
         * Type represent that Insight is saved
         */
        GdcAdEventType["ListeningForDrillableItems"] = "listeningForDrillableItems";
        /**
         * Type represent that a new insight is initialized
         */
        GdcAdEventType["NewInsightInitialized"] = "newInsightInitialized";
        /**
         * Type represent that the insight is opened
         */
        GdcAdEventType["InsightOpened"] = "insightOpened";
        /**
         * Type represent that the insight is rendered
         */
        GdcAdEventType["InsightRendered"] = "insightRendered";
        /**
         * Type represent that the insight editor is cleared
         */
        GdcAdEventType["ClearFinished"] = "clearFinished";
        /**
         * Type represent that the insight is cleared
         */
        GdcAdEventType["ClearInsightFinished"] = "clearInsightFinished";
        /**
         * Type represent that the insight is saved
         *
         * Note: use `visualizationSaved` because of backward compatibility
         * See visualizationSaved event on https://help.gooddata.com
         */
        GdcAdEventType["InsightSaved"] = "visualizationSaved";
        /**
         * Type represent that the undo action is finished
         */
        GdcAdEventType["UndoFinished"] = "undoFinished";
        /**
         * Type represent that the redo action is finished
         */
        GdcAdEventType["RedoFinished"] = "redoFinished";
        /**
         * Type represent that the export action is finished
         */
        GdcAdEventType["ExportFinished"] = "exportInsightFinished";
        /**
         * Type that drill performed
         */
        GdcAdEventType["Drill"] = "drill";
        /**
         * Type represent that the filter context is changed
         */
        GdcAdEventType["FilterContextChanged"] = "filterContextChanged";
        /**
         * Type represent that the set filter context action is finished
         */
        GdcAdEventType["SetFilterContextFinished"] = "setFilterContextFinished";
        /**
         * Type represent that the remove filter context action is finished
         */
        GdcAdEventType["RemoveFilterContextFinished"] = "removeFilterContextFinished";
        /**
         * Type notify AD that the insight editing has been cancelled
         */
        GdcAdEventType["InsightEditingCancelled"] = "insightEditingCancelled";
        /**
         * Type to notify AD that the insight has been changed and execution started. It contains new insight definition.
         */
        GdcAdEventType["InsightChanged"] = "insightChanged";
    })(GdcAdEventType = EmbeddedAnalyticalDesigner.GdcAdEventType || (EmbeddedAnalyticalDesigner.GdcAdEventType = {}));
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.AdCommandFailedData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isAdCommandFailedData(obj) {
        return isCommandFailedData(obj);
    }
    EmbeddedAnalyticalDesigner.isAdCommandFailedData = isAdCommandFailedData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.DrillableItemsCommandData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isDrillableItemsCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdCommandType.DrillableItems;
    }
    EmbeddedAnalyticalDesigner.isDrillableItemsCommandData = isDrillableItemsCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.OpenInsightCommandData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isOpenInsightCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdCommandType.OpenInsight;
    }
    EmbeddedAnalyticalDesigner.isOpenInsightCommandData = isOpenInsightCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.ClearCommandData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isClearCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdCommandType.Clear;
    }
    EmbeddedAnalyticalDesigner.isClearCommandData = isClearCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.ClearInsightCommandData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isClearInsightCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdCommandType.ClearInsight;
    }
    EmbeddedAnalyticalDesigner.isClearInsightCommandData = isClearInsightCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.RequestCancellationCommandData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isRequestCancellationCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdCommandType.RequestCancellation;
    }
    EmbeddedAnalyticalDesigner.isRequestCancellationCommandData = isRequestCancellationCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.SaveInsightCommandData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isSaveInsightCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdCommandType.Save;
    }
    EmbeddedAnalyticalDesigner.isSaveInsightCommandData = isSaveInsightCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.SaveAsInsightCommandData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isSaveAsInsightCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdCommandType.SaveAs;
    }
    EmbeddedAnalyticalDesigner.isSaveAsInsightCommandData = isSaveAsInsightCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.ExportInsightCommandData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isExportInsightCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdCommandType.Export;
    }
    EmbeddedAnalyticalDesigner.isExportInsightCommandData = isExportInsightCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.UndoCommandData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isUndoCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdCommandType.Undo;
    }
    EmbeddedAnalyticalDesigner.isUndoCommandData = isUndoCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.RedoCommandData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isRedoCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdCommandType.Redo;
    }
    EmbeddedAnalyticalDesigner.isRedoCommandData = isRedoCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.SetFilterContextCommand}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isSetFilterContextCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdCommandType.SetFilterContext;
    }
    EmbeddedAnalyticalDesigner.isSetFilterContextCommandData = isSetFilterContextCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.RemoveFilterContextCommand}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isRemoveFilterContextCommandData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdCommandType.RemoveFilterContext;
    }
    EmbeddedAnalyticalDesigner.isRemoveFilterContextCommandData = isRemoveFilterContextCommandData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.NewInsightInitializedData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isNewInsightInitializedData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdEventType.NewInsightInitialized;
    }
    EmbeddedAnalyticalDesigner.isNewInsightInitializedData = isNewInsightInitializedData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.InsightOpenedData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isInsightOpenedData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdEventType.InsightOpened;
    }
    EmbeddedAnalyticalDesigner.isInsightOpenedData = isInsightOpenedData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.InsightRenderedData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isInsightRenderedData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdEventType.InsightRendered;
    }
    EmbeddedAnalyticalDesigner.isInsightRenderedData = isInsightRenderedData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.ClearFinishedData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isClearFinishedData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdEventType.ClearFinished;
    }
    EmbeddedAnalyticalDesigner.isClearFinishedData = isClearFinishedData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.ClearInsightFinishedData}
     *
     * @param obj - object to test
     *
     * @public
     */
    function isClearInsightFinishedData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdEventType.ClearInsightFinished;
    }
    EmbeddedAnalyticalDesigner.isClearInsightFinishedData = isClearInsightFinishedData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.InsightSavedData}
     *
     * @param obj - object to test
     * @public
     */
    function isInsightSavedData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdEventType.InsightSaved;
    }
    EmbeddedAnalyticalDesigner.isInsightSavedData = isInsightSavedData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.ExportFinishedData}
     *
     * @param obj - object to test
     * @public
     */
    function isExportFinishedData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdEventType.ExportFinished;
    }
    EmbeddedAnalyticalDesigner.isExportFinishedData = isExportFinishedData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.UndoFinishedData}
     *
     * @param obj - object to test
     * @public
     */
    function isUndoFinishedData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdEventType.UndoFinished;
    }
    EmbeddedAnalyticalDesigner.isUndoFinishedData = isUndoFinishedData;
    /**
     * Type-guard checking whether an object is an instance of {@link EmbeddedAnalyticalDesigner.RedoFinishedData}
     *
     * @param obj - object to test
     * @public
     */
    function isRedoFinishedData(obj) {
        return isObject(obj) && getEventType(obj) === GdcAdEventType.RedoFinished;
    }
    EmbeddedAnalyticalDesigner.isRedoFinishedData = isRedoFinishedData;
})(EmbeddedAnalyticalDesigner || (EmbeddedAnalyticalDesigner = {}));
//# sourceMappingURL=ad.js.map
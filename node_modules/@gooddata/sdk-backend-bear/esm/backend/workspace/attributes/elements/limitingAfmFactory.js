import { __awaiter, __generator, __spreadArrays } from "tslib";
import { filterObjRef, isUriRef, isNegativeAttributeFilter, filterAttributeElements, isAttributeElementsByRef, isIdentifierRef, areObjRefsEqual, objRefToString, } from "@gooddata/sdk-model";
import { NotSupported } from "@gooddata/sdk-backend-spi";
import invariant from "ts-invariant";
import flatMap from "lodash/flatMap";
import groupBy from "lodash/groupBy";
import uniqWith from "lodash/uniqWith";
import { toBearRef } from "../../../../convertors/toBackend/ObjRefConverter";
import { convertMeasure } from "../../../../convertors/toBackend/afm/MeasureConverter";
import { objRefsToUris } from "../../../../utils/api";
var LimitingAfmFactory = /** @class */ (function () {
    function LimitingAfmFactory(authCall, displayFormRef, workspace) {
        var _this = this;
        this.authCall = authCall;
        this.displayFormRef = displayFormRef;
        this.workspace = workspace;
        this.getAfm = function (filters, measures, relativeDateFilters) { return __awaiter(_this, void 0, void 0, function () {
            var filtersPart, _a, measuresPart, mergedFiltersPart;
            var _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!(filters === null || filters === void 0 ? void 0 : filters.length) && !(measures === null || measures === void 0 ? void 0 : measures.length) && !(relativeDateFilters === null || relativeDateFilters === void 0 ? void 0 : relativeDateFilters.length)) {
                            return [2 /*return*/, undefined];
                        }
                        if (!(filters === null || filters === void 0 ? void 0 : filters.length)) return [3 /*break*/, 2];
                        _b = {};
                        _c = {};
                        return [4 /*yield*/, this.createFiltersExpressionFromAttributeFilters(filters)];
                    case 1:
                        _a = [
                            (_b.expression = (_c.value = _d.sent(),
                                _c),
                                _b)
                        ];
                        return [3 /*break*/, 3];
                    case 2:
                        _a = undefined;
                        _d.label = 3;
                    case 3:
                        filtersPart = _a;
                        measuresPart = (measures === null || measures === void 0 ? void 0 : measures.length) ? measures.map(convertMeasure) : undefined;
                        mergedFiltersPart = filtersPart &&
                            relativeDateFilters && __spreadArrays(filtersPart, relativeDateFilters);
                        return [2 /*return*/, {
                                attributes: [
                                    {
                                        localIdentifier: "a1",
                                        displayForm: toBearRef(this.displayFormRef),
                                    },
                                ],
                                filters: mergedFiltersPart || filtersPart || relativeDateFilters,
                                measures: measuresPart,
                            }];
                }
            });
        }); };
        this.createFiltersExpressionFromAttributeFilters = function (filters) { return __awaiter(_this, void 0, void 0, function () {
            var filterDisplayForms, allDisplayFormRefs, _a, identifierUriPairs, displayFormAttributeUriMapping, getDisplayFormAttributeUri, getFilterAttributeUri, getUriForIdentifier, attributeRefUri, groupsByOverAttribute, expressionsByOverAttribute;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        filterDisplayForms = filters.map(function (f) { return filterObjRef(f.attributeFilter); });
                        allDisplayFormRefs = uniqWith(__spreadArrays([this.displayFormRef], filterDisplayForms), areObjRefsEqual);
                        return [4 /*yield*/, Promise.all([
                                this.getIdentifierUriPairs(filters),
                                this.getDisplayFormAttributeUriMapping(allDisplayFormRefs),
                            ])];
                    case 1:
                        _a = _b.sent(), identifierUriPairs = _a[0], displayFormAttributeUriMapping = _a[1];
                        getDisplayFormAttributeUri = function (ref) {
                            var entry = displayFormAttributeUriMapping.find(function (_a) {
                                var displayFormRef = _a[0];
                                return areObjRefsEqual(displayFormRef, ref);
                            });
                            invariant(entry, "Attribute URI for the display form \"" + objRefToString(ref) + "\" was not found");
                            return entry[1];
                        };
                        getFilterAttributeUri = function (attributeFilter) {
                            return getDisplayFormAttributeUri(filterObjRef(attributeFilter));
                        };
                        getUriForIdentifier = function (objRef) {
                            if (isUriRef(objRef)) {
                                return objRef.uri;
                            }
                            else {
                                var foundUri = identifierUriPairs.find(function (pair) { return pair.identifier === objRef.identifier; });
                                if (foundUri === undefined) {
                                    throw new Error("URI for identifier " + objRef.identifier + " have not been found");
                                }
                                return foundUri.uri;
                            }
                        };
                        attributeRefUri = getDisplayFormAttributeUri(this.displayFormRef);
                        groupsByOverAttribute = groupBy(filters, function (filter) { return getUriForIdentifier(filter.overAttribute); });
                        expressionsByOverAttribute = Object.keys(groupsByOverAttribute).map(function (overAttribute) {
                            var filterGroupExpression = groupsByOverAttribute[overAttribute]
                                .map(function (parentFilter) {
                                var isNegativeFilter = isNegativeAttributeFilter(parentFilter.attributeFilter);
                                var filterElements = filterAttributeElements(parentFilter.attributeFilter);
                                var parentFilterAttributeUri = getFilterAttributeUri(parentFilter.attributeFilter);
                                if (!isAttributeElementsByRef(filterElements)) {
                                    throw new NotSupported("Only attribute elements by ref are supported in elements attribute filter");
                                }
                                var elementsString = filterElements.uris
                                    .map(function (attributeElementUri) { return "[" + attributeElementUri + "]"; })
                                    .join(", ");
                                var operatorString = isNegativeFilter ? "NOT IN" : "IN";
                                return "[" + parentFilterAttributeUri + "] " + operatorString + " (" + elementsString + ")";
                            })
                                .join(" AND ");
                            return "((" + filterGroupExpression + ") OVER [" + overAttribute + "] TO [" + attributeRefUri + "])";
                        });
                        return [2 /*return*/, expressionsByOverAttribute.join(" AND ")];
                }
            });
        }); };
        this.getIdentifierUriPairs = function (filters) {
            var allIdentifiersUsed = _this.getAllIdentifiersUsedInAttributeFilters(filters);
            return _this.authCall(function (sdk) { return sdk.md.getUrisFromIdentifiers(_this.workspace, allIdentifiersUsed); });
        };
        this.getAllIdentifiersUsedInAttributeFilters = function (filters) {
            return flatMap(filters, function (filter) {
                // the only candidates are the filter itself and the overAttribute
                return [filter.overAttribute, filterObjRef(filter.attributeFilter)]
                    .filter(isIdentifierRef)
                    .map(function (ref) { return ref.identifier; });
            });
        };
        this.getDisplayFormAttributeUriMapping = function (displayForms) { return __awaiter(_this, void 0, void 0, function () {
            var displayFormUris;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefsToUris(displayForms, this.workspace, this.authCall)];
                    case 1:
                        displayFormUris = _a.sent();
                        return [2 /*return*/, this.authCall(function (sdk) { return __awaiter(_this, void 0, void 0, function () {
                                var response;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, sdk.md.getObjects(this.workspace, displayFormUris)];
                                        case 1:
                                            response = _a.sent();
                                            return [2 /*return*/, displayForms.map(function (displayForm) {
                                                    var attribute = response.find(function (item) {
                                                        if (isIdentifierRef(displayForm)) {
                                                            return displayForm.identifier === item.attributeDisplayForm.meta.identifier;
                                                        }
                                                        else {
                                                            return displayForm.uri === item.attributeDisplayForm.meta.uri;
                                                        }
                                                    });
                                                    if (attribute === undefined) {
                                                        throw new Error("Cannot find attribute for display form");
                                                    }
                                                    return [displayForm, attribute.attributeDisplayForm.content.formOf];
                                                })];
                                    }
                                });
                            }); })];
                }
            });
        }); };
    }
    return LimitingAfmFactory;
}());
export { LimitingAfmFactory };
//# sourceMappingURL=limitingAfmFactory.js.map
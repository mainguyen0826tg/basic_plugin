// (C) 2020 GoodData Corporation
import React, { useState } from "react";
import { Button, Bubble, BubbleHoverTrigger } from "@gooddata/sdk-ui-kit";
import { areObjRefsEqual } from "@gooddata/sdk-model";
import cx from "classnames";
import { AttributeDropdownBody } from "./AttributeDropdownBody";
import { injectIntl, FormattedMessage } from "react-intl";
var getItemTitle = function (selectedItem, intl) {
    return selectedItem ? selectedItem.title : intl.formatMessage({ id: "rankingFilter.allRecords" });
};
var getItemIcon = function (selectedItem) {
    if (selectedItem) {
        return selectedItem.type === "DATE" ? "gd-icon-date" : "gd-icon-attribute";
    }
    else {
        return null;
    }
};
var AttributeDropdownComponent = function (_a) {
    var items = _a.items, selectedItemRef = _a.selectedItemRef, onSelect = _a.onSelect, onDropDownItemMouseOver = _a.onDropDownItemMouseOver, onDropDownItemMouseOut = _a.onDropDownItemMouseOut, customGranularitySelection = _a.customGranularitySelection, intl = _a.intl;
    var _b = useState(false), isOpen = _b[0], setIsOpen = _b[1];
    var isDisabled = items.length === 1;
    var onButtonClick = function () {
        setIsOpen(!isOpen);
    };
    var onItemSelect = function (ref) {
        onSelect(ref);
        setIsOpen(false);
        onDropDownItemMouseOut && onDropDownItemMouseOut();
    };
    var buttonClassNames = cx("gd-button-secondary", "gd-button-small", "button-dropdown", "gd-icon-right", {
        "gd-icon-navigateup": isOpen,
        "gd-icon-navigatedown": !isOpen,
    }, "gd-rf-attribute-dropdown-button", "s-rf-attribute-dropdown-button");
    var selectedAttributeItem = items.find(function (item) { return areObjRefsEqual(item.ref, selectedItemRef); });
    var itemTitle = getItemTitle(selectedAttributeItem, intl);
    return isDisabled ? (React.createElement(BubbleHoverTrigger, { showDelay: 0, hideDelay: 0 },
        React.createElement(Button, { className: buttonClassNames, value: itemTitle, disabled: true }),
        React.createElement(Bubble, { className: "bubble-primary gd-rf-tooltip-bubble s-rf-attribute-no-options-bubble", alignPoints: [{ align: "cr cl" }, { align: "cl cr" }] },
            React.createElement(FormattedMessage, { id: "rankingFilter.attributeDropdown.oneAttributeTooltip" })))) : (React.createElement(React.Fragment, null,
        React.createElement(Button, { className: buttonClassNames, value: itemTitle, onClick: onButtonClick, iconLeft: getItemIcon(selectedAttributeItem) }),
        isOpen && (React.createElement(AttributeDropdownBody, { items: items, selectedItemRef: selectedItemRef, onSelect: onItemSelect, onClose: function () { return setIsOpen(false); }, onDropDownItemMouseOver: onDropDownItemMouseOver, onDropDownItemMouseOut: onDropDownItemMouseOut, customGranularitySelection: customGranularitySelection }))));
};
export var AttributeDropdown = injectIntl(AttributeDropdownComponent);
//# sourceMappingURL=AttributeDropdown.js.map
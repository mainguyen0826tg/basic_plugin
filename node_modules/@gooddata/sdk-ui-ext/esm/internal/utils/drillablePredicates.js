import { __awaiter, __generator, __spreadArrays } from "tslib";
// (C) 2019-2020 GoodData Corporation
import { HeaderPredicates } from "@gooddata/sdk-ui";
import isArray from "lodash/isArray";
import uniq from "lodash/uniq";
/**
 * Converts post message with drilling specification into header predicates. Given the message with
 * uris, identifiers and composedFrom uris and identifiers, this function will create instances of
 * uriMatch(), identifierMatch(), composedFromUri(), composedFromIdentifier() predicates.
 *
 * @param postMessageData - input received via post message
 * @internal
 */
export function convertPostMessageToDrillablePredicates(postMessageData) {
    return __awaiter(this, void 0, void 0, function () {
        var uris, identifiers, composedFrom, simpleUris, simpleIdentifiers, composedFromUris, composedFromIdentifiers;
        return __generator(this, function (_a) {
            uris = postMessageData.uris, identifiers = postMessageData.identifiers, composedFrom = postMessageData.composedFrom;
            simpleUris = isArray(uris) ? uniq(uris) : [];
            simpleIdentifiers = isArray(identifiers) ? uniq(identifiers) : [];
            composedFromUris = (composedFrom === null || composedFrom === void 0 ? void 0 : composedFrom.uris) && isArray(composedFrom.uris) ? uniq(composedFrom.uris) : [];
            composedFromIdentifiers = (composedFrom === null || composedFrom === void 0 ? void 0 : composedFrom.identifiers) && isArray(composedFrom.identifiers) ? uniq(composedFrom.identifiers) : [];
            // note: not passing factory function to maps to make testing assertions simpler (passing factory fun-as-is
            //  will call the factory with 3 args (value, index and all values)
            return [2 /*return*/, __spreadArrays(simpleUris.map(function (uri) { return HeaderPredicates.uriMatch(uri); }), simpleIdentifiers.map(function (identifier) { return HeaderPredicates.identifierMatch(identifier); }), composedFromUris.map(function (uri) { return HeaderPredicates.composedFromUri(uri); }), composedFromIdentifiers.map(function (identifier) { return HeaderPredicates.composedFromIdentifier(identifier); }))];
        });
    });
}
//# sourceMappingURL=drillablePredicates.js.map
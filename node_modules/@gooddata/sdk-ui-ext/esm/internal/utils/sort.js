import { __assign, __spreadArrays } from "tslib";
// (C) 2019-2020 GoodData Corporation
import every from "lodash/every";
import includes from "lodash/includes";
import isEmpty from "lodash/isEmpty";
import isNil from "lodash/isNil";
import omitBy from "lodash/omitBy";
import set from "lodash/set";
import { bucketAttributes, insightBucket, insightMeasures, insightSorts, newAttributeSort, newMeasureSort, sortEntityIds, newAttributeAreaSort, } from "@gooddata/sdk-model";
import { BucketNames, VisualizationTypes } from "@gooddata/sdk-ui";
import { SORT_DIR_ASC, SORT_DIR_DESC } from "../constants/sort";
import { getFirstAttribute, getFirstValidMeasure } from "./bucketHelper";
function getMeasureSortItems(identifier, direction) {
    return [newMeasureSort(identifier, direction)];
}
export function getAttributeSortItem(identifier, direction, aggregation) {
    if (direction === void 0) { direction = "asc"; }
    if (aggregation === void 0) { aggregation = false; }
    var attributeSortItemWithoutAggregation = {
        attributeIdentifier: identifier,
        direction: direction,
    };
    return {
        attributeSortItem: aggregation
            ? __assign(__assign({}, attributeSortItemWithoutAggregation), { aggregation: "sum" }) : attributeSortItemWithoutAggregation,
    };
}
function getDefaultBarChartSort(insight, canSortStackTotalValue) {
    if (canSortStackTotalValue === void 0) { canSortStackTotalValue = false; }
    var measures = insightMeasures(insight);
    var viewBucket = insightBucket(insight, BucketNames.VIEW);
    var stackBucket = insightBucket(insight, BucketNames.STACK);
    var viewBy = viewBucket ? bucketAttributes(viewBucket) : [];
    var stackBy = stackBucket ? bucketAttributes(stackBucket) : [];
    if (viewBy.length === 2) {
        if (measures.length >= 2 && !canSortStackTotalValue) {
            return [
                newAttributeAreaSort(viewBy[0], SORT_DIR_DESC),
                newMeasureSort(measures[0], SORT_DIR_DESC),
            ];
        }
        return [
            newAttributeAreaSort(viewBy[0], SORT_DIR_DESC),
            newAttributeAreaSort(viewBy[1], SORT_DIR_DESC),
        ];
    }
    if (!isEmpty(viewBy) && !isEmpty(stackBy)) {
        return [newAttributeAreaSort(viewBy[0], SORT_DIR_DESC)];
    }
    if (!isEmpty(viewBy) && canSortStackTotalValue) {
        return [newAttributeAreaSort(viewBy[0], SORT_DIR_DESC)];
    }
    return isEmpty(stackBy) && !isEmpty(measures) ? [newMeasureSort(measures[0], SORT_DIR_DESC)] : [];
}
export function getDefaultTreemapSortFromBuckets(viewBy, segmentBy, measures) {
    var viewAttr = viewBy ? bucketAttributes(viewBy) : [];
    var stackAttr = segmentBy ? bucketAttributes(segmentBy) : [];
    if (!isEmpty(viewAttr) && !isEmpty(stackAttr)) {
        return __spreadArrays([newAttributeSort(viewAttr[0], "asc")], measures.map(function (m) { return newMeasureSort(m, "desc"); }));
    }
    return [];
}
function getDefaultTreemapSort(insight) {
    return getDefaultTreemapSortFromBuckets(insightBucket(insight, BucketNames.VIEW), insightBucket(insight, BucketNames.SEGMENT), insightMeasures(insight));
}
function getDefaultHeatmapSortFromBuckets(viewBy) {
    var viewAttr = viewBy ? bucketAttributes(viewBy) : [];
    if (!isEmpty(viewAttr)) {
        return [newAttributeSort(viewAttr[0], "desc")];
    }
    return [];
}
function getDefaultHeatmapSort(insight) {
    var sorts = insightSorts(insight);
    if (sorts && sorts.length > 0) {
        return sorts;
    }
    return getDefaultHeatmapSortFromBuckets(insightBucket(insight, BucketNames.VIEW));
}
// Consider dissolving this function into individual components
export function createSorts(type, insight, canSortStackTotalValue) {
    if (canSortStackTotalValue === void 0) { canSortStackTotalValue = false; }
    switch (type) {
        case VisualizationTypes.COLUMN:
        case VisualizationTypes.LINE:
            return [];
        case VisualizationTypes.BAR:
            return getDefaultBarChartSort(insight, canSortStackTotalValue);
        case VisualizationTypes.TREEMAP:
            return getDefaultTreemapSort(insight);
        case VisualizationTypes.HEATMAP:
            return getDefaultHeatmapSort(insight);
    }
    return [];
}
export function getBucketItemIdentifiers(referencePoint) {
    var _a;
    var buckets = (_a = referencePoint === null || referencePoint === void 0 ? void 0 : referencePoint.buckets) !== null && _a !== void 0 ? _a : [];
    return buckets.reduce(function (localIdentifiers, bucket) {
        var _a;
        var items = (_a = bucket === null || bucket === void 0 ? void 0 : bucket.items) !== null && _a !== void 0 ? _a : [];
        return localIdentifiers.concat(items.map(function (item) { return item.localIdentifier; }));
    }, []);
}
function isSortItemValid(item, identifiers) {
    var sortIdentifiers = sortEntityIds(item);
    return every(sortIdentifiers.allIdentifiers, function (id) { return includes(identifiers, id); });
}
export function removeSort(referencePoint) {
    if (referencePoint.properties) {
        var properties = omitBy(__assign(__assign({}, referencePoint.properties), { sortItems: null }), isNil);
        return __assign(__assign({}, referencePoint), { properties: properties });
    }
    return referencePoint;
}
export function removeInvalidSort(referencePoint) {
    if (referencePoint.properties) {
        var identifiers_1 = getBucketItemIdentifiers(referencePoint);
        var sortItems = referencePoint.properties.sortItems || [];
        sortItems = sortItems.filter(function (item) {
            return isSortItemValid(item, identifiers_1);
        });
        return __assign(__assign({}, referencePoint), { properties: __assign(__assign({}, referencePoint.properties), { sortItems: sortItems }) });
    }
    return referencePoint;
}
export function setSortItems(referencePoint) {
    var _a, _b;
    var buckets = referencePoint.buckets;
    var sortItems = (_b = (_a = referencePoint === null || referencePoint === void 0 ? void 0 : referencePoint.properties) === null || _a === void 0 ? void 0 : _a.sortItems) !== null && _b !== void 0 ? _b : [];
    if (sortItems.length > 0) {
        return referencePoint;
    }
    var firstMeasure = getFirstValidMeasure(buckets);
    var firstAttribute = getFirstAttribute(buckets);
    if (firstMeasure !== null && firstAttribute == null) {
        set(referencePoint, ["properties", "sortItems"], getMeasureSortItems(firstMeasure.localIdentifier, SORT_DIR_DESC));
    }
    else if (firstAttribute !== null) {
        set(referencePoint, ["properties", "sortItems"], [getAttributeSortItem(firstAttribute.localIdentifier, SORT_DIR_ASC)]);
    }
    return referencePoint;
}
//# sourceMappingURL=sort.js.map
import { __extends } from "tslib";
// (C) 2020 GoodData Corporation
import { getOccupiedMeasureBucketsLocalIdentifiers, isComparativeSeries, isPrimarySeries, isTargetSeries, } from "./bulletChartSeries";
import { isColorFromPalette, isRgbColor } from "@gooddata/sdk-model";
import { isDarkTheme } from "@gooddata/sdk-ui-theme-provider";
import { findMeasureGroupInDimensions } from "../_util/executionResultHelper";
import { ColorStrategy, isValidMappedColor, getColorByGuid, getColorFromMapping, getLighterColorFromRGB, getRgbStringFromRGB, normalizeColorToRGB, parseRGBString, } from "@gooddata/sdk-ui-vis-commons";
import { DEFAULT_BULLET_GRAY_COLOR } from "../_util/color";
var BulletChartColorStrategy = /** @class */ (function (_super) {
    __extends(BulletChartColorStrategy, _super);
    function BulletChartColorStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BulletChartColorStrategy.prototype.createColorAssignment = function (colorPalette, colorMapping, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    _viewByAttribute, 
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    _stackByAttribute, dv) {
        var _this = this;
        var occupiedMeasureBucketsLocalIdentifiers = getOccupiedMeasureBucketsLocalIdentifiers(dv);
        var measureGroup = findMeasureGroupInDimensions(dv.meta().dimensions());
        var defaultColorsAssignment = this.getDefaultColorAssignment(colorPalette, measureGroup, occupiedMeasureBucketsLocalIdentifiers);
        var colorAssignment = measureGroup.items.map(function (headerItem) {
            var color = _this.mapMeasureColor(headerItem, colorPalette, colorMapping, dv, defaultColorsAssignment);
            return {
                headerItem: headerItem,
                color: color,
            };
        });
        return {
            fullColorAssignment: colorAssignment,
        };
    };
    BulletChartColorStrategy.prototype.createPalette = function (colorPalette, colorAssignments) {
        return colorAssignments
            .map(function (colorAssignment, index) {
            if (isRgbColor(colorAssignment.color)) {
                return colorAssignment.color.value;
            }
            else if (isColorFromPalette(colorAssignment.color)) {
                return getColorByGuid(colorPalette, colorAssignment.color.value, index);
            }
        })
            .filter(Boolean)
            .map(function (color) { return getRgbStringFromRGB(color); });
    };
    BulletChartColorStrategy.prototype.mapMeasureColor = function (headerItem, colorPalette, colorMapping, dv, defaultColorsAssignment) {
        var mappedColor = getColorFromMapping(headerItem, colorMapping, dv);
        if (isValidMappedColor(mappedColor, colorPalette)) {
            return mappedColor;
        }
        var defaultColorAssignment = defaultColorsAssignment.find(function (colorAssignment) {
            return colorAssignment.headerItem.measureHeaderItem.localIdentifier ===
                headerItem.measureHeaderItem.localIdentifier;
        });
        return defaultColorAssignment.color;
    };
    BulletChartColorStrategy.prototype.getDefaultColorAssignment = function (colorPalette, measureGroup, occupiedMeasureBucketsLocalIdentifiers) {
        var _this = this;
        return measureGroup.items.map(function (headerItem, index) {
            var _a, _b, _c, _d, _e;
            var color = (isPrimarySeries(index, occupiedMeasureBucketsLocalIdentifiers) && {
                type: "guid",
                value: colorPalette[0].guid,
            }) ||
                (isTargetSeries(index, occupiedMeasureBucketsLocalIdentifiers) && {
                    type: "rgb",
                    value: getLighterColorFromRGB(colorPalette[0].fill, isDarkTheme(_this.theme) ? 0.5 : -0.3),
                }) ||
                (isComparativeSeries(index, occupiedMeasureBucketsLocalIdentifiers) && {
                    type: "rgb",
                    value: ((_b = (_a = _this.theme) === null || _a === void 0 ? void 0 : _a.palette) === null || _b === void 0 ? void 0 : _b.complementary) ? parseRGBString(normalizeColorToRGB((_e = (_d = (_c = _this.theme) === null || _c === void 0 ? void 0 : _c.palette) === null || _d === void 0 ? void 0 : _d.complementary) === null || _e === void 0 ? void 0 : _e.c2))
                        : DEFAULT_BULLET_GRAY_COLOR,
                });
            return {
                headerItem: headerItem,
                color: color,
            };
        });
    };
    return BulletChartColorStrategy;
}(ColorStrategy));
export default BulletChartColorStrategy;
//# sourceMappingURL=bulletChartColoring.js.map
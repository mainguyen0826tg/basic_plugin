import { AnyAction, Dispatch } from "@reduxjs/toolkit";
import { IDashboardCommand } from "../commands";
import { DashboardSelectorEvaluator } from "../store/types";
import { ICustomDashboardEvent, DashboardCommandFailed, DashboardCommandStarted, DashboardEvents } from "../events";
/**
 * @public
 */
export declare type DashboardEventHandlerFn<TEvents extends DashboardEvents | ICustomDashboardEvent> = (event: TEvents, dashboardDispatch: Dispatch<AnyAction>, stateSelect: DashboardSelectorEvaluator) => void;
/**
 * @public
 */
export declare type DashboardEventEvalFn = (event: DashboardEvents | ICustomDashboardEvent) => boolean;
/**
 * Event handlers can be registered for a dashboard. All events that occur during dashboard processing will be
 * evaluated against all registered handlers and if evaluation succeeds they will be dispatched to the handler
 * function.
 *
 * @public
 */
export declare type DashboardEventHandler<TEvents extends DashboardEvents | ICustomDashboardEvent = any> = {
    /**
     * Specify event evaluation function. This will be used by dashboard's event emitter to determine
     * whether event of particular type should be dispatched to this handler.
     *
     * @param event - dashboard or custom event
     */
    eval: DashboardEventEvalFn;
    /**
     * The actual event handling function. This will be called if the eval function returns true.
     *
     * @param event - event to handle
     * @param dashboardDispatch - the dispatch object of the dashboard store use dot dispatch commands or queries
     * @param stateSelect - callback to execute arbitrary selectors against the dashboard state
     */
    handler: DashboardEventHandlerFn<TEvents>;
};
/**
 * Creates a {@link DashboardEventHandler} instance that will be invoked for any event (event for custom events).
 *
 * @param handler - the actual event handling function
 * @public
 */
export declare function anyEventHandler(handler: DashboardEventHandler["handler"]): DashboardEventHandler;
/**
 * Creates a {@link DashboardEventHandler} instance that will be invoked for any dashboard event (i.e. not for custom events).
 *
 * @param handler - the actual event handling function
 * @public
 */
export declare function anyDashboardEventHandler(handler: DashboardEventHandler["handler"]): DashboardEventHandler;
/**
 * Creates a {@link DashboardEventHandler} instance that will be invoked for one specified event type.
 *
 * @param type - the type of event this handler should trigger for
 * @param handler - the actual event handling function
 * @public
 */
export declare function singleEventTypeHandler(type: (DashboardEvents | ICustomDashboardEvent)["type"], handler: DashboardEventHandler["handler"]): DashboardEventHandler;
/**
 * Creates a {@link DashboardEventHandler} instance that will be invoked for a DashboardCommandStarted of a particular command.
 *
 * @param type - the type of command the DashboardCommandStarted of which this handler should trigger for
 * @param handler - the actual event handling function
 * @alpha
 */
export declare function commandStartedEventHandler<TCommand extends IDashboardCommand>(type: TCommand["type"], handler: DashboardEventHandler<DashboardCommandStarted<TCommand>>["handler"]): DashboardEventHandler<DashboardCommandStarted<TCommand>>;
/**
 * Creates a {@link DashboardEventHandler} instance that will be invoked for a DashboardCommandFailed of a particular command.
 *
 * @param type - the type of command the DashboardCommandFailed of which this handler should trigger for
 * @param handler - the actual event handling function
 * @alpha
 */
export declare function commandFailedEventHandler<TCommand extends IDashboardCommand>(type: TCommand["type"], handler: DashboardEventHandler<DashboardCommandFailed<TCommand>>["handler"]): DashboardEventHandler<DashboardCommandFailed<TCommand>>;
//# sourceMappingURL=eventHandler.d.ts.map
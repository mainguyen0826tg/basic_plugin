// (C) 2019-2021 GoodData Corporation
import { isDashboardLayoutItem, isDashboardLayout, isInsightWidget, isInsightWidgetDefinition, isKpiWidget, isKpiWidgetDefinition, isWidget, isWidgetDefinition, } from "@gooddata/sdk-backend-spi";
import isEqual from "lodash/isEqual";
import isNil from "lodash/isNil";
import { areObjRefsEqual } from "@gooddata/sdk-model";
/**
 * @alpha
 */
var DashboardLayoutItemFacade = /** @class */ (function () {
    function DashboardLayoutItemFacade(sectionFacade, item, itemIndex) {
        this.sectionFacade = sectionFacade;
        this.item = item;
        this.itemIndex = itemIndex;
    }
    DashboardLayoutItemFacade.for = function (sectionFacade, item, index) {
        return new DashboardLayoutItemFacade(sectionFacade, item, index);
    };
    DashboardLayoutItemFacade.prototype.raw = function () {
        return this.item;
    };
    DashboardLayoutItemFacade.prototype.section = function () {
        return this.sectionFacade;
    };
    DashboardLayoutItemFacade.prototype.index = function () {
        return this.itemIndex;
    };
    DashboardLayoutItemFacade.prototype.indexIs = function (index) {
        return this.index() === index;
    };
    DashboardLayoutItemFacade.prototype.isFirst = function () {
        return this.indexIs(0);
    };
    DashboardLayoutItemFacade.prototype.isLast = function () {
        return this.indexIs(this.sectionFacade.items().count() - 1);
    };
    DashboardLayoutItemFacade.prototype.widget = function () {
        return this.item.widget;
    };
    DashboardLayoutItemFacade.prototype.widgetEquals = function (widget) {
        return isEqual(this.widget(), widget);
    };
    DashboardLayoutItemFacade.prototype.widgetIs = function (widget) {
        return this.widget() === widget;
    };
    DashboardLayoutItemFacade.prototype.isEmpty = function () {
        return isNil(this.widget());
    };
    DashboardLayoutItemFacade.prototype.size = function () {
        return this.item.size;
    };
    DashboardLayoutItemFacade.prototype.sizeForScreen = function (screen) {
        return this.size()[screen];
    };
    DashboardLayoutItemFacade.prototype.hasSizeForScreen = function (screen) {
        return !isNil(this.sizeForScreen(screen));
    };
    DashboardLayoutItemFacade.prototype.testRaw = function (pred) {
        return pred(this.raw());
    };
    DashboardLayoutItemFacade.prototype.test = function (pred) {
        return pred(this);
    };
    DashboardLayoutItemFacade.prototype.isWidgetItem = function () {
        return isWidget(this.widget());
    };
    DashboardLayoutItemFacade.prototype.isWidgetDefinitionItem = function () {
        return isWidgetDefinition(this.widget());
    };
    DashboardLayoutItemFacade.prototype.isKpiWidgetItem = function () {
        return isKpiWidget(this.widget());
    };
    DashboardLayoutItemFacade.prototype.isKpiWidgetDefinitionItem = function () {
        return isKpiWidgetDefinition(this.widget());
    };
    DashboardLayoutItemFacade.prototype.isInsightWidgetItem = function () {
        return isInsightWidget(this.widget());
    };
    DashboardLayoutItemFacade.prototype.isInsightWidgetDefinitionItem = function () {
        return isInsightWidgetDefinition(this.widget());
    };
    DashboardLayoutItemFacade.prototype.isLayoutItem = function () {
        return isDashboardLayout(this.widget());
    };
    DashboardLayoutItemFacade.prototype.isCustomItem = function () {
        return !isDashboardLayoutItem(this.widget());
    };
    DashboardLayoutItemFacade.prototype.isWidgetItemWithRef = function (ref) {
        var _a;
        if (this.isWidgetItem()) {
            return areObjRefsEqual((_a = this.item.widget) === null || _a === void 0 ? void 0 : _a.ref, ref);
        }
        return false;
    };
    DashboardLayoutItemFacade.prototype.isWidgetItemWithInsightRef = function (ref) {
        var _a;
        if (this.isInsightWidgetItem() || this.isInsightWidgetDefinitionItem()) {
            return areObjRefsEqual((_a = this.item.widget) === null || _a === void 0 ? void 0 : _a.insight, ref);
        }
        return false;
    };
    DashboardLayoutItemFacade.prototype.isWidgetItemWithKpiRef = function (ref) {
        var _a;
        if (this.isKpiWidgetItem() || this.isKpiWidgetDefinitionItem()) {
            return areObjRefsEqual((_a = this.item.widget) === null || _a === void 0 ? void 0 : _a.ref, ref);
        }
        return false;
    };
    return DashboardLayoutItemFacade;
}());
export { DashboardLayoutItemFacade };
//# sourceMappingURL=item.js.map
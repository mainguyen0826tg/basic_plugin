import { __assign, __read, __spread } from "tslib";
// (C) 2020-2021 GoodData Corporation
import { useCallback, useEffect, useRef, useState } from "react";
import { v4 as uuid } from "uuid";
import { UnexpectedSdkError } from "@gooddata/sdk-ui";
import { queryAndWaitFor } from "../store";
import { useDashboardDispatch } from "./DashboardStoreProvider";
import { isDashboardQueryFailed, isDashboardQueryRejected, } from "../events";
/**
 * @internal
 */
export var useDashboardQueryProcessing = function (_a) {
    var queryCreator = _a.queryCreator, onSuccess = _a.onSuccess, onError = _a.onError, onRejected = _a.onRejected, onBeforeRun = _a.onBeforeRun;
    var _b = __read(useState(), 2), state = _b[0], setState = _b[1];
    var canceled = useRef(false);
    var dispatch = useDashboardDispatch();
    var run = useCallback(function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (canceled.current) {
            return;
        }
        var query = queryCreator.apply(void 0, __spread(args));
        if (!query.correlationId) {
            query = __assign(__assign({}, query), { correlationId: uuid() });
        }
        if (!canceled.current) {
            setState({
                status: "running",
                result: undefined,
                error: undefined,
            });
        }
        onBeforeRun === null || onBeforeRun === void 0 ? void 0 : onBeforeRun(query);
        queryAndWaitFor(dispatch, query)
            .then(function (result) {
            if (!canceled.current) {
                setState({ status: "success", result: result, error: undefined });
                onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(result);
            }
        })
            .catch(function (e) {
            if (!canceled.current) {
                if (isDashboardQueryFailed(e)) {
                    setState({
                        status: "error",
                        result: undefined,
                        error: new UnexpectedSdkError(e.payload.message, e.payload.error),
                    });
                    onError === null || onError === void 0 ? void 0 : onError(e);
                }
                else if (isDashboardQueryRejected(e)) {
                    setState({ status: "rejected", result: undefined, error: undefined });
                    onRejected === null || onRejected === void 0 ? void 0 : onRejected(e);
                }
            }
        });
    }, [queryCreator, onSuccess, onError, onRejected, onBeforeRun]);
    // cancel any "in-flight" queries once the parent component is unmounting to prevent react warnings
    // about updating unmounted components
    useEffect(function () {
        return function () {
            canceled.current = true;
        };
    }, []);
    return __assign({ run: run }, state);
};
//# sourceMappingURL=useDashboardQueryProcessing.js.map
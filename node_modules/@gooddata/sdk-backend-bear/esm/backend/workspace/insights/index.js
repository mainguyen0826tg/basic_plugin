import { __assign, __awaiter, __generator } from "tslib";
// (C) 2019-2021 GoodData Corporation
import flatMap from "lodash/flatMap";
import flow from "lodash/flow";
import map from "lodash/fp/map";
import sortBy from "lodash/fp/sortBy";
import { insightId, insightVisualizationUrl, insightFilters, insightSetFilters, } from "@gooddata/sdk-model";
import { convertVisualizationClass } from "../../../convertors/fromBackend/VisualizationClassConverter";
import { convertVisualization } from "../../../convertors/fromBackend/VisualizationConverter";
import { convertMetadataObjectXrefEntry } from "../../../convertors/fromBackend/MetaConverter";
import { convertInsight, convertInsightDefinition } from "../../../convertors/toBackend/InsightConverter";
import { objRefToUri, objRefsToUris, getObjectIdFromUri, updateUserMap } from "../../../utils/api";
import { InsightReferencesQuery } from "./insightReferences";
import { appendFilters } from "./filterMerging";
import { enhanceWithAll } from "@gooddata/sdk-backend-base";
import { getVisualizationUserUris } from "../../../utils/metadata";
var BearWorkspaceInsights = /** @class */ (function () {
    function BearWorkspaceInsights(authCall, workspace) {
        var _this = this;
        this.authCall = authCall;
        this.workspace = workspace;
        this.getVisualizationClass = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var uri, visClassResult;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(ref, this.workspace, this.authCall)];
                    case 1:
                        uri = _a.sent();
                        return [4 /*yield*/, this.authCall(function (sdk) { return sdk.md.getObjects(_this.workspace, [uri]); })];
                    case 2:
                        visClassResult = _a.sent();
                        return [2 /*return*/, convertVisualizationClass(visClassResult[0])];
                }
            });
        }); };
        this.getVisualizationClasses = function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var visualizationClassesResult, visClassOrderingIndex;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.authCall(function (sdk) {
                                var queryOptions = {
                                    category: "visualizationClass",
                                };
                                if (options.includeDeprecated) {
                                    queryOptions.deprecated = true;
                                }
                                return sdk.md.getObjectsByQuery(_this.workspace, queryOptions);
                            })];
                        case 1:
                            visualizationClassesResult = _a.sent();
                            visClassOrderingIndex = function (visClass) { var _a; return (_a = visClass.visualizationClass.content.orderIndex) !== null && _a !== void 0 ? _a : 0; };
                            return [2 /*return*/, flow(sortBy(visClassOrderingIndex), map(convertVisualizationClass))(visualizationClassesResult)];
                    }
                });
            });
        };
        this.getInsight = function (ref, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var uri, visualization, userMap, _a, visClassResult, visClass, visualizationClassUri;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, objRefToUri(ref, this.workspace, this.authCall)];
                        case 1:
                            uri = _b.sent();
                            return [4 /*yield*/, this.authCall(function (sdk) { return sdk.md.getVisualization(uri); })];
                        case 2:
                            visualization = _b.sent();
                            if (!options.loadUserData) return [3 /*break*/, 4];
                            return [4 /*yield*/, updateUserMap(new Map(), getVisualizationUserUris(visualization), this.authCall)];
                        case 3:
                            _a = _b.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            _a = undefined;
                            _b.label = 5;
                        case 5:
                            userMap = _a;
                            return [4 /*yield*/, this.authCall(function (sdk) {
                                    return sdk.md.getObjects(_this.workspace, [
                                        visualization.visualizationObject.content.visualizationClass.uri,
                                    ]);
                                })];
                        case 6:
                            visClassResult = _b.sent();
                            visClass = visClassResult[0];
                            visualizationClassUri = visClass.visualizationClass.content.url;
                            return [2 /*return*/, convertVisualization(visualization, visualizationClassUri, userMap)];
                    }
                });
            });
        };
        this.getVisualizationClassesByVisualizationClassUri = function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var visualizationClasses;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getVisualizationClasses(options)];
                        case 1:
                            visualizationClasses = _a.sent();
                            return [2 /*return*/, visualizationClasses.reduce(function (acc, el) {
                                    var _a;
                                    if (!el.visualizationClass.uri) {
                                        return acc;
                                    }
                                    return __assign(__assign({}, acc), (_a = {}, _a[el.visualizationClass.uri] = el.visualizationClass.url, _a));
                                }, {})];
                    }
                });
            });
        };
        this.getInsights = function (options) { return __awaiter(_this, void 0, void 0, function () {
            var visualizationClassUrlByVisualizationClassUri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getVisualizationClassesByVisualizationClassUri({ includeDeprecated: true })];
                    case 1:
                        visualizationClassUrlByVisualizationClassUri = _a.sent();
                        return [2 /*return*/, this.getInsightsInner(options !== null && options !== void 0 ? options : {}, visualizationClassUrlByVisualizationClassUri, new Map())];
                }
            });
        }); };
        this.getInsightsInner = function (options, visualizationClassUrlByVisualizationClassUri, userMap) { return __awaiter(_this, void 0, void 0, function () {
            var mergedOptions, defaultLimit, _a, visualizations, _b, count, offset, totalCount, updatedUserMap, _c, insights, goTo, emptyResult, hasNextPage;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        mergedOptions = __assign(__assign({}, options), { getTotalCount: true });
                        defaultLimit = 50;
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                var _a;
                                return sdk.md.getObjectsByQueryWithPaging(_this.workspace, __assign(__assign({ category: "visualizationObject" }, mergedOptions), { 
                                    // the limit must be specified at all times, otherwise we get 400 (RAIL-3557)
                                    limit: (_a = mergedOptions.limit) !== null && _a !== void 0 ? _a : defaultLimit }));
                            })];
                    case 1:
                        _a = _d.sent(), visualizations = _a.items, _b = _a.paging, count = _b.count, offset = _b.offset, totalCount = _b.totalCount;
                        if (!options.loadUserData) return [3 /*break*/, 3];
                        return [4 /*yield*/, updateUserMap(userMap, flatMap(visualizations, getVisualizationUserUris), this.authCall)];
                    case 2:
                        _c = _d.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _c = userMap;
                        _d.label = 4;
                    case 4:
                        updatedUserMap = _c;
                        insights = visualizations.map(function (visualization) {
                            return convertVisualization(visualization, visualizationClassUrlByVisualizationClassUri[visualization.visualizationObject.content.visualizationClass.uri], updatedUserMap);
                        });
                        goTo = function (index) {
                            return index * count < totalCount
                                ? _this.getInsightsInner(__assign(__assign({}, options), { offset: index * count }), visualizationClassUrlByVisualizationClassUri, updatedUserMap)
                                : Promise.resolve(emptyResult);
                        };
                        emptyResult = enhanceWithAll({
                            items: [],
                            limit: count,
                            offset: totalCount,
                            totalCount: totalCount,
                            next: function () { return Promise.resolve(emptyResult); },
                            goTo: goTo,
                        });
                        hasNextPage = offset + count < totalCount;
                        return [2 /*return*/, enhanceWithAll({
                                items: insights,
                                limit: count,
                                offset: offset,
                                totalCount: totalCount,
                                next: hasNextPage
                                    ? function () {
                                        return _this.getInsightsInner(__assign(__assign({}, options), { offset: offset + count }), visualizationClassUrlByVisualizationClassUri, updatedUserMap);
                                    }
                                    : function () { return Promise.resolve(emptyResult); },
                                goTo: goTo,
                            })];
                }
            });
        }); };
        this.createInsight = function (insight) { return __awaiter(_this, void 0, void 0, function () {
            var withConvertedVisClass, mdObject;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInsightWithConvertedVisClass(insight)];
                    case 1:
                        withConvertedVisClass = _a.sent();
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.saveVisualization(_this.workspace, {
                                    visualizationObject: convertInsightDefinition(withConvertedVisClass),
                                });
                            })];
                    case 2:
                        mdObject = _a.sent();
                        return [2 /*return*/, convertVisualization(mdObject, insightVisualizationUrl(insight))];
                }
            });
        }); };
        this.updateInsight = function (insight) { return __awaiter(_this, void 0, void 0, function () {
            var id, uri, withConvertedVisClass;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        id = insightId(insight);
                        return [4 /*yield*/, this.authCall(function (sdk) { return sdk.md.getObjectUri(_this.workspace, id); })];
                    case 1:
                        uri = _a.sent();
                        return [4 /*yield*/, this.getInsightWithConvertedVisClass(insight)];
                    case 2:
                        withConvertedVisClass = _a.sent();
                        return [4 /*yield*/, this.authCall(function (sdk) {
                                return sdk.md.updateVisualization(_this.workspace, uri, {
                                    visualizationObject: convertInsight(withConvertedVisClass),
                                });
                            })];
                    case 3:
                        _a.sent();
                        // sdk.md.updateVisualization returns just an URI, so we need to return the original insight
                        return [2 /*return*/, insight];
                }
            });
        }); };
        this.deleteInsight = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(ref, this.workspace, this.authCall)];
                    case 1:
                        uri = _a.sent();
                        return [4 /*yield*/, this.authCall(function (sdk) { return sdk.md.deleteVisualization(uri); })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.openInsightAsReport = function (insight) { return __awaiter(_this, void 0, void 0, function () {
            var visualizationObject;
            var _this = this;
            return __generator(this, function (_a) {
                visualizationObject = convertInsightDefinition(insight);
                return [2 /*return*/, this.authCall(function (sdk) {
                        return sdk.md.openVisualizationAsReport(_this.workspace, { visualizationObject: visualizationObject });
                    })];
            });
        }); };
        this.getInsightReferencedObjects = function (insight, types) {
            if (types === void 0) { types = ["dataSet", "measure", "fact", "attribute"]; }
            return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, new InsightReferencesQuery(this.authCall, this.workspace, insight, types).run()];
                });
            });
        };
        this.getInsightReferencingObjects = function (ref) { return __awaiter(_this, void 0, void 0, function () {
            var uri, objectId;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, objRefToUri(ref, this.workspace, this.authCall)];
                    case 1:
                        uri = _a.sent();
                        objectId = getObjectIdFromUri(uri);
                        return [2 /*return*/, this.authCall(function (sdk) { return __awaiter(_this, void 0, void 0, function () {
                                var usedBy;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, sdk.xhr.getParsed("/gdc/md/" + this.workspace + "/usedby2/" + objectId + "?types=analyticalDashboard")];
                                        case 1:
                                            usedBy = _a.sent();
                                            return [2 /*return*/, {
                                                    analyticalDashboards: usedBy.entries.map(function (entry) {
                                                        return convertMetadataObjectXrefEntry("analyticalDashboard", entry);
                                                    }),
                                                }];
                                    }
                                });
                            }); })];
                }
            });
        }); };
        this.getInsightWithAddedFilters = function (insight, filters) { return __awaiter(_this, void 0, void 0, function () {
            var mergedFilters;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!filters.length) {
                            return [2 /*return*/, insight];
                        }
                        return [4 /*yield*/, appendFilters(insightFilters(insight), filters, function (refs) {
                                return objRefsToUris(refs, _this.workspace, _this.authCall);
                            })];
                    case 1:
                        mergedFilters = _a.sent();
                        return [2 /*return*/, insightSetFilters(insight, mergedFilters)];
                }
            });
        }); };
        this.getVisualizationClassByUrl = function (url) { return __awaiter(_this, void 0, void 0, function () {
            var allVisClasses;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getVisualizationClasses()];
                    case 1:
                        allVisClasses = _a.sent();
                        return [2 /*return*/, allVisClasses.find(function (visClass) { return visClass.visualizationClass.url === url; })];
                }
            });
        }); };
    }
    BearWorkspaceInsights.prototype.getInsightWithConvertedVisClass = function (insight) {
        return __awaiter(this, void 0, void 0, function () {
            var visClassUrl, visClass;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        visClassUrl = insightVisualizationUrl(insight);
                        return [4 /*yield*/, this.getVisualizationClassByUrl(visClassUrl)];
                    case 1:
                        visClass = _a.sent();
                        if (!visClass) {
                            throw new Error("Visualization class with url " + visClassUrl + " not found.");
                        }
                        return [2 /*return*/, {
                                insight: __assign(__assign({}, insight.insight), { visualizationUrl: visClass.visualizationClass.uri }),
                            }];
                }
            });
        });
    };
    return BearWorkspaceInsights;
}());
export { BearWorkspaceInsights };
//# sourceMappingURL=index.js.map
// (C) 2020 GoodData Corporation
import React from "react";
import cx from "classnames";
import Measure from "react-measure";
import { isWidget, isDashboardWidget, UnexpectedError, } from "@gooddata/sdk-backend-spi";
import { KpiView } from "./KpiView";
import { InsightRenderer } from "./InsightRenderer/InsightRenderer";
import { DashboardItem, DashboardItemHeadline, DashboardItemVisualization } from "../../internal";
import { getVisTypeCssClass } from "./utils";
var dashboardStyle = { height: "100%", width: "100%" };
export var DashboardWidgetRenderer = function (props) {
    var ErrorComponent = props.ErrorComponent, LoadingComponent = props.LoadingComponent, backend = props.backend, drillableItems = props.drillableItems, filters = props.filters, onFiltersChange = props.onFiltersChange, filterContext = props.filterContext, onDrill = props.onDrill, onError = props.onError, workspace = props.workspace, visType = props.visType, insight = props.insight, screen = props.screen, widget = props.widget, alert = props.alert, dashboardRef = props.dashboardRef;
    if (!isDashboardWidget) {
        throw new UnexpectedError("Cannot render custom widget with DefaultWidgetRenderer! Please handle custom widget rendering in your widgetRenderer.");
    }
    if (isWidget(widget)) {
        if (widget.type === "insight") {
            return (React.createElement(Measure, { client: true }, function (_a) {
                var measureRef = _a.measureRef, contentRect = _a.contentRect;
                return (React.createElement("div", { style: dashboardStyle, ref: measureRef },
                    React.createElement(DashboardItem, { className: cx("type-visualization", "gd-dashboard-view-widget", getVisTypeCssClass(widget.type, visType)), screen: screen },
                        React.createElement(DashboardItemVisualization, { renderHeadline: function () {
                                var _a;
                                return (React.createElement(DashboardItemHeadline, { title: widget.title, clientHeight: (_a = contentRect.client) === null || _a === void 0 ? void 0 : _a.height }));
                            } }, function () {
                            var _a;
                            return (React.createElement(InsightRenderer, { clientHeight: (_a = contentRect.client) === null || _a === void 0 ? void 0 : _a.height, insight: insight, insightWidget: widget, backend: backend, workspace: workspace, filters: filters, filterContext: filterContext, drillableItems: drillableItems, onDrill: onDrill, onError: onError, ErrorComponent: ErrorComponent, LoadingComponent: LoadingComponent }));
                        }))));
            }));
        }
        return (React.createElement(DashboardItem, { className: "type-kpi", screen: screen },
            React.createElement(KpiView, { dashboardRef: dashboardRef, kpiWidget: widget, filterContext: filterContext, alert: alert, backend: backend, workspace: workspace, filters: filters, onFiltersChange: onFiltersChange, drillableItems: drillableItems, onDrill: onDrill, onError: onError, ErrorComponent: ErrorComponent, LoadingComponent: LoadingComponent })));
    }
    return React.createElement("div", null, "Unknown widget");
};
//# sourceMappingURL=DashboardWidgetRenderer.js.map
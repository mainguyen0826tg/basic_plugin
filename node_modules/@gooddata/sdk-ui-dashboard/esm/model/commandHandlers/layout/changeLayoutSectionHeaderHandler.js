import { __generator } from "tslib";
import { invalidArgumentsProvided } from "../../events/general";
import { selectLayout } from "../../store/layout/layoutSelectors";
import { put, select } from "redux-saga/effects";
import { validateSectionExists } from "./validation/layoutValidation";
import merge from "lodash/merge";
import { layoutActions } from "../../store/layout";
import { layoutSectionHeaderChanged } from "../../events/layout";
export function changeLayoutSectionHeaderHandler(ctx, cmd) {
    var layout, _a, index, header, mergeHeaders, existingHeader, newHeader;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4 /*yield*/, select(selectLayout)];
            case 1:
                layout = _c.sent();
                _a = cmd.payload, index = _a.index, header = _a.header, mergeHeaders = _a.merge;
                if (!validateSectionExists(layout, index)) {
                    throw invalidArgumentsProvided(ctx, cmd, "Attempting to modify header of non-existent section at " + index + ". There are currently " + layout.sections.length + " sections.");
                }
                existingHeader = (_b = layout.sections[index].header) !== null && _b !== void 0 ? _b : {};
                newHeader = mergeHeaders ? merge({}, existingHeader, header) : header;
                return [4 /*yield*/, put(layoutActions.changeSectionHeader({
                        index: index,
                        header: newHeader,
                        undo: {
                            cmd: cmd,
                        },
                    }))];
            case 2:
                _c.sent();
                return [2 /*return*/, layoutSectionHeaderChanged(ctx, newHeader, index, cmd.correlationId)];
        }
    });
}
//# sourceMappingURL=changeLayoutSectionHeaderHandler.js.map
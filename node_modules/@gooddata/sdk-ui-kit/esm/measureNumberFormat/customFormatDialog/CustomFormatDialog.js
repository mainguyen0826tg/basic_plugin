import { __extends } from "tslib";
// (C) 2020 GoodData Corporation
import React from "react";
import { SnapPoint } from "../../typings/positioning";
import { positioningToAlignPoints } from "../../utils/positioning";
import { Button } from "../../Button";
import { Overlay } from "../../Overlay";
import Preview from "./previewSection/Preview";
import FormatInput from "./FormatInput";
import DocumentationLink from "./DocumentationLink";
var CustomFormatDialog = /** @class */ (function (_super) {
    __extends(CustomFormatDialog, _super);
    function CustomFormatDialog() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            format: _this.props.formatString || "",
        };
        _this.onApply = function () {
            _this.props.onApply(_this.state.format);
        };
        _this.isApplyButtonDisabled = function () {
            return _this.props.formatString === _this.state.format || _this.state.format === "";
        };
        _this.onFormatChange = function (format) {
            _this.setState({ format: format });
        };
        return _this;
    }
    CustomFormatDialog.prototype.render = function () {
        var _a = this.props, anchorEl = _a.anchorEl, positioning = _a.positioning, onCancel = _a.onCancel, separators = _a.separators, templates = _a.templates, documentationLink = _a.documentationLink, intl = _a.intl;
        var format = this.state.format;
        return (React.createElement(Overlay, { closeOnParentScroll: true, closeOnMouseDrag: true, closeOnOutsideClick: true, alignTo: anchorEl, alignPoints: positioningToAlignPoints(positioning), onClose: onCancel },
            React.createElement("div", { className: "gd-dropdown overlay" },
                React.createElement("div", { className: "gd-measure-custom-format-dialog-body s-custom-format-dialog-body" },
                    React.createElement("div", { className: "gd-measure-custom-format-dialog-header" },
                        React.createElement("span", null, intl.formatMessage({ id: "measureNumberCustomFormatDialog.title" }))),
                    React.createElement("div", { className: "gd-measure-custom-format-dialog-content" },
                        React.createElement(FormatInput, { format: format, templates: templates, separators: separators, onFormatChange: this.onFormatChange }),
                        documentationLink && React.createElement(DocumentationLink, { url: documentationLink }),
                        React.createElement(Preview, { format: format, separators: separators })),
                    React.createElement("div", { className: "gd-measure-custom-format-dialog-footer" },
                        React.createElement(Button, { className: "gd-button-secondary gd-button-small s-custom-format-dialog-cancel", onClick: onCancel, value: intl.formatMessage({ id: "cancel" }) }),
                        React.createElement(Button, { className: "gd-button-action gd-button-small s-custom-format-dialog-apply", onClick: this.onApply, value: intl.formatMessage({ id: "apply" }), disabled: this.isApplyButtonDisabled() }))))));
    };
    CustomFormatDialog.defaultProps = {
        positioning: [
            { snapPoints: { parent: SnapPoint.CenterRight, child: SnapPoint.CenterLeft } },
            { snapPoints: { parent: SnapPoint.TopRight, child: SnapPoint.TopLeft } },
            { snapPoints: { parent: SnapPoint.BottomRight, child: SnapPoint.BottomLeft } },
        ],
    };
    return CustomFormatDialog;
}(React.PureComponent));
export { CustomFormatDialog };
//# sourceMappingURL=CustomFormatDialog.js.map
// (C) 2021 GoodData Corporation
import { __read } from "tslib";
import { useCallback, useMemo, useState } from "react";
import { useIntl } from "react-intl";
import { selectExecutionResultByRef, useDashboardSelector } from "../../../model";
import { isDataError } from "../../../_staging/errors/errorPredicates";
import { useDashboardCustomizationsContext } from "../../dashboardContexts";
import { getDefaultInsightMenuItems, getDefaultLegacyInsightMenuItems, } from "../insightMenu";
export var useInsightMenu = function (config) {
    var exportCSVEnabled = config.exportCSVEnabled, exportXLSXEnabled = config.exportXLSXEnabled, insight = config.insight, onExportCSV = config.onExportCSV, onExportXLSX = config.onExportXLSX, widget = config.widget;
    var intl = useIntl();
    var _a = __read(useState(false), 2), isMenuOpen = _a[0], setIsMenuOpen = _a[1];
    var closeMenu = useCallback(function () { return setIsMenuOpen(false); }, []);
    var openMenu = useCallback(function () { return setIsMenuOpen(true); }, []);
    var execution = useDashboardSelector(selectExecutionResultByRef(widget.ref));
    var insightMenuItemsProvider = useDashboardCustomizationsContext().insightMenuItemsProvider;
    var defaultMenuItems = useMemo(function () {
        var useLegacyMenu = !insightMenuItemsProvider;
        var bubbleMessageKey = isDataError(execution === null || execution === void 0 ? void 0 : execution.error)
            ? "options.menu.unsupported.error"
            : "options.menu.unsupported.loading";
        var defaultMenuItemsGetter = useLegacyMenu
            ? getDefaultLegacyInsightMenuItems
            : getDefaultInsightMenuItems;
        return defaultMenuItemsGetter(intl, {
            exportCSVDisabled: !exportCSVEnabled,
            exportXLSXDisabled: !exportXLSXEnabled,
            onExportCSV: function () {
                setIsMenuOpen(false);
                onExportCSV();
            },
            onExportXLSX: function () {
                setIsMenuOpen(false);
                onExportXLSX();
            },
            tooltipMessage: intl.formatMessage({ id: bubbleMessageKey }),
        });
    }, [
        insightMenuItemsProvider,
        execution,
        exportCSVEnabled,
        exportXLSXEnabled,
        onExportCSV,
        onExportXLSX,
        intl,
    ]);
    var menuItems = useMemo(function () {
        return insightMenuItemsProvider
            ? insightMenuItemsProvider(insight, widget, defaultMenuItems, closeMenu)
            : defaultMenuItems;
    }, [insight, widget, defaultMenuItems]);
    return { menuItems: menuItems, isMenuOpen: isMenuOpen, openMenu: openMenu, closeMenu: closeMenu };
};
//# sourceMappingURL=useInsightMenu.js.map
// (C) 2021 GoodData Corporation
import { __generator } from "tslib";
import { call, select } from "redux-saga/effects";
import { invalidArgumentsProvided } from "../../../events/general";
import { extractDisplayFormIdentifiers, extractInsightRefs, validateDrillDefinitionOrigin, validateInsightDrillDefinition, } from "./insightDrillDefinitionUtils";
import { resolveInsights } from "../../../utils/insightResolver";
import { resolveDisplayFormMetadata, } from "../../../../model/utils/displayFormResolver";
import { selectDrillTargetsByWidgetRef } from "../../../store/drillTargets/drillTargetsSelectors";
import { selectListedDashboardsMap } from "../../../store/listedDashboards/listedDashboardsSelectors";
export function validateDrillDefinition(drillDefinition, validationData, ctx, cmd) {
    var _a;
    var item = drillDefinition;
    // validate drill targets
    if (!((_a = validationData.drillTargets) === null || _a === void 0 ? void 0 : _a.availableDrillTargets)) {
        throw invalidArgumentsProvided(ctx, cmd, "Drill targets not set");
    }
    // validate drills origin
    try {
        item = validateDrillDefinitionOrigin(item, validationData.drillTargets.availableDrillTargets);
    }
    catch (ex) {
        var messageDetail = ex.message;
        throw invalidArgumentsProvided(ctx, cmd, "Invalid drill origin for InsightDrillDefinition. Error: " + messageDetail);
    }
    // validate drill
    var validationContext = {
        dashboardsMap: validationData.listedDashboardMap,
        insightsMap: validationData.resolvedInsights.resolved,
        displayFormsMap: validationData.resolvedDisplayForms.resolved,
    };
    try {
        item = validateInsightDrillDefinition(item, validationContext);
    }
    catch (ex) {
        var messageDetail = ex.message;
        throw invalidArgumentsProvided(ctx, cmd, "Invalid InsightDrillDefinition. Error: " + messageDetail);
    }
    return item;
}
export function getValidationData(widgetRef, drillsToModify, ctx) {
    var selectDrillTargetsByWidgetRefSelector, drillTargets, listedDashboardMap, insightRefs, resolvedInsights, displayFormIds, resolvedDisplayForms;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                selectDrillTargetsByWidgetRefSelector = selectDrillTargetsByWidgetRef(widgetRef);
                return [4 /*yield*/, select(selectDrillTargetsByWidgetRefSelector)];
            case 1:
                drillTargets = _a.sent();
                return [4 /*yield*/, select(selectListedDashboardsMap)];
            case 2:
                listedDashboardMap = _a.sent();
                insightRefs = extractInsightRefs(drillsToModify);
                return [4 /*yield*/, call(resolveInsights, ctx, insightRefs)];
            case 3:
                resolvedInsights = _a.sent();
                displayFormIds = extractDisplayFormIdentifiers(drillsToModify);
                return [4 /*yield*/, call(resolveDisplayFormMetadata, ctx, displayFormIds)];
            case 4:
                resolvedDisplayForms = _a.sent();
                return [2 /*return*/, {
                        drillTargets: drillTargets,
                        listedDashboardMap: listedDashboardMap,
                        resolvedInsights: resolvedInsights,
                        resolvedDisplayForms: resolvedDisplayForms,
                    }];
        }
    });
}
//# sourceMappingURL=insightDrillDefinitionValidation.js.map
import { __awaiter, __generator } from "tslib";
import { call, put, select } from "redux-saga/effects";
import { serializeObjRef } from "@gooddata/sdk-model";
import invariant from "ts-invariant";
import { invalidArgumentsProvided } from "../../events/general";
import { insightWidgetExportRequested, insightWidgetExportResolved, } from "../../events/insight";
import { selectExecutionResultByRef, selectIsExecutionResultReadyForExportByRef, selectIsExecutionResultExportableToCsvByRef, selectIsExecutionResultExportableToXlsxByRef, } from "../../store/executionResults/executionResultsSelectors";
import { createExportFunction } from "@gooddata/sdk-ui";
function performExport(executionResult, config) {
    return __awaiter(this, void 0, void 0, function () {
        var exporter, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    exporter = createExportFunction(executionResult);
                    return [4 /*yield*/, exporter(config)];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, result.uri];
            }
        });
    });
}
function validateIsExportable(ctx, cmd, ref) {
    var isExportable;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, select(selectIsExecutionResultReadyForExportByRef(ref))];
            case 1:
                isExportable = _a.sent();
                if (!isExportable) {
                    throw invalidArgumentsProvided(ctx, cmd, "The widget with ref: " + serializeObjRef(ref) + " cannot be exported at the moment.");
                }
                return [2 /*return*/];
        }
    });
}
function validateSettingsAndPermissions(ctx, cmd) {
    var _a, config, ref, canExport;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = cmd.payload, config = _a.config, ref = _a.ref;
                canExport = false;
                if (!(config.format === "csv")) return [3 /*break*/, 2];
                return [4 /*yield*/, select(selectIsExecutionResultExportableToCsvByRef(ref))];
            case 1:
                canExport = _b.sent();
                _b.label = 2;
            case 2:
                if (!(config.format === "xlsx")) return [3 /*break*/, 4];
                return [4 /*yield*/, select(selectIsExecutionResultExportableToXlsxByRef(ref))];
            case 3:
                canExport = _b.sent();
                _b.label = 4;
            case 4:
                if (!canExport) {
                    throw invalidArgumentsProvided(ctx, cmd, "The widget with ref: " + serializeObjRef(ref) + " cannot be exported because the feature is disabled or the user does not have the necessary permissions.");
                }
                return [2 /*return*/];
        }
    });
}
export function exportInsightWidgetHandler(ctx, cmd) {
    var _a, config, ref, executionEnvelope, resultUri;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = cmd.payload, config = _a.config, ref = _a.ref;
                return [4 /*yield*/, put(insightWidgetExportRequested(ctx, ref, config, cmd.correlationId))];
            case 1:
                _b.sent();
                return [4 /*yield*/, call(validateIsExportable, ctx, cmd, ref)];
            case 2:
                _b.sent();
                return [4 /*yield*/, call(validateSettingsAndPermissions, ctx, cmd)];
            case 3:
                _b.sent();
                return [4 /*yield*/, select(selectExecutionResultByRef(ref))];
            case 4:
                executionEnvelope = _b.sent();
                // executionResult must be defined at this point
                invariant(executionEnvelope === null || executionEnvelope === void 0 ? void 0 : executionEnvelope.executionResult);
                return [4 /*yield*/, call(performExport, executionEnvelope.executionResult, config)];
            case 5:
                resultUri = _b.sent();
                return [2 /*return*/, insightWidgetExportResolved(ctx, resultUri, cmd.correlationId)];
        }
    });
}
//# sourceMappingURL=exportInsightWidgetHandler.js.map